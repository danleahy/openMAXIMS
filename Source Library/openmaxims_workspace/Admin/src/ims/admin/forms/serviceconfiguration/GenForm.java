//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.serviceconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrServiceLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabServiceListContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Specialty value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Specialty value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbCategoryComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ServiceCategory value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ServiceCategory getValue()
				{
					return (ims.core.vo.lookups.ServiceCategory)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ServiceCategory value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdServiceRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdServiceRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColServiceNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColServiceNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColServiceNameOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColServiceName(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColServiceName()
				{
					return (String)super.row.get(0);
				}
				public void setColServiceName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColServiceNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColCategoryReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColCategoryReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColCategoryOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColCategory(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColCategory()
				{
					return (String)super.row.get(1);
				}
				public void setColCategory(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColCategoryTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColSpecialtyReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColSpecialtyReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColSpecialtyOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColSpecialty(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColSpecialty()
				{
					return (String)super.row.get(2);
				}
				public void setColSpecialty(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColSpecialtyTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColScheduledServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColScheduledServiceReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColScheduledServiceOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColScheduledService(String value)
				{
					super.row.setTooltip(3, value);
				}
				public boolean getColScheduledService()
				{
					return ((Boolean)super.row.get(3)).booleanValue();
				}
				public void setColScheduledService(boolean value)
				{
					super.row.set(3, new Boolean(value));
				}
				public void setCellColScheduledServiceTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColRTTReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColRTTReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColRTTOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColRTT(String value)
				{
					super.row.setTooltip(4, value);
				}
				public boolean getColRTT()
				{
					return ((Boolean)super.row.get(4)).booleanValue();
				}
				public void setColRTT(boolean value)
				{
					super.row.set(4, new Boolean(value));
				}
				public void setCellColRTTTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColReferralServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColReferralServiceReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColReferralServiceOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColReferralService(String value)
				{
					super.row.setTooltip(5, value);
				}
				public boolean getColReferralService()
				{
					return ((Boolean)super.row.get(5)).booleanValue();
				}
				public void setColReferralService(boolean value)
				{
					super.row.set(5, new Boolean(value));
				}
				public void setCellColReferralServiceTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdServiceRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdServiceRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdServiceRow get(int index)
				{
					return new grdServiceRow(super.collection.get(index));
				}
				public grdServiceRow newRow()
				{
					return new grdServiceRow(super.collection.newRow());
				}
				public grdServiceRow newRow(boolean autoSelect)
				{
					return new grdServiceRow(super.collection.newRow(autoSelect));
				}
				public grdServiceRow newRowAt(int index)
				{
					return new grdServiceRow(super.collection.newRowAt(index));
				}
				public grdServiceRow newRowAt(int index, boolean autoSelect)
				{
					return new grdServiceRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdServiceGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.ServiceLiteVoCollection getValues()
				{
					ims.core.vo.ServiceLiteVoCollection listOfValues = new ims.core.vo.ServiceLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdServiceRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdServiceRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdServiceRowCollection getRows()
				{
					return new grdServiceRowCollection(super.grid.getRows());
				}
				public grdServiceRow getRowByValue(ims.core.vo.ServiceLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdServiceRow(row);
				}
				public void setColServiceNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColServiceNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColCategoryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColCategoryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColSpecialtyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColSpecialtyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColScheduledServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColScheduledServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColRTTHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColRTTHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColReferralServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColReferralServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Category:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 400, 18, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service Name:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 104, 16, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(20), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 464, 16, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSpecialtyTemp);
				cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
				super.addComboBox(cmbSpecialty);
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 104, 40, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbCategoryTemp);
				cmbCategoryComboBox cmbCategory = (cmbCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCategoryComboBox.class, m_cmbCategoryTemp);
				super.addComboBox(cmbCategory);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 464, 42, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active Only", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 72, 808, 488, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdServiceTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdServiceTemp);
				grdServiceGrid grdService = (grdServiceGrid)GridFlyweightFactory.getInstance().createGridBridge(grdServiceGrid.class, m_grdServiceTemp);
				grdService.addStringColumn("Service Name", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdService.addStringColumn("Category", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdService.addStringColumn("Specialty", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdService.addBoolColumn("Scheduled Service", 0, 0, 110, true, false, 0, true);
				grdService.addBoolColumn("Subject to RTT", 0, 0, 110, true, false, 0, true);
				grdService.addBoolColumn("Referral Service", 0, 0, -1, true, false, 0, true);
				super.addGrid(grdService);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 752, 16, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 786, 16, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
			}

			public TextBox txtServiceName()
			{
				return (TextBox)super.getControl(3);
			}
			public cmbSpecialtyComboBox cmbSpecialty()
			{
				return (cmbSpecialtyComboBox)super.getComboBox(0);
			}
			public cmbCategoryComboBox cmbCategory()
			{
				return (cmbCategoryComboBox)super.getComboBox(1);
			}
			public CheckBox chkActive()
			{
				return (CheckBox)super.getControl(6);
			}
			public grdServiceGrid grdService()
			{
				return (grdServiceGrid)super.getGrid(0);
			}
			public ImageButton imbSearch()
			{
				return (ImageButton)super.getControl(8);
			}
			public ImageButton imbClear()
			{
				return (ImageButton)super.getControl(9);
			}
		}
		public static class tabServiceDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbTurnAroundMeasureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.lookups.MinReorderPeriod value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.lookups.MinReorderPeriod getValue()
				{
					return (ims.ocrr.vo.lookups.MinReorderPeriod)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.lookups.MinReorderPeriod value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSpecComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Specialty value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Specialty value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbCatComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ServiceCategory value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ServiceCategory getValue()
				{
					return (ims.core.vo.lookups.ServiceCategory)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ServiceCategory value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 448, 432, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Pathology Details", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 449, 32, 375, 528, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
				ims.framework.FormUiLogic m_ccServiceCodeMappingsForm = loader.loadComponent(103225, appForm, startControlID * 10 + 1000, anchoringHelper12.getSize(), instance1, startTabIndex.intValue() + 22, skipContextValidation);
				//ims.framework.Control m_ccServiceCodeMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(449), new Integer(32), new Integer(375), new Integer(528), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, new Integer(startTabIndex.intValue() + 22), m_ccServiceCodeMappingsForm, instance1 } );
				ims.framework.Control m_ccServiceCodeMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012),  new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, new Integer(startTabIndex.intValue() + 22), m_ccServiceCodeMappingsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccServiceCodeMappingsControl);
				Menu[] menus1 = m_ccServiceCodeMappingsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 449, 18, 146, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "External Code Mappings:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 28, 530, 135, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Expected Turn Around:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 28, 506, 131, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Turn Around Measure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 28, 482, 93, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Alternate Code:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 90, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 66, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Category:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 42, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service Name:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 184, 480, 248, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(15), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 104, 40, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 104, 16, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 184, 504, 248, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbTurnAroundMeasureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTurnAroundMeasureTemp);
				cmbTurnAroundMeasureComboBox cmbTurnAroundMeasure = (cmbTurnAroundMeasureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTurnAroundMeasureComboBox.class, m_cmbTurnAroundMeasureTemp);
				super.addComboBox(cmbTurnAroundMeasure);
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 104, 88, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbSpecTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSpecTemp);
				cmbSpecComboBox cmbSpec = (cmbSpecComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecComboBox.class, m_cmbSpecTemp);
				super.addComboBox(cmbSpec);
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 104, 64, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbCatTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbCatTemp);
				cmbCatComboBox cmbCat = (cmbCatComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCatComboBox.class, m_cmbCatTemp);
				super.addComboBox(cmbCat);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 104, 252, 224, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Pre-Assessment Completion Exempt", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 120, 219, 168, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Direct Self-Referrals Accepted", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 104, 186, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Can refer into the service", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 104, 318, 184, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Maternity Indicator", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 104, 285, 208, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Is subject to RTT clock", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 104, 153, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Can be scheduled", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 104, 120, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.FALSE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 184, 528, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
			}

			public Panel pnlPathology()
			{
				return (Panel)super.getControl(0);
			}
			public ims.admin.forms.nonuniquetaxonomymappings.IComponent ccServiceCodeMappings()
			{
				return (ims.admin.forms.nonuniquetaxonomymappings.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccServiceCodeMappingsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccServiceCodeMappingsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccServiceCodeMappingsVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccServiceCodeMappingsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccServiceCodeMappingsEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblExpectedTurnAround()
			{
				return (Label)super.getControl(3);
			}
			public Label lblTurnAroundMeasure()
			{
				return (Label)super.getControl(4);
			}
			public Label lblAlternativeCode()
			{
				return (Label)super.getControl(5);
			}
			public TextBox txtAlternativeCode()
			{
				return (TextBox)super.getControl(10);
			}
			public TextBox txtDescription()
			{
				return (TextBox)super.getControl(11);
			}
			public TextBox txtService()
			{
				return (TextBox)super.getControl(12);
			}
			public cmbTurnAroundMeasureComboBox cmbTurnAroundMeasure()
			{
				return (cmbTurnAroundMeasureComboBox)super.getComboBox(0);
			}
			public cmbSpecComboBox cmbSpec()
			{
				return (cmbSpecComboBox)super.getComboBox(1);
			}
			public cmbCatComboBox cmbCat()
			{
				return (cmbCatComboBox)super.getComboBox(2);
			}
			public CheckBox chkPreAssessmentCompletionExempt()
			{
				return (CheckBox)super.getControl(16);
			}
			public CheckBox chkDirectSelfReferralsAccepted()
			{
				return (CheckBox)super.getControl(17);
			}
			public CheckBox chkCanReferIntoTheService()
			{
				return (CheckBox)super.getControl(18);
			}
			public CheckBox chkMaternityIndicator()
			{
				return (CheckBox)super.getControl(19);
			}
			public CheckBox chkRTT()
			{
				return (CheckBox)super.getControl(20);
			}
			public CheckBox chkCanBeScheduled()
			{
				return (CheckBox)super.getControl(21);
			}
			public CheckBox chkActiveOnly()
			{
				return (CheckBox)super.getControl(22);
			}
			public IntBox intExpectedTurnAround()
			{
				return (IntBox)super.getControl(23);
			}
		}
		public static class tabActivityandFunctionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class qmbAppointmentTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ActivityLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ActivityLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ActivityLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ActivityLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ActivityLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ActivityLiteVo getValue()
				{
					return (ims.core.vo.ActivityLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ActivityLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdServiceFunctionRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdServiceFunctionRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColFunctionReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColFunctionReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColFunctionOpened()
				{
					super.row.showOpened(0);
				}
				public String getColFunction()
				{
					return (String)super.row.get(0);
				}
				public void setColFunction(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColFunctionTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColActiveReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColActiveOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColActive()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColActive(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColActiveTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.ServiceFunctionForServiceConfigurationVo getValue()
				{
					return (ims.core.vo.ServiceFunctionForServiceConfigurationVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.ServiceFunctionForServiceConfigurationVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdServiceFunctionRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdServiceFunctionRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdServiceFunctionRow get(int index)
				{
					return new grdServiceFunctionRow(super.collection.get(index));
				}
				public grdServiceFunctionRow newRow()
				{
					return new grdServiceFunctionRow(super.collection.newRow());
				}
				public grdServiceFunctionRow newRow(boolean autoSelect)
				{
					return new grdServiceFunctionRow(super.collection.newRow(autoSelect));
				}
				public grdServiceFunctionRow newRowAt(int index)
				{
					return new grdServiceFunctionRow(super.collection.newRowAt(index));
				}
				public grdServiceFunctionRow newRowAt(int index, boolean autoSelect)
				{
					return new grdServiceFunctionRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdServiceFunctionGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.ServiceFunctionForServiceConfigurationVoCollection getValues()
				{
					ims.core.vo.ServiceFunctionForServiceConfigurationVoCollection listOfValues = new ims.core.vo.ServiceFunctionForServiceConfigurationVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.ServiceFunctionForServiceConfigurationVo getValue()
				{
					return (ims.core.vo.ServiceFunctionForServiceConfigurationVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.ServiceFunctionForServiceConfigurationVo value)
				{
					super.grid.setValue(value);
				}
				public grdServiceFunctionRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdServiceFunctionRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdServiceFunctionRowCollection getRows()
				{
					return new grdServiceFunctionRowCollection(super.grid.getRows());
				}
				public grdServiceFunctionRow getRowByValue(ims.core.vo.ServiceFunctionForServiceConfigurationVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdServiceFunctionRow(row);
				}
				public void setColFunctionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColFunctionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdAppointmentTypesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAppointmentTypesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColApptTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColApptTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColApptTypeOpened()
				{
					super.row.showOpened(0);
				}
				public String getColApptType()
				{
					return (String)super.row.get(0);
				}
				public void setColApptType(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColApptTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColActiveReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColActiveOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColActive()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColActive(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColActiveTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColFlexibleReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColFlexibleReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColFlexibleOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getColFlexible()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setColFlexible(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellColFlexibleTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.core.vo.ServiceActivityForServiceConfigurationVo getValue()
				{
					return (ims.core.vo.ServiceActivityForServiceConfigurationVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.ServiceActivityForServiceConfigurationVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAppointmentTypesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAppointmentTypesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAppointmentTypesRow get(int index)
				{
					return new grdAppointmentTypesRow(super.collection.get(index));
				}
				public grdAppointmentTypesRow newRow()
				{
					return new grdAppointmentTypesRow(super.collection.newRow());
				}
				public grdAppointmentTypesRow newRow(boolean autoSelect)
				{
					return new grdAppointmentTypesRow(super.collection.newRow(autoSelect));
				}
				public grdAppointmentTypesRow newRowAt(int index)
				{
					return new grdAppointmentTypesRow(super.collection.newRowAt(index));
				}
				public grdAppointmentTypesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAppointmentTypesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAppointmentTypesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.ServiceActivityForServiceConfigurationVoCollection getValues()
				{
					ims.core.vo.ServiceActivityForServiceConfigurationVoCollection listOfValues = new ims.core.vo.ServiceActivityForServiceConfigurationVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.ServiceActivityForServiceConfigurationVo getValue()
				{
					return (ims.core.vo.ServiceActivityForServiceConfigurationVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.ServiceActivityForServiceConfigurationVo value)
				{
					super.grid.setValue(value);
				}
				public grdAppointmentTypesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAppointmentTypesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAppointmentTypesRowCollection getRows()
				{
					return new grdAppointmentTypesRowCollection(super.grid.getRows());
				}
				public grdAppointmentTypesRow getRowByValue(ims.core.vo.ServiceActivityForServiceConfigurationVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAppointmentTypesRow(row);
				}
				public void setColApptTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColApptTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColFlexibleHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColFlexibleHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 416, 56, 400, 496, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Functions", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 400, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Appointment Types", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 432, 384, 344, 160, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ims.framework.FormUiLogic m_ccFunctionCodeMappingsForm = loader.loadComponent(104124, appForm, startControlID * 10 + 2000, anchoringHelper37.getSize(), instance1, startTabIndex.intValue() + 31, skipContextValidation);
				//ims.framework.Control m_ccFunctionCodeMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(432), new Integer(384), new Integer(344), new Integer(160), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 31), m_ccFunctionCodeMappingsForm, instance1 } );
				ims.framework.Control m_ccFunctionCodeMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1038),  new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 31), m_ccFunctionCodeMappingsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccFunctionCodeMappingsControl);
				Menu[] menus1 = m_ccFunctionCodeMappingsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 432, 368, 146, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "External Code Mappings:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 432, 98, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Function:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 24, 98, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appt. Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service Name:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 784, 424, 24, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "-", Boolean.FALSE, "Remove External Code", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 784, 392, 24, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "+", Boolean.FALSE, "Add External Code", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 784, 95, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "+", Boolean.FALSE, "Add Function", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 376, 96, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "+", Boolean.FALSE, "Add Appointment Type", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 496, 96, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 96, 96, 272, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbAppointmentTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbAppointmentTypeTemp);
				qmbAppointmentTypeComboBox qmbAppointmentType = (qmbAppointmentTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbAppointmentTypeComboBox.class, m_qmbAppointmentTypeTemp);
				super.addComboBox(qmbAppointmentType);
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 96, 16, 312, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbServiceTemp);
				qmbServiceComboBox qmbService = (qmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceComboBox.class, m_qmbServiceTemp);
				super.addComboBox(qmbService);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 432, 128, 344, 171, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
				Grid m_grdServiceFunctionTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdServiceFunctionTemp);
				grdServiceFunctionGrid grdServiceFunction = (grdServiceFunctionGrid)GridFlyweightFactory.getInstance().createGridBridge(grdServiceFunctionGrid.class, m_grdServiceFunctionTemp);
				grdServiceFunction.addStringColumn("Function", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdServiceFunction.addBoolColumn("Active", 0, 0, -1, false, false, 0, true);
				super.addGrid(grdServiceFunction);
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 24, 128, 344, 363, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdAppointmentTypesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAppointmentTypesTemp);
				grdAppointmentTypesGrid grdAppointmentTypes = (grdAppointmentTypesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAppointmentTypesGrid.class, m_grdAppointmentTypesTemp);
				grdAppointmentTypes.addStringColumn("Appointment Type", 0, 0, 170, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAppointmentTypes.addBoolColumn("Active", 0, 0, 60, false, false, 0, true);
				grdAppointmentTypes.addBoolColumn("Flexible Session", 0, 0, -1, false, false, 0, true);
				super.addGrid(grdAppointmentTypes);
			}

			public ims.admin.forms.taxonomymappings.IComponent ccFunctionCodeMappings()
			{
				return (ims.admin.forms.taxonomymappings.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setccFunctionCodeMappingsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setccFunctionCodeMappingsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isccFunctionCodeMappingsVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setccFunctionCodeMappingsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isccFunctionCodeMappingsEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public Button btnRemoveServiceFunctionTaxonomy()
			{
				return (Button)super.getControl(7);
			}
			public Button btnAddServiceFunctionTaxonomy()
			{
				return (Button)super.getControl(8);
			}
			public Button btnAddFunction()
			{
				return (Button)super.getControl(9);
			}
			public Button btnAddAppointmentType()
			{
				return (Button)super.getControl(10);
			}
			public TextBox txtFunction()
			{
				return (TextBox)super.getControl(11);
			}
			public qmbAppointmentTypeComboBox qmbAppointmentType()
			{
				return (qmbAppointmentTypeComboBox)super.getComboBox(0);
			}
			public qmbServiceComboBox qmbService()
			{
				return (qmbServiceComboBox)super.getComboBox(1);
			}
			public grdServiceFunctionGrid grdServiceFunction()
			{
				return (grdServiceFunctionGrid)super.getGrid(0);
			}
			public grdAppointmentTypesGrid grdAppointmentTypes()
			{
				return (grdAppointmentTypesGrid)super.getGrid(1);
			}
		}
		public static class tabServiceandFunctionsbyHCPContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbHcpTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.HcpDisType getValue()
				{
					return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.HcpDisType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdHcpRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdHcpRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColNameOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColName(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColName()
				{
					return (String)super.row.get(0);
				}
				public void setColName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColHCPTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColHCPTypeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColHCPTypeOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColHCPType(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColHCPType()
				{
					return (String)super.row.get(1);
				}
				public void setColHCPType(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColHCPTypeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColActiveReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColActiveOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColActive(String value)
				{
					super.row.setTooltip(2, value);
				}
				public boolean getColActive()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setColActive(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellColActiveTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdHcpRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdHcpRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdHcpRow get(int index)
				{
					return new grdHcpRow(super.collection.get(index));
				}
				public grdHcpRow newRow()
				{
					return new grdHcpRow(super.collection.newRow());
				}
				public grdHcpRow newRow(boolean autoSelect)
				{
					return new grdHcpRow(super.collection.newRow(autoSelect));
				}
				public grdHcpRow newRowAt(int index)
				{
					return new grdHcpRow(super.collection.newRowAt(index));
				}
				public grdHcpRow newRowAt(int index, boolean autoSelect)
				{
					return new grdHcpRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdHcpGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.HcpLiteVoCollection getValues()
				{
					ims.core.vo.HcpLiteVoCollection listOfValues = new ims.core.vo.HcpLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdHcpRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdHcpRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdHcpRowCollection getRows()
				{
					return new grdHcpRowCollection(super.grid.getRows());
				}
				public grdHcpRow getRowByValue(ims.core.vo.HcpLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdHcpRow(row);
				}
				public void setColNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColHCPTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColHCPTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 424, 16, 392, 544, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Functions", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 408, 544, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"HCP Search", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 424, 32, 392, 504, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
				ims.framework.FormUiLogic m_ccHcpServiceFuctionForm = loader.loadComponent(103264, appForm, startControlID * 10 + 3000, anchoringHelper53.getSize(), instance1, startTabIndex.intValue() + 42, skipContextValidation);
				//ims.framework.Control m_ccHcpServiceFuctionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(424), new Integer(32), new Integer(392), new Integer(504), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, new Integer(startTabIndex.intValue() + 42), m_ccHcpServiceFuctionForm, instance1 } );
				ims.framework.Control m_ccHcpServiceFuctionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1055),  new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, new Integer(startTabIndex.intValue() + 42), m_ccHcpServiceFuctionForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccHcpServiceFuctionControl);
				Menu[] menus1 = m_ccHcpServiceFuctionForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 24, 120, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active Only:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 24, 98, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "HCP Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 24, 74, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forename:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 24, 50, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 120, 72, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 120, 48, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 120, 96, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbHcpTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbHcpTypeTemp);
				cmbHcpTypeComboBox cmbHcpType = (cmbHcpTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHcpTypeComboBox.class, m_cmbHcpTypeTemp);
				super.addComboBox(cmbHcpType);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 120, 122, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 24, 142, 384, 384, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdHcpTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Admin.contextMenuServiceConfigurationHCPMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdHcpTemp);
				grdHcpGrid grdHcp = (grdHcpGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHcpGrid.class, m_grdHcpTemp);
				grdHcp.addStringColumn("Name", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHcp.addStringColumn("HCP Type", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHcp.addBoolColumn("Active", 0, 0, -1, true, false, 0, true);
				super.addGrid(grdHcp);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 344, 48, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 378, 48, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
			}

			public ims.admin.forms.hcpservicefunctioncomponent.IComponent ccHcpServiceFuction()
			{
				return (ims.admin.forms.hcpservicefunctioncomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setccHcpServiceFuctionValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setccHcpServiceFuctionVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isccHcpServiceFuctionVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setccHcpServiceFuctionEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isccHcpServiceFuctionEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public TextBox txtHcpForename()
			{
				return (TextBox)super.getControl(7);
			}
			public TextBox txtHcpSurname()
			{
				return (TextBox)super.getControl(8);
			}
			public cmbHcpTypeComboBox cmbHcpType()
			{
				return (cmbHcpTypeComboBox)super.getComboBox(0);
			}
			public CheckBox chkActiveHcp()
			{
				return (CheckBox)super.getControl(10);
			}
			public grdHcpGrid grdHcp()
			{
				return (grdHcpGrid)super.getGrid(0);
			}
			public ImageButton imbHcpSearch()
			{
				return (ImageButton)super.getControl(12);
			}
			public ImageButton imbHcpClear()
			{
				return (ImageButton)super.getControl(13);
			}
		}
		public static class tabTriageActionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbDAForCBReferralComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral getValue()
				{
					return (ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDAForManualReferralComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral getValue()
				{
					return (ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbServiceTriageComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdOtherHCPValuesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdOtherHCPValuesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColOtherHCPTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColOtherHCPTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColOtherHCPTypeOpened()
				{
					super.row.showOpened(0);
				}
				public String getColOtherHCPType()
				{
					return (String)super.row.get(0);
				}
				public void setColOtherHCPType(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColOtherHCPTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.lookups.OtherHCP getValue()
				{
					return (ims.core.vo.lookups.OtherHCP)super.row.getValue();
				}
				public void setValue(ims.core.vo.lookups.OtherHCP value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdOtherHCPValuesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdOtherHCPValuesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdOtherHCPValuesRow get(int index)
				{
					return new grdOtherHCPValuesRow(super.collection.get(index));
				}
				public grdOtherHCPValuesRow newRow()
				{
					return new grdOtherHCPValuesRow(super.collection.newRow());
				}
				public grdOtherHCPValuesRow newRow(boolean autoSelect)
				{
					return new grdOtherHCPValuesRow(super.collection.newRow(autoSelect));
				}
				public grdOtherHCPValuesRow newRowAt(int index)
				{
					return new grdOtherHCPValuesRow(super.collection.newRowAt(index));
				}
				public grdOtherHCPValuesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdOtherHCPValuesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdOtherHCPValuesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.lookups.OtherHCP[] getValues()
				{
					ims.core.vo.lookups.OtherHCP[] listOfValues = new ims.core.vo.lookups.OtherHCP[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.lookups.OtherHCP getValue()
				{
					return (ims.core.vo.lookups.OtherHCP)super.grid.getValue();
				}
				public void setValue(ims.core.vo.lookups.OtherHCP value)
				{
					super.grid.setValue(value);
				}
				public grdOtherHCPValuesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdOtherHCPValuesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdOtherHCPValuesRowCollection getRows()
				{
					return new grdOtherHCPValuesRowCollection(super.grid.getRows());
				}
				public grdOtherHCPValuesRow getRowByValue(ims.core.vo.lookups.OtherHCP value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdOtherHCPValuesRow(row);
				}
				public void setColOtherHCPTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColOtherHCPTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 416, 56, 400, 496, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"OPA - To see", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 400, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Actions to be displayed", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 432, 304, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Other HCP", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 24, 400, 153, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "C&B OPA and Direct To List ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 24, 368, 199, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Change C&B OPA and Direct To List ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 24, 336, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Change C&B OPA", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 24, 464, 187, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default Action for a C&B Referral:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 24, 432, 213, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default Action for a Manual Referral:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 24, 272, 179, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Linked OPAs and Diagnostic(s)", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 24, 112, 28, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "OPA", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 24, 176, 173, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "OPA and Linked Diagnostic(s)", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 24, 208, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Direct To List", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 24, 240, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Direct To List and OPA", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 24, 304, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Linked Diagnostic(s)", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 24, 144, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Linked OPAs", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 232, 80, 169, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Display when the Referral is:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 240, 464, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDAForCBReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 60), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDAForCBReferralTemp);
				cmbDAForCBReferralComboBox cmbDAForCBReferral = (cmbDAForCBReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDAForCBReferralComboBox.class, m_cmbDAForCBReferralTemp);
				super.addComboBox(cmbDAForCBReferral);
				RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 240, 432, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDAForManualReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 59), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDAForManualReferralTemp);
				cmbDAForManualReferralComboBox cmbDAForManualReferral = (cmbDAForManualReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDAForManualReferralComboBox.class, m_cmbDAForManualReferralTemp);
				super.addComboBox(cmbDAForManualReferral);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 64, 16, 344, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbServiceTriageTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbServiceTriageTemp);
				qmbServiceTriageComboBox qmbServiceTriage = (qmbServiceTriageComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceTriageComboBox.class, m_qmbServiceTriageTemp);
				super.addComboBox(qmbServiceTriage);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 432, 240, 192, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 65), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Other HCP", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 432, 176, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 63), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Associate Specialist", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 432, 208, 192, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 64), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Any Doctor to See", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 432, 144, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 62), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"SPR", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 432, 112, 176, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 61), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Consultant", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 336, 400, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 58), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"C&#38;B", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 336, 368, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 57), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"C&#38;B", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 336, 336, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 56), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"C&#38;B", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 336, 272, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 54), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"C&#38;B", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 232, 112, 68, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Manual", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 232, 176, 68, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Manual", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 232, 208, 68, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), new Integer(startTabIndex.intValue() + 52), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Manual", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 232, 240, 68, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 53), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Manual", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 336, 304, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), new Integer(startTabIndex.intValue() + 55), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"C&#38;B", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 336, 144, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"C&#38;B", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 232, 144, 68, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 49), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Manual", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 432, 320, 376, 203, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
				Grid m_grdOtherHCPValuesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), new Integer(startTabIndex.intValue() + 66), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdOtherHCPValuesTemp);
				grdOtherHCPValuesGrid grdOtherHCPValues = (grdOtherHCPValuesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOtherHCPValuesGrid.class, m_grdOtherHCPValuesTemp);
				grdOtherHCPValues.addStringColumn("Other HCP Type", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdOtherHCPValues.addBoolColumn("Select", 0, 0, -1, false, false, 0, true);
				super.addGrid(grdOtherHCPValues);
			}

			public Panel pnlOPAtoSee()
			{
				return (Panel)super.getControl(0);
			}
			public Panel pnlActionToBeDisplayed()
			{
				return (Panel)super.getControl(1);
			}
			public Label lblOtherHCP()
			{
				return (Label)super.getControl(2);
			}
			public Label lblCABOPAandDirectToList()
			{
				return (Label)super.getControl(3);
			}
			public Label lblChangeCABOPAandDirectToList()
			{
				return (Label)super.getControl(4);
			}
			public Label lblChangeCABOPA()
			{
				return (Label)super.getControl(5);
			}
			public Label lblCBReferral()
			{
				return (Label)super.getControl(6);
			}
			public Label lblManualReferralAction()
			{
				return (Label)super.getControl(7);
			}
			public Label lblLinkedOPAAndDiagnostic()
			{
				return (Label)super.getControl(8);
			}
			public Label lblOPA()
			{
				return (Label)super.getControl(9);
			}
			public Label lblOPAAndDiagnosticRequired()
			{
				return (Label)super.getControl(10);
			}
			public Label lblDirectToList()
			{
				return (Label)super.getControl(11);
			}
			public Label lblDirectToListAndOPA()
			{
				return (Label)super.getControl(12);
			}
			public Label lblLinkedDiagnostic()
			{
				return (Label)super.getControl(13);
			}
			public Label lblDiagnosticRequired()
			{
				return (Label)super.getControl(14);
			}
			public Label lblLabel()
			{
				return (Label)super.getControl(15);
			}
			public cmbDAForCBReferralComboBox cmbDAForCBReferral()
			{
				return (cmbDAForCBReferralComboBox)super.getComboBox(0);
			}
			public cmbDAForManualReferralComboBox cmbDAForManualReferral()
			{
				return (cmbDAForManualReferralComboBox)super.getComboBox(1);
			}
			public qmbServiceTriageComboBox qmbServiceTriage()
			{
				return (qmbServiceTriageComboBox)super.getComboBox(2);
			}
			public CheckBox chkOtherHCP()
			{
				return (CheckBox)super.getControl(20);
			}
			public CheckBox chkAssociateSpecialist()
			{
				return (CheckBox)super.getControl(21);
			}
			public CheckBox chkAnyDoctorToSee()
			{
				return (CheckBox)super.getControl(22);
			}
			public CheckBox chkSPR()
			{
				return (CheckBox)super.getControl(23);
			}
			public CheckBox chkConsultant()
			{
				return (CheckBox)super.getControl(24);
			}
			public CheckBox chkCABOPAandDirectToList()
			{
				return (CheckBox)super.getControl(25);
			}
			public CheckBox chkChangeCABOPAandDirectToList()
			{
				return (CheckBox)super.getControl(26);
			}
			public CheckBox chkChangeCABOPACB()
			{
				return (CheckBox)super.getControl(27);
			}
			public CheckBox chkCBLinkedOPAAndDiagnostic()
			{
				return (CheckBox)super.getControl(28);
			}
			public CheckBox chkManualOPA()
			{
				return (CheckBox)super.getControl(29);
			}
			public CheckBox chkManualOPAAndLinkedDiagnostic()
			{
				return (CheckBox)super.getControl(30);
			}
			public CheckBox chkManualDirectToList()
			{
				return (CheckBox)super.getControl(31);
			}
			public CheckBox chkManualDirectToListAndOPA()
			{
				return (CheckBox)super.getControl(32);
			}
			public CheckBox chkCBLinkedDiagnostic()
			{
				return (CheckBox)super.getControl(33);
			}
			public CheckBox chkCBLinkedOPA()
			{
				return (CheckBox)super.getControl(34);
			}
			public CheckBox chkManualLinkedOPA()
			{
				return (CheckBox)super.getControl(35);
			}
			public grdOtherHCPValuesGrid grdOtherHCPValues()
			{
				return (grdOtherHCPValuesGrid)super.getGrid(0);
			}
		}
		public static class tabDiagnosticsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class qmbServiceDiagnosticComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdDiagnosticsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDiagnosticsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDiagnosticReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDiagnosticReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDiagnosticOpened()
				{
					super.row.showOpened(0);
				}
				public String getColDiagnostic()
				{
					return (String)super.row.get(0);
				}
				public void setColDiagnostic(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDiagnosticTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.admin.vo.lookups.Diagnostic getValue()
				{
					return (ims.admin.vo.lookups.Diagnostic)super.row.getValue();
				}
				public void setValue(ims.admin.vo.lookups.Diagnostic value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDiagnosticsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDiagnosticsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDiagnosticsRow get(int index)
				{
					return new grdDiagnosticsRow(super.collection.get(index));
				}
				public grdDiagnosticsRow newRow()
				{
					return new grdDiagnosticsRow(super.collection.newRow());
				}
				public grdDiagnosticsRow newRow(boolean autoSelect)
				{
					return new grdDiagnosticsRow(super.collection.newRow(autoSelect));
				}
				public grdDiagnosticsRow newRowAt(int index)
				{
					return new grdDiagnosticsRow(super.collection.newRowAt(index));
				}
				public grdDiagnosticsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDiagnosticsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDiagnosticsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.admin.vo.lookups.Diagnostic[] getValues()
				{
					ims.admin.vo.lookups.Diagnostic[] listOfValues = new ims.admin.vo.lookups.Diagnostic[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.admin.vo.lookups.Diagnostic getValue()
				{
					return (ims.admin.vo.lookups.Diagnostic)super.grid.getValue();
				}
				public void setValue(ims.admin.vo.lookups.Diagnostic value)
				{
					super.grid.setValue(value);
				}
				public grdDiagnosticsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDiagnosticsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDiagnosticsRowCollection getRows()
				{
					return new grdDiagnosticsRowCollection(super.grid.getRows());
				}
				public grdDiagnosticsRow getRowByValue(ims.admin.vo.lookups.Diagnostic value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDiagnosticsRow(row);
				}
				public void setColDiagnosticHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDiagnosticHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 808, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Diagnostics", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 163, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diagnostics for this Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 64, 16, 344, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbServiceDiagnosticTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), new Integer(startTabIndex.intValue() + 67), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbServiceDiagnosticTemp);
				qmbServiceDiagnosticComboBox qmbServiceDiagnostic = (qmbServiceDiagnosticComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceDiagnosticComboBox.class, m_qmbServiceDiagnosticTemp);
				super.addComboBox(qmbServiceDiagnostic);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 792, 399, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdDiagnosticsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), new Integer(startTabIndex.intValue() + 68), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDiagnosticsTemp);
				grdDiagnosticsGrid grdDiagnostics = (grdDiagnosticsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosticsGrid.class, m_grdDiagnosticsTemp);
				grdDiagnostics.addStringColumn("Diagnostic", 0, 0, 700, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiagnostics.addBoolColumn("Select", 0, 0, -1, false, false, 0, true);
				super.addGrid(grdDiagnostics);
			}

			public Panel pnlDiagnostics()
			{
				return (Panel)super.getControl(0);
			}
			public Label lblDiagnostics()
			{
				return (Label)super.getControl(1);
			}
			public qmbServiceDiagnosticComboBox qmbServiceDiagnostic()
			{
				return (qmbServiceDiagnosticComboBox)super.getComboBox(0);
			}
			public grdDiagnosticsGrid grdDiagnostics()
			{
				return (grdDiagnosticsGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabServiceList = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Service List", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabServiceListContainer m_tabServiceListContainer = (tabServiceListContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabServiceListContainer.class, m_tabServiceList, factory);
			super.addContainer(m_tabServiceList, m_tabServiceListContainer);
			ims.framework.utils.SizeInfo m_tabServiceListDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabServiceListRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper107.getWidth(), anchoringHelper107.getHeight());
			m_tabServiceListContainer.setContext(form, appForm, m_tabServiceList, loader, form_images_local, contextMenus, startControlID, m_tabServiceListDesignSize, m_tabServiceListRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabServiceDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Service Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabServiceDetailsContainer m_tabServiceDetailsContainer = (tabServiceDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabServiceDetailsContainer.class, m_tabServiceDetails, factory);
			super.addContainer(m_tabServiceDetails, m_tabServiceDetailsContainer);
			ims.framework.utils.SizeInfo m_tabServiceDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabServiceDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper108.getWidth(), anchoringHelper108.getHeight());
			m_tabServiceDetailsContainer.setContext(form, appForm, m_tabServiceDetails, loader, form_images_local, contextMenus, startControlID, m_tabServiceDetailsDesignSize, m_tabServiceDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabActivityandFunctions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Service - Activity and Functions", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabActivityandFunctionsContainer m_tabActivityandFunctionsContainer = (tabActivityandFunctionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabActivityandFunctionsContainer.class, m_tabActivityandFunctions, factory);
			super.addContainer(m_tabActivityandFunctions, m_tabActivityandFunctionsContainer);
			ims.framework.utils.SizeInfo m_tabActivityandFunctionsDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabActivityandFunctionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper109.getWidth(), anchoringHelper109.getHeight());
			m_tabActivityandFunctionsContainer.setContext(form, appForm, m_tabActivityandFunctions, loader, form_images_local, contextMenus, startControlID, m_tabActivityandFunctionsDesignSize, m_tabActivityandFunctionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabServiceandFunctionsbyHCP = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Service and Functions by HCP", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabServiceandFunctionsbyHCPContainer m_tabServiceandFunctionsbyHCPContainer = (tabServiceandFunctionsbyHCPContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabServiceandFunctionsbyHCPContainer.class, m_tabServiceandFunctionsbyHCP, factory);
			super.addContainer(m_tabServiceandFunctionsbyHCP, m_tabServiceandFunctionsbyHCPContainer);
			ims.framework.utils.SizeInfo m_tabServiceandFunctionsbyHCPDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabServiceandFunctionsbyHCPRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper110.getWidth(), anchoringHelper110.getHeight());
			m_tabServiceandFunctionsbyHCPContainer.setContext(form, appForm, m_tabServiceandFunctionsbyHCP, loader, form_images_local, contextMenus, startControlID, m_tabServiceandFunctionsbyHCPDesignSize, m_tabServiceandFunctionsbyHCPRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTriageActions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Service - Triage Actions", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTriageActionsContainer m_tabTriageActionsContainer = (tabTriageActionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTriageActionsContainer.class, m_tabTriageActions, factory);
			super.addContainer(m_tabTriageActions, m_tabTriageActionsContainer);
			ims.framework.utils.SizeInfo m_tabTriageActionsDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabTriageActionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper111.getWidth(), anchoringHelper111.getHeight());
			m_tabTriageActionsContainer.setContext(form, appForm, m_tabTriageActions, loader, form_images_local, contextMenus, startControlID, m_tabTriageActionsDesignSize, m_tabTriageActionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDiagnostics = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Diagnostics", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDiagnosticsContainer m_tabDiagnosticsContainer = (tabDiagnosticsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDiagnosticsContainer.class, m_tabDiagnostics, factory);
			super.addContainer(m_tabDiagnostics, m_tabDiagnosticsContainer);
			ims.framework.utils.SizeInfo m_tabDiagnosticsDesignSize = new ims.framework.utils.SizeInfo(832, 592);
			ims.framework.utils.SizeInfo m_tabDiagnosticsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper112.getWidth(), anchoringHelper112.getHeight());
			m_tabDiagnosticsContainer.setContext(form, appForm, m_tabDiagnostics, loader, form_images_local, contextMenus, startControlID, m_tabDiagnosticsDesignSize, m_tabDiagnosticsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabServiceList().setVisible(false);
			tabServiceDetails().setVisible(false);
			tabActivityandFunctions().setVisible(false);
			tabServiceandFunctionsbyHCP().setVisible(false);
			tabTriageActions().setVisible(false);
			tabDiagnostics().setVisible(false);
		}
		public void settabServiceListEnabled(boolean value)
		{
			tabServiceList().setEnabled(value);
		}
		public void settabServiceDetailsEnabled(boolean value)
		{
			tabServiceDetails().setEnabled(value);
		}
		public void settabActivityandFunctionsEnabled(boolean value)
		{
			tabActivityandFunctions().setEnabled(value);
		}
		public void settabServiceandFunctionsbyHCPEnabled(boolean value)
		{
			tabServiceandFunctionsbyHCP().setEnabled(value);
		}
		public void settabTriageActionsEnabled(boolean value)
		{
			tabTriageActions().setEnabled(value);
		}
		public void settabDiagnosticsEnabled(boolean value)
		{
			tabDiagnostics().setEnabled(value);
		}
		public void showtabServiceList()
		{
			tabServiceDetails().setVisible(false);
			tabActivityandFunctions().setVisible(false);
			tabServiceandFunctionsbyHCP().setVisible(false);
			tabTriageActions().setVisible(false);
			tabDiagnostics().setVisible(false);
			tabServiceList().setVisible(true);
		}
		public void showtabServiceDetails()
		{
			tabServiceList().setVisible(false);
			tabActivityandFunctions().setVisible(false);
			tabServiceandFunctionsbyHCP().setVisible(false);
			tabTriageActions().setVisible(false);
			tabDiagnostics().setVisible(false);
			tabServiceDetails().setVisible(true);
		}
		public void showtabActivityandFunctions()
		{
			tabServiceList().setVisible(false);
			tabServiceDetails().setVisible(false);
			tabServiceandFunctionsbyHCP().setVisible(false);
			tabTriageActions().setVisible(false);
			tabDiagnostics().setVisible(false);
			tabActivityandFunctions().setVisible(true);
		}
		public void showtabServiceandFunctionsbyHCP()
		{
			tabServiceList().setVisible(false);
			tabServiceDetails().setVisible(false);
			tabActivityandFunctions().setVisible(false);
			tabTriageActions().setVisible(false);
			tabDiagnostics().setVisible(false);
			tabServiceandFunctionsbyHCP().setVisible(true);
		}
		public void showtabTriageActions()
		{
			tabServiceList().setVisible(false);
			tabServiceDetails().setVisible(false);
			tabActivityandFunctions().setVisible(false);
			tabServiceandFunctionsbyHCP().setVisible(false);
			tabDiagnostics().setVisible(false);
			tabTriageActions().setVisible(true);
		}
		public void showtabDiagnostics()
		{
			tabServiceList().setVisible(false);
			tabServiceDetails().setVisible(false);
			tabActivityandFunctions().setVisible(false);
			tabServiceandFunctionsbyHCP().setVisible(false);
			tabTriageActions().setVisible(false);
			tabDiagnostics().setVisible(true);
		}

		public tabServiceListContainer tabServiceList()
		{
			return (tabServiceListContainer)super.layers.get(0);
		}
		public tabServiceDetailsContainer tabServiceDetails()
		{
			return (tabServiceDetailsContainer)super.layers.get(1);
		}
		public tabActivityandFunctionsContainer tabActivityandFunctions()
		{
			return (tabActivityandFunctionsContainer)super.layers.get(2);
		}
		public tabServiceandFunctionsbyHCPContainer tabServiceandFunctionsbyHCP()
		{
			return (tabServiceandFunctionsbyHCPContainer)super.layers.get(3);
		}
		public tabTriageActionsContainer tabTriageActions()
		{
			return (tabTriageActionsContainer)super.layers.get(4);
		}
		public tabDiagnosticsContainer tabDiagnostics()
		{
			return (tabDiagnosticsContainer)super.layers.get(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Admin.contextMenuServiceConfigurationHCPMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Admin.contextMenuServiceConfigurationHCPMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 1, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(6130001)))
			contextMenus.Admin.contextMenuServiceConfigurationHCPMenu.add(contextMenus.Admin.contextMenuServiceConfigurationHCPMenuEDITItem);
		form.registerMenu(contextMenus.Admin.contextMenuServiceConfigurationHCPMenu);


		// Layer Clasess
		lyrServiceLayer m_lyrServiceLayer = (lyrServiceLayer)LayerFlyweightFactory.getInstance().createLayer(lyrServiceLayer.class, this, factory);
		super.addLayer(m_lyrServiceLayer);
		m_lyrServiceLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 8, 608, 80, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), new Integer(startTabIndex.intValue() + 71), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 760, 608, 80, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), new Integer(startTabIndex.intValue() + 73), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 676, 608, 80, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), new Integer(startTabIndex.intValue() + 72), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 92, 608, 80, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1118), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), new Integer(startTabIndex.intValue() + 70), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Service", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 8, 608, 80, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1119), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), new Integer(startTabIndex.intValue() + 69), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New Service", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrServiceLayer lyrService()
	{
		return (lyrServiceLayer)super.getLayer(0);
	}
	public Button btnEditHcp()
	{
		return (Button)super.getControl(6);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(7);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(8);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(9);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(10);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final CoreImages Core;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedService = new ims.framework.ContextVariable("SelectedService", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier + "");
			cxl_SearchWasDone = new ims.framework.ContextVariable("SearchWasDone", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SearchWasDone_" + componentIdentifier + "");
			cxl_SelectedServiceFunction = new ims.framework.ContextVariable("SelectedServiceFunction", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceFunction_" + componentIdentifier + "");
			cxl_ServiceFunctionsForDelete = new ims.framework.ContextVariable("ServiceFunctionsForDelete", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceFunctionsForDelete_" + componentIdentifier + "");
			cxl_ServiceActivitiesForDelete = new ims.framework.ContextVariable("ServiceActivitiesForDelete", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceActivitiesForDelete_" + componentIdentifier + "");
			cxl_SelectedHcp = new ims.framework.ContextVariable("SelectedHcp", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedHcp_" + componentIdentifier + "");
			cxl_SelectedHCP = new ims.framework.ContextVariable("SelectedHCP", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedHCP_" + componentIdentifier + "");
			cxl_WasCanReferChanged = new ims.framework.ContextVariable("WasCanReferChanged", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__WasCanReferChanged_" + componentIdentifier + "");
			cxl_ServiceTriageAction = new ims.framework.ContextVariable("ServiceTriageAction", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier + "");
			cxl_ServiceDiagnostics = new ims.framework.ContextVariable("ServiceDiagnostics", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceDiagnostics_" + componentIdentifier + "");
			cxl_SelectedServiceOnActAndFunctTab = new ims.framework.ContextVariable("SelectedServiceOnActAndFunctTab", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier + "");
			cxl_SelectedServiceOnTriageActionTab = new ims.framework.ContextVariable("SelectedServiceOnTriageActionTab", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier + "");
			cxl_SelectedServiceOnDiagnosticsTab = new ims.framework.ContextVariable("SelectedServiceOnDiagnosticsTab", prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier + "");
		}
		
		public boolean getSelectedServiceIsNotNull()
		{
			return !cxl_SelectedService.getValueIsNull(context);
		}
		public ims.core.vo.ServiceVo getSelectedService()
		{
			return (ims.core.vo.ServiceVo)cxl_SelectedService.getValue(context);
		}
		public void setSelectedService(ims.core.vo.ServiceVo value)
		{
			cxl_SelectedService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedService = null;
		public boolean getSearchWasDoneIsNotNull()
		{
			return !cxl_SearchWasDone.getValueIsNull(context);
		}
		public Boolean getSearchWasDone()
		{
			return (Boolean)cxl_SearchWasDone.getValue(context);
		}
		public void setSearchWasDone(Boolean value)
		{
			cxl_SearchWasDone.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SearchWasDone = null;
		public boolean getSelectedServiceFunctionIsNotNull()
		{
			return !cxl_SelectedServiceFunction.getValueIsNull(context);
		}
		public ims.core.vo.ServiceFunctionForServiceConfigurationVo getSelectedServiceFunction()
		{
			return (ims.core.vo.ServiceFunctionForServiceConfigurationVo)cxl_SelectedServiceFunction.getValue(context);
		}
		public void setSelectedServiceFunction(ims.core.vo.ServiceFunctionForServiceConfigurationVo value)
		{
			cxl_SelectedServiceFunction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedServiceFunction = null;
		public boolean getServiceFunctionsForDeleteIsNotNull()
		{
			return !cxl_ServiceFunctionsForDelete.getValueIsNull(context);
		}
		public ims.core.vo.ServiceFunctionForServiceConfigurationVoCollection getServiceFunctionsForDelete()
		{
			return (ims.core.vo.ServiceFunctionForServiceConfigurationVoCollection)cxl_ServiceFunctionsForDelete.getValue(context);
		}
		public void setServiceFunctionsForDelete(ims.core.vo.ServiceFunctionForServiceConfigurationVoCollection value)
		{
			cxl_ServiceFunctionsForDelete.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServiceFunctionsForDelete = null;
		public boolean getServiceActivitiesForDeleteIsNotNull()
		{
			return !cxl_ServiceActivitiesForDelete.getValueIsNull(context);
		}
		public ims.core.vo.ServiceActivityForServiceConfigurationVoCollection getServiceActivitiesForDelete()
		{
			return (ims.core.vo.ServiceActivityForServiceConfigurationVoCollection)cxl_ServiceActivitiesForDelete.getValue(context);
		}
		public void setServiceActivitiesForDelete(ims.core.vo.ServiceActivityForServiceConfigurationVoCollection value)
		{
			cxl_ServiceActivitiesForDelete.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServiceActivitiesForDelete = null;
		public boolean getSelectedHcpIsNotNull()
		{
			return !cxl_SelectedHcp.getValueIsNull(context);
		}
		public ims.core.vo.HCPWithServiceAndFunctionVo getSelectedHcp()
		{
			return (ims.core.vo.HCPWithServiceAndFunctionVo)cxl_SelectedHcp.getValue(context);
		}
		public void setSelectedHcp(ims.core.vo.HCPWithServiceAndFunctionVo value)
		{
			cxl_SelectedHcp.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedHcp = null;
		public boolean getSelectedHCPIsNotNull()
		{
			return !cxl_SelectedHCP.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getSelectedHCP()
		{
			return (ims.core.vo.HcpLiteVo)cxl_SelectedHCP.getValue(context);
		}
		public void setSelectedHCP(ims.core.vo.HcpLiteVo value)
		{
			cxl_SelectedHCP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedHCP = null;
		public boolean getWasCanReferChangedIsNotNull()
		{
			return !cxl_WasCanReferChanged.getValueIsNull(context);
		}
		public Boolean getWasCanReferChanged()
		{
			return (Boolean)cxl_WasCanReferChanged.getValue(context);
		}
		public void setWasCanReferChanged(Boolean value)
		{
			cxl_WasCanReferChanged.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WasCanReferChanged = null;
		public boolean getServiceTriageActionIsNotNull()
		{
			return !cxl_ServiceTriageAction.getValueIsNull(context);
		}
		public ims.core.vo.ServiceTriageActionVo getServiceTriageAction()
		{
			return (ims.core.vo.ServiceTriageActionVo)cxl_ServiceTriageAction.getValue(context);
		}
		public void setServiceTriageAction(ims.core.vo.ServiceTriageActionVo value)
		{
			cxl_ServiceTriageAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServiceTriageAction = null;
		public boolean getServiceDiagnosticsIsNotNull()
		{
			return !cxl_ServiceDiagnostics.getValueIsNull(context);
		}
		public ims.core.vo.ServiceDiagnosticsVo getServiceDiagnostics()
		{
			return (ims.core.vo.ServiceDiagnosticsVo)cxl_ServiceDiagnostics.getValue(context);
		}
		public void setServiceDiagnostics(ims.core.vo.ServiceDiagnosticsVo value)
		{
			cxl_ServiceDiagnostics.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServiceDiagnostics = null;
		public boolean getSelectedServiceOnActAndFunctTabIsNotNull()
		{
			return !cxl_SelectedServiceOnActAndFunctTab.getValueIsNull(context);
		}
		public ims.core.vo.ServiceLiteVo getSelectedServiceOnActAndFunctTab()
		{
			return (ims.core.vo.ServiceLiteVo)cxl_SelectedServiceOnActAndFunctTab.getValue(context);
		}
		public void setSelectedServiceOnActAndFunctTab(ims.core.vo.ServiceLiteVo value)
		{
			cxl_SelectedServiceOnActAndFunctTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedServiceOnActAndFunctTab = null;
		public boolean getSelectedServiceOnTriageActionTabIsNotNull()
		{
			return !cxl_SelectedServiceOnTriageActionTab.getValueIsNull(context);
		}
		public ims.core.vo.ServiceLiteVo getSelectedServiceOnTriageActionTab()
		{
			return (ims.core.vo.ServiceLiteVo)cxl_SelectedServiceOnTriageActionTab.getValue(context);
		}
		public void setSelectedServiceOnTriageActionTab(ims.core.vo.ServiceLiteVo value)
		{
			cxl_SelectedServiceOnTriageActionTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedServiceOnTriageActionTab = null;
		public boolean getSelectedServiceOnDiagnosticsTabIsNotNull()
		{
			return !cxl_SelectedServiceOnDiagnosticsTab.getValueIsNull(context);
		}
		public ims.core.vo.ServiceLiteVo getSelectedServiceOnDiagnosticsTab()
		{
			return (ims.core.vo.ServiceLiteVo)cxl_SelectedServiceOnDiagnosticsTab.getValue(context);
		}
		public void setSelectedServiceOnDiagnosticsTab(ims.core.vo.ServiceLiteVo value)
		{
			cxl_SelectedServiceOnDiagnosticsTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedServiceOnDiagnosticsTab = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public AdminNamespace Admin = new AdminNamespace();
		public final class AdminNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ServiceConfigurationHCPMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EDIT = 1;
			}
			public void disableAllServiceConfigurationHCPMenuMenuItems()
			{
				this.contextMenuServiceConfigurationHCPMenuEDITItem.setEnabled(false);
			}
			public void hideAllServiceConfigurationHCPMenuMenuItems()
			{
				this.contextMenuServiceConfigurationHCPMenuEDITItem.setVisible(false);
			}
			private Menu contextMenuServiceConfigurationHCPMenu;
			public ReadOnlyMenuItem getServiceConfigurationHCPMenuEDITItem()
			{
				return this.contextMenuServiceConfigurationHCPMenuEDITItem;
			}
			private MenuItem contextMenuServiceConfigurationHCPMenuEDITItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[228];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-SERVICENAME", "ServiceName");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-SPECIALTY", "Specialty");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-ISACTIVE", "IsActive");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-ISSUBJECTTORTTCLOCK", "IsSubjectToRTTClock");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-DIRECTSELFREFERRALSACCEPTED", "DirectSelfReferralsAccepted");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-ISPREASSESSMENTCOMPLETIONEXEMPT", "IsPreAssessmentCompletionExempt");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-SERVICEDESCRIPTION", "ServiceDescription");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-ALTERNATESERVICECODE", "AlternateServiceCode");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedService_" + componentIdentifier, "BO-1003100032-UPPERNAME", "UpperName");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceFunction_" + componentIdentifier, "BO-1003100034-ID", "ID_ServiceFunction");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceFunction_" + componentIdentifier, "BO-1003100034-SERVICE", "Service");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceFunction_" + componentIdentifier, "BO-1003100034-FUNCTION", "Function");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceFunction_" + componentIdentifier, "BO-1003100034-ISACTIVE", "IsActive");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedHcp_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedHcp_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedHCP_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedHCP_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedHCP_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedHCP_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedHCP_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedHCP_" + componentIdentifier, "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-ID", "ID_ServiceTriageAction");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-SERVICE", "Service");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-OPA", "OPA");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-DIRECTTOLIST", "DirectToList");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-DIRECTTOLISTANDOPA", "DirectToListAndOPA");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-SPR", "SPR");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-LINKEDDIAGNOSTIC", "LinkedDiagnostic");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-CONSULTANT", "Consultant");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-ASSOCIATESPECIALIST", "AssociateSpecialist");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-ANYDOCTORTOSEE", "AnyDoctorToSee");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-OTHERHCP", "OtherHCP");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-LINKEDOPASANDDIAGNOSTIC", "LinkedOPAsAndDiagnostic");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-OPAANDLINKEDDIAGOSTIC", "OPAAndLinkedDiagostic");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-LINKEDOPAS", "LinkedOPAs");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-DEFAULTACTIONFORMANUALREFERRAL", "DefaultActionForManualReferral");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-DEFAULTACTIONFORCABREFERRAL", "DefaultActionForCABReferral");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-CHANGECABOPA", "ChangeCABOPA");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-CHANGECABOPAANDDIRECTTOLIST", "ChangeCABOPAandDirectToList");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceTriageAction_" + componentIdentifier, "BO-1005100010-CABOPAANDDIRECTTOLIST", "CABOPAandDirectToList");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceDiagnostics_" + componentIdentifier, "BO-1005100011-ID", "ID_ServiceDiagnostics");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__ServiceDiagnostics_" + componentIdentifier, "BO-1005100011-SERVICE", "Service");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-SERVICENAME", "ServiceName");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-SPECIALTY", "Specialty");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-ISACTIVE", "IsActive");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-ISSUBJECTTORTTCLOCK", "IsSubjectToRTTClock");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-DIRECTSELFREFERRALSACCEPTED", "DirectSelfReferralsAccepted");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnActAndFunctTab_" + componentIdentifier, "BO-1003100032-ISPREASSESSMENTCOMPLETIONEXEMPT", "IsPreAssessmentCompletionExempt");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-SERVICENAME", "ServiceName");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-SPECIALTY", "Specialty");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-ISACTIVE", "IsActive");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-ISSUBJECTTORTTCLOCK", "IsSubjectToRTTClock");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-DIRECTSELFREFERRALSACCEPTED", "DirectSelfReferralsAccepted");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnTriageActionTab_" + componentIdentifier, "BO-1003100032-ISPREASSESSMENTCOMPLETIONEXEMPT", "IsPreAssessmentCompletionExempt");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-SERVICENAME", "ServiceName");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-SPECIALTY", "Specialty");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-ISACTIVE", "IsActive");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-ISSUBJECTTORTTCLOCK", "IsSubjectToRTTClock");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-DIRECTSELFREFERRALSACCEPTED", "DirectSelfReferralsAccepted");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ServiceConfiguration.__internal_x_context__SelectedServiceOnDiagnosticsTab_" + componentIdentifier, "BO-1003100032-ISPREASSESSMENTCOMPLETIONEXEMPT", "IsPreAssessmentCompletionExempt");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
