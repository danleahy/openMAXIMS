//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.serviceconfiguration;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.admin.domain.ServiceConfiguration.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.admin.domain.ServiceConfiguration domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbSpecialtyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrService().tabServiceList().cmbSpecialty().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSpecialtyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Specialty)
		{
			ims.core.vo.lookups.Specialty instance = (ims.core.vo.lookups.Specialty)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSpecialtyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrService().tabServiceList().cmbSpecialty().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSpecialtyLookup()
	{
		this.form.lyrService().tabServiceList().cmbSpecialty().clear();
		ims.core.vo.lookups.SpecialtyCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSpecialty(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrService().tabServiceList().cmbSpecialty().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSpecialtyLookupValue(int id)
	{
		ims.core.vo.lookups.Specialty instance = ims.core.vo.lookups.LookupHelper.getSpecialtyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrService().tabServiceList().cmbSpecialty().setValue(instance);
	}
	protected final void defaultcmbSpecialtyLookupValue()
	{
		this.form.lyrService().tabServiceList().cmbSpecialty().setValue((ims.core.vo.lookups.Specialty)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Specialty.class, engine.getFormName().getID(), ims.core.vo.lookups.Specialty.TYPE_ID));
	}
	protected final void oncmbCategoryValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrService().tabServiceList().cmbCategory().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ServiceCategory existingInstance = (ims.core.vo.lookups.ServiceCategory)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCategoryLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ServiceCategory)
		{
			ims.core.vo.lookups.ServiceCategory instance = (ims.core.vo.lookups.ServiceCategory)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCategoryLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ServiceCategory existingInstance = (ims.core.vo.lookups.ServiceCategory)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrService().tabServiceList().cmbCategory().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCategoryLookup()
	{
		this.form.lyrService().tabServiceList().cmbCategory().clear();
		ims.core.vo.lookups.ServiceCategoryCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getServiceCategory(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrService().tabServiceList().cmbCategory().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCategoryLookupValue(int id)
	{
		ims.core.vo.lookups.ServiceCategory instance = ims.core.vo.lookups.LookupHelper.getServiceCategoryInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrService().tabServiceList().cmbCategory().setValue(instance);
	}
	protected final void defaultcmbCategoryLookupValue()
	{
		this.form.lyrService().tabServiceList().cmbCategory().setValue((ims.core.vo.lookups.ServiceCategory)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ServiceCategory.class, engine.getFormName().getID(), ims.core.vo.lookups.ServiceCategory.TYPE_ID));
	}
	protected final void oncmbTurnAroundMeasureValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.MinReorderPeriod existingInstance = (ims.ocrr.vo.lookups.MinReorderPeriod)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTurnAroundMeasureLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ocrr.vo.lookups.MinReorderPeriod)
		{
			ims.ocrr.vo.lookups.MinReorderPeriod instance = (ims.ocrr.vo.lookups.MinReorderPeriod)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTurnAroundMeasureLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.MinReorderPeriod existingInstance = (ims.ocrr.vo.lookups.MinReorderPeriod)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTurnAroundMeasureLookup()
	{
		this.form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().clear();
		ims.ocrr.vo.lookups.MinReorderPeriodCollection lookupCollection = ims.ocrr.vo.lookups.LookupHelper.getMinReorderPeriod(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTurnAroundMeasureLookupValue(int id)
	{
		ims.ocrr.vo.lookups.MinReorderPeriod instance = ims.ocrr.vo.lookups.LookupHelper.getMinReorderPeriodInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().setValue(instance);
	}
	protected final void defaultcmbTurnAroundMeasureLookupValue()
	{
		this.form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().setValue((ims.ocrr.vo.lookups.MinReorderPeriod)domain.getLookupService().getDefaultInstance(ims.ocrr.vo.lookups.MinReorderPeriod.class, engine.getFormName().getID(), ims.ocrr.vo.lookups.MinReorderPeriod.TYPE_ID));
	}
	protected final void oncmbSpecValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrService().tabServiceDetails().cmbSpec().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSpecLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Specialty)
		{
			ims.core.vo.lookups.Specialty instance = (ims.core.vo.lookups.Specialty)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSpecLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrService().tabServiceDetails().cmbSpec().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSpecLookup()
	{
		this.form.lyrService().tabServiceDetails().cmbSpec().clear();
		ims.core.vo.lookups.SpecialtyCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSpecialty(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrService().tabServiceDetails().cmbSpec().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSpecLookupValue(int id)
	{
		ims.core.vo.lookups.Specialty instance = ims.core.vo.lookups.LookupHelper.getSpecialtyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrService().tabServiceDetails().cmbSpec().setValue(instance);
	}
	protected final void defaultcmbSpecLookupValue()
	{
		this.form.lyrService().tabServiceDetails().cmbSpec().setValue((ims.core.vo.lookups.Specialty)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Specialty.class, engine.getFormName().getID(), ims.core.vo.lookups.Specialty.TYPE_ID));
	}
	protected final void oncmbCatValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrService().tabServiceDetails().cmbCat().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ServiceCategory existingInstance = (ims.core.vo.lookups.ServiceCategory)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCatLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ServiceCategory)
		{
			ims.core.vo.lookups.ServiceCategory instance = (ims.core.vo.lookups.ServiceCategory)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCatLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ServiceCategory existingInstance = (ims.core.vo.lookups.ServiceCategory)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrService().tabServiceDetails().cmbCat().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCatLookup()
	{
		this.form.lyrService().tabServiceDetails().cmbCat().clear();
		ims.core.vo.lookups.ServiceCategoryCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getServiceCategory(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrService().tabServiceDetails().cmbCat().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCatLookupValue(int id)
	{
		ims.core.vo.lookups.ServiceCategory instance = ims.core.vo.lookups.LookupHelper.getServiceCategoryInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrService().tabServiceDetails().cmbCat().setValue(instance);
	}
	protected final void defaultcmbCatLookupValue()
	{
		this.form.lyrService().tabServiceDetails().cmbCat().setValue((ims.core.vo.lookups.ServiceCategory)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ServiceCategory.class, engine.getFormName().getID(), ims.core.vo.lookups.ServiceCategory.TYPE_ID));
	}
	protected final void oncmbHcpTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.HcpDisType existingInstance = (ims.core.vo.lookups.HcpDisType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbHcpTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.HcpDisType)
		{
			ims.core.vo.lookups.HcpDisType instance = (ims.core.vo.lookups.HcpDisType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbHcpTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.HcpDisType existingInstance = (ims.core.vo.lookups.HcpDisType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbHcpTypeLookup()
	{
		this.form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().clear();
		ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbHcpTypeLookupValue(int id)
	{
		ims.core.vo.lookups.HcpDisType instance = ims.core.vo.lookups.LookupHelper.getHcpDisTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().setValue(instance);
	}
	protected final void defaultcmbHcpTypeLookupValue()
	{
		this.form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().setValue((ims.core.vo.lookups.HcpDisType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.HcpDisType.class, engine.getFormName().getID(), ims.core.vo.lookups.HcpDisType.TYPE_ID));
	}
	protected final void oncmbDAForCBReferralValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrService().tabTriageActions().cmbDAForCBReferral().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral existingInstance = (ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDAForCBReferralLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral)
		{
			ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral instance = (ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDAForCBReferralLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral existingInstance = (ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrService().tabTriageActions().cmbDAForCBReferral().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDAForCBReferralLookup()
	{
		this.form.lyrService().tabTriageActions().cmbDAForCBReferral().clear();
		ims.RefMan.vo.lookups.DefaultTriageActionForCABReferralCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getDefaultTriageActionForCABReferral(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrService().tabTriageActions().cmbDAForCBReferral().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDAForCBReferralLookupValue(int id)
	{
		ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral instance = ims.RefMan.vo.lookups.LookupHelper.getDefaultTriageActionForCABReferralInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrService().tabTriageActions().cmbDAForCBReferral().setValue(instance);
	}
	protected final void defaultcmbDAForCBReferralLookupValue()
	{
		this.form.lyrService().tabTriageActions().cmbDAForCBReferral().setValue((ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral.TYPE_ID));
	}
	protected final void oncmbDAForManualReferralValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrService().tabTriageActions().cmbDAForManualReferral().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral existingInstance = (ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDAForManualReferralLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral)
		{
			ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral instance = (ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDAForManualReferralLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral existingInstance = (ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrService().tabTriageActions().cmbDAForManualReferral().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDAForManualReferralLookup()
	{
		this.form.lyrService().tabTriageActions().cmbDAForManualReferral().clear();
		ims.RefMan.vo.lookups.DefaultTriageActionForManualReferralCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getDefaultTriageActionForManualReferral(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrService().tabTriageActions().cmbDAForManualReferral().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDAForManualReferralLookupValue(int id)
	{
		ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral instance = ims.RefMan.vo.lookups.LookupHelper.getDefaultTriageActionForManualReferralInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrService().tabTriageActions().cmbDAForManualReferral().setValue(instance);
	}
	protected final void defaultcmbDAForManualReferralLookupValue()
	{
		this.form.lyrService().tabTriageActions().cmbDAForManualReferral().setValue((ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.admin.domain.ServiceConfiguration domain;
}
