//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5360.17707)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.admin.forms.serviceconfiguration;

import ims.admin.forms.serviceconfiguration.GenForm.lyrServiceLayer.tabActivityandFunctionsContainer.grdAppointmentTypesRow;
import ims.admin.forms.serviceconfiguration.GenForm.lyrServiceLayer.tabActivityandFunctionsContainer.grdServiceFunctionRow;
import ims.admin.forms.serviceconfiguration.GenForm.lyrServiceLayer.tabDiagnosticsContainer.grdDiagnosticsRow;
import ims.admin.forms.serviceconfiguration.GenForm.lyrServiceLayer.tabServiceListContainer.grdServiceRow;
import ims.admin.forms.serviceconfiguration.GenForm.lyrServiceLayer.tabServiceandFunctionsbyHCPContainer.grdHcpRow;
import ims.admin.forms.serviceconfiguration.GenForm.lyrServiceLayer.tabTriageActionsContainer.grdOtherHCPValuesRow;
import ims.admin.vo.lookups.DiagnosticCollection;
import ims.RefMan.vo.lookups.DefaultTriageActionForCABReferral;
import ims.RefMan.vo.lookups.DefaultTriageActionForManualReferral;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ActivityLiteVo;
import ims.core.vo.ActivityLiteVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.ServiceActivityForServiceConfigurationVo;
import ims.core.vo.ServiceActivityForServiceConfigurationVoCollection;
import ims.core.vo.ServiceDiagnosticsVo;
import ims.core.vo.ServiceFunctionForServiceConfigurationVo;
import ims.core.vo.ServiceFunctionForServiceConfigurationVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.ServiceTriageActionVo;
import ims.core.vo.ServiceVo;
import ims.core.vo.lookups.OtherHCP;
import ims.core.vo.lookups.OtherHCPCollection;
import ims.core.vo.lookups.ReferralTypeForTriageAction;
import ims.core.vo.lookups.ServiceCategory;
import ims.core.vo.lookups.ServiceFunction;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int COL_APPOINTMENTTYPE_ACTIVE = 1;
	private static final int COL_APPOINTMENTTYPE_FLEXIBLE = 2;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open(false);
	}
	
	private void open(boolean aSaveWasDone)
	{
		if(Boolean.TRUE.equals(form.getLocalContext().getSearchWasDone()))
		{
			search();
		}
		else if(aSaveWasDone)
		{
			String serviceSaved = (form.getLocalContext().getSelectedService() != null && form.getLocalContext().getSelectedService().getServiceName() != null) ? form.getLocalContext().getSelectedService().getServiceName().substring(0, Math.min(20, form.getLocalContext().getSelectedService().getServiceName().length())) : null;
			
			if(serviceSaved != null)
			{
				form.lyrService().tabServiceList().txtServiceName().setValue(serviceSaved);
				
				search();
			}
		}
		
		form.getLocalContext().setSelectedService(domain.getService(form.getLocalContext().getSelectedService()));
		form.lyrService().tabServiceList().grdService().setValue(form.getLocalContext().getSelectedService());
		
		populateScreenFromData(form.getLocalContext().getSelectedService());
		
		form.setMode(FormMode.VIEW);
	}

	private void initialise()
	{
		form.lyrService().tabServiceList().chkActive().setValue(true);
		form.lyrService().tabServiceandFunctionsbyHCP().chkActiveHcp().setValue(true);
		populateHCPDisciplineCombo();
		populateOtherHCPGrid();
		populateDiagnosticsGrid();
	}
	
	private void populateOtherHCPGrid()
	{
		form.lyrService().tabTriageActions().grdOtherHCPValues().getRows().clear();		
		
		ims.core.vo.lookups.OtherHCPCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getOtherHCP(domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			if (lookupCollection.get(x).isActive() == true && lookupCollection.get(x).getParent() == null)
			{
				grdOtherHCPValuesRow newRow = form.lyrService().tabTriageActions().grdOtherHCPValues().getRows().newRow();
				
				newRow.setColOtherHCPType(lookupCollection.get(x).getText());
				newRow.setColSelect(false);
				
				newRow.setValue(lookupCollection.get(x));
			}
		}
	}

	private void populateDiagnosticsGrid()
	{
		form.lyrService().tabDiagnostics().grdDiagnostics().getRows().clear();
		
		DiagnosticCollection diagnostics = domain.listDiagnostics();
		
		if(diagnostics == null)
			return;
		
		for(int i=0; i<diagnostics.size(); i++)
		{
			if(diagnostics.get(i) == null)
				continue;
				
			grdDiagnosticsRow newRow = form.lyrService().tabDiagnostics().grdDiagnostics().getRows().newRow();
			newRow.setColDiagnostic(diagnostics.get(i).getText());
			newRow.setValue(diagnostics.get(i));
			// WDEV-20573
			// If the diagnostic is inactive then ensure user cannot select it
			// However, if the diagnostic has already been selected for the service, then later code will enable it be unselected
			// [See populateDiagnosticsGrid(ServiceDiagnosticsVo serviceDiagnostics)]
			if(!diagnostics.get(i).isActive())
			{
				newRow.setTextColor(Color.Red);
				newRow.setSelectable(false);
				newRow.setColSelectReadOnly(true);
			} //WDEV-20573
		}
	}

	private void populateHCPDisciplineCombo()
	{
		form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().clear();		
		
		ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			if (lookupCollection.get(x).isActive() == true && lookupCollection.get(x).getParent() == null)
				form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open(false);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.lyrService().tabServiceDetails().isVisible())
		{
			if(save())
				open(true);
		}
		else if(form.lyrService().tabActivityandFunctions().isVisible())
		{
			if(saveActivitiesAndFunctions())
				open(false);
		}
		else if(form.lyrService().tabServiceandFunctionsbyHCP().isVisible())
		{
			if(form.lyrService().tabServiceandFunctionsbyHCP().ccHcpServiceFuction().save())
			{
				open(false);
			}
			else
			{
				if(form.lyrService().tabServiceandFunctionsbyHCP().ccHcpServiceFuction().isStale())
					open(false);
			}
		}
		else if(form.lyrService().tabTriageActions().isVisible())
		{
			if(saveServiceTriageAction())
				open(false);
		}
		else if(form.lyrService().tabDiagnostics().isVisible())
		{
			if(saveServiceDiagnostics())
				open(false);
		}
	}
	
	private boolean saveServiceDiagnostics()
	{
		ServiceDiagnosticsVo serviceDiagnostics = populateServiceDiagnosticsFromScreen(form.getLocalContext().getServiceDiagnostics());
		
		String[] errors = serviceDiagnostics.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.saveServiceDiagnostics(serviceDiagnostics);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(false);
			
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}

	private ServiceDiagnosticsVo populateServiceDiagnosticsFromScreen(ServiceDiagnosticsVo serviceDiagnostics)
	{
		if(serviceDiagnostics == null)
			serviceDiagnostics = new ServiceDiagnosticsVo();
		
		serviceDiagnostics.setService(form.lyrService().tabDiagnostics().qmbServiceDiagnostic().getValue());
		serviceDiagnostics.setDiagnostics(getDiagnosticsFromGrid());
		
		return serviceDiagnostics;
	}

	private DiagnosticCollection getDiagnosticsFromGrid()
	{
		DiagnosticCollection coll = new DiagnosticCollection();
		
		for(int i=0; i<form.lyrService().tabDiagnostics().grdDiagnostics().getRows().size(); i++)
		{
			if(form.lyrService().tabDiagnostics().grdDiagnostics().getRows().get(i).getColSelect())
			{
				coll.add(form.lyrService().tabDiagnostics().grdDiagnostics().getRows().get(i).getValue());
			}
		}
		
		return coll.size() > 0 ? coll : null;
	}

	private boolean saveServiceTriageAction()
	{
		ServiceTriageActionVo serviceTriageAction = populateServiceTriageActionFromScreen(form.getLocalContext().getServiceTriageAction());
		
		String[] errors = serviceTriageAction.validate(validateTriageActionTab());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setServiceTriageAction(domain.saveServiceTriageAction(serviceTriageAction));
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(false);
			
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}

	private String[] validateTriageActionTab()
	{
		ArrayList<String> uiErrors = new ArrayList<String>();
		
		if(!form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().getValue() && !form.lyrService().tabTriageActions().chkManualDirectToList().getValue() && !form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().getValue() && !form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().getValue() && !form.lyrService().tabTriageActions().chkManualOPA().getValue() && !form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().getValue() && !form.lyrService().tabTriageActions().chkChangeCABOPACB().getValue() && !form.lyrService().tabTriageActions().chkManualLinkedOPA().getValue() && !form.lyrService().tabTriageActions().chkCBLinkedOPA().getValue() && !form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().getValue() && !form.lyrService().tabTriageActions().chkCABOPAandDirectToList().getValue()) //WDEV-23576
		{
			uiErrors.add("At least one action must be selected.");
		}
		
		if(form.lyrService().tabTriageActions().chkManualOPA().getValue() || form.lyrService().tabTriageActions().chkManualLinkedOPA().getValue() || form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().getValue()
				|| form.lyrService().tabTriageActions().chkCBLinkedOPA().getValue() || form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().getValue() || form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().getValue() || form.lyrService().tabTriageActions().chkChangeCABOPACB().getValue() || form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().getValue()) //WDEV-23576
		{
			if(!form.lyrService().tabTriageActions().chkConsultant().getValue() && !form.lyrService().tabTriageActions().chkSPR().getValue() && !form.lyrService().tabTriageActions().chkAssociateSpecialist().getValue() && !form.lyrService().tabTriageActions().chkAnyDoctorToSee().getValue() && !form.lyrService().tabTriageActions().chkOtherHCP().getValue())
			{
				uiErrors.add("At least one 'OPA – To see' must be selected.");
			}
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private ServiceTriageActionVo populateServiceTriageActionFromScreen(ServiceTriageActionVo serviceTriageAction)
	{
		if(serviceTriageAction == null)
			serviceTriageAction = new ServiceTriageActionVo();
		
		serviceTriageAction.setService(form.lyrService().tabTriageActions().qmbServiceTriage().getValue());
		
		serviceTriageAction.setLinkedOPAs(getActionValueFromScreen(form.lyrService().tabTriageActions().chkManualLinkedOPA().getValue(), form.lyrService().tabTriageActions().chkCBLinkedOPA().getValue()));
		serviceTriageAction.setOPA(getActionValueFromScreen(form.lyrService().tabTriageActions().chkManualOPA().getValue(), false));
		serviceTriageAction.setOPAAndLinkedDiagostic(getActionValueFromScreen(form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().getValue(), false));
		serviceTriageAction.setDirectToList(getActionValueFromScreen(form.lyrService().tabTriageActions().chkManualDirectToList().getValue(), false));
		serviceTriageAction.setDirectToListAndOPA(getActionValueFromScreen(form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().getValue(), false));
		serviceTriageAction.setLinkedDiagnostic(getActionValueFromScreen(false, form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().getValue()));
		serviceTriageAction.setLinkedOPAsAndDiagnostic(getActionValueFromScreen(false, form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().getValue()));
		serviceTriageAction.setChangeCABOPA(getActionValueFromScreen(false, form.lyrService().tabTriageActions().chkChangeCABOPACB().getValue()));
		
		//WDEV-23576
		serviceTriageAction.setChangeCABOPAandDirectToList(getActionValueFromScreen(false, form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().getValue()));
		serviceTriageAction.setCABOPAandDirectToList(getActionValueFromScreen(false, form.lyrService().tabTriageActions().chkCABOPAandDirectToList().getValue()));
		
		serviceTriageAction.setDefaultActionForManualReferral(form.lyrService().tabTriageActions().cmbDAForManualReferral().getValue());
		serviceTriageAction.setDefaultActionForCABReferral(form.lyrService().tabTriageActions().cmbDAForCBReferral().getValue());
		
		serviceTriageAction.setConsultant(form.lyrService().tabTriageActions().chkConsultant().getValue());
		serviceTriageAction.setSPR(form.lyrService().tabTriageActions().chkSPR().getValue());
		serviceTriageAction.setAssociateSpecialist(form.lyrService().tabTriageActions().chkAssociateSpecialist().getValue());
		serviceTriageAction.setAnyDoctorToSee(form.lyrService().tabTriageActions().chkAnyDoctorToSee().getValue());
		serviceTriageAction.setOtherHCP(form.lyrService().tabTriageActions().chkOtherHCP().getValue());
		
		serviceTriageAction.setOtherHCPValues(form.lyrService().tabTriageActions().chkOtherHCP().getValue() ? getValuesFromOtherHCPGrid() : null);
		
		return serviceTriageAction;
	}

	private OtherHCPCollection getValuesFromOtherHCPGrid()
	{
		OtherHCPCollection coll = new OtherHCPCollection();
		
		for(int i=0; i<form.lyrService().tabTriageActions().grdOtherHCPValues().getRows().size(); i++)
		{
			if(form.lyrService().tabTriageActions().grdOtherHCPValues().getRows().get(i).getColSelect())
			{
				coll.add(form.lyrService().tabTriageActions().grdOtherHCPValues().getRows().get(i).getValue());
			}
		}
		
		return coll.size() > 0 ? coll : null;
	}

	private ReferralTypeForTriageAction getActionValueFromScreen(boolean manual, boolean cb)
	{
		if(manual && cb)
			return ReferralTypeForTriageAction.BOTH;
		else if(manual)
			return ReferralTypeForTriageAction.MANUAL;
		else if(cb)
			return ReferralTypeForTriageAction.CHOOSEANDBOOK;
		
		return null;
	}

	private boolean saveActivitiesAndFunctions()
	{
		ServiceFunctionForServiceConfigurationVoCollection functionsColl = populateServiceFunctionsFromGrid();
		ServiceActivityForServiceConfigurationVoCollection activitiesColl = getServiceActivitiesFromGrid();
		
		String[] errors = null;
		
		if(functionsColl != null && activitiesColl != null)
		{
			errors = functionsColl.validate(activitiesColl.validate());
		}
		else if(activitiesColl != null)
		{
			errors = activitiesColl.validate();
		}
		else if(functionsColl != null)
		{
			errors = functionsColl.validate();
		}
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.saveActivitiesAndFunctions(functionsColl, activitiesColl, form.getLocalContext().getServiceFunctionsForDelete(), form.getLocalContext().getServiceActivitiesForDelete());
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(false);
			
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage("The " + e.getMessage() + " is currently being used and cannot be deleted.");
			open(false);
			
			return false;
		}
		
		return true;
	}

	private ServiceActivityForServiceConfigurationVoCollection getServiceActivitiesFromGrid()
	{
		ServiceActivityForServiceConfigurationVoCollection coll = new ServiceActivityForServiceConfigurationVoCollection();
		
		for(int i=0; i<form.lyrService().tabActivityandFunctions().grdAppointmentTypes().getRows().size(); i++)
		{
			coll.add(form.lyrService().tabActivityandFunctions().grdAppointmentTypes().getRows().get(i).getValue());
		}
		
		return coll.size() > 0 ? coll : null;
	}

	private ServiceFunctionForServiceConfigurationVoCollection populateServiceFunctionsFromGrid()
	{
		ServiceFunctionForServiceConfigurationVoCollection coll = new ServiceFunctionForServiceConfigurationVoCollection();
		
		for(int i=0; i<form.lyrService().tabActivityandFunctions().grdServiceFunction().getRows().size(); i++)
		{
			if(form.lyrService().tabActivityandFunctions().grdServiceFunction().getRows().get(i).getValue().equals(form.lyrService().tabActivityandFunctions().grdServiceFunction().getValue()))
			{
				form.lyrService().tabActivityandFunctions().grdServiceFunction().getRows().get(i).getValue().setTaxonomyMap(form.lyrService().tabActivityandFunctions().ccFunctionCodeMappings().getValueNoWarnings());
			}
			
			coll.add(form.lyrService().tabActivityandFunctions().grdServiceFunction().getRows().get(i).getValue());
		}
		
		return coll.size() > 0 ? coll : null;
	}

	private boolean save()
	{
		ServiceVo service = populateDataFromScreen(form.getLocalContext().getSelectedService());
		
		boolean isNewRecors = service.getID_Service() == null;
		
		String[] errors = service.validate(validateUI());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedService(domain.saveService(service));
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(false);
			
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		
		if(isNewRecors)
		{
			if(form.getLocalContext().getSelectedService() != null)
			{
				form.getLocalContext().setSelectedServiceOnActAndFunctTab(form.getLocalContext().getSelectedService());
				form.getLocalContext().setSelectedServiceOnDiagnosticsTab(form.getLocalContext().getSelectedService());
				form.getLocalContext().setSelectedServiceOnTriageActionTab(form.getLocalContext().getSelectedService());
			}
		}
		
		return true;
	}

	
	private String[] validateUI()
	{
		ArrayList<String> errorList = new ArrayList<String>();
		
		if (ServiceCategory.CLINICAL.equals(form.lyrService().tabServiceDetails().cmbCat().getValue())
				&& form.lyrService().tabServiceDetails().cmbSpec().getValue() == null)
		{
			errorList.add("Specialty is mandatory.");
		}
			
		return errorList.toArray(new String[errorList.size()]);
	}

	
	private ServiceVo populateDataFromScreen(ServiceVo service)
	{
		if(service == null)
			service = new ServiceVo();
		
		service.setServiceName(form.lyrService().tabServiceDetails().txtService().getValue());
		service.setServiceDescription(form.lyrService().tabServiceDetails().txtDescription().getValue());
		service.setServiceCategory(form.lyrService().tabServiceDetails().cmbCat().getValue());
		service.setSpecialty(form.lyrService().tabServiceDetails().cmbSpec().getValue());
		
		service.setIsActive(form.lyrService().tabServiceDetails().chkActiveOnly().getValue());
		service.setCanBeScheduled(form.lyrService().tabServiceDetails().chkCanBeScheduled().getValue());
		service.setIsPreAssessmentCompletionExempt(form.lyrService().tabServiceDetails().chkPreAssessmentCompletionExempt().getValue());
		service.setIsSubjectToRTTClock(form.lyrService().tabServiceDetails().chkRTT().getValue());
		service.setMaternityIndicator(form.lyrService().tabServiceDetails().chkMaternityIndicator().getValue());
		service.setCanReferIntoTheService(form.lyrService().tabServiceDetails().chkCanReferIntoTheService().getValue());
		service.setDirectSelfReferralsAccepted(form.lyrService().tabServiceDetails().chkDirectSelfReferralsAccepted().getValue());
		
		service.setAlternateServiceCode(form.lyrService().tabServiceDetails().txtAlternativeCode().getValue());
		service.setTurnaroundMeasure(form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().getValue());
		service.setExpectedTurnaround(form.lyrService().tabServiceDetails().intExpectedTurnAround().getValue());
		
		service.setTaxonomyMap(form.lyrService().tabServiceDetails().ccServiceCodeMappings().getValueNoWarnings());
		
		return service;
	}

	private void updateControlsState()
	{
		boolean isPathology = ServiceCategory.PATHOLOGY_DISCIPLINE.equals(form.lyrService().tabServiceDetails().cmbCat().getValue());
		boolean isRadiology = ServiceCategory.RADIOLOGY_MODALITY.equals(form.lyrService().tabServiceDetails().cmbCat().getValue());
		boolean isClinical = ServiceCategory.CLINICAL.equals(form.lyrService().tabServiceDetails().cmbCat().getValue()); //WDEV-20751
		
		boolean isEditMode = FormMode.EDIT.equals(form.getMode());
		
		form.lyrService().tabServiceDetails().cmbSpec().setRequired(isEditMode && isClinical); //WDEV-20751
		
		form.lyrService().tabServiceDetails().chkCanBeScheduled().setVisible(form.lyrService().tabServiceDetails().cmbCat().getValue() != null && !isPathology);
		form.lyrService().tabServiceDetails().chkCanBeScheduled().setEnabled(isEditMode);
		
		form.lyrService().tabServiceDetails().chkCanReferIntoTheService().setVisible(form.lyrService().tabServiceDetails().cmbCat().getValue() != null && !isPathology);
		form.lyrService().tabServiceDetails().chkCanReferIntoTheService().setEnabled(isEditMode);
		
		form.lyrService().tabServiceDetails().chkDirectSelfReferralsAccepted().setVisible(form.lyrService().tabServiceDetails().cmbCat().getValue() != null && !isPathology);
		form.lyrService().tabServiceDetails().chkDirectSelfReferralsAccepted().setEnabled(isEditMode && form.lyrService().tabServiceDetails().chkCanReferIntoTheService().getValue());
		
		form.lyrService().tabServiceDetails().chkPreAssessmentCompletionExempt().setVisible(form.lyrService().tabServiceDetails().cmbCat().getValue() != null && isClinical);
		form.lyrService().tabServiceDetails().chkPreAssessmentCompletionExempt().setEnabled(isEditMode);
		
		form.lyrService().tabServiceDetails().chkRTT().setVisible(form.lyrService().tabServiceDetails().cmbCat().getValue() != null && !isPathology && !isRadiology);
		form.lyrService().tabServiceDetails().chkRTT().setEnabled(isEditMode);
		form.lyrService().tabServiceDetails().chkMaternityIndicator().setVisible(form.lyrService().tabServiceDetails().cmbCat().getValue() != null && !isPathology && !isRadiology);
		form.lyrService().tabServiceDetails().chkMaternityIndicator().setEnabled(isEditMode);
		
		form.lyrService().tabServiceDetails().pnlPathology().setVisible(isPathology);
		form.lyrService().tabServiceDetails().lblAlternativeCode().setVisible(isPathology);
		form.lyrService().tabServiceDetails().txtAlternativeCode().setVisible(isPathology);
		form.lyrService().tabServiceDetails().txtAlternativeCode().setEnabled(isEditMode);
		form.lyrService().tabServiceDetails().lblTurnAroundMeasure().setVisible(isPathology);
		form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().setVisible(isPathology);
		form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().setEnabled(isEditMode);
		form.lyrService().tabServiceDetails().lblExpectedTurnAround().setVisible(isPathology);
		form.lyrService().tabServiceDetails().intExpectedTurnAround().setVisible(isPathology);
		form.lyrService().tabServiceDetails().intExpectedTurnAround().setEnabled(isEditMode);
		
		form.getContextMenus().Admin.getServiceConfigurationHCPMenuEDITItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().getValue() != null);
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNew().setVisible(form.lyrService().tabServiceList().isVisible() || form.lyrService().tabServiceDetails().isVisible());
			form.btnEditHcp().setVisible((form.lyrService().tabServiceandFunctionsbyHCP().isVisible() && form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().getValue() != null) || (form.lyrService().tabActivityandFunctions().isVisible() && form.lyrService().tabActivityandFunctions().qmbService().getValue() != null) || (form.lyrService().tabTriageActions().isVisible() && form.lyrService().tabTriageActions().qmbServiceTriage().getValue() != null) || (form.lyrService().tabDiagnostics().isVisible() && form.lyrService().tabDiagnostics().qmbServiceDiagnostic().getValue() != null));
			form.btnEdit().setVisible(form.getLocalContext().getSelectedService() != null && (form.lyrService().tabServiceList().isVisible() || form.lyrService().tabServiceDetails().isVisible()));
		}
		else if(isEditMode)
		{
			form.lyrService().tabActivityandFunctions().btnAddAppointmentType().setEnabled(form.lyrService().tabActivityandFunctions().qmbAppointmentType().getValue() != null);
			
			form.lyrService().tabActivityandFunctions().btnAddServiceFunctionTaxonomy().setEnabled(form.lyrService().tabActivityandFunctions().grdServiceFunction().getValue() != null);
			form.lyrService().tabActivityandFunctions().btnRemoveServiceFunctionTaxonomy().setEnabled(form.lyrService().tabActivityandFunctions().grdServiceFunction().getValue() != null && form.lyrService().tabActivityandFunctions().ccFunctionCodeMappings().isTaxonomyRowSelected());
		}
		
		form.lyrService().tabServiceDetails().ccServiceCodeMappings().setComponentMode(form.getMode());
		
		FormMode functionTaxMappingComponentMode = FormMode.VIEW;
		
		if(isEditMode && form.lyrService().tabActivityandFunctions().grdServiceFunction().getValue() != null)
		{
			functionTaxMappingComponentMode = FormMode.EDIT;
		}
		
		form.lyrService().tabActivityandFunctions().ccFunctionCodeMappings().setComponentMode(functionTaxMappingComponentMode);
		
		form.lyrService().tabServiceandFunctionsbyHCP().ccHcpServiceFuction().setMode(form.getMode());
		
		form.lyrService().tabServiceList().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrService().tabServiceDetails().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrService().tabServiceandFunctionsbyHCP().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrService().tabActivityandFunctions().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrService().tabTriageActions().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrService().tabDiagnostics().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		
		boolean isTriageActionServiceSelected = form.lyrService().tabTriageActions().qmbServiceTriage().getValue() != null;
		
		form.lyrService().tabTriageActions().pnlActionToBeDisplayed().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().lblLabel().setVisible(isTriageActionServiceSelected);
		
		form.lyrService().tabTriageActions().lblDiagnosticRequired().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().lblDirectToList().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().lblDirectToListAndOPA().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().lblLinkedDiagnostic().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().lblOPA().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().lblOPAAndDiagnosticRequired().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().lblLinkedOPAAndDiagnostic().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().lblChangeCABOPA().setVisible(isTriageActionServiceSelected);
		
		form.lyrService().tabTriageActions().lblManualReferralAction().setVisible(isTriageActionServiceSelected);//WDEV-21047 
		form.lyrService().tabTriageActions().lblCBReferral().setVisible(isTriageActionServiceSelected);//WDEV-21047 
		
		
		form.lyrService().tabTriageActions().chkManualDirectToList().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().chkManualOPA().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().chkManualLinkedOPA().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().cmbDAForCBReferral().setVisible(isTriageActionServiceSelected);//WDEV-21047 
		form.lyrService().tabTriageActions().cmbDAForManualReferral().setVisible(isTriageActionServiceSelected);//WDEV-21047 
		
		form.lyrService().tabTriageActions().chkManualDirectToList().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkManualLinkedOPA().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkManualOPA().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().cmbDAForCBReferral().setEnabled(isEditMode);//WDEV-21047
		form.lyrService().tabTriageActions().cmbDAForManualReferral().setEnabled(isEditMode);//WDEV-21047 
		
		form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().chkCBLinkedOPA().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().chkChangeCABOPACB().setVisible(isTriageActionServiceSelected);
		
		//WDEV-23576
		form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().chkCABOPAandDirectToList().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().lblChangeCABOPAandDirectToList().setVisible(isTriageActionServiceSelected);
		form.lyrService().tabTriageActions().lblCABOPAandDirectToList().setVisible(isTriageActionServiceSelected);
		
		
		form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkCBLinkedOPA().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkChangeCABOPACB().setEnabled(isEditMode);
		
		//WDEV-23576
		form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkCABOPAandDirectToList().setEnabled(isEditMode);
		
		boolean canDisplayOPA = form.lyrService().tabTriageActions().chkManualOPA().getValue() || form.lyrService().tabTriageActions().chkManualLinkedOPA().getValue() || form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().getValue()	|| form.lyrService().tabTriageActions().chkCBLinkedOPA().getValue() || form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().getValue() || form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().getValue() || form.lyrService().tabTriageActions().chkChangeCABOPACB().getValue() || form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().getValue(); //WDEV-23576
		
		form.lyrService().tabTriageActions().pnlOPAtoSee().setVisible(canDisplayOPA);
		form.lyrService().tabTriageActions().chkConsultant().setVisible(canDisplayOPA);
		form.lyrService().tabTriageActions().chkSPR().setVisible(canDisplayOPA);
		form.lyrService().tabTriageActions().chkAssociateSpecialist().setVisible(canDisplayOPA);
		form.lyrService().tabTriageActions().chkAnyDoctorToSee().setVisible(canDisplayOPA);
		form.lyrService().tabTriageActions().chkOtherHCP().setVisible(canDisplayOPA);
		
		form.lyrService().tabTriageActions().chkConsultant().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkSPR().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkAssociateSpecialist().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkAnyDoctorToSee().setEnabled(isEditMode);
		form.lyrService().tabTriageActions().chkOtherHCP().setEnabled(isEditMode);
		
		form.lyrService().tabTriageActions().lblOtherHCP().setVisible(form.lyrService().tabTriageActions().chkOtherHCP().getValue());
		form.lyrService().tabTriageActions().grdOtherHCPValues().setVisible(form.lyrService().tabTriageActions().chkOtherHCP().getValue());
		
		if(isEditMode)
		{
			form.lyrService().tabTriageActions().grdOtherHCPValues().setEnabled(true);
			form.lyrService().tabTriageActions().grdOtherHCPValues().setReadOnly(false);
		}
		else
		{
			form.lyrService().tabTriageActions().grdOtherHCPValues().setReadOnly(true);
		}
		
		boolean isServiceDiagnosticSelected = form.lyrService().tabDiagnostics().qmbServiceDiagnostic().getValue() != null;
		
		form.lyrService().tabDiagnostics().pnlDiagnostics().setVisible(isServiceDiagnosticSelected);
		form.lyrService().tabDiagnostics().lblDiagnostics().setVisible(isServiceDiagnosticSelected);
		form.lyrService().tabDiagnostics().grdDiagnostics().setVisible(isServiceDiagnosticSelected);
		
		if(isEditMode)
		{
			form.lyrService().tabDiagnostics().grdDiagnostics().setEnabled(true);
			form.lyrService().tabDiagnostics().grdDiagnostics().setReadOnly(false);
		}
		else
		{
			form.lyrService().tabDiagnostics().grdDiagnostics().setReadOnly(true);
		}
	}

	private void search()
	{
		if(isSearchCriteriaValid())
		{
			form.getLocalContext().setSearchWasDone(true);
			
			populateServiceGrid(domain.listServices(form.lyrService().tabServiceList().txtServiceName().getValue(), form.lyrService().tabServiceList().cmbCategory().getValue(), form.lyrService().tabServiceList().cmbSpecialty().getValue(), form.lyrService().tabServiceList().chkActive().getValue()));
			
			if(form.lyrService().tabServiceList().grdService().getRows().size() == 0 && form.lyrService().tabServiceList().isVisible())
				engine.showMessage("No records found.");
		}
	}

	private void populateServiceGrid(ServiceLiteVoCollection services)
	{
		form.lyrService().tabServiceList().grdService().getRows().clear();
		
		if(services == null)
			return;
		
		for(ServiceLiteVo service : services)
		{
			if(service == null)
				continue;
			
			addServiceRow(service);
		}
	}

	private void addServiceRow(ServiceLiteVo service)
	{
		if(service == null)
			return;
		
		grdServiceRow newRow = form.lyrService().tabServiceList().grdService().getRows().newRow();
		
		newRow.setColServiceName(service.getServiceName());
		newRow.setTooltipForColServiceName(newRow.getColServiceName());
		newRow.setColCategory(service.getServiceCategory() != null ? service.getServiceCategory().getText() : null);
		newRow.setTooltipForColCategory(newRow.getColCategory());
		newRow.setColSpecialty(service.getSpecialty() != null ? service.getSpecialty().getText() : null);
		newRow.setTooltipForColSpecialty(newRow.getColSpecialty());
		newRow.setColScheduledService(Boolean.TRUE.equals(service.getCanBeScheduled()));
		newRow.setColRTT(Boolean.TRUE.equals(service.getIsSubjectToRTTClock()));
		newRow.setColReferralService(Boolean.TRUE.equals(service.getCanReferIntoTheService()));
		
		newRow.setValue(service);
	}

	private boolean isSearchCriteriaValid()
	{
		ArrayList<String> uiErrors = new ArrayList<String>();

		if (form.lyrService().tabServiceList().txtServiceName().getValue() == null && form.lyrService().tabServiceList().cmbCategory().getValue() == null && form.lyrService().tabServiceList().cmbSpecialty().getValue() == null && !Boolean.TRUE.equals(form.lyrService().tabServiceList().chkActive().getValue()))
		{
			uiErrors.add("Complete at least one search field.");
		}

		if (uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[uiErrors.size()]));
			return false;
		}

		return true;
	}
	
	private boolean isHcpSearchCriteriaValid()
	{
		ArrayList<String> uiErrors = new ArrayList<String>();

		if (form.lyrService().tabServiceandFunctionsbyHCP().txtHcpForename().getValue() == null && form.lyrService().tabServiceandFunctionsbyHCP().txtHcpSurname().getValue() == null && form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().getValue() == null && !form.lyrService().tabServiceandFunctionsbyHCP().chkActiveHcp().getValue())
		{
			uiErrors.add("Complete at least one search field.");
		}

		if (uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[uiErrors.size()]));
			return false;
		}

		return true;
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		editService();
	}
	
	private void editService()
	{
		if(form.lyrService().tabServiceList().isVisible())
		{
			form.lyrService().showtabServiceDetails();
		}
		
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newService();
	}
	
	private void newService()
	{
		form.lyrService().showtabServiceDetails();
		form.getLocalContext().setSelectedService(null);
		
		clearServiceDetailsScreen();
		
		form.lyrService().tabServiceDetails().chkActiveOnly().setValue(true);
		
		form.setMode(FormMode.EDIT);
	}


	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
		
		updateControlsState();
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clear();
		updateControlsState();
	}
	
	private void clear()
	{
		form.getLocalContext().setSearchWasDone(null);
		form.getLocalContext().setSelectedService(null);
		
		clearServiceListScreen();
		clearServiceDetailsScreen();
	}

	private void clearServiceListScreen()
	{
		form.lyrService().tabServiceList().txtServiceName().setValue(null);
		form.lyrService().tabServiceList().cmbCategory().setValue(null);
		form.lyrService().tabServiceList().cmbSpecialty().setValue(null);
		form.lyrService().tabServiceList().chkActive().setValue(null);
		form.lyrService().tabServiceList().grdService().getRows().clear();
	}

	@Override
	protected void onGrdServiceSelectionChanged()
	{
		form.getLocalContext().setSelectedService(domain.getService(form.lyrService().tabServiceList().grdService().getValue()));
		form.getLocalContext().setSelectedServiceOnActAndFunctTab(form.getLocalContext().getSelectedService());
		form.getLocalContext().setSelectedServiceOnDiagnosticsTab(form.getLocalContext().getSelectedService());
		form.getLocalContext().setSelectedServiceOnTriageActionTab(form.getLocalContext().getSelectedService());
		
		populateScreenFromData(form.getLocalContext().getSelectedService());
		
		form.lyrService().showtabServiceDetails();
		
		updateControlsState();
	}

	private void populateScreenFromData(ServiceVo service)
	{
		populateServiceDetails(service);
		populateActivityAndFunction();
		
		if(form.lyrService().tabServiceandFunctionsbyHCP().isVisible())
		{
			populateServiceAndFunctionByHcp();
		}
		
		populateTriageActions();
		populateServiceDiagnostics();
	}

	private void populateServiceDiagnostics()
	{
		form.lyrService().tabDiagnostics().qmbServiceDiagnostic().clear();
		
		ServiceLiteVo service = form.getLocalContext().getSelectedServiceOnDiagnosticsTab();
		
		if(service == null)
			return;
		
		form.lyrService().tabDiagnostics().qmbServiceDiagnostic().newRow(service, service.getServiceName());
		form.lyrService().tabDiagnostics().qmbServiceDiagnostic().setValue(service);
	
		form.getLocalContext().setServiceDiagnostics(domain.getServiceDiagnostics(form.lyrService().tabDiagnostics().qmbServiceDiagnostic().getValue()));
		
		populateDiagnosticsGrid(form.getLocalContext().getServiceDiagnostics());
	}

	private void populateDiagnosticsGrid(ServiceDiagnosticsVo serviceDiagnostics)
	{
		clearDiagnosticsGrid();
		
		if(serviceDiagnostics == null || serviceDiagnostics.getDiagnostics() == null)
			//WDEV-20573
			//			return;
		{
			populateActiveDiagnosticsGrid();
			return;
		}
		else
		{
			populateDiagnosticsGrid();
		} // WDEV-20573
		
		
		
		for(int i=0; i<form.lyrService().tabDiagnostics().grdDiagnostics().getRows().size(); i++)
		{
			grdDiagnosticsRow row = form.lyrService().tabDiagnostics().grdDiagnostics().getRows().get(i);
			
			if(serviceDiagnostics.getDiagnostics().contains(row.getValue()))
				//WDEV-20573
				//row.setColSelect(true);
			{
				row.setColSelect(true);
				
				// If Service Diagnostics contains an inactive selected Diagnostic
				// then allow user to unselect it
				if (!row.getValue().isActive())
				{
					row.setSelectable(true);
					row.setColSelectReadOnly(false);
				}
			}//WDEV-20573
			
		}
	}

	private void clearDiagnosticsGrid()
	{
		for(int i=0; i<form.lyrService().tabDiagnostics().grdDiagnostics().getRows().size(); i++)
		{
			form.lyrService().tabDiagnostics().grdDiagnostics().getRows().get(i).setColSelect(false);
		}
	}

	private void populateTriageActions()
	{
		form.lyrService().tabTriageActions().qmbServiceTriage().clear();
		
		ServiceLiteVo service = form.getLocalContext().getSelectedServiceOnTriageActionTab();
		
		if(service == null)
			return;
		
		form.lyrService().tabTriageActions().qmbServiceTriage().newRow(service, service.getServiceName());
		form.lyrService().tabTriageActions().qmbServiceTriage().setValue(service);
		
		form.getLocalContext().setServiceTriageAction(domain.getServiceTriageAction(form.lyrService().tabTriageActions().qmbServiceTriage().getValue()));
		
		populateServiceTriageActionFromData(form.getLocalContext().getServiceTriageAction());
	}

	private void populateServiceTriageActionFromData(ServiceTriageActionVo serviceTriageAction)
	{
		clearTriageActions();
		
		if(serviceTriageAction == null)
			return;
		
		form.lyrService().tabTriageActions().chkConsultant().setValue(serviceTriageAction.getConsultant());
		form.lyrService().tabTriageActions().chkAnyDoctorToSee().setValue(serviceTriageAction.getAnyDoctorToSee());
		form.lyrService().tabTriageActions().chkOtherHCP().setValue(serviceTriageAction.getOtherHCP());
		populateOtherHCPGrid(serviceTriageAction.getOtherHCPValues());
		
		Boolean isManualActionLinkedOPAs = getManualActionValueFromData(serviceTriageAction.getLinkedOPAs());
		Boolean isManualActionOPA = getManualActionValueFromData(serviceTriageAction.getOPA());
		Boolean isManualActionOpaAndLinkedDiag = getManualActionValueFromData(serviceTriageAction.getOPAAndLinkedDiagostic());
		Boolean isManualActionDirectToList = getManualActionValueFromData(serviceTriageAction.getDirectToList());
		Boolean isManualActionDirectToListAndOPA = getManualActionValueFromData(serviceTriageAction.getDirectToListAndOPA());
		Boolean isCbActionLinkedDiagnostic = getCBActionValueFromData(serviceTriageAction.getLinkedDiagnostic());
		Boolean isCbActionValueLinkedOPAsAndDiagnostic = getCBActionValueFromData(serviceTriageAction.getLinkedOPAsAndDiagnostic());
		Boolean isCbActionLinkedOpa = getCBActionValueFromData(serviceTriageAction.getLinkedOPAs());
		Boolean isCbActionChangeCABOPA = getCBActionValueFromData(serviceTriageAction.getChangeCABOPA());
		
		//WDEV-23576
		Boolean isChangeCABOPAandDirectToList = getCBActionValueFromData(serviceTriageAction.getChangeCABOPAandDirectToList());
		Boolean isCABOPAandDirectToList = getCBActionValueFromData(serviceTriageAction.getCABOPAandDirectToList());
		
		populateDefaultManualActionCombo(isManualActionLinkedOPAs,
										isManualActionOPA,
										isManualActionOpaAndLinkedDiag,
										isManualActionDirectToList,
										isManualActionDirectToListAndOPA);//WDEV-21047
		
		populateDefaultCBActionCombo(isCbActionLinkedDiagnostic,
									isCbActionValueLinkedOPAsAndDiagnostic,
									isCbActionLinkedOpa,
									isCbActionChangeCABOPA,
									isChangeCABOPAandDirectToList,
									isCABOPAandDirectToList);//WDEV-21047  //WDEV-23576
		
		form.lyrService().tabTriageActions().chkAssociateSpecialist().setValue(serviceTriageAction.getAssociateSpecialist());
		form.lyrService().tabTriageActions().chkSPR().setValue(serviceTriageAction.getSPR());
		form.lyrService().tabTriageActions().chkManualLinkedOPA().setValue(isManualActionLinkedOPAs);
		form.lyrService().tabTriageActions().chkCBLinkedOPA().setValue(isCbActionLinkedOpa);
		form.lyrService().tabTriageActions().chkManualOPA().setValue(isManualActionOPA);
		form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().setValue(isManualActionOpaAndLinkedDiag);
		form.lyrService().tabTriageActions().chkManualDirectToList().setValue(isManualActionDirectToList);
		form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().setValue(isManualActionDirectToListAndOPA);
		form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().setValue(isCbActionLinkedDiagnostic);
		form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().setValue(isCbActionValueLinkedOPAsAndDiagnostic);
		form.lyrService().tabTriageActions().chkChangeCABOPACB().setValue(isCbActionChangeCABOPA);
		form.lyrService().tabTriageActions().cmbDAForCBReferral().setValue(serviceTriageAction.getDefaultActionForCABReferral());//WDEV-21047
		form.lyrService().tabTriageActions().cmbDAForManualReferral().setValue(serviceTriageAction.getDefaultActionForManualReferral());//WDEV-21047
		
		
		//WDEV-23576
		form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().setValue(isChangeCABOPAandDirectToList);
		form.lyrService().tabTriageActions().chkCABOPAandDirectToList().setValue(isCABOPAandDirectToList);
	}
	//WDEV-21047
	private void populateDefaultCBActionCombo(Boolean isCbActionLinkedDiagnostic,Boolean isCbActionValueFromDataOPAsAndDiagnostic,Boolean isCbActionLinkedOpa, Boolean isChangeCABOPA, Boolean isChangeCABOPAandDirectToList, Boolean isCABOPAandDirectToList) //WDEV-23576
	{
		form.lyrService().tabTriageActions().cmbDAForCBReferral().clear();
		
		if(Boolean.TRUE.equals(isCbActionLinkedOpa))
			form.lyrService().tabTriageActions().cmbDAForCBReferral().newRow(DefaultTriageActionForCABReferral.LINKED_OPAS, DefaultTriageActionForCABReferral.LINKED_OPAS.getText());	
		
		if(Boolean.TRUE.equals(isCbActionValueFromDataOPAsAndDiagnostic))
			form.lyrService().tabTriageActions().cmbDAForCBReferral().newRow(DefaultTriageActionForCABReferral.LINKED_OPAS_AND_DIAGNOSTICS, DefaultTriageActionForCABReferral.LINKED_OPAS_AND_DIAGNOSTICS.getText());

		if(Boolean.TRUE.equals(isCbActionLinkedDiagnostic))
			form.lyrService().tabTriageActions().cmbDAForCBReferral().newRow(DefaultTriageActionForCABReferral.LINKED_DIAGNOSTICS, DefaultTriageActionForCABReferral.LINKED_DIAGNOSTICS.getText());	
		
		if(Boolean.TRUE.equals(isChangeCABOPA))
			form.lyrService().tabTriageActions().cmbDAForCBReferral().newRow(DefaultTriageActionForCABReferral.CHANGE_CAB_OPA, DefaultTriageActionForCABReferral.CHANGE_CAB_OPA.getText());	
		
		//WDEV-23576
		if(Boolean.TRUE.equals(isChangeCABOPAandDirectToList))
			form.lyrService().tabTriageActions().cmbDAForCBReferral().newRow(DefaultTriageActionForCABReferral.CHANGE_CAB_OPA_AND_DIRECT_TO_LIST, DefaultTriageActionForCABReferral.CHANGE_CAB_OPA_AND_DIRECT_TO_LIST.getText());
		
		if(Boolean.TRUE.equals(isCABOPAandDirectToList))
			form.lyrService().tabTriageActions().cmbDAForCBReferral().newRow(DefaultTriageActionForCABReferral.CAB_OPA_AND_DIRECT_TO_LIST, DefaultTriageActionForCABReferral.CAB_OPA_AND_DIRECT_TO_LIST.getText());
	}
	//WDEV-21047
	private void populateDefaultManualActionCombo(Boolean isManualActionLinkedOPAs, Boolean isManualActionOPA,Boolean isManualActionOpaAndLinkedDiag,Boolean isManualActionDirectToList,Boolean isManualActionDirectToListAndOPA)
	{
		form.lyrService().tabTriageActions().cmbDAForManualReferral().clear();
		
		if(Boolean.TRUE.equals(isManualActionOPA))
			form.lyrService().tabTriageActions().cmbDAForManualReferral().newRow(DefaultTriageActionForManualReferral.OPA, DefaultTriageActionForManualReferral.OPA.getText());	
		
		if(Boolean.TRUE.equals(isManualActionLinkedOPAs))
			form.lyrService().tabTriageActions().cmbDAForManualReferral().newRow(DefaultTriageActionForManualReferral.LINKED_OPAS, DefaultTriageActionForManualReferral.LINKED_OPAS.getText());

		if(Boolean.TRUE.equals(isManualActionOpaAndLinkedDiag))
			form.lyrService().tabTriageActions().cmbDAForManualReferral().newRow(DefaultTriageActionForManualReferral.OPA_AND_LINKED_DIAGNOSTIC, DefaultTriageActionForManualReferral.OPA_AND_LINKED_DIAGNOSTIC.getText());	

		if(Boolean.TRUE.equals(isManualActionDirectToList))
			form.lyrService().tabTriageActions().cmbDAForManualReferral().newRow(DefaultTriageActionForManualReferral.DIRECT_TO_LIST, DefaultTriageActionForManualReferral.DIRECT_TO_LIST.getText());	

		if(Boolean.TRUE.equals(isManualActionDirectToListAndOPA))
			form.lyrService().tabTriageActions().cmbDAForManualReferral().newRow(DefaultTriageActionForManualReferral.DIRECT_TO_LIST_AND_OPA, DefaultTriageActionForManualReferral.DIRECT_TO_LIST_AND_OPA.getText());		

	}

	private void populateOtherHCPGrid(OtherHCPCollection otherHCPValues)
	{
		if(otherHCPValues == null)
			return;
		
		for(int i=0; i<otherHCPValues.size(); i++)
		{
			addOtherHCPValueInGrid(otherHCPValues.get(i));
		}
	}

	private void addOtherHCPValueInGrid(OtherHCP otherHCP)
	{
		if(otherHCP == null)
			return;
		
		for(int i=0; i<form.lyrService().tabTriageActions().grdOtherHCPValues().getRows().size(); i++)
		{
			if(otherHCP.equals(form.lyrService().tabTriageActions().grdOtherHCPValues().getRows().get(i).getValue()))
			{
				form.lyrService().tabTriageActions().grdOtherHCPValues().getRows().get(i).setColSelect(true);
			}
		}
	}

	private Boolean getManualActionValueFromData(ReferralTypeForTriageAction value)
	{
		if(ReferralTypeForTriageAction.BOTH.equals(value) || ReferralTypeForTriageAction.MANUAL.equals(value))
			return true;
		
		return false;
	}
	
	private Boolean getCBActionValueFromData(ReferralTypeForTriageAction value)
	{
		if(ReferralTypeForTriageAction.BOTH.equals(value) || ReferralTypeForTriageAction.CHOOSEANDBOOK.equals(value))
			return true;
		
		return false;
	}

	private void clearTriageActions()
	{
		form.lyrService().tabTriageActions().chkConsultant().setValue(null);
		form.lyrService().tabTriageActions().chkAnyDoctorToSee().setValue(null);
		form.lyrService().tabTriageActions().chkAssociateSpecialist().setValue(null);
		form.lyrService().tabTriageActions().chkSPR().setValue(null);
		form.lyrService().tabTriageActions().chkOtherHCP().setValue(null);
		clearOtherHcpGrid();
		
		form.lyrService().tabTriageActions().chkManualOPA().setValue(null);
		
		form.lyrService().tabTriageActions().chkManualLinkedOPA().setValue(null);
		form.lyrService().tabTriageActions().chkCBLinkedOPA().setValue(null);
		
		form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().setValue(null);
		
		form.lyrService().tabTriageActions().chkManualDirectToList().setValue(null);
		
		form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().setValue(null);
		
		form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().setValue(null);
		
		form.lyrService().tabTriageActions().chkChangeCABOPACB().setValue(null);
		
		//WDEV-23576
		form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().setValue(null);
		form.lyrService().tabTriageActions().chkCABOPAandDirectToList().setValue(null);
		
		form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().setValue(null);
		
		form.lyrService().tabTriageActions().cmbDAForCBReferral().clear();
		form.lyrService().tabTriageActions().cmbDAForManualReferral().clear();
	}

	private void populateServiceAndFunctionByHcp()
	{
		searchHcp(false);
		
		form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().setValue(form.getLocalContext().getSelectedHCP());
		form.lyrService().tabServiceandFunctionsbyHCP().ccHcpServiceFuction().initialise(form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().getValue());
		
		updateControlsState();
	}

	private void populateActivityAndFunction()
	{
		clearServiceActivityAndFunction();
		
		ServiceLiteVo service = form.getLocalContext().getSelectedServiceOnActAndFunctTab();
		
		if(service == null)
			return;
		
		form.lyrService().tabActivityandFunctions().qmbService().newRow(service, service.getServiceName());
		form.lyrService().tabActivityandFunctions().qmbService().setValue(service);
		
		populateServiceFunctionsGrid();
		populateServiceActivityGrid();
	}

	private void clearServiceActivityAndFunction()
	{
		form.lyrService().tabActivityandFunctions().qmbService().clear();
		form.lyrService().tabActivityandFunctions().qmbAppointmentType().clear();
		form.lyrService().tabActivityandFunctions().txtFunction().setValue(null);
		
		form.lyrService().tabActivityandFunctions().grdAppointmentTypes().getRows().clear();
		form.lyrService().tabActivityandFunctions().grdServiceFunction().getRows().clear();
		form.lyrService().tabActivityandFunctions().ccFunctionCodeMappings().clear();
	}

	private void populateServiceDetails(ServiceVo service)
	{
		clearServiceDetailsScreen();
		
		if(service == null)
			return;
		
		form.lyrService().tabServiceDetails().txtService().setValue(service.getServiceName());
		form.lyrService().tabServiceDetails().txtDescription().setValue(service.getServiceDescription());
		form.lyrService().tabServiceDetails().cmbCat().setValue(service.getServiceCategory());
		form.lyrService().tabServiceDetails().cmbSpec().setValue(service.getSpecialty());
		form.lyrService().tabServiceDetails().chkActiveOnly().setValue(Boolean.TRUE.equals(service.getIsActive()));
		form.lyrService().tabServiceDetails().chkCanBeScheduled().setValue(Boolean.TRUE.equals(service.getCanBeScheduled()));
		form.lyrService().tabServiceDetails().chkPreAssessmentCompletionExempt().setValue(Boolean.TRUE.equals(service.getIsPreAssessmentCompletionExempt()));
		form.lyrService().tabServiceDetails().chkRTT().setValue(Boolean.TRUE.equals(service.getIsSubjectToRTTClock()));
		form.lyrService().tabServiceDetails().chkMaternityIndicator().setValue(Boolean.TRUE.equals(service.getMaternityIndicator()));
		form.lyrService().tabServiceDetails().chkCanReferIntoTheService().setValue(Boolean.TRUE.equals(service.getCanReferIntoTheService()));
		form.lyrService().tabServiceDetails().chkDirectSelfReferralsAccepted().setValue(Boolean.TRUE.equals(service.getDirectSelfReferralsAccepted()));
		
		form.lyrService().tabServiceDetails().txtAlternativeCode().setValue(service.getAlternateServiceCode());
		form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().setValue(service.getTurnaroundMeasure());
		form.lyrService().tabServiceDetails().intExpectedTurnAround().setValue(service.getExpectedTurnaround());
		
		form.lyrService().tabServiceDetails().ccServiceCodeMappings().setValue(service.getTaxonomyMap());
	}

	private void clearServiceDetailsScreen()
	{
		form.lyrService().tabServiceDetails().txtService().setValue(null);
		form.lyrService().tabServiceDetails().txtDescription().setValue(null);
		form.lyrService().tabServiceDetails().cmbCat().setValue(null);
		form.lyrService().tabServiceDetails().cmbSpec().setValue(null);
		form.lyrService().tabServiceDetails().chkActiveOnly().setValue(null);
		form.lyrService().tabServiceDetails().chkCanBeScheduled().setValue(null);
		form.lyrService().tabServiceDetails().chkPreAssessmentCompletionExempt().setValue(null);
		form.lyrService().tabServiceDetails().chkRTT().setValue(null);
		form.lyrService().tabServiceDetails().chkMaternityIndicator().setValue(null);
		form.lyrService().tabServiceDetails().chkCanReferIntoTheService().setValue(null);
		form.lyrService().tabServiceDetails().chkDirectSelfReferralsAccepted().setValue(null);
		
		form.lyrService().tabServiceDetails().txtAlternativeCode().setValue(null);
		form.lyrService().tabServiceDetails().cmbTurnAroundMeasure().setValue(null);
		form.lyrService().tabServiceDetails().intExpectedTurnAround().setValue(null);
		
		form.lyrService().tabServiceDetails().ccServiceCodeMappings().clear();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onBtnAddFunctionClick() throws PresentationLogicException
	{
		addServiceFunction();
		updateControlsState();
	}

	private void addServiceFunction()
	{
		if(form.lyrService().tabActivityandFunctions().txtFunction().getValue() == null || form.lyrService().tabActivityandFunctions().txtFunction().getValue().trim().length() == 0)
			return;
		
		if(form.lyrService().tabActivityandFunctions().qmbService().getValue() == null)
			return;
		
		form.lyrService().tabActivityandFunctions().grdServiceFunction().setValue(null);
		
		ServiceFunctionForServiceConfigurationVo serviceFunction = new ServiceFunctionForServiceConfigurationVo();
		serviceFunction.setService(form.lyrService().tabActivityandFunctions().qmbService().getValue());
		
		ServiceFunction function = createAndSaveServiceFunctionInstance();
		
		if(function == null)
			return;
		
		if(functionWasAlreadyAdded(function))
		{
			form.lyrService().tabActivityandFunctions().txtFunction().setValue(null);
			return;
		}
		
		serviceFunction.setFunction(function);
		serviceFunction.setIsActive(true);
		
		addServiceFunctionRow(serviceFunction);
		
		form.lyrService().tabActivityandFunctions().txtFunction().setValue(null);
	}

	private boolean functionWasAlreadyAdded(ServiceFunction function)
	{
		if(function == null)
			return false;
		
		for(int i=0; i<form.lyrService().tabActivityandFunctions().grdServiceFunction().getRows().size(); i++)
		{
			ServiceFunctionForServiceConfigurationVo rowValue = form.lyrService().tabActivityandFunctions().grdServiceFunction().getRows().get(i).getValue();
			
			if(rowValue != null && function.equals(rowValue.getFunction()))
			{
				form.lyrService().tabActivityandFunctions().grdServiceFunction().setValue(rowValue);
				return true;
			}
		}
		
		return false;
	}

	private ServiceFunction createAndSaveServiceFunctionInstance()
	{
		ServiceFunction function = domain.getServiceFunctionInstance(form.lyrService().tabActivityandFunctions().txtFunction().getValue());
		
		if(function != null)
			return function;
		
		try
		{
			function  = domain.saveServiceFunctionInstance(form.lyrService().tabActivityandFunctions().txtFunction().getValue());
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return null;
		}
		
		return function;
	}
	
	private void addServiceActivity()
	{
		if(form.lyrService().tabActivityandFunctions().qmbAppointmentType().getValue() == null)
			return;
		
		if(form.lyrService().tabActivityandFunctions().qmbService().getValue() == null)
			return;
		
		if(isActivityAlreadyAdded(form.lyrService().tabActivityandFunctions().qmbAppointmentType().getValue()))
		{
			form.lyrService().tabActivityandFunctions().qmbAppointmentType().clear();
			return;
		}
		
		ServiceActivityForServiceConfigurationVo serviceActivity = new ServiceActivityForServiceConfigurationVo();
		serviceActivity.setService(form.lyrService().tabActivityandFunctions().qmbService().getValue());
		serviceActivity.setActivity(form.lyrService().tabActivityandFunctions().qmbAppointmentType().getValue());
		serviceActivity.setIsActive(true);
		
		addServiceActivityRow(serviceActivity);
	}

	private boolean isActivityAlreadyAdded(ActivityLiteVo activity)
	{
		if(activity == null)
			return false;
		
		for(int i=0; i<form.lyrService().tabActivityandFunctions().grdAppointmentTypes().getRows().size(); i++)
		{
			 ServiceActivityForServiceConfigurationVo serviceActivity = form.lyrService().tabActivityandFunctions().grdAppointmentTypes().getRows().get(i).getValue();
			
			if(serviceActivity == null)
				continue;
			
			if(serviceActivity.getActivity() != null && serviceActivity.getActivity().equals(activity))
			{
				form.lyrService().tabActivityandFunctions().grdAppointmentTypes().setValue(serviceActivity);
				return true;
			}
		}
		
		return false;
	}

	@Override
	protected void onQmbAppointmentTypeTextSubmited(String value) throws PresentationLogicException
	{
		searchActivities(value);
		updateControlsState();
	}

	private void searchActivities(String value)
	{
		form.lyrService().tabActivityandFunctions().qmbAppointmentType().clear();
		
		if(value == null || value.length() == 0)
			return;
		
		ActivityLiteVoCollection activities = domain.listActivities(value);
		
		if(activities != null)
		{
    		for(int i=0; i<activities.size(); i++)
    		{
    			ActivityLiteVo activity = activities.get(i);
    			
    			if(activity == null)
    				continue;
    			
    			form.lyrService().tabActivityandFunctions().qmbAppointmentType().newRow(activity, activity.getName());
    		}
    		
    		if(activities.size() == 1)
    		{
    			form.lyrService().tabActivityandFunctions().qmbAppointmentType().setValue(activities.get(0));
    		}
    		else
    		{
    			form.lyrService().tabActivityandFunctions().qmbAppointmentType().showOpened();
    		}
		}
	}

	@Override
	protected void onBtnAddAppointmentTypeClick() throws PresentationLogicException
	{
		addServiceActivity();
		updateControlsState();
	}

	@Override
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		searchService(value);
	}

	private void searchService(String value)
	{
		form.lyrService().tabActivityandFunctions().qmbService().clear();
		
		if(value == null)
			return;
		
		ServiceLiteVoCollection services = domain.listServices(value, null, null, null);
		
		if(services == null)
			return;
		
		for(ServiceLiteVo service : services)
		{
			if(service == null)
				continue;
			
			form.lyrService().tabActivityandFunctions().qmbService().newRow(service, service.getServiceName());
		}
		
		if(services.size() == 1)
		{
			form.lyrService().tabActivityandFunctions().qmbService().setValue(services.get(0));
			
			serviceValueChanged();
			updateControlsState();
		}
		else
		{
			form.lyrService().tabActivityandFunctions().qmbService().showOpened();
		}
	}

	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException
	{
		serviceValueChanged();
		updateControlsState();
	}

	private void serviceValueChanged()
	{
		form.getLocalContext().setSelectedServiceOnActAndFunctTab(form.lyrService().tabActivityandFunctions().qmbService().getValue());
		
		populateServiceFunctionsGrid();
		populateServiceActivityGrid();
	}

	private void populateServiceActivityGrid()
	{
		form.lyrService().tabActivityandFunctions().grdAppointmentTypes().getRows().clear();
		
		ServiceActivityForServiceConfigurationVoCollection serviceActivities = domain.listServiceActivitiesByService(form.lyrService().tabActivityandFunctions().qmbService().getValue());
		
		if(serviceActivities == null)
			return;
		
		for(ServiceActivityForServiceConfigurationVo serviceActivity : serviceActivities)
		{
			addServiceActivityRow(serviceActivity);
		}
	}

	private void addServiceActivityRow(ServiceActivityForServiceConfigurationVo serviceActivity)
	{
		if(serviceActivity == null)
			return;
		
		grdAppointmentTypesRow newrow = form.lyrService().tabActivityandFunctions().grdAppointmentTypes().getRows().newRow();
		newrow.setColApptType(serviceActivity.getActivity() != null ? serviceActivity.getActivity().getName() : null);
		newrow.setColActive(Boolean.TRUE.equals(serviceActivity.getIsActive()));
		newrow.setColFlexible(Boolean.TRUE.equals(serviceActivity.getIsFlexible()));
		
		newrow.setValue(serviceActivity);
	}

	private void populateServiceFunctionsGrid()
	{
		form.lyrService().tabActivityandFunctions().grdServiceFunction().getRows().clear();
		
		ServiceFunctionForServiceConfigurationVoCollection servicesFunctions = domain.listServiceFunctionByService(form.lyrService().tabActivityandFunctions().qmbService().getValue(), null);
		
		if(servicesFunctions == null)
			return;
		
		for(ServiceFunctionForServiceConfigurationVo serviceFunction : servicesFunctions)
		{
			addServiceFunctionRow(serviceFunction);
		}
	}

	private void addServiceFunctionRow(ServiceFunctionForServiceConfigurationVo serviceFunction)
	{
		if(serviceFunction == null)
			return;
		
		grdServiceFunctionRow newrow = form.lyrService().tabActivityandFunctions().grdServiceFunction().getRows().newRow();
		newrow.setColFunction(serviceFunction.getFunction().getText());
		newrow.setColActive(Boolean.TRUE.equals(serviceFunction.getIsActive()));
		
		newrow.setValue(serviceFunction);
	}

	@Override
	protected void onGrdServiceFunctionSelectionChanged() throws PresentationLogicException
	{
		if(form.getLocalContext().getSelectedServiceFunction() != null)
		{
			form.getLocalContext().getSelectedServiceFunction().setTaxonomyMap(form.lyrService().tabActivityandFunctions().ccFunctionCodeMappings().getValueNoWarnings());
		}
		
		form.getLocalContext().setSelectedServiceFunction(form.lyrService().tabActivityandFunctions().grdServiceFunction().getValue());
		form.lyrService().tabActivityandFunctions().ccFunctionCodeMappings().setValue(form.getLocalContext().getSelectedServiceFunction().getTaxonomyMap());
		
		updateControlsState();
	}

	@Override
	protected void onGrdServiceFunctionGridCheckBoxClicked(int column, grdServiceFunctionRow row, boolean isChecked) throws PresentationLogicException
	{
		if(row != null && row.getValue() instanceof ServiceFunctionForServiceConfigurationVo)
		{
			row.getValue().setIsActive(isChecked);
		}
	}

	@Override
	protected void onQmbAppointmentTypeValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onCcFunctionCodeMappingsValueChanged() throws PresentationLogicException
	{
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.lyrService().tabActivityandFunctions().btnRemoveServiceFunctionTaxonomy().setEnabled(form.lyrService().tabActivityandFunctions().grdServiceFunction().getValue() != null && form.lyrService().tabActivityandFunctions().ccFunctionCodeMappings().isTaxonomyRowSelected());
		}
	}

	@Override
	protected void onGrdAppointmentTypesSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onGrdAppointmentTypesGridCheckBoxClicked(int column, grdAppointmentTypesRow row, boolean isChecked) throws PresentationLogicException
	{
		if(row != null && row.getValue() instanceof ServiceActivityForServiceConfigurationVo)
		{
			if(column == COL_APPOINTMENTTYPE_ACTIVE)
			{
				row.getValue().setIsActive(isChecked);
			}
			else if(column == COL_APPOINTMENTTYPE_FLEXIBLE)
			{
				row.getValue().setIsFlexible(isChecked);
			}
		}
	}

	@Override
	protected void onBtnRemoveServiceFunctionTaxonomyClick() throws PresentationLogicException
	{
		form.lyrService().tabActivityandFunctions().ccFunctionCodeMappings().removeTaxonomy();
	}

	@Override
	protected void onBtnAddServiceFunctionTaxonomyClick() throws PresentationLogicException
	{
		form.lyrService().tabActivityandFunctions().ccFunctionCodeMappings().addTaxonomy();
	}

	@Override
	protected void onGrdHcpSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedHCP(form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().getValue());
		form.lyrService().tabServiceandFunctionsbyHCP().ccHcpServiceFuction().initialise(form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().getValue());
		
		updateControlsState();
	}

	@Override
	protected void onImbHcpSearchClick() throws PresentationLogicException
	{
		searchHcp(true);
		updateControlsState();
	}

	private void searchHcp(boolean isFromButton)
	{
		if (isHcpSearchCriteriaValid())
		{
			HcpLiteVoCollection hcps = domain.listHCP(form.lyrService().tabServiceandFunctionsbyHCP().txtHcpSurname().getValue(), form.lyrService().tabServiceandFunctionsbyHCP().txtHcpForename().getValue(), form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().getValue(), form.lyrService().tabServiceandFunctionsbyHCP().chkActiveHcp().getValue());
			populateHcpGrid(hcps);
			
			if(isFromButton)
			{
				if(form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().getRows().size() == 0)
					engine.showMessage("No records found.");
			}
		}
	}

	private void populateHcpGrid(HcpLiteVoCollection hcps)
	{
		form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().getRows().clear();
		form.lyrService().tabServiceandFunctionsbyHCP().ccHcpServiceFuction().initialise(null);
		
		if(hcps == null)
			return;
		
		for(HcpLiteVo hcp : hcps)
		{
			addHcpRow(hcp);
		}
	}

	private void addHcpRow(HcpLiteVo hcp)
	{
		if(hcp == null)
			return;
		
		grdHcpRow newRow = form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().getRows().newRow();
		
		newRow.setColName(hcp.getMos() != null ? hcp.getMos().getIMosName() : null);
		newRow.setCellColNameTooltip(newRow.getColName());
		
		newRow.setColHCPType(hcp.getHcpType() != null ? hcp.getHcpType().getText() : null);
		newRow.setCellColHCPTypeTooltip(newRow.getColHCPType());
		
		newRow.setColActive(Boolean.TRUE.equals(hcp.getIsActive()));
		
		newRow.setValue(hcp);
	}

	@Override
	protected void onImbHcpClearClick() throws PresentationLogicException
	{
		clearHcp();
	}

	private void clearHcp()
	{
		form.lyrService().tabServiceandFunctionsbyHCP().txtHcpSurname().setValue(null);
		form.lyrService().tabServiceandFunctionsbyHCP().txtHcpForename().setValue(null);
		form.lyrService().tabServiceandFunctionsbyHCP().cmbHcpType().setValue(null);
		form.lyrService().tabServiceandFunctionsbyHCP().chkActiveHcp().setValue(false);
		
		form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().getRows().clear();
		
		form.lyrService().tabServiceandFunctionsbyHCP().ccHcpServiceFuction().initialise(null);
	}

	@Override
	protected void onlyrServiceTabChanged(LayerBridge tab)
	{
		form.lyrService().tabServiceandFunctionsbyHCP().grdHcp().setValue(null);
		form.lyrService().tabServiceandFunctionsbyHCP().ccHcpServiceFuction().initialise(null);
		
		updateControlsState();
	}

	@Override
	protected void onCmbCatValueChanged() throws PresentationLogicException
	{
		if (ServiceCategory.PATHOLOGY_DISCIPLINE.equals(form.lyrService().tabServiceDetails().cmbCat().getValue()))
		{
			form.lyrService().tabServiceDetails().chkCanBeScheduled().setValue(null);
			form.lyrService().tabServiceDetails().chkMaternityIndicator().setValue(null);
			form.lyrService().tabServiceDetails().chkRTT().setValue(null);
			form.lyrService().tabServiceDetails().chkCanReferIntoTheService().setValue(null);
			form.lyrService().tabServiceDetails().chkDirectSelfReferralsAccepted().setValue(null);
		}
		else if (ServiceCategory.PATHOLOGY_DISCIPLINE.equals(form.lyrService().tabServiceDetails().cmbCat().getValue()))
		{
			form.lyrService().tabServiceDetails().chkMaternityIndicator().setValue(null);
			form.lyrService().tabServiceDetails().chkRTT().setValue(null);
		}
		//WDEV-20751
//		else if (ServiceCategory.CLINICAL.equals(form.lyrService().tabServiceDetails().cmbCat().getValue()))
//		{
//			form.lyrService().tabServiceDetails().cmbSpec().setRequired(true);
//		}
		//WDEV-20751
		
		form.lyrService().tabServiceDetails().chkPreAssessmentCompletionExempt().setValue(null);
		
		updateControlsState();
	}

	@Override
	protected void onBtnEditHcpClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
		if(form.lyrService().tabActivityandFunctions().isVisible())
		{
			if(form.lyrService().tabActivityandFunctions().qmbService().getValue() == null)
				open(false);
		}
		else if(form.lyrService().tabTriageActions().isVisible())
		{
			if(form.lyrService().tabTriageActions().qmbServiceTriage().getValue() == null)
				open(false);
		}
		else if(form.lyrService().tabDiagnostics().isVisible())
		{
			if(form.lyrService().tabDiagnostics().qmbServiceDiagnostic().getValue() == null)
				open(false);
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.AdminNamespace.ServiceConfigurationHCPMenu.EDIT:
				form.setMode(FormMode.EDIT);
			break;
		}
	}

	@Override
	protected void onQmbServiceTriageValueChanged() throws PresentationLogicException
	{
		serviceTriageValueChanged();
		updateControlsState();
	}

	private void serviceTriageValueChanged()
	{
		form.getLocalContext().setSelectedServiceOnTriageActionTab(form.lyrService().tabTriageActions().qmbServiceTriage().getValue());
		
		form.getLocalContext().setServiceTriageAction(domain.getServiceTriageAction(form.lyrService().tabTriageActions().qmbServiceTriage().getValue()));
		
		populateServiceTriageActionFromData(form.getLocalContext().getServiceTriageAction());
	}

	@Override
	protected void onQmbServiceTriageTextSubmited(String value) throws PresentationLogicException
	{
		searchServiceTriage(value);
	}

	private void searchServiceTriage(String value)
	{
		form.lyrService().tabTriageActions().qmbServiceTriage().clear();
		
		if(value == null)
			return;
		
		ServiceLiteVoCollection services = domain.listServices(value, null, null, null);
		
		if(services == null)
			return;
		
		for(ServiceLiteVo service : services)
		{
			if(service == null)
				continue;
			
			form.lyrService().tabTriageActions().qmbServiceTriage().newRow(service, service.getServiceName());
		}
		
		if(services.size() == 1)
		{
			form.lyrService().tabTriageActions().qmbServiceTriage().setValue(services.get(0));
			
			serviceTriageValueChanged();
			updateControlsState();
		}
		else
		{
			form.lyrService().tabTriageActions().qmbServiceTriage().showOpened();
		}
	}

	private void clearOPAToSee()
	{
		form.lyrService().tabTriageActions().chkConsultant().setValue(null);
		form.lyrService().tabTriageActions().chkAnyDoctorToSee().setValue(null);
		form.lyrService().tabTriageActions().chkOtherHCP().setValue(null);
		clearOtherHcpGrid();
		form.lyrService().tabTriageActions().chkAssociateSpecialist().setValue(null);
		form.lyrService().tabTriageActions().chkSPR().setValue(null);
	}

	private boolean thereIsNoOPAChecked()
	{
		if(!form.lyrService().tabTriageActions().chkManualOPA().getValue() && !form.lyrService().tabTriageActions().chkManualLinkedOPA().getValue() && !form.lyrService().tabTriageActions().chkCBLinkedOPA().getValue() && !form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().getValue() && !form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().getValue() && !form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().getValue() && !form.lyrService().tabTriageActions().chkChangeCABOPACB().getValue() && !form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().getValue()) //WDEV-23576
			return true;
		
		return false;
	}

	@Override
	protected void onChkManualOPAValueChanged() throws PresentationLogicException
	{	
		if(thereIsNoOPAChecked())
		{
			clearOPAToSee();
		}
		populateDefaultManualActionCombo(form.lyrService().tabTriageActions().chkManualLinkedOPA().getValue(), 
				form.lyrService().tabTriageActions().chkManualOPA().getValue(),
				form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkManualDirectToList().getValue(),
				form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().getValue());
		
		updateControlsState();
	}

	@Override
	protected void onChkManualOPAAndDiagnosticRequiredValueChanged() throws PresentationLogicException
	{
		if(thereIsNoOPAChecked())
		{
			clearOPAToSee();
		}
		populateDefaultManualActionCombo(form.lyrService().tabTriageActions().chkManualLinkedOPA().getValue(), 
				form.lyrService().tabTriageActions().chkManualOPA().getValue(),
				form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkManualDirectToList().getValue(),
				form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().getValue());
		
		updateControlsState();
	}

	@Override
	protected void onChkManualDirectToListAndOPAValueChanged() throws PresentationLogicException
	{
		if(thereIsNoOPAChecked())
		{
			clearOPAToSee();
		}
		populateDefaultManualActionCombo(form.lyrService().tabTriageActions().chkManualLinkedOPA().getValue(), 
				form.lyrService().tabTriageActions().chkManualOPA().getValue(),
				form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkManualDirectToList().getValue(),
				form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().getValue());
		updateControlsState();
	}

	@Override
	protected void onQmbServiceDiagnosticValueChanged() throws PresentationLogicException
	{
		serviceDiagnosticsChanged();
		updateControlsState();
	}

	private void serviceDiagnosticsChanged()
	{
		form.getLocalContext().setSelectedServiceOnDiagnosticsTab(form.lyrService().tabDiagnostics().qmbServiceDiagnostic().getValue());
		
		form.getLocalContext().setServiceDiagnostics(domain.getServiceDiagnostics(form.lyrService().tabDiagnostics().qmbServiceDiagnostic().getValue()));
		
		populateDiagnosticsGrid(form.getLocalContext().getServiceDiagnostics());
	}

	@Override
	protected void onQmbServiceDiagnosticTextSubmited(String value) throws PresentationLogicException
	{
		searchServiceDiagnostic(value);
	}

	private void searchServiceDiagnostic(String value)
	{
		form.lyrService().tabDiagnostics().qmbServiceDiagnostic().clear();
		
		if(value == null)
			return;
		
		ServiceLiteVoCollection services = domain.listServices(value, null, null, null);
		
		if(services == null)
			return;
		
		for(ServiceLiteVo service : services)
		{
			if(service == null)
				continue;
			
			form.lyrService().tabDiagnostics().qmbServiceDiagnostic().newRow(service, service.getServiceName());
		}
		
		if(services.size() == 1)
		{
			form.lyrService().tabDiagnostics().qmbServiceDiagnostic().setValue(services.get(0));
			
			serviceDiagnosticsChanged();
			updateControlsState();
		}
		else
		{
			form.lyrService().tabDiagnostics().qmbServiceDiagnostic().showOpened();
		}
	}

	@Override
	protected void onChkCanReferIntoTheServiceValueChanged() throws PresentationLogicException
	{
		if(!form.lyrService().tabServiceDetails().chkCanReferIntoTheService().getValue())
		{					
			if (isServiceLinkedToContract(form.getLocalContext().getSelectedService())) //WDEV-22945
			 {
					engine.showMessage(" This service is associated to at least one active Referral contract.\nPlease inactivate all contracts configured for referring into the service and try again.", "Invalid Action", MessageButtons.OK, MessageIcon.INFORMATION);
					form.lyrService().tabServiceDetails().chkCanReferIntoTheService().setValue(true);
					return;
			 }
							
			form.lyrService().tabServiceDetails().chkDirectSelfReferralsAccepted().setValue(null);
		}	
		
		updateControlsState();
	}
	
	//WDEV-22945
	private boolean isServiceLinkedToContract(ServiceVo service)
	{
		if (service == null || service.getID_Service() == null)
			return false;
		return  Boolean.TRUE.equals(service.getCanReferIntoTheService()) && Boolean.TRUE.equals(domain.isServiceLinkedToReferralContract(service));
	}

	@Override
	protected void onChkOtherHCPValueChanged() throws PresentationLogicException
	{
		clearOtherHcpGrid();
		
		updateControlsState();
	}

	private void clearOtherHcpGrid()
	{
		for(int i=0; i<form.lyrService().tabTriageActions().grdOtherHCPValues().getRows().size(); i++)
		{
			form.lyrService().tabTriageActions().grdOtherHCPValues().getRows().get(i).setColSelect(false);
		}
	}

	@Override
	protected void onChkCBLinkedOPAAndDiagnosticValueChanged() throws PresentationLogicException
	{
		if(thereIsNoOPAChecked())
		{
			clearOPAToSee();
		}
		
		populateDefaultCBActionCombo(form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPA().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPACB().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().getValue(),
				form.lyrService().tabTriageActions().chkCABOPAandDirectToList().getValue() ); //WDEV-23576
		
		updateControlsState();
	}

	@Override
	protected void onChkCBLinkedOPAValueChanged() throws PresentationLogicException
	{
		if(thereIsNoOPAChecked())
		{
			clearOPAToSee();
		}
		
		populateDefaultCBActionCombo(form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPA().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPACB().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().getValue(),
				form.lyrService().tabTriageActions().chkCABOPAandDirectToList().getValue() ); //WDEV-23576 
		
		updateControlsState();
	}

	@Override
	protected void onChkManualLinkedOPAValueChanged() throws PresentationLogicException
	{
		if(thereIsNoOPAChecked())
		{
			clearOPAToSee();
		}
		populateDefaultManualActionCombo(form.lyrService().tabTriageActions().chkManualLinkedOPA().getValue(), 
				form.lyrService().tabTriageActions().chkManualOPA().getValue(),
				form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkManualDirectToList().getValue(),
				form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().getValue());
		
		updateControlsState();
	}
	

	//WDEV-20573
	private void populateActiveDiagnosticsGrid()
	{
		form.lyrService().tabDiagnostics().grdDiagnostics().getRows().clear();
		
		DiagnosticCollection diagnostics = domain.listDiagnostics();
		
		if(diagnostics == null)
			return;
		
		for(int i=0; i<diagnostics.size(); i++)
		{
			if(diagnostics.get(i) == null)
				continue;
				
			if(diagnostics.get(i).isActive())
			{
				grdDiagnosticsRow newRow = form.lyrService().tabDiagnostics().grdDiagnostics().getRows().newRow();
				newRow.setColDiagnostic(diagnostics.get(i).getText());
				newRow.setValue(diagnostics.get(i));
			}
		}		
	} //WDEV-20573

	@Override
	protected void onChkManualDirectToListValueChanged() throws PresentationLogicException 
	{
		
		populateDefaultManualActionCombo(form.lyrService().tabTriageActions().chkManualLinkedOPA().getValue(), 
				form.lyrService().tabTriageActions().chkManualOPA().getValue(),
				form.lyrService().tabTriageActions().chkManualOPAAndLinkedDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkManualDirectToList().getValue(),
				form.lyrService().tabTriageActions().chkManualDirectToListAndOPA().getValue());
	}

	@Override
	protected void onChkCBLinkedDiagnosticValueChanged()throws PresentationLogicException
	{
		populateDefaultCBActionCombo(form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPA().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPACB().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().getValue(),
				form.lyrService().tabTriageActions().chkCABOPAandDirectToList().getValue() ); //WDEV-23576
	}

	@Override
	protected void onChkChangeCABOPACBValueChanged() throws PresentationLogicException
	{
		if(thereIsNoOPAChecked())
		{
			clearOPAToSee();
		}
		
		populateDefaultCBActionCombo(form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPA().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPACB().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().getValue(),
				form.lyrService().tabTriageActions().chkCABOPAandDirectToList().getValue() ); //WDEV-23576
		
		updateControlsState();
	}

	//WDEV-23576
	@Override
	protected void onChkCABOPAandDirectToListValueChanged() throws PresentationLogicException
	{
		if(thereIsNoOPAChecked())
		{
			clearOPAToSee();
		}
		
		populateDefaultCBActionCombo(form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPA().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPACB().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().getValue(),
				form.lyrService().tabTriageActions().chkCABOPAandDirectToList().getValue() ); //WDEV-23576
		
		updateControlsState();
	}

	//WDEV-23576
	@Override
	protected void onChkChangeCABOPAandDirectToListValueChanged() throws PresentationLogicException
	{
		if(thereIsNoOPAChecked())
		{
			clearOPAToSee();
		}
		
		populateDefaultCBActionCombo(form.lyrService().tabTriageActions().chkCBLinkedDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPAAndDiagnostic().getValue(),
				form.lyrService().tabTriageActions().chkCBLinkedOPA().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPACB().getValue(),
				form.lyrService().tabTriageActions().chkChangeCABOPAandDirectToList().getValue(),
				form.lyrService().tabTriageActions().chkCABOPAandDirectToList().getValue() ); //WDEV-23576
		
		updateControlsState();
	}
}
