//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.admin.forms.communicationchannelsconfiguration;

import ims.admin.forms.communicationchannelsconfiguration.GenForm.grdChannelTypeRow;
import ims.admin.forms.communicationchannelsconfiguration.GenForm.grdChannelTypeRowCollection;
import ims.core.vo.CommChannelConfigVo;
import ims.core.vo.TelecomTypeVo;
import ims.core.vo.TelecomTypeVoCollection;
import ims.core.vo.TelecomUsageTypeVo;
import ims.core.vo.TelecomUsageTypeVoCollection;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.ChannelTypeCollection;
import ims.core.vo.lookups.PDSChannelUsage;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;
	
	private static final Integer COL_USAGE = 1;
	private static final Integer COL_DEFAULT = 2;
	private static final Integer COL_CAPTION = 3;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		open();
		updateControlsStatus();
	}

	private void updateControlsStatus()
	{
		form.btnEdit().setVisible(form.getMode().equals(FormMode.VIEW));
		
		form.getContextMenus().Admin.getCommunicationChannelsConfigurationADD_COM_CHANNELItem().setVisible(form.dyngrdComTypeUsage().getValue() != null && form.dyngrdComTypeUsage().getValue() instanceof ims.core.vo.lookups.PDSChannelUsage && FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().Admin.getCommunicationChannelsConfigurationREM_CHANNELItem().setVisible(form.dyngrdComTypeUsage().getValue() != null && form.dyngrdComTypeUsage().getValue() instanceof ims.core.vo.lookups.ChannelType && FormMode.EDIT.equals(form.getMode()));
		form.dyngrdComTypeUsage().setReadOnly(form.getMode().equals(FormMode.VIEW));
	}

	private void open()
	{
		form.setMode(FormMode.VIEW);
		
		clearScreen();
		CommChannelConfigVo config = domain.getCommChannelConfig();
		
		populateScreenFromData(config);
		
		updateControlsStatus();
	}

	private void populateScreenFromData(CommChannelConfigVo config)
	{
		form.getLocalContext().setCommChannelConfig(config);
		
		ims.core.vo.lookups.ChannelTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getChannelType(this.domain.getLookupService());
		for(int i = 0; i < lookupCollection.size(); i++)
		{
			TelecomTypeVo tt = null;
			
			if(config != null)
			{
	    		for(TelecomTypeVo t : config.getTelecomTypes())
	    		{
	    			if(lookupCollection.get(i).equals(t.getChannelType()))
	    			{
	    				tt = t;
	    				break;
	    			}
	    		}
			}
			
			if(tt == null)
			{
    			tt = new TelecomTypeVo();
    			tt.setChannelType(lookupCollection.get(i));
			}
			
			addRow(tt);
		}			
		
		ims.core.vo.lookups.PDSChannelUsageCollection lookupCollectionUsage = ims.core.vo.lookups.LookupHelper.getPDSChannelUsage(this.domain.getLookupService());
		for(int i = 0; i < lookupCollectionUsage.size(); i++)
		{
			TelecomUsageTypeVo mm = null;
			
			if(config != null)
			{
				for(TelecomUsageTypeVo m : config.getMappings())
	    		{
	    			if(lookupCollectionUsage.get(i).equals(m.getUsage()))
	    			{
	    				mm = m;
	    				break;
	    			}
	    		}
			}
			
			if(mm == null)
			{
				mm = new TelecomUsageTypeVo();
    			mm.setUsage(lookupCollectionUsage.get(i));
			}
		
			addUsageRow(mm);
		}
		
	}

	private void addRow(TelecomTypeVo tt)
	{
		grdChannelTypeRow row = form.grdChannelType().getRows().newRow();
		
		row.setcolType(tt.getChannelType().getText());
		row.setcolVisibleDemographics(tt.getVisibleOnDemographicsIsNotNull() ? tt.getVisibleOnDemographics() : false);
		row.setcolVisibleStaffGP(tt.getVisibleOnStaffGpIsNotNull() ? tt.getVisibleOnStaffGp() : false);
		
		row.setValue(tt);
	}
	
	private void addUsageRow(TelecomUsageTypeVo usage)
	{
		
		DynamicGridRow row = form.dyngrdComTypeUsage().getRows().newRow();

		DynamicGridCell channelUsage = row.getCells().newCell(getColumn(COL_USAGE), DynamicCellType.STRING);
		channelUsage.setValue(usage.getUsage().getText());
		channelUsage.setReadOnly(true);
		row.setValue(usage.getUsage());
		
		ChannelTypeCollection channels = usage.getChannelTypes();
		
		if (channels != null && channels.size() > 0)
		{
    		for(int i = 0; i < channels.size(); i++)
    		{
    			DynamicGridRow rowChild = row.getRows().newRow();
    			
    			DynamicGridCell channelUsageCel = rowChild.getCells().newCell(getColumn(COL_USAGE), DynamicCellType.ENUMERATION);
    			channelUsageCel.setReadOnly(true);
    			
    			ChannelTypeCollection allContactTypes = null;
    			grdChannelTypeRowCollection rows = form.grdChannelType().getRows();
    			
    			if(rows != null)
    				allContactTypes = new ChannelTypeCollection();
    			
    			for(int j = 0; j < rows.size(); j++)
    			{
    				if (Boolean.TRUE.equals(form.grdChannelType().getRows().get(j).getcolVisibleDemographics()))
    					allContactTypes.add(form.grdChannelType().getRows().get(j).getValue().getChannelType());
    			}
    			
    			for(int j = 0; j < allContactTypes.size(); j++)
    			{
    				channelUsageCel.getItems().newItem(allContactTypes.get(j));
    			}
    			
    			channelUsageCel.setValue(channels.get(i));
    			rowChild.setExpandedImage(form.getImages().Core.BlueSquare);
    			rowChild.setCollapsedImage(form.getImages().Core.BlueSquare);
    			rowChild.setValue(channels.get(i));
    			
    			DynamicGridCell channelDefaultCel = rowChild.getCells().newCell(getColumn(COL_DEFAULT), DynamicCellType.BOOL);
    	
    			if(usage.getDefaultChannelType() != null && usage.getDefaultChannelType().equals(channels.get(i)))
    				channelDefaultCel.setValue(true);
    			
    		}
    		row.setExpanded(true);
		}
	}
	
	public void initializeGrid()
	{
		form.dyngrdComTypeUsage().clear();
		form.dyngrdComTypeUsage().setSelectable(true);
		
		DynamicGridColumn column = form.dyngrdComTypeUsage().getColumns().newColumn("Usage");
		column.setIdentifier(COL_USAGE);
		column.setWidth(250);
			
		column = form.dyngrdComTypeUsage().getColumns().newColumn("Default");
		column.setIdentifier(COL_DEFAULT);
		column.setAlignment(Alignment.CENTER);
		column.setWidth(50);
		
		column = form.dyngrdComTypeUsage().getColumns().newColumn("");
		column.setIdentifier(COL_CAPTION);
		column.setWidth(-1);
	}

	private void clearScreen()
	{
		form.grdChannelType().getRows().clear();
		form.dyngrdComTypeUsage().getRows().clear();
	}

	private void initialize()
	{
		initializeGrid();
	}

	@Override
	protected void onGrdChannelTypeSelectionChanged() throws PresentationLogicException
	{	
		updateControlsStatus();
		
		form.grdChannelType().setValue(null);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if(save())
			open();
	}

	private boolean save()
	{
		if(!validateData())
			return false;
		
		CommChannelConfigVo config = populateDataFromScreen(form.getLocalContext().getCommChannelConfig()) ;
		
		String[] errors = config.validate();
		
		if (errors != null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		if (config.getID_CommChannelsConfig() == null && domain.getCommChannelConfig() != null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		try
		{
			form.getLocalContext().setCommChannelConfig(domain.saveCommChannelConfig(config));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		
		return true;
	}

	private boolean validateData()
	{
		/*
		java.util.ArrayList<String> errors = new ArrayList<String>();
		
		if (errors.size() > 0)
		{		
			engine.showErrors(errors.toArray(new String[errors.size()]));			
			return false;
		}
		*/

		return true;
	}

	private CommChannelConfigVo populateDataFromScreen(CommChannelConfigVo cc)
	{
		TelecomTypeVo tt = null;
		TelecomUsageTypeVo mm = null;
		
		if (cc == null)
			cc = new CommChannelConfigVo();
		
			cc.setTelecomTypes(new TelecomTypeVoCollection());
		
			for(int i = 0; i < form.grdChannelType().getRows().size(); i++)
			{
				tt = new TelecomTypeVo();
				grdChannelTypeRow row = form.grdChannelType().getRows().get(i);
				tt.setChannelType(row.getValue().getChannelType());
				tt.setVisibleOnDemographics(row.getcolVisibleDemographics());
				tt.setVisibleOnStaffGp(row.getcolVisibleStaffGP());
				cc.getTelecomTypes().add(tt);
			}
			
			
			cc.setMappings(new TelecomUsageTypeVoCollection());
			
			for(int i = 0; i < form.dyngrdComTypeUsage().getRows().size(); i++)
			{
				mm = new TelecomUsageTypeVo();
				DynamicGridRow dynamicGridRow = form.dyngrdComTypeUsage().getRows().get(i);
				DynamicGridRowCollection rows = dynamicGridRow.getRows();
				 
				mm.setUsage((PDSChannelUsage)dynamicGridRow.getValue());
				
				 if(rows != null && rows.size() > 0)
				 {
					 int channels = rows.size();
				
					 mm.setChannelTypes(new ChannelTypeCollection());
					 for (int j = 0 ; j < channels; j++)
					 {
						 DynamicGridColumn mainColUsage = form.dyngrdComTypeUsage().getColumns().getByIdentifier(COL_USAGE);
						 DynamicGridCell dynamicGridCellUsage = rows.get(j).getCells().get(mainColUsage);
						 
						 mm.getChannelTypes().add((ChannelType)dynamicGridCellUsage.getValue());
						 
						 DynamicGridColumn mainColDef = form.dyngrdComTypeUsage().getColumns().getByIdentifier(COL_DEFAULT);
						 DynamicGridCell dynamicGridCellDef = rows.get(j).getCells().get(mainColDef);
						 
						 if(Boolean.TRUE.equals(dynamicGridCellDef.getValue()))
							 mm.setDefaultChannelType((ChannelType) dynamicGridCellUsage.getValue());
					 }
				 }
				 cc.getMappings().add(mm);
			}
		
		return cc;
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		updateControlsStatus();
	}
	
	private void addChannel()
	{
		DynamicGridRow parent = form.dyngrdComTypeUsage().getSelectedRow();
		if (parent.getValue() instanceof ChannelType)
			parent = parent.getParent();
		
		if(remainingChannelsType(parent) == 0)
		{
			engine.showMessage("No Channel Type available.", "Warning", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}
		
		DynamicGridRow newRow = addContactTypeToGrid(parent);
		newRow.setValue(new ChannelType());
		
		form.dyngrdComTypeUsage().setSelectedRow(newRow);
		
		form.getLocalContext().setCurrentEditUsage(getUsageParent(parent));
		form.getLocalContext().getCurrentEditUsage().setExpanded(true,true);
		
		rebindAllGridComboBoxes(parent);
		form.dyngrdComTypeUsage().setValue(null);
		updateControlsStatus();
	}
	
	private DynamicGridRow addContactTypeToGrid(DynamicGridRow parent)
	{
		if (parent == null)
			throw new RuntimeException("Logic error - non null parameters expected");
		DynamicGridColumn mainCol = form.dyngrdComTypeUsage().getColumns().getByIdentifier(COL_USAGE);
		DynamicGridColumn mainColDefault = form.dyngrdComTypeUsage().getColumns().getByIdentifier(COL_DEFAULT);
		DynamicGridRow newRow = parent.getRows().newRow();
		DynamicGridCell newCell = newRow.getCells().newCell(mainCol, DynamicCellType.ENUMERATION);
		DynamicGridCell newCellbox = newRow.getCells().newCell(mainColDefault, DynamicCellType.BOOL);
		
		newRow.setExpandedImage(form.getImages().Core.BlueSquare);
		newRow.setCollapsedImage(form.getImages().Core.BlueSquare);
		
		newCell.setAutoPostBack(true);
		return newRow;
	}
	
	private int remainingChannelsType(DynamicGridRow rowCons)
	{
		if (rowCons == null || rowCons.getRows() == null)
			return 0;
		
		ChannelTypeCollection allContactTypes = null;
		grdChannelTypeRowCollection rows = form.grdChannelType().getRows();
		
		if(rows != null)
			allContactTypes = new ChannelTypeCollection();
		
		for(int j = 0; j < rows.size(); j++)
		{
			if (Boolean.TRUE.equals(form.grdChannelType().getRows().get(j).getcolVisibleDemographics()))
				allContactTypes.add(form.grdChannelType().getRows().get(j).getValue().getChannelType());
		}
		
		if (allContactTypes == null || allContactTypes.size() == 0)
			return 0;

		for (int i=0 ; i<rowCons.getRows().size(); i++)
		{
			DynamicGridColumn mainCol = form.dyngrdComTypeUsage().getColumns().getByIdentifier(COL_USAGE);
			DynamicGridCell dynamicGridCell = rowCons.getRows().get(i).getCells().get(mainCol);
			
			if (dynamicGridCell.getValue() instanceof ChannelType)
			{
				allContactTypes.remove((ChannelType) dynamicGridCell.getValue());
			}
		}

		return allContactTypes.size();
	}
	
	private void rebindAllGridComboBoxes(DynamicGridRow rowCons)
	{
		
		if (rowCons == null || rowCons.getRows() == null || rowCons.getRows().size() == 0)
			return;
		
		//ims.core.vo.lookups.ChannelTypeCollection allContactTypes = LookupHelper.getChannelType(domain.getLookupService());
		
		ChannelTypeCollection allContactTypes = null;
		grdChannelTypeRowCollection rows = form.grdChannelType().getRows();
		
		if(rows != null)
			allContactTypes = new ChannelTypeCollection();
		
		for(int j = 0; j < rows.size(); j++)
		{
			if (Boolean.TRUE.equals(form.grdChannelType().getRows().get(j).getcolVisibleDemographics()))
				allContactTypes.add(form.grdChannelType().getRows().get(j).getValue().getChannelType());
		}
		
		
		if (allContactTypes == null || allContactTypes.size() == 0)
			return;	
		
		ChannelTypeCollection usedContactTypes = new ChannelTypeCollection();
	
		for (int i=0 ; i<rowCons.getRows().size(); i++)
		{
			DynamicGridColumn mainCol = form.dyngrdComTypeUsage().getColumns().getByIdentifier(COL_USAGE);
			DynamicGridCell dynamicGridCell = rowCons.getRows().get(i).getCells().get(mainCol);
			
			ChannelType aux = null;
			if (dynamicGridCell.getValue() instanceof ChannelType)
			{
				aux = (ChannelType) dynamicGridCell.getValue();
				usedContactTypes.add(aux);	
			}
			
			dynamicGridCell.getItems().clear();
			if (aux != null)
			{
				dynamicGridCell.getItems().newItem(aux);
				dynamicGridCell.setValue(aux);
			}				
		}
		
		for (int i= allContactTypes.size()-1 ; i>=0 ; i--)
		{
			if(usedContactTypes.indexOf(allContactTypes.get(i))>=0)
			{
				allContactTypes.remove(i);
			}
		}
		
		for (int i=0 ; i<rowCons.getRows().size(); i++)
		{
			DynamicGridColumn mainCol = form.dyngrdComTypeUsage().getColumns().getByIdentifier(COL_USAGE);
			DynamicGridCell dynamicGridCell = rowCons.getRows().get(i).getCells().get(mainCol);
			for (int j = 0 ; j <allContactTypes.size() ; j++)
				dynamicGridCell.getItems().newItem(allContactTypes.get(j));
		}

		DynamicGridRow backup = form.dyngrdComTypeUsage().getSelectedRow();
		if (backup != null)
		{
			form.dyngrdComTypeUsage().setSelectedRow(null);
			form.dyngrdComTypeUsage().setSelectedRow(backup);
		}		
		
	}
	
	private DynamicGridRow getUsageParent(DynamicGridRow row)
	{
		if (row.getParent() != null)
			return getUsageParent(row.getParent());
		return row;
	}
	
	private void delChannel()
	{
		form.getLocalContext().setCurrentEditUsage(getUsageParent(form.dyngrdComTypeUsage().getSelectedRow()));
		form.dyngrdComTypeUsage().getRows().remove(form.dyngrdComTypeUsage().getSelectedRow());
		rebindAllGridComboBoxes(form.getLocalContext().getCurrentEditUsage());
	}
	
	private void selectDefaultChannelType(DynamicGridRow rowCons)
	{
		if (rowCons == null || rowCons.getRows() == null || rowCons.getRows().size() == 0)
			return;
		
		for (int i = 0 ; i < rowCons.getRows().size(); i++)
		{
			DynamicGridColumn colDefault = form.dyngrdComTypeUsage().getColumns().getByIdentifier(COL_DEFAULT);
			DynamicGridCell dynamicGridCell = rowCons.getRows().get(i).getCells().get(colDefault);
			dynamicGridCell.setValue(false);
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.AdminNamespace.CommunicationChannelsConfiguration.ADD_COM_CHANNEL :
				addChannel();
			break;
			
			case GenForm.ContextMenus.AdminNamespace.CommunicationChannelsConfiguration.REM_CHANNEL :
				delChannel();
			break;
			
			default:
		}
	}
	
	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdComTypeUsage().getColumns().getByIdentifier(identifier);
	}

	@Override
	protected void onDyngrdComTypeUsageRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsStatus();
	}

	@Override
	protected void onDyngrdComTypeUsageCellButtonClicked(DynamicGridCell cell)
	{
		
	}

	@Override
	protected void onDyngrdComTypeUsageCellValueChanged(DynamicGridCell cell)
	{
		form.dyngrdComTypeUsage().setValue(null);
		if(Boolean.TRUE.equals(cell.getValue()))
		{
			selectDefaultChannelType(cell.getRow().getParent());
			cell.setValue(true);
		}
		
		if (cell.getRow().getValue() instanceof ChannelType)
		{
			rebindAllGridComboBoxes(cell.getRow().getParent());
			updateControlsStatus();
		}
		
	}

	@Override
	protected void onDyngrdComTypeUsageRowChecked(DynamicGridRow row)
	{
		
	}

	@Override
	protected void onGrdChannelTypeGridCheckBoxClicked(int column, grdChannelTypeRow row, boolean isChecked) throws PresentationLogicException
	{
		form.grdChannelType().setValue(null);
		if (column == 1 && !isChecked)
		{
			removeChannelTypes(row.getValue());
		}
	}

	private void removeChannelTypes(TelecomTypeVo value)
	{
		for (int i = 0; i < form.dyngrdComTypeUsage().getRows().size(); i++)
		{
			 DynamicGridRow dynamicGridRow = form.dyngrdComTypeUsage().getRows().get(i);
			 
			 DynamicGridRowCollection rows = dynamicGridRow.getRows();
			 
			 if (rows != null && rows.size() > 0)
			 {
				 int channels = rows.size();
				 Boolean stop = false;
				 for (int j = 0 ; j < channels; j++)
				 {
					 if (stop)
						 continue;
					 
					 DynamicGridColumn mainCol = form.dyngrdComTypeUsage().getColumns().getByIdentifier(COL_USAGE);
					 DynamicGridCell gridCell = rows.get(j).getCells().get(mainCol);
					 
					 if (gridCell.getValue() instanceof ChannelType && value.getChannelType().equals(gridCell.getValue()))
					 {
						 rows.remove(rows.get(j));
						 stop = true;
					 }
						 
				 }				 
			 }
			 
			 rebindAllGridComboBoxes(dynamicGridRow);
		}
	}

}
