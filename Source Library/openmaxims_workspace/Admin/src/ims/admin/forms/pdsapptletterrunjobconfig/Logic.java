//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5465.13953)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.admin.forms.pdsapptletterrunjobconfig;

import java.util.ArrayList;

import ims.core.vo.PDSApptLetterRunVo;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IDynamicFormDataOperations;



public class Logic extends BaseLogic implements IDynamicFormDataOperations
{
	private static final long serialVersionUID = 1L;

	public void saveData() throws Exception
	{
		PDSApptLetterRunVo record = getData();
		
		String[] errors = record.validate();
		if(errors != null && errors.length > 0)
			throw new Exception("Validation Errors");
		
		domain.save(record);
	}
	
	public PDSApptLetterRunVo getData() 
	{
		PDSApptLetterRunVo record = populateJobData(form.getLocalContext().getSelectedRecord());
		return record;
	
	}

	private PDSApptLetterRunVo populateJobData(PDSApptLetterRunVo selectedRecord)
	{
		if (selectedRecord == null)
			selectedRecord = new PDSApptLetterRunVo();
		
		selectedRecord.setConfiguredJob(form.getGlobalContext().Admin.getCurrentJobConfiguration());
		selectedRecord.setFromDate(form.dteFrom().getValue());
		selectedRecord.setToDate(form.dteTo().getValue());
		selectedRecord.setLetterType(form.cmbLetterType().getValue());
		
		
		
		return selectedRecord;
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		loaddata();
		
	}
	
	private void loaddata()
	{
		PDSApptLetterRunVo tempVo = domain.getConfiguration(form.getGlobalContext().Admin.getCurrentJobConfiguration());
		form.getLocalContext().setSelectedRecord(tempVo);
		populateScreenFromData(tempVo);
		
	}
	private void clear()
	{
		form.cmbLetterType().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
	}
	private void populateScreenFromData(PDSApptLetterRunVo tempVo)
	{
		clear();
		
		if( tempVo == null )
			return;
		form.cmbLetterType().setValue(tempVo.getLetterType());
		form.dteFrom().setValue( tempVo.getFromDate());
		form.dteTo().setValue(tempVo.getToDate());
	}

	public String[] validateData()
	{
		return getData().validate(validateUIErrors());
	}
	public String[] validateUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();
		if( form.cmbLetterType().getValue() == null )
		{
			errors.add("Letter Type is mandatory.");
		}
		if( form.dteFrom().getValue() == null )
		{
			errors.add("From Date is mandatory.");
		}
		if( form.dteTo().getValue() == null )
		{
			errors.add("To Date is mandatory.");
		}
					
		if( errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	

}
