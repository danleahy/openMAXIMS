//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.admin.forms.edconfig;

import ims.admin.forms.edconfig.GenForm.lyrEDLayer.tabAmbulanceArrivalsContainer.grdModeOfArrivalRow;
import ims.admin.forms.edconfig.GenForm.lyrEDLayer.tabOutcomeMandatoryCodingContainer.grdMandatoryCodingRow;
import ims.admin.forms.edconfig.GenForm.lyrEDLayer.tabPageAttendanceDetConfigContainer.lyrAttendanceDetailsLayer.tabPageAttendanceDetalisContainer.grdAttendanceDetailsControlConfigRow;
import ims.admin.forms.edconfig.GenForm.lyrEDLayer.tabPageAttendanceDetConfigContainer.lyrAttendanceDetailsLayer.tabPageChartRequestedContainer.grdChartRequestRow;
import ims.admin.forms.edconfig.GenForm.lyrEDLayer.tabPageAttendanceDetConfigContainer.lyrAttendanceDetailsLayer.tabPageInsuranceDetailsContainer.grdInsuranceDetailsRow;
import ims.admin.forms.edconfig.GenForm.lyrEDLayer.tabPageAttendanceDetConfigContainer.lyrAttendanceDetailsLayer.tabPageInvoicesBillingContainer.grdInvoicesBillRow;
import ims.admin.forms.edconfig.GenForm.lyrEDLayer.tabReferToSpecialtyContainer.GroupSeenOrAcceptedEnumeration;
import ims.admin.forms.edconfig.GenForm.lyrEDLayer.tabTriageTabConfigContainer.grdTabsRow;
import ims.admin.vo.AppRoleShortVoCollection;
import ims.admin.vo.EDAttendanceControlsConfigVo;
import ims.admin.vo.EDAttendanceControlsConfigVoCollection;
import ims.admin.vo.lookups.EDAttendenceControlType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.EDAttendanceformsConfigVo;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.AmbulanceArrivalsConfigVo;
import ims.emergency.vo.MandatoryEDOutcomeCodingVo;
import ims.emergency.vo.ReferToSpecialtyConfigVo;
import ims.emergency.vo.TriageTabConfigVo;
import ims.emergency.vo.lookups.AttendanceOutcome;
import ims.emergency.vo.lookups.AttendanceOutcomeCollection;
import ims.emergency.vo.lookups.LookupHelper;
import ims.emergency.vo.lookups.ModeOfArrival;
import ims.emergency.vo.lookups.ModeOfArrivalCollection;
import ims.emergency.vo.lookups.TriageTabs;
import ims.emergency.vo.lookups.TriageTabsCollection;
import ims.framework.LayerBridge;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int	COLUMN_VISIBLE = 1;
	private static final int REQUESTED_BED_TYPE_ID = 282; //WDEV-20270
	private static final int ACCOMODATION_TYPE_REQUESTED = 284; //WDEV-20270

	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( save())
			open();
		
	}
	
	private EDAttendanceformsConfigVo populateDataFromScreen(EDAttendanceformsConfigVo record)
	{
		if( record == null )
			record = new EDAttendanceformsConfigVo(); 
		
		record.setChartRequestedTabVisible(form.lyrED().tabPageAttendanceDetConfig().chkChartRequest().getValue());
		record.setInvoicesBillingTabVisible(form.lyrED().tabPageAttendanceDetConfig().chkInvoiceBill().getValue());
		record.setInsuranceTabVisible(form.lyrED().tabPageAttendanceDetConfig().chkHealthCover().getValue());			//wdev-19014
		record.setDisplayPrintDialog(form.lyrED().tabPageAttendanceDetConfig().chkDisplayPrintingDialog().getValue());//WDEV-22943
		EDAttendanceControlsConfigVoCollection tempColl = new EDAttendanceControlsConfigVoCollection();
		
		for( int i = 0; i < form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageAttendanceDetalis().grdAttendanceDetailsControlConfig().getRows().size();i++)
		{
			EDAttendanceControlsConfigVo attendanceVo = form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageAttendanceDetalis().grdAttendanceDetailsControlConfig().getRows().get(i).getValue();
			
			attendanceVo.setIsEditable(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageAttendanceDetalis().grdAttendanceDetailsControlConfig().getRows().get(i).getColumnEditable());
			attendanceVo.setIsVisible(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageAttendanceDetalis().grdAttendanceDetailsControlConfig().getRows().get(i).getColumnVisible());
			attendanceVo.setIsRequired(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageAttendanceDetalis().grdAttendanceDetailsControlConfig().getRows().get(i).getColumnRequired());
			tempColl.add(attendanceVo);
			
		}
		
		for(int j = 0; j < form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageChartRequested().grdChartRequest().getRows().size();j++)
		{
			EDAttendanceControlsConfigVo attendanceVo = form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageChartRequested().grdChartRequest().getRows().get(j).getValue();
			
			if( Boolean.TRUE.equals(form.lyrED().tabPageAttendanceDetConfig().chkChartRequest().getValue()))
			{
    			attendanceVo.setIsEditable(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageChartRequested().grdChartRequest().getRows().get(j).getColumnEditable());
    			attendanceVo.setIsVisible(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageChartRequested().grdChartRequest().getRows().get(j).getColumnVisible());
    			attendanceVo.setIsRequired(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageChartRequested().grdChartRequest().getRows().get(j).getColumnRequired());
			}
			else
			{
				attendanceVo.setIsEditable(Boolean.FALSE);
    			attendanceVo.setIsVisible(Boolean.FALSE);
    			attendanceVo.setIsRequired(Boolean.FALSE);
			}
			tempColl.add(attendanceVo);
			
		}
		for(int k = 0; k < form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInvoicesBilling().grdInvoicesBill().getRows().size();k++)
		{
			EDAttendanceControlsConfigVo attendanceVo = form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInvoicesBilling().grdInvoicesBill().getRows().get(k).getValue();
			
			if( Boolean.TRUE.equals(form.lyrED().tabPageAttendanceDetConfig().chkInvoiceBill().getValue()))
			{
			
				attendanceVo.setIsEditable(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInvoicesBilling().grdInvoicesBill().getRows().get(k).getColumnEditable());
				attendanceVo.setIsVisible(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInvoicesBilling().grdInvoicesBill().getRows().get(k).getColumnVisible());
				attendanceVo.setIsRequired(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInvoicesBilling().grdInvoicesBill().getRows().get(k).getColumnRequired());
			}
			else
			{
				attendanceVo.setIsEditable(Boolean.FALSE);
				attendanceVo.setIsVisible(Boolean.FALSE);
				attendanceVo.setIsRequired(Boolean.FALSE);
			}
			tempColl.add(attendanceVo);
			
		}
		//wdev-19014
		for(int k = 0; k < form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInsuranceDetails().grdInsuranceDetails().getRows().size();k++)
		{
			EDAttendanceControlsConfigVo attendanceVo = form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInsuranceDetails().grdInsuranceDetails().getRows().get(k).getValue();
			
			if( Boolean.TRUE.equals(form.lyrED().tabPageAttendanceDetConfig().chkHealthCover().getValue()))
			{
			
				attendanceVo.setIsEditable(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInsuranceDetails().grdInsuranceDetails().getRows().get(k).getColumnEditable());
				attendanceVo.setIsVisible(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInsuranceDetails().grdInsuranceDetails().getRows().get(k).getColumnVisible());
				attendanceVo.setIsRequired(form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInsuranceDetails().grdInsuranceDetails().getRows().get(k).getColumnRequired());
			}
			else
			{
				attendanceVo.setIsEditable(Boolean.FALSE);
				attendanceVo.setIsVisible(Boolean.FALSE);
				attendanceVo.setIsRequired(Boolean.FALSE);
			}
			tempColl.add(attendanceVo);
			
		}
		record.setControlsConfigItems(tempColl);
		
		return record;
		
		
	}
	private boolean save()
	{
		EDAttendanceformsConfigVo record = populateDataFromScreen(form.getLocalContext().getCurrentEDAttendanceformsConfig());
		
		String[] arrErrors = record.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		
		try
		{
			form.getLocalContext().setCurrentEDAttendanceformsConfig(domain.saveEDAttandanceformsConfigVo(record));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
		
	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		open();
	}

	
	private void initialize()
	{
		form.lyrED().tabPageOther().setHeaderVisible(false); //WDEV-16721
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageAttendanceDetalis().setCaption("Attendance Details");
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageChartRequested().setCaption("Chart requested");
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInvoicesBilling().setCaption("Invoices/Billing");
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInsuranceDetails().setCaption("Health Cover");		//wdev-19014
	}
	
	private void updateControlsState()
	{
		if( form.getMode().equals(FormMode.VIEW))
		{
			form.lyrED().tabPageAttendanceDetConfig().btnEdit().setVisible(form.getLocalContext().getCurrentEDAttendanceformsConfigIsNotNull());
		}
		
		
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageChartRequested().setHeaderVisible(Boolean.TRUE.equals(form.lyrED().tabPageAttendanceDetConfig().chkChartRequest().getValue()));
		//form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageChartRequested().setVisible(Boolean.TRUE.equals(form.lyrED().tabPageAttendanceDetConfig().chkChartRequest().getValue()));
		
		
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInvoicesBilling().setHeaderVisible(Boolean.TRUE.equals(form.lyrED().tabPageAttendanceDetConfig().chkInvoiceBill().getValue()));
		//form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInvoicesBilling().setVisible(Boolean.TRUE.equals(form.lyrED().tabPageAttendanceDetConfig().chkInvoiceBill().getValue()));
		
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInsuranceDetails().setHeaderVisible(Boolean.TRUE.equals(form.lyrED().tabPageAttendanceDetConfig().chkHealthCover().getValue()));   //wdev-19014
		
		form.lyrED().tabTriageTabConfig().btnEditTabConfig().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.lyrED().tabTriageTabConfig().btnEditTabConfig().setEnabled(form.lyrED().tabTriageTabConfig().cmbRole().getValue() != null);
		
		//WDEV-19013
		form.lyrED().tabOutcomeMandatoryCoding().btnEditOutcomeMandatCoding().setVisible(FormMode.VIEW.equals(form.getMode()));
		
		form.lyrED().tabPageAttendanceDetConfig().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrED().tabTriageTabConfig().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrED().tabOutcomeMandatoryCoding().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		form.lyrED().tabAmbulanceArrivals().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		
		form.lyrED().tabReferToSpecialty().GroupSeenOrAccepted().setEnabled(FormMode.EDIT.equals(form.getMode()));		//wdev-22313	
		form.lyrED().tabReferToSpecialty().btnEditReferToSpecialty().setVisible(FormMode.VIEW.equals(form.getMode()));	//wdev-22313
	}
	
	private void open()
	{
		populateAttendanceDetailsTab();
		form.setMode(FormMode.VIEW);
		
	}

	private void populateAttendanceDetailsTab()
	{
		clearAttendanceDetailsTab();
		EDAttendanceformsConfigVo tempVo = domain.getEDAttandanceformsConfigVo();
		form.getLocalContext().setCurrentEDAttendanceformsConfig(tempVo);
		populateScreenFromData(tempVo);
	}
	private void clearAttendanceDetailsTab()
	{
		form.lyrED().tabPageAttendanceDetConfig().chkChartRequest().setValue(null);
		form.lyrED().tabPageAttendanceDetConfig().chkInvoiceBill().setValue(null);
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageAttendanceDetalis().grdAttendanceDetailsControlConfig().getRows().clear();
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageChartRequested().grdChartRequest().getRows().clear();
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInvoicesBilling().grdInvoicesBill().getRows().clear();
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInsuranceDetails().grdInsuranceDetails().getRows().clear();		//wdev-19014
		
	}
	private void populateScreenFromData(EDAttendanceformsConfigVo record)
	{
		if( record == null )
			return;
		
		form.lyrED().tabPageAttendanceDetConfig().chkChartRequest().setValue(record.getChartRequestedTabVisible());
		form.lyrED().tabPageAttendanceDetConfig().chkInvoiceBill().setValue(record.getInvoicesBillingTabVisible());
		form.lyrED().tabPageAttendanceDetConfig().chkHealthCover().setValue(record.getInsuranceTabVisible());			//wdev-19014
		form.lyrED().tabPageAttendanceDetConfig().chkDisplayPrintingDialog().setValue(record.getDisplayPrintDialog());//WDEV-22943
		
		
		if( record.getControlsConfigItemsIsNotNull() && record.getControlsConfigItems().size() > 0)
		{
			for(int i = 0; i < record.getControlsConfigItems().size();i++)
			{
				EDAttendanceControlsConfigVo tempVo = record.getControlsConfigItems().get(i);
				if( tempVo != null )
				{
					if( tempVo.getControlTypeIsNotNull() && tempVo.getControlType().equals(EDAttendenceControlType.ATTEND_CONTROLS))
					{
						populateAttendanceDetailsControlConfigGrid(tempVo);
					}
					else if( tempVo.getControlTypeIsNotNull() && tempVo.getControlType().equals(EDAttendenceControlType.CHART_CONTROLS) )
					{
						populateChartRequestGrid( tempVo );
					}
					else if( tempVo.getControlTypeIsNotNull() && tempVo.getControlType().equals(EDAttendenceControlType.INV_BILL_CONTROLS))
					{
						populateInvoicesBillGrid( tempVo);
					}
					else if( tempVo.getControlTypeIsNotNull() && tempVo.getControlType().equals(EDAttendenceControlType.INSURANCE_CONTROLS))
					{
						populateInsuranceDetailsGrid( tempVo);
					}
				}
			}
		}
		
	}
	
	private void populateAttendanceDetailsControlConfigGrid( EDAttendanceControlsConfigVo record)
	{
		if( record == null )
			return;
		
		grdAttendanceDetailsControlConfigRow row = form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageAttendanceDetalis().grdAttendanceDetailsControlConfig().getRows().newRow();
		row.setColumnScreenControl(record.getControlDescriptionOnForm());
		row.setColumnVisible(record.getIsVisible());
		row.setColumnEditable(record.getIsEditable());
		row.setColumnRequired(record.getIsRequired());
		row.setValue(record);
			
	}
	
	private void populateChartRequestGrid( EDAttendanceControlsConfigVo record)
	{
		if( record == null )
			return;
		
		grdChartRequestRow row = form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageChartRequested().grdChartRequest().getRows().newRow();
		row.setColumnScreenControl(record.getControlDescriptionOnForm());
		row.setColumnVisible(record.getIsVisible());
		row.setColumnEditable(record.getIsEditable());
		row.setColumnRequired(record.getIsRequired());
		row.setValue(record);
			
	}
	
	private void populateInvoicesBillGrid( EDAttendanceControlsConfigVo record)
	{
		if( record == null )
			return;
		
		grdInvoicesBillRow row = form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInvoicesBilling().grdInvoicesBill().getRows().newRow();
		row.setColumnScreenControl(record.getControlDescriptionOnForm());
		row.setColumnVisible(record.getIsVisible());
		row.setColumnEditable(record.getIsEditable());
		row.setColumnRequired(record.getIsRequired());
		row.setValue(record);
			
	}
	//wdev-19014
	private void populateInsuranceDetailsGrid( EDAttendanceControlsConfigVo record)
	{
		if( record == null )
			return;
		
		grdInsuranceDetailsRow row = form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageInsuranceDetails().grdInsuranceDetails().getRows().newRow();
		row.setColumnScreenControl(record.getControlDescriptionOnForm());
		row.setColumnVisible(record.getIsVisible());
		row.setColumnEditable(record.getIsEditable());
		row.setColumnRequired(record.getIsRequired());
		row.setValue(record);
			
	}

	
	protected void onChkInvoiceBillValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().showtabPageAttendanceDetalis();
		
	}

	
	protected void onChkChartRequestValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().showtabPageAttendanceDetalis();
		
	}

	
	protected void onGrdAttendanceDetailsControlConfigGridCheckBoxClicked(
			int column, grdAttendanceDetailsControlConfigRow row,
			boolean isChecked) throws PresentationLogicException 
	{
		if( column == COLUMN_VISIBLE && row.getColumnVisible() == false)
		{
			row.setColumnEditable(false);
			row.setColumnRequired(false);
		}
		
		//WDEV-20270
		if (row.getValue().getID_EDAttendenceControlsConfig().intValue()==REQUESTED_BED_TYPE_ID)
		{
			grdAttendanceDetailsControlConfigRow rowTemp=getRowByID(ACCOMODATION_TYPE_REQUESTED);
			if (Boolean.TRUE.equals(row.getColumnVisible()))
			{
				rowTemp.setColumnVisible(false);
			}
		} else if (row.getValue().getID_EDAttendenceControlsConfig().intValue()==ACCOMODATION_TYPE_REQUESTED)
		{
			grdAttendanceDetailsControlConfigRow rowTemp=getRowByID(REQUESTED_BED_TYPE_ID);
			if (Boolean.TRUE.equals(row.getColumnVisible()))
			{
				rowTemp.setColumnVisible(false);
			}
		}
		
	}

	//WDEV-20270
	private grdAttendanceDetailsControlConfigRow getRowByID(int id)
	{
		for (int i=0;i<form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageAttendanceDetalis().grdAttendanceDetailsControlConfig().getRows().size();i++)
		{
			grdAttendanceDetailsControlConfigRow row = form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().tabPageAttendanceDetalis().grdAttendanceDetailsControlConfig().getRows().get(i);
			
			if (row.getValue().getID_EDAttendenceControlsConfig().intValue()==id)
				return row;
		}
		
		return null;
	}

	protected void onGrdChartRequestGridCheckBoxClicked(int column,
			grdChartRequestRow row, boolean isChecked)
			throws PresentationLogicException 
	{
		if( column == COLUMN_VISIBLE && row.getColumnVisible() == false)
		{
			row.setColumnEditable(false);
			row.setColumnRequired(false);
		}
		
	}

	
	protected void onGrdInvoicesBillGridCheckBoxClicked(int column,
			grdInvoicesBillRow row, boolean isChecked)
			throws PresentationLogicException 
	{
		if( column == COLUMN_VISIBLE && row.getColumnVisible() == false)
		{
			row.setColumnEditable(false);
			row.setColumnRequired(false);
		}
		
	}

	//wdev-19014
	protected void onChkHealthCoverValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		form.lyrED().tabPageAttendanceDetConfig().lyrAttendanceDetails().showtabPageAttendanceDetalis();
		
	}

	//wdev-19014
	protected void onGrdInsuranceDetailsGridCheckBoxClicked(int column, grdInsuranceDetailsRow row, boolean isChecked) throws PresentationLogicException
	{
		if( column == COLUMN_VISIBLE && row.getColumnVisible() == false)
		{
			row.setColumnEditable(false);
			row.setColumnRequired(false);
		}
		
	}

	@Override
	protected void onlyrEDTabChanged(LayerBridge tab)
	{
		if (tab.equals(form.lyrED().tabPageAttendanceDetConfig()))
		{
			populateAttendanceDetailsTab();
		}
		else if (tab.equals(form.lyrED().tabTriageTabConfig()))
		{
			populateTriageTabConfig();
		} 
		else if (tab.equals(form.lyrED().tabOutcomeMandatoryCoding())) //WDEV-19013
		{
			populateOutcomeMandatoryCodingTab();
		} 
		else if (tab.equals(form.lyrED().tabAmbulanceArrivals()))
		{
			populateAmbulanceArrivalsTab();
		}
		else if( tab.equals(form.lyrED().tabReferToSpecialty()))	//wdev-22313
		{
			populateReferToSpecialtyTab();
		}
	}
	//wdev-22313
	private void clearReferToSpecialtyTabControls()
	{
		form.lyrED().tabReferToSpecialty().GroupSeenOrAccepted().setValue(GroupSeenOrAcceptedEnumeration.None);
	}
	
	private void populateReferToSpecialtyTab()
	{
		clearReferToSpecialtyTabControls();
		form.getLocalContext().setReferToSpecialty(domain.getReferToSpecialtyConfigVo());
		populateScreenFromData(form.getLocalContext().getReferToSpecialty());
		
		
	}
	
	private void populateScreenFromData(ReferToSpecialtyConfigVo record)
	{
		
		if( record != null)
		{
			if( Boolean.TRUE.equals(record.getSeen()))
				form.lyrED().tabReferToSpecialty().GroupSeenOrAccepted().setValue(GroupSeenOrAcceptedEnumeration.rdoSeen);
			else if( Boolean.TRUE.equals(record.getAccepted()))
				form.lyrED().tabReferToSpecialty().GroupSeenOrAccepted().setValue(GroupSeenOrAcceptedEnumeration.rdoAccepted);
			else
				form.lyrED().tabReferToSpecialty().GroupSeenOrAccepted().setValue(GroupSeenOrAcceptedEnumeration.None);
		}
	}
	
	//----end wdev-22313

	private void populateAmbulanceArrivalsTab()
	{
		form.lyrED().tabAmbulanceArrivals().grdModeOfArrival().getRows().clear();
		
		ModeOfArrivalCollection modeOfArrival = LookupHelper.getModeOfArrival(this.domain.getLookupService());
		
		for (int i = 0; i < modeOfArrival.size(); i++)
		{
			ModeOfArrival arrival = modeOfArrival.get(i);
			grdModeOfArrivalRow row = form.lyrED().tabAmbulanceArrivals().grdModeOfArrival().getRows().newRow();
			
			row.setColModeOfArrival(arrival.getText());
			row.setColAmbulanceArrival(false);
			row.setValue(arrival);
		}
		
		
		// Get the record from database
		form.getLocalContext().setAmbulanceArrivals(domain.getAmbulanceArrivals());
		
		// Update the rows with checks
		if (form.getLocalContext().getAmbulanceArrivals() != null)
		{
			for (int i = 0; i < form.getLocalContext().getAmbulanceArrivals().getAmbulanceArrivals().size(); i++)
			{
				ModeOfArrival arrival = form.getLocalContext().getAmbulanceArrivals().getAmbulanceArrivals().get(i);
				
				grdModeOfArrivalRow row = form.lyrED().tabAmbulanceArrivals().grdModeOfArrival().getRowByValue(arrival);
				if (row != null)
					row.setColAmbulanceArrival(true);
			}
		}
	}
	

	private void populateTriageTabConfig()
	{
		populateRoleCombo();
		
		if (form.getLocalContext().getSelectedRole() != null)
		{
			form.lyrED().tabTriageTabConfig().cmbRole().setValue(form.getLocalContext().getSelectedRole());
			
			populateGridTabs();
		}
		
		updateControlsState();
	}

	private void populateRoleCombo()
	{
		form.lyrED().tabTriageTabConfig().cmbRole().clear();
		
		AppRoleShortVoCollection roles = domain.getAppRoles();
		
		if (roles == null || roles.size() == 0)
			return;
		
		for (int i = 0; i < roles.size(); i++)
		{
			
			if (Boolean.FALSE.equals(roles.get(i).getIsActive()))
			{
				form.lyrED().tabTriageTabConfig().cmbRole().newRow(roles.get(i), roles.get(i).getName(), Color.Red);
				
			}
			else
				form.lyrED().tabTriageTabConfig().cmbRole().newRow(roles.get(i), roles.get(i).getName());
				
		}
	}

	@Override
	protected void onBtnCancelTabConfigClick() throws PresentationLogicException
	{
		populateGridTabs();
		form.setMode(FormMode.VIEW);
		
	}

	@Override
	protected void onBtnSaveTabConfigClick() throws PresentationLogicException
	{
		if (saveTriageTabConfig())
		{
			populateTriageTabConfig();
			form.setMode(FormMode.VIEW);
		}
		
	}

	private boolean saveTriageTabConfig()
	{
		if (wasAlreadySaved())
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			populateTriageTabConfig();
			form.setMode(FormMode.VIEW);
			return false;
		}
			
        TriageTabConfigVo record = populateTriageTabDataFromScreen(form.getLocalContext().getTriageTabConfiguration());
        
		
		String[] arrErrors = record.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			domain.saveTrigeTabConfig(record);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			populateTriageTabConfig();
			form.setMode(FormMode.VIEW);
			return false;
		}
		
		return true;
	}

	private boolean wasAlreadySaved()
	{
		// when saving for the first time, check that no duplicates will be saved

		if (form.getLocalContext().getTriageTabConfiguration() != null)
			return false;

		TriageTabConfigVo tabConfig = domain.getTabConfigForRole(form.lyrED().tabTriageTabConfig().cmbRole().getValue());

		if (tabConfig != null)
			return true;

		return false;
	}

	private TriageTabConfigVo populateTriageTabDataFromScreen(TriageTabConfigVo tabConfig)
	{
		
		if (tabConfig == null)
		{
			tabConfig = new TriageTabConfigVo();
			tabConfig.setRole(form.lyrED().tabTriageTabConfig().cmbRole().getValue());
		}
		
		TriageTabsCollection tabCollection = null;
		
		for (int i = 0; i < form.lyrED().tabTriageTabConfig().grdTabs().getRows().size(); i++)
		{
			grdTabsRow row = form.lyrED().tabTriageTabConfig().grdTabs().getRows().get(i);
			
			if (Boolean.TRUE.equals(row.getColHideTab()))
			{
				if (tabCollection == null)
					tabCollection =  new TriageTabsCollection();
				
				tabCollection.add(row.getValue());
			}
		}
		
		tabConfig.setAvailableTabs(tabCollection);
		
		return tabConfig;
	}

	@Override
	protected void onCmbRoleValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedRole(form.lyrED().tabTriageTabConfig().cmbRole().getValue());
		populateGridTabs();
		updateControlsState();
		
	}

	private void populateGridTabs()
	{
		form.lyrED().tabTriageTabConfig().grdTabs().getRows().clear();
		
		if (form.lyrED().tabTriageTabConfig().cmbRole().getValue() == null)
			return;
		
		populateGridWithLookups();
		
		form.getLocalContext().setTriageTabConfiguration(domain.getTabConfigForRole(form.lyrED().tabTriageTabConfig().cmbRole().getValue()));
		
		populateGridTabsWithValues(form.getLocalContext().getTriageTabConfiguration());
		
	}

	private void populateGridTabsWithValues(TriageTabConfigVo tabConfig)
	{
		if (tabConfig == null || tabConfig.getAvailableTabs() == null || tabConfig.getAvailableTabs().size() == 0)
			return;
		
		for (int i = 0; i < form.lyrED().tabTriageTabConfig().grdTabs().getRows().size(); i++)
		{
			grdTabsRow row = form.lyrED().tabTriageTabConfig().grdTabs().getRows().get(i);
			
			for (int j = 0; j < tabConfig.getAvailableTabs().size(); j++)
			{
				if (row.getValue().equals(tabConfig.getAvailableTabs().get(j)))
				{
					row.setColHideTab(Boolean.TRUE);
				}
			}
		}
		
	}

	private void populateGridWithLookups()
	{
		
		TriageTabsCollection lkpTriageTabsCollection = LookupHelper.getTriageTabs(domain.getLookupService());

		if (lkpTriageTabsCollection == null)
			return;
		
		for (int i = 0; i < lkpTriageTabsCollection.size(); i++)
		{
			//WDEV-20424 - hide pmh tab
			if (TriageTabs.ED_PMH_TAB.equals(lkpTriageTabsCollection.get(i)))
				continue;
			
			grdTabsRow row = form.lyrED().tabTriageTabConfig().grdTabs().getRows().newRow();
			
			row.setColName(lkpTriageTabsCollection.get(i).getText());
			row.setColHideTab(Boolean.FALSE);
			
			row.setValue(lkpTriageTabsCollection.get(i));
		}
	}

	@Override
	protected void onBtnEditTabConfigClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
	}

	//WDEV-19013
	@Override
	protected void onBtnCancelOutcomeMandatCodingClick() throws PresentationLogicException
	{
		populateOutcomeMandatoryCodingTab();
		form.setMode(FormMode.VIEW);
	}

	//WDEV-19013
	@Override
	protected void onBtnSaveOutcomeMandatCodingClick() throws PresentationLogicException
	{
		if (saveOutcomeMandatoryCoding())
		{
			populateOutcomeMandatoryCodingTab();
			form.setMode(FormMode.VIEW);
			
		}
	}

	//WDEV-19013
	private boolean saveOutcomeMandatoryCoding()
	{
		MandatoryEDOutcomeCodingVo record = populateDataFromScreenOutcomeMandatoryCoding(form.getLocalContext().getMandatoryEDOutcomeCoding());
		
		if (record.getID_MandatoryEDOutcomeCoding()==null && domain.getMandatoryEDOutcomeCoding()!=null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
	
		String[] arrErrors = record.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		try
		{
			form.getLocalContext().setMandatoryEDOutcomeCoding(domain.saveMandatoryEDOutcomeCodingVo(record));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		
		return true;
	}
	

	private boolean saveAmbulanceArrivals()
	{
		try
		{
		AmbulanceArrivalsConfigVo ambulanceArrivals = populateDataFromScreenAmbulanceArrivals(form.getLocalContext().getAmbulanceArrivals());
		
		if (ambulanceArrivals.getID_AmbulanceArrivalsConfig() == null && domain.getAmbulanceArrivals() != null)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		
		String[] errors = ambulanceArrivals.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		form.getLocalContext().setAmbulanceArrivals(domain.saveAmbulanceArrivals(ambulanceArrivals));
		
		// TODO Auto-generated method stub
		return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
	}



	private AmbulanceArrivalsConfigVo populateDataFromScreenAmbulanceArrivals(AmbulanceArrivalsConfigVo ambulanceArrivals)
	{
		if (ambulanceArrivals == null)
			ambulanceArrivals = new AmbulanceArrivalsConfigVo();
		
		ModeOfArrivalCollection ambulancesArrivals = new ModeOfArrivalCollection();
		
		for (int i = 0; i < form.lyrED().tabAmbulanceArrivals().grdModeOfArrival().getRows().size(); i++)
		{
			grdModeOfArrivalRow ambulanceRow = form.lyrED().tabAmbulanceArrivals().grdModeOfArrival().getRows().get(i);
			
			if (ambulanceRow.getColAmbulanceArrival() == true)
				ambulancesArrivals.add(ambulanceRow.getValue());
		}
		
		ambulanceArrivals.setAmbulanceArrivals(ambulancesArrivals);
		
		return ambulanceArrivals;
	}

	//WDEV-19013
	private MandatoryEDOutcomeCodingVo populateDataFromScreenOutcomeMandatoryCoding(MandatoryEDOutcomeCodingVo mandatoryEDOutcomeCoding)
	{
		if (mandatoryEDOutcomeCoding==null)
			mandatoryEDOutcomeCoding= new MandatoryEDOutcomeCodingVo();
		else
			mandatoryEDOutcomeCoding=(MandatoryEDOutcomeCodingVo) mandatoryEDOutcomeCoding.clone();
		
		AttendanceOutcomeCollection collAttOutcome = new AttendanceOutcomeCollection();
		
		for (int i=0;i<form.lyrED().tabOutcomeMandatoryCoding().grdMandatoryCoding().getRows().size();i++)
		{
			if (form.lyrED().tabOutcomeMandatoryCoding().grdMandatoryCoding().getRows().get(i).getColSelect())
			{
				collAttOutcome.add(form.lyrED().tabOutcomeMandatoryCoding().grdMandatoryCoding().getRows().get(i).getValue());
			}			
		}
		
		mandatoryEDOutcomeCoding.setCodingOutcomes(collAttOutcome);

		return mandatoryEDOutcomeCoding;
	}

	//WDEV-19013
	@Override
	protected void onBtnEditOutcomeMandatCodingClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	//WDEV-19013
	private void initializeOutcomeMandatoryCoding()
	{
		form.lyrED().tabOutcomeMandatoryCoding().grdMandatoryCoding().getRows().clear();
		
		ims.emergency.vo.lookups.AttendanceOutcomeCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getAttendanceOutcome(this.domain.getLookupService());
		
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			if (AttendanceOutcome.DID_NOT_WAIT.equals(lookupCollection.get(x)))
					continue;
			
			grdMandatoryCodingRow row = form.lyrED().tabOutcomeMandatoryCoding().grdMandatoryCoding().getRows().newRow();
			
			row.setColName(lookupCollection.get(x).getText());
			row.setValue(lookupCollection.get(x));
		}
	}
	
	//WDEV-19013
	private void populateOutcomeMandatoryCodingTab()
	{
		initializeOutcomeMandatoryCoding();
		populateOutcomeMandatoryCodingGrid();
		
	}

	//WDEV-19013
	private void populateOutcomeMandatoryCodingGrid()
	{
		
		form.getLocalContext().setMandatoryEDOutcomeCoding(domain.getMandatoryEDOutcomeCoding());
		
		if (form.getLocalContext().getMandatoryEDOutcomeCoding()==null || form.getLocalContext().getMandatoryEDOutcomeCoding().getCodingOutcomes()==null || form.getLocalContext().getMandatoryEDOutcomeCoding().getCodingOutcomes().size()==0 )
			return;
		
		AttendanceOutcomeCollection collMandatoryEDOutcome = form.getLocalContext().getMandatoryEDOutcomeCoding().getCodingOutcomes();
		
		for (int i=0;i<form.lyrED().tabOutcomeMandatoryCoding().grdMandatoryCoding().getRows().size();i++)
		{
			if (collMandatoryEDOutcome.contains(form.lyrED().tabOutcomeMandatoryCoding().grdMandatoryCoding().getRows().get(i).getValue()))
			{
				form.lyrED().tabOutcomeMandatoryCoding().grdMandatoryCoding().getRows().get(i).setColSelect(true);
			}
		}
	}

	@Override
	protected void onBtnAmbulanceCancelClick() throws PresentationLogicException
	{
		populateAmbulanceArrivalsTab();
		form.setMode(FormMode.VIEW);		
	}

	@Override
	protected void onBtnAmbulanceSaveClick() throws PresentationLogicException
	{
		if (saveAmbulanceArrivals())
		{
			populateAmbulanceArrivalsTab();
			form.setMode(FormMode.VIEW);
		}
	}


	@Override
	protected void onBtnAmbulanceEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	//wdev-22313
	protected void onBtnCancelReferToSpecialtyClick() throws PresentationLogicException
	{
		populateReferToSpecialtyTab();
		form.setMode(FormMode.VIEW);
		
	}

	//wdev-22313
	protected void onBtnEditReferToSpecialtyClick() throws PresentationLogicException
	{
		if( !form.getLocalContext().getReferToSpecialtyIsNotNull()  )
		{
			form.lyrED().tabReferToSpecialty().GroupSeenOrAccepted().setValue(GroupSeenOrAcceptedEnumeration.rdoSeen);
		}
		
		form.setMode(FormMode.EDIT);
		
	}

	//wdev-22313
	protected void onRadioButtonGroupSeenOrAcceptedValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	//wdev-22313
	protected void onBtnSaveReferToSpecialtyClick() throws PresentationLogicException
	{
		if( saveReferaToSpecialty())
		{
			populateReferToSpecialtyTab();
			form.setMode(FormMode.VIEW);
		}
		
	}
	//wdev-22313
	private boolean saveReferaToSpecialty()
	{
		ReferToSpecialtyConfigVo record = populateDataFromScreenReferToSpecialty(form.getLocalContext().getReferToSpecialty());
		String[] errors = record.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
				form.getLocalContext().setReferToSpecialty(domain.saveReferToSpecialtyConfigVo( record ));
		}
		catch (UniqueKeyViolationException e)
		{
				// TODO Auto-generated catch block
				e.printStackTrace();
				return false;
				
		
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
		}
		
		return true;
	}
	
	private ReferToSpecialtyConfigVo populateDataFromScreenReferToSpecialty(ReferToSpecialtyConfigVo record)
	{
		if( record == null )
			record = new ReferToSpecialtyConfigVo();
		
		if( GroupSeenOrAcceptedEnumeration.rdoSeen.equals(form.lyrED().tabReferToSpecialty().GroupSeenOrAccepted().getValue()))
		{
			record.setSeen(Boolean.TRUE);
			record.setAccepted(Boolean.FALSE);
		}
		else if( GroupSeenOrAcceptedEnumeration.rdoAccepted.equals(form.lyrED().tabReferToSpecialty().GroupSeenOrAccepted().getValue()))
		{
			record.setSeen(Boolean.FALSE);
			record.setAccepted(Boolean.TRUE);
		}
		else
		{
			record.setSeen(Boolean.FALSE);
			record.setAccepted(Boolean.FALSE);
		}
		
		return record;
	}
	

}
