//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Silviu Checherita using IMS Development Environment (version 1.80 build 5427.27524)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.admin.forms.patientsearchconfiguration;

import ims.admin.vo.AppUserShortVo;
import ims.admin.vo.AppUserShortVoCollection;
import ims.admin.vo.PDSConfigurationVo;
import ims.core.vo.lookups.TimeUnitsSecondsToYears;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;
	
	public static final int DOB_DATE_RANGE = 10;
	public static final int DOD_DATE_RANGE = 10;
	public static final int ADVANCED_SEACH_TIMER_INTERVAL = 2;
	

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void initialize() 
	{
		prePopulateInactivePatientBgColour();
		
		//WDEV-21622
		populateDOBRangeType();
		populateDODRangeType();
	}

	//WDEV-21622
	private void populateDOBRangeType()
	{
		form.cmbDOBDateRangeType().clear();
		form.cmbDOBDateRangeType().newRow(TimeUnitsSecondsToYears.DAYS, TimeUnitsSecondsToYears.DAYS.getText());
		form.cmbDOBDateRangeType().newRow(TimeUnitsSecondsToYears.MONTHS, TimeUnitsSecondsToYears.MONTHS.getText());
		form.cmbDOBDateRangeType().newRow(TimeUnitsSecondsToYears.YEARS, TimeUnitsSecondsToYears.YEARS.getText());
	}

	//WDEV-21622
	private void populateDODRangeType()
	{
		form.cmbDODDateRangeType().clear();
		form.cmbDODDateRangeType().newRow(TimeUnitsSecondsToYears.DAYS, TimeUnitsSecondsToYears.DAYS.getText());
		form.cmbDODDateRangeType().newRow(TimeUnitsSecondsToYears.MONTHS, TimeUnitsSecondsToYears.MONTHS.getText());
		form.cmbDODDateRangeType().newRow(TimeUnitsSecondsToYears.YEARS, TimeUnitsSecondsToYears.YEARS.getText());
	}
	
	@Override
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		updateRBACControlsStatus(false);
	}
	
	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if (save())
			open();
	}
	
	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.VIEW);
		open();
	}
	
	@Override
	protected void onQmbPDSBackofficeNotificationUserTextSubmited(String value) throws PresentationLogicException 
	{
		if (value != null)
		{
			AppUserShortVo appuser = new AppUserShortVo();
			appuser.setUsername(value);
			AppUserShortVoCollection voColl = domain.listUsers(appuser);

			form.qmbPDSBackofficeNotificationUser().clear();
			for (AppUserShortVo appUser : voColl)
			{
				form.qmbPDSBackofficeNotificationUser().newRow(appUser, appUser.getUsername().toString());
			}
			if (voColl.size() == 1)
				form.qmbPDSBackofficeNotificationUser().setValue(voColl.get(0));
			else if (voColl.size() > 1)
				form.qmbPDSBackofficeNotificationUser().showOpened();
		}
	}

	private void open() 
	{	
		form.getLocalContext().setPDSConfiguration(domain.getPatientSearchConfig());
		populateScreenFromData(form.getLocalContext().getPDSConfiguration());
		form.setMode(FormMode.VIEW);
	}

	private void prePopulateInactivePatientBgColour()
	{
		Color[] ca = Color.getAllColors();
		for (int i = 0; i < ca.length; i++)
		{
			form.cmbInactivePatientBgColour().newRow(ca[i], ca[i].getName(), ca[i].getImage());	
		}
	}
	
	private void populateScreenFromData(PDSConfigurationVo pdsConfiguration) 
	{
		clearScreen();

		if (pdsConfiguration == null)
			return;
		
		form.intDoBDateRange().setValue(pdsConfiguration.getDOB_DATE_RANGE());
		form.intDoDDateRange().setValue(pdsConfiguration.getDOD_DATE_RANGE());
		
		form.cmbDOBDateRangeType().setValue(pdsConfiguration.getDOB_DATE_RANGE_TYPE());//WDEV-21622
		form.cmbDODDateRangeType().setValue(pdsConfiguration.getDOD_DATE_RANGE_TYPE());//WDEV-21622
		
		form.txtNoFixedAbodePostcode().setValue(pdsConfiguration.getNO_FIXED_ABODE_POSTCODE());
		form.intAdvancedSearchTimerInterval().setValue(pdsConfiguration.getADVANCED_SEARCH_TIMER_INTERVAL());
		
		AppUserShortVo apptUserShort = domain.getApptUserShort(pdsConfiguration.getPDS_BACKOFFICE_NOTIFICATI());
		if (apptUserShort != null)
		{
			form.qmbPDSBackofficeNotificationUser().newRow(apptUserShort, apptUserShort.getUsername());
			form.qmbPDSBackofficeNotificationUser().setValue(apptUserShort);
		}
		
		form.intNumOfDaysAppointBatchTrace().setValue(pdsConfiguration.getNumOfDaysAppointBatchTrace());
		form.intNumOfDaysTCIBatchTrace().setValue(pdsConfiguration.getNumOfDaysTCIBatchTrace());
		form.intNumOfDaysForNextPDSCheck().setValue(pdsConfiguration.getNumOfDaysForNextPDSCheck());
		form.chkSynchroniseWithBackoffice().setValue(pdsConfiguration.getSYNCHRONISE_WITH_BACKOFFICE());
		form.txtFromPDSAccreditedSystemId().setValue(pdsConfiguration.getFromPDSAccreditedSystemId());
		form.txtToPDSAccreditedSystemId().setValue(pdsConfiguration.getToPDSAccreditedSystemId());
		form.txtPdsStoreMessageLoc().setValue(pdsConfiguration.getPDS_STORE_MESSAGE_LOC());
		form.chkPdsStoreMessage().setValue(pdsConfiguration.getPDS_STORE_MESSAGE());
		form.chkStarPdsGateway().setValue(pdsConfiguration.getSTART_PDS_GATEWAY());
		
		form.txtSpineSdsHost().setValue(pdsConfiguration.getSDSHost());
		form.txtSpineSdsPort().setValue(pdsConfiguration.getSDSPort());
		form.txtPdsUrl().setValue(pdsConfiguration.getPDS_URL());
		form.txtPdsHost().setValue(pdsConfiguration.getPDS_HOST());
		form.txtConsentChangeMessage().setValue(pdsConfiguration.getConsentChangeMessage());
		
		if (pdsConfiguration.getInactivePatientRecordBgColour() != null)
		{
			form.cmbInactivePatientBgColour().newRow(pdsConfiguration.getInactivePatientRecordBgColour(), pdsConfiguration.getInactivePatientRecordBgColour().getText());
			form.cmbInactivePatientBgColour().setValue(pdsConfiguration.getInactivePatientRecordBgColour());
		}
		
		//TouchPoints
		form.chkTPOutApp().setValue(pdsConfiguration.getTP_BookOutpatientAppt());
		form.chkTPWardAttAppt().setValue(pdsConfiguration.getTP_BookWardAttenderAppt());
		form.chkTPCreateTCI().setValue(pdsConfiguration.getTP_CreateTCIAndTheatreBooking());
		form.chkTPAnyAdmission().setValue(pdsConfiguration.getTP_AnyAdmission());
		form.chkTPAnyApptArrival().setValue(pdsConfiguration.getTP_AnyApptArrival());
		
		form.chkPdsAuthentication().setValue(pdsConfiguration.getPDS_AUTHENTICATION());
		form.txtRBAC_AccessSensitiveData().setValue(pdsConfiguration.getRBAC_AccessSensitiveData());
		form.txtRBAC_AmendPatient().setValue(pdsConfiguration.getRBAC_AmendPatient());
		form.txtRBAC_AmendPatientDecease().setValue(pdsConfiguration.getRBAC_AmendPatientDecease());
		form.txtRBAC_ControlConsent().setValue(pdsConfiguration.getRBAC_ControlConsent());
		form.txtRBAC_PdsRetrieval().setValue(pdsConfiguration.getRBAC_PdsRetrieval());
		form.txtRBAC_PdsSearchForPatient().setValue(pdsConfiguration.getRBAC_PdsSearchForPatient());
		form.txtRBAC_PdsSearchPatientAdvanced().setValue(pdsConfiguration.getRBAC_PdsSearchPatientAdvanced());
		form.txtRBAC_PostcodeSearch().setValue(pdsConfiguration.getRBAC_PostcodeSearch());
		
		form.chkDisplayConsentToSharing().setValue(pdsConfiguration.getPDS_DISPLAY_CONSENT()); //WDEV-21326
	}

	private void clearScreen() 
	{
		form.intDoBDateRange().setValue(null);
		form.intDoDDateRange().setValue(null);
		form.cmbDOBDateRangeType().setValue(null);//WDEV-21622
		form.cmbDODDateRangeType().setValue(null);//WDEV-21622
		form.txtNoFixedAbodePostcode().setValue(null);
		form.intAdvancedSearchTimerInterval().setValue(null);
		form.qmbPDSBackofficeNotificationUser().setValue(null);
		form.intNumOfDaysAppointBatchTrace().setValue(null);
		form.intNumOfDaysTCIBatchTrace().setValue(null);
		form.intNumOfDaysForNextPDSCheck().setValue(null);
		form.chkSynchroniseWithBackoffice().setValue(null);
		form.txtFromPDSAccreditedSystemId().setValue(null);
		form.txtToPDSAccreditedSystemId().setValue(null);
		form.txtPdsStoreMessageLoc().setValue(null);
		form.chkPdsStoreMessage().setValue(null);
		form.chkStarPdsGateway().setValue(null);
		
		form.txtSpineSdsHost().setValue(null);
		form.txtSpineSdsPort().setValue(null);
		form.txtPdsUrl().setValue(null);
		form.txtPdsHost().setValue(null);
		form.txtConsentChangeMessage().setValue(null);
		form.cmbInactivePatientBgColour().setValue(null);
		
		form.chkPdsAuthentication().setValue(null);
		form.txtRBAC_AccessSensitiveData().setValue(null);
		form.txtRBAC_AmendPatient().setValue(null);
		form.txtRBAC_AmendPatientDecease().setValue(null);
		form.txtRBAC_ControlConsent().setValue(null);
		form.txtRBAC_PdsRetrieval().setValue(null);
		form.txtRBAC_PdsSearchForPatient().setValue(null);
		form.txtRBAC_PdsSearchPatientAdvanced().setValue(null);
		form.txtRBAC_PostcodeSearch().setValue(null);
		form.chkDisplayConsentToSharing().setValue(null); //WDEV-21326
	}
	
	private boolean save() 
	{
		PDSConfigurationVo config = populateDataFromScreen(form.getLocalContext().getPDSConfiguration()) ;
		
		String[] errors = config.validate();
		
		if (errors!=null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		if (config.getID_PDSConfiguration() == null && domain.getPatientSearchConfig() != null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		try
		{
			form.getLocalContext().setPDSConfiguration(domain.savePatientSearchConfig(config));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		return true;
	}

	private PDSConfigurationVo populateDataFromScreen(PDSConfigurationVo pdsConfiguration) 
	{
		if (pdsConfiguration==null)
			pdsConfiguration=new PDSConfigurationVo();
		else
			pdsConfiguration=(PDSConfigurationVo) pdsConfiguration.clone();
		
		pdsConfiguration.setDOB_DATE_RANGE(form.intDoBDateRange().getValue() != null ? form.intDoBDateRange().getValue() : DOB_DATE_RANGE);
		pdsConfiguration.setDOB_DATE_RANGE_TYPE(form.cmbDOBDateRangeType().getValue() != null ? form.cmbDOBDateRangeType().getValue() : TimeUnitsSecondsToYears.DAYS ); //WDEV-21622 
		pdsConfiguration.setDOD_DATE_RANGE(form.intDoDDateRange().getValue() != null ? form.intDoDDateRange().getValue() : DOD_DATE_RANGE);//WDEV-21622
		pdsConfiguration.setDOD_DATE_RANGE_TYPE(form.cmbDODDateRangeType().getValue() != null ? form.cmbDODDateRangeType().getValue() : TimeUnitsSecondsToYears.DAYS ); //WDEV-21622
		pdsConfiguration.setNO_FIXED_ABODE_POSTCODE(form.txtNoFixedAbodePostcode().getValue());
		pdsConfiguration.setADVANCED_SEARCH_TIMER_INTERVAL(form.intAdvancedSearchTimerInterval().getValue() != null ? form.intAdvancedSearchTimerInterval().getValue() : ADVANCED_SEACH_TIMER_INTERVAL);
		pdsConfiguration.setPDS_BACKOFFICE_NOTIFICATI(form.qmbPDSBackofficeNotificationUser().getValue() != null ? form.qmbPDSBackofficeNotificationUser().getValue().toAppUserRefVo(): null);
		pdsConfiguration.setNumOfDaysAppointBatchTrace(form.intNumOfDaysAppointBatchTrace().getValue());
		pdsConfiguration.setNumOfDaysTCIBatchTrace(form.intNumOfDaysTCIBatchTrace().getValue());
		pdsConfiguration.setNumOfDaysForNextPDSCheck(form.intNumOfDaysForNextPDSCheck().getValue());
		pdsConfiguration.setSYNCHRONISE_WITH_BACKOFFICE(form.chkSynchroniseWithBackoffice().getValue());
		pdsConfiguration.setFromPDSAccreditedSystemId(form.txtFromPDSAccreditedSystemId().getValue());
		pdsConfiguration.setToPDSAccreditedSystemId(form.txtToPDSAccreditedSystemId().getValue());
		pdsConfiguration.setPDS_STORE_MESSAGE_LOC(form.txtPdsStoreMessageLoc().getValue());
		pdsConfiguration.setPDS_STORE_MESSAGE(form.chkPdsStoreMessage().getValue());
		pdsConfiguration.setSTART_PDS_GATEWAY(form.chkStarPdsGateway().getValue());
		
		pdsConfiguration.setSDSHost(form.txtSpineSdsHost().getValue());
		pdsConfiguration.setSDSPort(form.txtSpineSdsPort().getValue());
		pdsConfiguration.setPDS_URL(form.txtPdsUrl().getValue());
		pdsConfiguration.setPDS_HOST(form.txtPdsHost().getValue());
		pdsConfiguration.setConsentChangeMessage(form.txtConsentChangeMessage().getValue());
		pdsConfiguration.setInactivePatientRecordBgColour(form.cmbInactivePatientBgColour().getValue() != null ? form.cmbInactivePatientBgColour().getValue() : null);
		
		//PDS Touchpoints
		pdsConfiguration.setTP_BookOutpatientAppt(form.chkTPOutApp().getValue());
		pdsConfiguration.setTP_BookWardAttenderAppt(form.chkTPWardAttAppt().getValue());
		pdsConfiguration.setTP_CreateTCIAndTheatreBooking(form.chkTPCreateTCI().getValue());
		pdsConfiguration.setTP_AnyAdmission(form.chkTPAnyAdmission().getValue());
		pdsConfiguration.setTP_AnyApptArrival(form.chkTPAnyApptArrival().getValue());
		
		pdsConfiguration.setPDS_AUTHENTICATION(form.chkPdsAuthentication().getValue());
		pdsConfiguration.setRBAC_AccessSensitiveData(form.txtRBAC_AccessSensitiveData().getValue());
		pdsConfiguration.setRBAC_AmendPatient(form.txtRBAC_AmendPatient().getValue());
		pdsConfiguration.setRBAC_AmendPatientDecease(form.txtRBAC_AmendPatientDecease().getValue());
		pdsConfiguration.setRBAC_ControlConsent(form.txtRBAC_ControlConsent().getValue());
		pdsConfiguration.setRBAC_PdsRetrieval(form.txtRBAC_PdsRetrieval().getValue());
		pdsConfiguration.setRBAC_PdsSearchForPatient(form.txtRBAC_PdsSearchForPatient().getValue());
		pdsConfiguration.setRBAC_PdsSearchPatientAdvanced(form.txtRBAC_PdsSearchPatientAdvanced().getValue());
		pdsConfiguration.setRBAC_PostcodeSearch(form.txtRBAC_PostcodeSearch().getValue());
		pdsConfiguration.setPDS_DISPLAY_CONSENT(form.chkDisplayConsentToSharing().getValue()); //WDEV-21326
		return pdsConfiguration;
	}

	@Override
	protected void onBtnEditRBACClick() throws PresentationLogicException
	{
		if(!Boolean.TRUE.equals(form.getLocalContext().getPasswordEntered()))
		{
    		form.getGlobalContext().Core.setYesNoDialogMessage("Restricted access. Please enter the passsword.");
    		engine.open(form.getForms().Core.YesNoDialog);
		}
		else
		{
			form.setMode(FormMode.EDIT);
			updateRBACControlsStatus(true);
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.YesNoDialog) && (result.equals(DialogResult.OK) ||result.equals(DialogResult.YES) ))
		{
			String password = form.getGlobalContext().getPasswordEntered();
			if (password == null || !password.equals("xxxxx"))
			{
				engine.showMessage("Incorrect password entered");
				return;
			}
		
			form.getLocalContext().setPasswordEntered(Boolean.TRUE);
			
			form.setMode(FormMode.EDIT);
			updateRBACControlsStatus(true);
		}
	}

	private void updateRBACControlsStatus(boolean enable)
	{
		form.chkPdsAuthentication().setEnabled(enable);
		form.txtRBAC_AccessSensitiveData().setEnabled(enable);
		form.txtRBAC_AmendPatient().setEnabled(enable);
		form.txtRBAC_AmendPatientDecease().setEnabled(enable);
		form.txtRBAC_ControlConsent().setEnabled(enable);
		form.txtRBAC_PdsRetrieval().setEnabled(enable);
		form.txtRBAC_PdsSearchForPatient().setEnabled(enable);
		form.txtRBAC_PdsSearchPatientAdvanced().setEnabled(enable);
		form.txtRBAC_PostcodeSearch().setEnabled(enable);
		form.chkDisplayConsentToSharing().setEnabled(enable);//WDEV-21326
	}

	@Override
	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.EDIT))
			form.btnEditRBAC().setVisible(false);
		else
			form.btnEditRBAC().setVisible(true);
	}
}
