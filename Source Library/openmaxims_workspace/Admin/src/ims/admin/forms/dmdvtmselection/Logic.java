//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.70 build 3314.22227)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.dmdvtmselection;

import ims.admin.forms.dmdvtmselection.GenForm.grdSearchRow;
import ims.admin.forms.dmdvtmselection.GenForm.grdSelectionRow;
import ims.clinical.vo.VTMVo;
import ims.clinical.vo.VTMVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
 
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		VTMVoCollection list = new VTMVoCollection();
		
		for(int x = 0; x < form.grdSelection().getRows().size(); x++)
		{		
			list.add(form.grdSelection().getRows().get(x).getValue());
		}
		
		form.getGlobalContext().Admin.DMDVTMSelection.setSelectedItems(list);
		
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}		
	@Override
	protected void onGrdSearchGridCheckBoxClicked(int column, grdSearchRow row, boolean isChecked) throws PresentationLogicException 
	{
		select(row);
	}		
	@Override
	protected void onGrdSelectionGridCheckBoxClicked(int column, grdSelectionRow row, boolean isChecked) throws PresentationLogicException 
	{
		unselect(row);
	}
	private void initialize()
	{
		form.txtName().setFocus();
		form.btnSave().setEnabled(false);
		form.btnSave().setVisible(true);
	}
	protected void onBtnSearchClick() throws PresentationLogicException 
	{		
		search();
	}
	private void search() 
	{
		//added for WDEV-7627
		if (form.txtName().getValue() == null || form.txtName().getValue().trim().length() == 0){
			engine.showMessage("Please enter some search criteria", "No Search Criteria", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}
		try 
		{
			populateSearch(domain.searchVTMByName(form.txtName().getValue()));
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
		}
	}		
	private void populateSearch(VTMVoCollection list) 
	{
		form.grdSearch().getRows().clear();
		//added for WDEV-7627 && list.size()>0
		if(list != null && list.size()>0)
		{
			for(int x = 0; x < list.size(); x++)
			{
				if(!isSelected(list.get(x)))
				{
					addSearchItem(list.get(x));
				}
			}
		}		
		//added for WDEV-7627 
		else {
			engine.showMessage("No results found. Please change your search criteria", "No Results", MessageButtons.OK, MessageIcon.INFORMATION);
		}
	}
	private void addSearchItem(VTMVo item) 
	{
		if(item != null)
		{
			grdSearchRow row = form.grdSearch().getRows().newRow();
			row.setcolName(item.getName());
			row.setcolSelect(false);
			row.setValue(item);
		}		
	}
	private void addSelectedItem(VTMVo item) 
	{
		if(item != null)
		{
			grdSelectionRow row = form.grdSelection().getRows().newRow();
			row.setcolName(item.getName());
			row.setcolUnselect(true);
			row.setValue(item);
		}		
	}	
	private void select(grdSearchRow row)
	{
		VTMVo item = row.getValue();
		
		form.grdSearch().setValue(item);
		form.grdSearch().removeSelectedRow();
		
		addSelectedItem(item);	
		
		updateSaveState();
	}
	private void unselect(grdSelectionRow row)
	{
		VTMVo item = row.getValue();
		
		form.grdSelection().setValue(item);
		form.grdSelection().removeSelectedRow();
				
		addSearchItem(item);
		
		updateSaveState();
	}	
	private boolean isSelected(VTMVo item)
	{
		if(item == null)
			return false;
		
		if(form.getGlobalContext().Admin.DMDVTMSelection.getAlreadySelectedItems() != null)
		{
			for(int x = 0; x < form.getGlobalContext().Admin.DMDVTMSelection.getAlreadySelectedItems().size(); x++)
			{
				if(item.equals(form.getGlobalContext().Admin.DMDVTMSelection.getAlreadySelectedItems().get(x)))
					return true;
			}
		}
		for(int x = 0; x < form.grdSelection().getRows().size(); x++)
		{
			VTMVo existingItem = form.grdSelection().getRows().get(x).getValue();
			if(item.equals(existingItem))
				return true;
		}
		
		return false;
	}
	private void updateSaveState()
	{
		form.btnSave().setEnabled(form.grdSelection().getRows().size() > 0);
	}
}
