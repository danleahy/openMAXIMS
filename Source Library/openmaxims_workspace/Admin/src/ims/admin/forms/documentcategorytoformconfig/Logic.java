//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.admin.forms.documentcategorytoformconfig;

import ims.admin.forms.documentcategorytoformconfig.GenForm.grdConfigRow;
import ims.admin.forms.documentcategorytoformconfig.GenForm.grdDocumentCategoryRow;
import ims.admin.forms.documentcategorytoformconfig.GenForm.grdDocumentCategoryRowCollection;
import ims.admin.vo.AppFormForDocumentCategoryConfigVo;
import ims.admin.vo.AppFormForDocumentCategoryConfigVoCollection;
import ims.admin.vo.DocumentCategoryToFormCfgVo;
import ims.admin.vo.DocumentCategoryToFormCfgVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCategoryCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	
	private void open() 
	{
		populateConfigs(domain.listDocumentCategoryToFormConfigs());
		
		form.getLocalContext().setSelectedInstance(domain.get(form.getLocalContext().getSelectedInstance()));
		
		form.grdConfig().setValue(form.getLocalContext().getSelectedInstance());
		populateScreenFromData(form.grdConfig().getValue());
		
		form.setMode(FormMode.VIEW);
	}

	private String getConfiguredFormsIds() 
	{
		if(form.grdConfig().getRows().size() == 0)
			return null;
		
		StringBuilder formIds = new StringBuilder();
		
		for(int i=0; i<form.grdConfig().getRows().size(); i++)
		{
			if(form.grdConfig().getRows().get(i).getValue().getAppForm() == null)
				continue;
			
			if(formIds.length() > 0)
				formIds.append(",");
			
			formIds.append(form.grdConfig().getRows().get(i).getValue().getAppForm().getID_AppForm());
		}
		
		return formIds.length() > 0 ? formIds.toString() : null;
	}

	private void populateConfigs(DocumentCategoryToFormCfgVoCollection configs) 
	{
		form.grdConfig().getRows().clear();
		
		if(configs == null)
			return;
		
		for(DocumentCategoryToFormCfgVo config : configs)
		{
			if(config == null)
				return;
			
			grdConfigRow newRow = form.grdConfig().getRows().newRow();
			newRow.setcolFormName(config.getAppForm() != null ? config.getAppForm().getName() : null); //WDEV-18898
			newRow.setTooltip(config.getAppForm() != null ?  config.getAppForm().getCaption() : ""); //WDEV-18898
			newRow.setValue(config);
		}
	}

	private void initialise() 
	{
		DocumentCategoryCollection collection =	(DocumentCategoryCollection) domain.getLookupService().getLookupCollection(DocumentCategory.TYPE_ID, DocumentCategoryCollection.class, DocumentCategory.class, true, false);
		form.getLocalContext().setDocumentCategoryInstances(collection);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	
	private boolean save() 
	{
		DocumentCategoryToFormCfgVo record = populateDataFromScreen(form.getLocalContext().getSelectedInstance());
		
		String[] errors = record.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setSelectedInstance(domain.save(record));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			
			return false;
		}
		
		return true;
	}

	private String[] validateUIRules() 
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.qmbForm().getValue() == null)
		{
			errors.add("Form is mandatory.");
		}
		if (!hasAtLeastOneInstanceSelected(form.grdDocumentCategory().getRows())) //WDEV-18898
		{	
			errors.add("At least one document category instance is mandatory for selection.");
		}
		if(errors != null && errors.size() > 0)
		{
			return errors.toArray(new String[errors.size()]);
		}
		
		return null;
	}
	//WDEV-18898
	private boolean hasAtLeastOneInstanceSelected(grdDocumentCategoryRowCollection grdDocumentCategoryRowCollection)
	{
		if (grdDocumentCategoryRowCollection.size() <=0)
			return false;
		for (int i=0;i<grdDocumentCategoryRowCollection.size();i++)
		{
			if (Boolean.TRUE.equals(grdDocumentCategoryRowCollection.get(i).getColSelect()))
				return true;
		}
		return false;
	}

	private DocumentCategoryToFormCfgVo populateDataFromScreen(DocumentCategoryToFormCfgVo selectedInstance) 
	{
		if(selectedInstance == null)
			selectedInstance = new DocumentCategoryToFormCfgVo();
		
		selectedInstance.setAppForm(form.qmbForm().getValue());
		selectedInstance.setDocumentCategory(populateDocumentCategoryCollectionFromScreen());
		
		return selectedInstance;
	}

	private DocumentCategoryCollection populateDocumentCategoryCollectionFromScreen() 
	{
		DocumentCategoryCollection coll = new DocumentCategoryCollection();
		
		for(int i=0; i<form.grdDocumentCategory().getRows().size(); i++)
		{
			if(form.grdDocumentCategory().getRows().get(i).getColSelect())
			{
				coll.add(form.grdDocumentCategory().getRows().get(i).getValue());
			}
		}
		
		return coll.size() > 0 ? coll : null;
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	private void updateInstance() 
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	private void newInstance() 
	{
		clearScreen();
		form.getLocalContext().setSelectedInstance(null);
		form.grdConfig().setValue(null);
		
		form.setMode(FormMode.EDIT);
	}

	private void initializeDocumentCategoryGrid() 
	{
		form.grdDocumentCategory().getRows().clear();
		
		if(form.getLocalContext().getDocumentCategoryInstances() == null)
			return;
		
		for(int i=0; i<form.getLocalContext().getDocumentCategoryInstances().size(); i++)
		{
			grdDocumentCategoryRow newRow = form.grdDocumentCategory().getRows().newRow();
			newRow.setColInstance(form.getLocalContext().getDocumentCategoryInstances().get(i).getText());
			newRow.setValue(form.getLocalContext().getDocumentCategoryInstances().get(i));
			
			if(!Boolean.TRUE.equals(form.getLocalContext().getDocumentCategoryInstances().get(i).isActive()))
			{
				newRow.setBackColor(Color.LightGray);
			}
		}
	}

	
	@Override
	protected void onQmbFormTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		listForms(value);
	}
	
	private void listForms(String formName) 
	{
		form.qmbForm().clear();
		
		if(formName == null)
			return;
		
		AppFormForDocumentCategoryConfigVoCollection appForms = domain.listForms(formName, getConfiguredFormsIds());
		
		if(appForms == null || appForms.size() == 0)
			return;
		
		for(AppFormForDocumentCategoryConfigVo appForm : appForms)
		{
			if(appForm == null)
				continue;
			
			form.qmbForm().newRow(appForm, appForm.getName());
		}
		
		if(appForms.size() == 1)
		{
			form.qmbForm().setValue(appForms.get(0));
			return;
		}
		
		form.qmbForm().showOpened();
	}
	
	@Override
	protected void onGrdConfigSelectionChanged()
	{
		form.getLocalContext().setSelectedInstance(domain.get(form.grdConfig().getValue()));
		populateScreenFromData(form.getLocalContext().getSelectedInstance());
		updateControlsState();
	}

	private void populateScreenFromData(DocumentCategoryToFormCfgVo selectedInstance) 
	{
		clearScreen();
		
		if(selectedInstance == null)
			return;
		
		if(selectedInstance.getAppForm() != null)
		{
			form.qmbForm().newRow(selectedInstance.getAppForm(), selectedInstance.getAppForm().getName());
			form.qmbForm().setValue(selectedInstance.getAppForm());
		}
		
		populateDocumentCategoryGrid(selectedInstance.getDocumentCategory());
	}

	private void populateDocumentCategoryGrid(DocumentCategoryCollection documentCategoryColl) 
	{
		if(documentCategoryColl == null)
			return;
		
		for(int i=0; i<documentCategoryColl.size(); i++)
		{
			for(int j=0; j<form.grdDocumentCategory().getRows().size(); j++)
			{
				if(form.grdDocumentCategory().getRows().get(j).getValue().equals(documentCategoryColl.get(i)))
				{
					form.grdDocumentCategory().getRows().get(j).setColSelect(true);
					break;
				}
			}
		}
	}

	private void clearScreen() 
	{
		form.qmbForm().clear();
		
		initializeDocumentCategoryGrid();
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}

	private void updateControlsState() 
	{
		form.getContextMenus().Admin.getDocumentCategoryToFormConfigMenuNEWItem().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.getContextMenus().Admin.getDocumentCategoryToFormConfigMenuEDITItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdConfig().getValue() != null);
		form.getContextMenus().Admin.getDocumentCategoryToFormConfigMenuRIEItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdConfig().getValue() != null); //WDEV-18898
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(form.grdConfig().getValue() != null);
			form.btnEdit().setEnabled(true);
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.AdminNamespace.DocumentCategoryToFormConfigMenu.NEW:
				newInstance();
			break;
			
			case GenForm.ContextMenus.AdminNamespace.DocumentCategoryToFormConfigMenu.EDIT:
				updateInstance();
			break;
			
			case GenForm.ContextMenus.AdminNamespace.DocumentCategoryToFormConfigMenu.RIE: //WDEV-18898
				markAsRIE();
			break;
		}
		
		updateControlsState();
	}

	private void markAsRIE()
	{
		//WDEV-18898
		if (isSuccessfullyMarkedAsRIE())
			open();		
	}

	private boolean isSuccessfullyMarkedAsRIE()
	{
		if (form.grdConfig().getValue() == null)
			return false;
		
		if (domain.isStale(form.grdConfig().getValue()))
        {
        	engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
        	open();
        	return false;
        }
     
		try 
		{
			domain.markAsRie(form.grdConfig().getValue(), engine.getFormName(), null, null, null, "Document Category Config record for " + form.grdConfig().getValue().getAppForm().getName() + " form removed.");
			
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}
}
