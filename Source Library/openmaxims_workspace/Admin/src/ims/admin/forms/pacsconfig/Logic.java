//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4847.21738)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.admin.forms.pacsconfig;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.InvalidParameterSpecException;
import java.util.Arrays;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;

import ims.core.vo.PacsConfigurationVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.PresentationLogicException;
import ims.utils.Base64Coder;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final Logger	LOG	= Logger.getLogger(ims.admin.forms.pacsconfig.Logic.class);
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	private void initialize()
	{
		form.getLocalContext().setPACSConfigVo(null);
	}
	
	@Override
	protected void onBtnShowUrlClick() throws ims.framework.exceptions.PresentationLogicException
	{
		showURL();
	}
	
	private void showURL()
	{
		PacsConfigurationVo record = populateDataFromScreen(form.getLocalContext().getPACSConfigVo());
		String userName = engine.getLoggedInUser().getUsername();
		StringBuffer sbURL = new StringBuffer();
		String accessionNumber=null;
		String identifierValue=null;
		String typeCode=null;
		
		if(record.getAccessionParamIsNotNull())
		{
			accessionNumber=record.getAccessionTestValue();
		}
		else
		{
			identifierValue=record.getAccessionTestValue();
			typeCode=record.getPrimaryIdentifierCode();
		}
		
		sbURL.append(record.getServerAddress());
		if(record.getUseEncryptedTokenIsNotNull()
			&&record.getUseEncryptedToken().equals(true))
		{
			sbURL.append(record.getEncryptedTokenParam());
			try
			{
				sbURL.append(encrypt(record.buildParameterList(accessionNumber,userName,identifierValue,typeCode),record.getAESKey()));
			} catch (Exception e)
			{
				String message="Error encrypting patient details"+e.getMessage()!=null?e.getMessage():"";
				LOG.error(message, e);
				engine.showMessage(message);
				engine.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.FATALERROR, message);
			}
		}
		else
		{
			sbURL.append("&");	
			sbURL.append(record.buildParameterList(accessionNumber,userName,identifierValue,typeCode));
		}
		form.lblURL().setValue(record.getServerAddressIsNotNull() ? sbURL.toString() : "");
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( save())
			open();

	}
	private boolean save()
	{
		PacsConfigurationVo record = populateDataFromScreen(form.getLocalContext().getPACSConfigVo());
		
		if (form.cmbPACSClientType().getValue() == null)
		{
			engine.showMessage("PACS Client Type is mandatory!");
			return false;
		}
		
		String[] arrErrors = record.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setPACSConfigVo(domain.savePACSConfigVo(record));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		
		showURL();
		return true;
		
	}

	private void open()
	{
		clearScreen();
		PacsConfigurationVo tempVo = domain.getPACSConfigVo();
		form.getLocalContext().setPACSConfigVo(tempVo);
		populateScreenFromData(tempVo);
		showURL();
		form.setMode(FormMode.VIEW);
	}
	
	private void clearScreen()
	{
		form.txtServer().setValue(null);
		form.txtUsername().setValue(null);
		form.txtUsernameString().setValue(null);
		form.txtPassword().setValue(null);
		form.txtPasswordString().setValue(null);
		form.txtAccession().setValue(null);
		form.txtTestAccessionNumber().setValue(null);
		//WDEV-19551
		form.chkLoggedInUser().setValue(null);
		form.cmbPrimaryIdenifier().setValue(null);
		form.cmbSecondaryIdentifier().setValue(null);
		form.txtPatientIdentifierParam().setValue(null);
		form.txtIdentifierParam().setValue(null);
		form.txtSessionTimeParam().setValue(null);
		form.txtPrimaryIdentifierCode().setValue(null);
		form.txtSecondaryIdentifierCode().setValue(null);
		form.chkEncryptedToken().setValue(null);
		form.txtEncryptedTokenParam().setValue(null);
	}
	
	private void populateScreenFromData(PacsConfigurationVo tempVo)
	{
		if( tempVo == null )
			return;
		
		form.txtServer().setValue(tempVo.getServerAddress());
		form.txtUsername().setValue(tempVo.getUsername());
		form.txtUsernameString().setValue(tempVo.getUserNameParam());
		form.txtPassword().setValue(tempVo.getPassword());
		form.txtPasswordString().setValue(tempVo.getPasswordParam());
		form.txtAccession().setValue(tempVo.getAccessionParam());
		form.txtTestAccessionNumber().setValue(tempVo.getAccessionTestValue());
		form.cmbPACSClientType().setValue(tempVo.getPACSClientType());	
		//WDEV-19551
		form.chkLoggedInUser().setValue(tempVo.getUseLoggedUserName());
		form.cmbPrimaryIdenifier().setValue(tempVo.getPrimaryIdentifier());
		form.cmbSecondaryIdentifier().setValue(tempVo.getSecondaryIdentifier());
		form.txtPatientIdentifierParam().setValue(tempVo.getPatientIdentifierParam());
		form.txtIdentifierParam().setValue(tempVo.getIssuerOfIdentifierParam());
		form.txtSessionTimeParam().setValue(tempVo.getSessionTimeParam());
		form.txtPrimaryIdentifierCode().setValue(tempVo.getPrimaryIdentifierCode());
		form.txtSecondaryIdentifierCode().setValue(tempVo.getSecondaryIdentifierCode());
		form.chkEncryptedToken().setValue(tempVo.getUseEncryptedToken());
		form.txtEncryptedTokenParam().setValue(tempVo.getEncryptedTokenParam());
		form.txtKey().setValue(tempVo.getAESKey());
	}

	private PacsConfigurationVo populateDataFromScreen(PacsConfigurationVo record)
	{
		if( record == null )
			record = new PacsConfigurationVo(); 
		
		record.setServerAddress(form.txtServer().getValue());
		record.setUserNameParam(form.txtUsernameString().getValue());
		record.setUsername(form.txtUsername().getValue());
		record.setPasswordParam(form.txtPasswordString().getValue());
		record.setPassword(form.txtPassword().getValue());
		record.setAccessionParam(form.txtAccession().getValue());
		record.setAccessionTestValue(form.txtTestAccessionNumber().getValue());
		record.setPACSClientType(form.cmbPACSClientType().getValue());
		//WDEV-19551
		record.setUseLoggedUserName(form.chkLoggedInUser().getValue());
		record.setPrimaryIdentifier(form.cmbPrimaryIdenifier().getValue());
		record.setSecondaryIdentifier(form.cmbSecondaryIdentifier().getValue());
		record.setPatientIdentifierParam(form.txtPatientIdentifierParam().getValue());
		record.setIssuerOfIdentifierParam(form.txtIdentifierParam().getValue());
		record.setSessionTimeParam(form.txtSessionTimeParam().getValue());
		record.setPrimaryIdentifierCode(form.txtPrimaryIdentifierCode().getValue());
		record.setSecondaryIdentifierCode(form.txtSecondaryIdentifierCode().getValue());
		record.setUseEncryptedToken(form.chkEncryptedToken().getValue());
		record.setEncryptedTokenParam(form.txtEncryptedTokenParam().getValue());
		record.setAESKey(form.txtKey().getValue());
		return record;
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onBtn1Click() throws PresentationLogicException
	{
		form.getGlobalContext().OCRR.CentricityWebPACS.setAccessionNumber(form.txtTestAccessionNumber().getValue());
		engine.open(form.getForms().OCRR.CentricityWebPACSViewer,true,true);
	}
	
	
	public static String encrypt(String plainText,String key) throws 
    NoSuchAlgorithmException, 
    InvalidKeySpecException, 
    NoSuchPaddingException, 
    InvalidParameterSpecException, 
    IllegalBlockSizeException, 
    BadPaddingException, 
    UnsupportedEncodingException, 
    InvalidKeyException, 
    InvalidAlgorithmParameterException 
	{   
	    byte[] ivBytes = new byte[16];
	    Arrays.fill( ivBytes, (byte)0 );
	    byte[] decodedKey=Base64.decodeBase64(key.getBytes("UTF-8"));
	    SecretKeySpec secret = new SecretKeySpec(decodedKey, "AES");
	    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
	    cipher.init(Cipher.ENCRYPT_MODE, secret, new IvParameterSpec(ivBytes));
	    byte[] encryptedTextBytes = cipher.doFinal(plainText.getBytes("UTF-8"));
	    return  URLEncoder.encode(new String( Base64Coder.encode(encryptedTextBytes)),"UTF-8");
	}
	
}
