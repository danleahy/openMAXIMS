//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5256.13787)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.admin.forms.demographicscomunicationchannelsconfigdialog;

import ims.admin.forms.demographicscomunicationchannelsconfigdialog.GenForm.grdChannelTypesRow;
import ims.core.vo.DemographicControlsConfigVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( form.getLocalContext().getDemographicControlsConfigIsNotNull() )
		{
			for(int j = 0; j < form.grdChannelTypes().getRows().size(); j++)
			{
				if( Boolean.TRUE.equals(form.grdChannelTypes().getRows().get(j).getColSelect()) )
				{
					form.getLocalContext().getDemographicControlsConfig().setChannelType(form.grdChannelTypes().getRows().get(j).getValue());
					form.getLocalContext().getDemographicControlsConfig().setIsMandatory(Boolean.TRUE);
					form.getGlobalContext().Core.setDemographicControlsConfigVo(form.getLocalContext().getDemographicControlsConfig());
					engine.close(DialogResult.OK);
					return;
				}
			}
		}
		engine.close(DialogResult.CANCEL);
		
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		form.getLocalContext().setDemographicControlsConfig(null);
		if( args != null && args.length > 0   && (args[0] instanceof DemographicControlsConfigVo))
			form.getLocalContext().setDemographicControlsConfig((DemographicControlsConfigVo) args[0]);
		
		open();
		
		form.btnOK().setEnabled(false);
		
	}
	private void open()
	{
		
		form.grdChannelTypes().getRows().clear();
		ims.core.vo.lookups.ChannelTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getChannelType(this.domain.getLookupService());
		for( int x = 0; x < lookupCollection.size(); x++)
		{
			
			if( lookupCollection.get(x) != null && lookupCollection.get(x).isActive())
			{
    			ims.admin.forms.demographicscomunicationchannelsconfigdialog.GenForm.grdChannelTypesRow row = form.grdChannelTypes().getRows().newRow();
    			row.setColChannelType(lookupCollection.get(x).getText());
    			row.setColSelect(false);
    			row.setValue(lookupCollection.get(x));
			}
			
		}
	}

	
	protected void onGrdChannelTypesGridCheckBoxClicked(int column, grdChannelTypesRow row, boolean isChecked) throws PresentationLogicException
	{
		for( int i = 0; i < form.grdChannelTypes().getRows().size();i++)
		{
			if( form.grdChannelTypes().getRows().get(i).getValue() != null && row.getValue() != null && !form.grdChannelTypes().getRows().get(i).getValue().equals(row.getValue()))
			{
				form.grdChannelTypes().getRows().get(i).setColSelect(Boolean.FALSE);
			}
			
		}
		boolean enabledis = false;
		for( int j = 0; j < form.grdChannelTypes().getRows().size();j++)
		{
			if( form.grdChannelTypes().getRows().get(j) != null && Boolean.TRUE.equals(form.grdChannelTypes().getRows().get(j).getColSelect()))
			{
				enabledis = true;
				break;
			}
			
		}
		
		if( enabledis == true )
		{
			form.btnOK().setEnabled(true);
		}
		else
		{
			form.btnOK().setEnabled(false);
		}
		
	}
}
