//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.80 build 5207.10654)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.

package ims.admin.forms.spectrum;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ISystemLog;

import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;

import org.tempuri.WebService1.Service1.ArrayOfString;
import org.tempuri.WebService1.Service1.ClsInterfaceLocator;
import org.tempuri.WebService1.Service1.ClsInterfaceSoap;

public class Logic extends BaseLogic
{
	boolean launchError;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	private void open() 
	{
		clear();
		populateScreenFromData();
		updateControlState();
	}
	
	private void updateControlState() 
	{
		form.btnClose().setVisible(engine.isDialog());
	}
	private void populateScreenFromData() 
	{
		String url = formatUrl();
		if (url != null && url.trim().length() > 0) {
			form.htmView().setIFrameValue(url);
			form.htmURL().setHTML("<b>" + url + "</b>");		
		}	
		else {
			if (!launchError) {
				engine.showMessage("Error while launching Spectrum.\n Please enable debug mode and consult the SystemLogs for more details.");
			}
			
			engine.close(DialogResult.CANCEL);	
		}
		
	}
	
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		String webServiceURL = ConfigFlag.GEN.SPECTRUM_WEBSERVICE_URL.getValue();
		if (webServiceURL == null || webServiceURL.trim().length() == 0)
			errors.add("'WebService URL' is mandatory");
		
		String username = ConfigFlag.GEN.SPECTRUM_WEBSERVICE_USERNAME.getValue();
		if (username == null || username.trim().length() == 0)
			errors.add("'WebService username' is mandatory");
		
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		if (patient == null)
			errors.add("'Patient' is mandatory");
		else {
			PatientId patienId = patient.getMrnnum();
			if (patienId == null)
				errors.add("'PatientId' is mandatory");
			else {
				String mrnNum = patienId.getIdValue();
				if (mrnNum == null || mrnNum.trim().length() == 0)
					errors.add("'Mrnnum' number is mandatory");					
			}
		}
		
		if (errors.size() > 0) {
			String[] err = new String[errors.size()];
			errors.toArray(err);
			engine.showErrors("Error while launching Spectrum", err);
			return err;
		}

		return null;
	}
	
	private String formatUrl()
	{		
		String[] str = getUIErrors();
		if (str != null && str.length > 0) {
			engine.showErrors(str);			
			return null;
		}
		
		String webServiceURL = ConfigFlag.GEN.SPECTRUM_WEBSERVICE_URL.getValue();
		String webServiceUsername = ConfigFlag.GEN.SPECTRUM_WEBSERVICE_USERNAME.getValue();
		String webServiceParameters = ConfigFlag.GEN.SPECTRUM_WEBSERVICE_PARAMETERS.getValue();
		
		String mrnNum = null;
		PatientId patienId = null;
		
		PatientShort patient = form.getGlobalContext().Core.getPatientShort();
		if (patient != null) {
			patienId = patient.getMrnnum();
			if (patienId != null) {
				mrnNum = patienId.getIdValue();
				if (mrnNum == null || mrnNum.trim().length() == 0) {
					return null;
				}					
			} 
			else {
				return null;				
			}
		}
		else {
			return null;
		}
				
		Calendar calendar = Calendar.getInstance();
		calendar.add(Calendar.DATE, 1);
        String dateStr = new SimpleDateFormat("dd MMM yyyy hh:mm a").format(calendar.getTime()); 
		
        String parameters  = webServiceParameters;
        if (parameters == null || parameters.trim().length() == 0)
        	parameters= "0,0";
        
        String paramsValues[] = parameters.split(",");
        
        int parameter3 = 0 , parameter4 = 0;		
        try { parameter3 = Integer.parseInt(paramsValues[0].trim()); }
        catch (NumberFormatException err){ parameter3 = 0; } 
        try { parameter4 = Integer.parseInt(paramsValues[1].trim()); }
        catch (NumberFormatException err){ parameter4 = 0; }
        	
		try 
		{
			ClsInterfaceSoap service = new ClsInterfaceLocator().getclsInterfaceSoap(new URL(webServiceURL));
			String retUrl = service.sGetFolderURL(new ArrayOfString(new String[]{mrnNum, ""}), webServiceUsername, dateStr, parameter3, parameter4);
			
			//If RELEASE_MODE == false
			traceDebug(webServiceURL, webServiceUsername, webServiceParameters, retUrl, patient, mrnNum);
			
			return retUrl;
		}
		catch (Exception err) {
			traceError(webServiceURL, webServiceUsername, webServiceParameters, patient, mrnNum, err);
			err.printStackTrace();
			launchError = true;
			
			return null;
		} 		 	
	}
	private void traceError(String webServiceURL, String webServiceUsername, String webServiceParameters, PatientShort patient, String mrnNum, Exception err) 
	{
		StringBuilder error = new StringBuilder();
		error.append("*** Error calling webservice ***");
		error.append(System.getProperty("line.separator"));
		error.append(System.getProperty("line.separator"));
		error.append("Patient Info: " + patient.getPatientInfo());
		error.append(System.getProperty("line.separator"));
		error.append("MRN Number: " + mrnNum);
		error.append(System.getProperty("line.separator"));	
		error.append("WebService URL: " +  webServiceURL);
		error.append(System.getProperty("line.separator"));
		error.append("WebService Username: " +  webServiceUsername);
		error.append(System.getProperty("line.separator"));
		error.append("WebService Parameters: " +  webServiceParameters);
		error.append(System.getProperty("line.separator"));
		error.append(System.getProperty("line.separator"));
		error.append("Error: " + err.getMessage());
		
		ISystemLog logEntry = engine.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, error.toString());
		int errorId = logEntry.getSystemLogEventId();

		engine.showMessage("EventID: " + errorId + "\nAn error occurred while launching Spectrum.\nPlease consult the SystemLogs for details.");	
	}
	
	private void traceDebug(String webServiceURL, String webServiceUsername, String webServiceParameters, String retUrl, PatientShort patient, String mrnNum) 
	{
		if (Boolean.FALSE.equals(ConfigFlag.GEN.RELEASE_MODE.getValue())) {
			StringBuilder debug = new StringBuilder();
			debug.append("*** Calling Spectrum webService ***");
			debug.append(System.getProperty("line.separator"));			
			debug.append(System.getProperty("line.separator"));
			debug.append("Patient Info: " + patient.getPatientInfo());
			debug.append(System.getProperty("line.separator"));
			debug.append("MRN Number: " + mrnNum);
			debug.append(System.getProperty("line.separator"));			
			debug.append("WebService URL: " +  webServiceURL);
			debug.append(System.getProperty("line.separator"));
			debug.append("WebService Username: " +  webServiceUsername);
			debug.append(System.getProperty("line.separator"));
			debug.append("WebService Parameters: " +  webServiceParameters);
			debug.append(System.getProperty("line.separator"));
			debug.append("URL: " +  retUrl);
			engine.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, debug.toString());								
		}
	}		
		
	private void clear()
	{		
		form.htmURL().setHTML("");	
		launchError = false;
	}
	
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		if (engine.isDialog())
			engine.close(DialogResult.OK);
	}
}
