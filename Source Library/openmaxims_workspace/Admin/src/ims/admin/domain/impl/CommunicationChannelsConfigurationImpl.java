//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.

package ims.admin.domain.impl;

import ims.admin.domain.base.impl.BaseCommunicationChannelsConfigurationImpl;
import ims.core.admin.domain.objects.CommChannelsConfig;
import ims.core.vo.CommChannelConfigVo;
import ims.core.vo.domain.CommChannelConfigVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class CommunicationChannelsConfigurationImpl extends BaseCommunicationChannelsConfigurationImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* getCommChannelConfig
	*/
	public ims.core.vo.CommChannelConfigVo getCommChannelConfig()
	{
		DomainFactory factory = getDomainFactory();
		String hql = new String("from CommChannelsConfig as c1_1 order by c1_1.id asc");
		List<?> list = factory.find(hql);
		
		if(list != null && list.size() > 0)
			return CommChannelConfigVoAssembler.createCommChannelConfigVoCollectionFromCommChannelsConfig(list).get(0);
		
		return null;
	}

	@Override
	public CommChannelConfigVo saveCommChannelConfig(CommChannelConfigVo value) throws StaleObjectException
	{
		if (value == null )
			throw new CodingRuntimeException("Cannot save null CommChannelConfigVo.");

		if (!value.isValidated())
				throw new DomainRuntimeException("CommChannelConfigVo Not Validated.");
		
		DomainFactory factory = getDomainFactory();
		
		CommChannelsConfig domCommChannelConfigVo = CommChannelConfigVoAssembler.extractCommChannelsConfig(factory, value);
		factory.save(domCommChannelConfigVo);
		
		return CommChannelConfigVoAssembler.create(domCommChannelConfigVo);		
	}
}
