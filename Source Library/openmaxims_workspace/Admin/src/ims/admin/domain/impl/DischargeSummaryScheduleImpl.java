//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.70 build 3365.20851)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import ims.admin.domain.base.impl.BaseDischargeSummaryScheduleImpl;
import ims.admin.forms.dischargesummaryschedule.Logic;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.DischargeDetailsVoCollection;
import ims.clinical.vo.DischargeReportDetailVo;
import ims.clinical.vo.DischargeReportDetailVoCollection;
import ims.clinical.vo.DischargeSummaryScheduleVo;
import ims.clinical.vo.DischargeSummaryScheduleVoCollection;
import ims.clinical.vo.FailedEmailsDetailsVoCollection;
import ims.clinical.vo.domain.DischargeDetailsVoAssembler;
import ims.clinical.vo.domain.DischargeReportDetailVoAssembler;
import ims.clinical.vo.domain.DischargeSummaryScheduleVoAssembler;
import ims.clinical.vo.lookups.DischargeLetterStatus;
import ims.clinical.vo.lookups.DischargeSummaryJobType;
import ims.clinical.vo.lookups.DischargeSupplementaryLetterStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.configuration.domain.objects.AppSite;
import ims.core.documents.domain.objects.PatientDocument;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.AppSiteVo;
import ims.core.vo.CareContextForDischargeSummarySchedulerVo;
import ims.core.vo.EpisodeOfCareInterfaceVo;
import ims.core.vo.EpisodeOfCareInterfaceVoCollection;
import ims.core.vo.EpisodeofCareShortVoCollection;
import ims.core.vo.GPLiteWithCommChannelsVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientDocumentVoCollection;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientLiteVo;
import ims.core.vo.PatientLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientShortCollection;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.domain.AppSiteVoAssembler;
import ims.core.vo.domain.CareContextForDischargeSummarySchedulerVoAssembler;
import ims.core.vo.domain.EpisodeOfCareInterfaceVoAssembler;
import ims.core.vo.domain.EpisodeofCareShortVoAssembler;
import ims.core.vo.domain.PatientAssembler;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.core.vo.domain.PatientLiteVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.AlertType;
import ims.core.vo.lookups.ApplicationSiteName;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImplFlyweightFactory;
import ims.domain.lookups.LookupInstance;
import ims.edischarge.domain.objects.DischargeDetails;
import ims.edischarge.domain.objects.DischargeReportDetail;
import ims.edischarge.domain.objects.DischargeSummarySchedule;
import ims.edischarge.vo.DischargeSummaryScheduleRefVo;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;

import java.io.IOException;
import java.io.Serializable;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.SecureRandom;
import java.security.Security;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.multipart.ByteArrayPartSource;
import org.apache.commons.httpclient.methods.multipart.FilePart;
import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
import org.apache.commons.httpclient.methods.multipart.Part;
import org.apache.commons.httpclient.methods.multipart.StringPart;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.apache.log4j.Logger;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.StatefulJob;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class DischargeSummaryScheduleImpl extends BaseDischargeSummaryScheduleImpl implements StatefulJob
{
	private static final long 	serialVersionUID 			= 1L;
	private static final Logger	LOG							= Logger.getLogger(Logic.class);
	private static final int 	TIMEOUT 					= 1000 * 60 * 15;
	private static final int 	MAX_BUFFER_LIMIT_NO_WARNING = 1024*1024;
	private static final int 	NO_OF_RECORDS = 1000;
	private static final String EMAIL_SUBJECT = "  Patient Data - ";//WDEV-13753,wdev-16298
	
	private String 			fileName;
	private int				successfulSentEmail = 0;
	private int		 		failedSentEmail = 0;
	private int		 		generatedLetters = 0;
	private int				printedLetters = 0;
	private int				sealedEnvelopePatients = 0;
	private static boolean	 running = false;
	String 					 printer = null;		
	private static String 	 SMTP_HOST_NAME;
	private static int 		 SMTP_PORT;
	private static String 	 SMTP_AUTH;
	private static String 	 emailFromAddress;	
	private static String 	 urlQueryServer;
	private static String 	 urlReportServer;
	private static String 	 urlPdfUploadServer;	
	private static String 	 pdfStorePath;	
	String 					 filePath = "";		
	
	private boolean getMorePatientDocuments = false; 
	
	public void save(DischargeSummaryScheduleVo batch) throws StaleObjectException
	{
		if(batch == null) {
			throw new CodingRuntimeException("DischargeSummaryScheduleVo is null");
		}
		if (!batch.isValidated()) {
			throw new DomainRuntimeException("DischargeSummaryScheduleVo not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		factory.save(DischargeSummaryScheduleVoAssembler.extractDischargeSummarySchedule(factory, batch));
	}
	
	public DischargeSummaryScheduleVo getDischargeSummarySchedule(DischargeSummaryScheduleRefVo voRef)
	{
		if(voRef == null)
			throw new CodingRuntimeException("Cannot get DischargeSummaryScheduleVo for null DischargeSummaryScheduleRefVo");
		
		DomainFactory factory = getDomainFactory();
		DischargeSummarySchedule doDischargeSummarySchedule = (DischargeSummarySchedule) factory.getDomainObject(DischargeSummarySchedule.class, voRef.getID_DischargeSummarySchedule());
		return DischargeSummaryScheduleVoAssembler.create(doDischargeSummarySchedule);
	}
	
	public DischargeReportDetailVo saveDischargeReportDetail(DischargeReportDetailVo report) throws StaleObjectException
	{
		if(report == null) {
			throw new CodingRuntimeException("DischargeReportDetailVo is null");
		}
		if (!report.isValidated()) {
			throw new DomainRuntimeException("DischargeReportDetailVo not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		DischargeReportDetail doDischargeReportDetail = DischargeReportDetailVoAssembler.extractDischargeReportDetail(factory, report);			
		factory.save(doDischargeReportDetail);			
		return DischargeReportDetailVoAssembler.create(doDischargeReportDetail);
	}		
	
	public PatientDocumentVo savePatientDocument(PatientDocumentVo document) throws StaleObjectException
	{
		if(document == null) {
			throw new CodingRuntimeException("PatientDocumentVo is null");
		}
		if (!document.isValidated()) {
			throw new DomainRuntimeException("PatientDocumentVo not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		PatientDocument doPatientDocument = PatientDocumentVoAssembler.extractPatientDocument(factory, document);	
		factory.save(doPatientDocument);			
		return PatientDocumentVoAssembler.create(doPatientDocument);
	}	
	
	public void deletePatientDocument(PatientDocumentVo document) throws StaleObjectException, ForeignKeyViolationException
	{
		if(document == null) {
			throw new CodingRuntimeException("PatientDocumentVo is null");
		}
		if (!document.isValidated()) {
			throw new DomainRuntimeException("PatientDocumentVo not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		PatientDocument doPatientDocument = PatientDocumentVoAssembler.extractPatientDocument(factory, document);	
		factory.delete(doPatientDocument);					
	}	
	
	public DischargeDetailsVo saveDischargeDetails(DischargeDetailsVo discharge) throws StaleObjectException
	{
		if(discharge == null) {
			throw new CodingRuntimeException("DischargeDetailVo is null");
		}
		if (!discharge.isValidated()) {
			throw new DomainRuntimeException("DischargeDetailVo not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		DischargeDetails doDischargeDetails = DischargeDetailsVoAssembler.extractDischargeDetails(factory, discharge);			
		factory.save(doDischargeDetails);			
		return DischargeDetailsVoAssembler.create(doDischargeDetails);
	}	
	
	public String[] getSystemReportAndTemplate(Integer imsId)
	{
		String[] result = null;		
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.imsId= :imsid) order by t1_1.name", new String[] {"imsid"}, new Object[] {imsId});
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();			
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
		
		return result;
	}
		
	public PatientLiteVo getPatientByCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null || careContext.getID_CareContext() == null) {
			throw new CodingRuntimeException("CareContextRefVo is null");
		}
		if(careContext.getID_CareContext() == null) {
			throw new CodingRuntimeException("CareContextRefVo id is null");
		}
		
		DomainFactory factory = getDomainFactory();
		List domainObjectList = factory.find("select p from CareContext as cc left join cc.episodeOfCare as eoc left join eoc.careSpell as cs left join cs.patient as p where (cc.id = :idCareContext)", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		PatientLiteVoCollection patient = PatientLiteVoAssembler.createPatientLiteVoCollectionFromPatient(domainObjectList);
		
		return patient != null && patient.size() > 0 ? (patient.get(0) != null ? patient.get(0) : null) : null;
	}
	
	public DischargeReportDetailVoCollection getPatientDocuments()
	{
		List<CareContext> careContexts = new ArrayList<CareContext>();
		String careContextIDs = "";
		List domainObjectList = null;
		
		DomainFactory factory = getDomainFactory();
		String sql = "select medicationDetails.careContext, medicationDetails.tTARequired, medicationDetails.tTAReceived " +
					 " from MedicationDetails as medicationDetails left join medicationDetails.careContext as careContext " + 
					 " where " +
					 	" (medicationDetails.careContext.id in (select drd.careContext.id from " +
					 	" DischargeReportDetail as drd left join " +
					 	" drd.careContext as drdcc left join " +
					 	" drd.gpRecipients as gp " +
					 	" where " +
					 	" (drd.isClinicalDetailsComplete = 1 and gp.id is " +
					 	" not null  and drdcc.id in (select cc.id from " + 
					 								" DischargeDetails as dd left join " +
					 								" dd.careContext as cc where (dd.dateOfDischarge is " + 
					 								" not null and dd.dischargeLetterStatus.id <> -1727 )))) " +
					 " and medicationDetails.tTARequired is not null ) ";         
		
		List lst = factory.find(sql,NO_OF_RECORDS);	
		
		getMorePatientDocuments = (lst != null && lst.size() == NO_OF_RECORDS);
		
		DischargeReportDetailVoCollection voReturnList = new DischargeReportDetailVoCollection();
		DischargeReportDetailVoCollection voList = new DischargeReportDetailVoCollection();
		
		if(lst != null && !lst.isEmpty())
		{
			System.out.println(new DateTime().toString() + ": No of results : " + lst.size());
			
			int ccCount = 0;
			
			for (Iterator iter = lst.iterator(); iter.hasNext();) 
			{			
				CareContext 	careContext = null;
				LookupInstance 	lookup 		= null;				
				Boolean 	    ttos 		= null;
				
				Object[] obj = (Object[])iter.next();
				
				if (obj[0] != null)	careContext = (CareContext) 	obj[0];						
				if (obj[1] != null)	lookup 		= (LookupInstance) 	obj[1];
				if (obj[2] != null)	ttos 		= (Boolean) 	    obj[2];
				
				//TTORequired = -1717 (NOT_REQUIRED) the discharge report can be generated if all other conditions are met
				if (careContext != null && lookup != null && lookup.getId() == -1717)   
				{
					String strCC = careContext.getId().toString();
					if (strCC != "" && ! careContextIDs.contains(strCC))
					{
						if (careContextIDs != "") 
							careContextIDs += " , ";

						careContexts.add(careContext);
						careContextIDs += careContext.getId();
						ccCount++;
					}
				}
				
				//TTORequired = -1716 (REQUIRED) then there must be at least one record in the TTOs field collection in the eDischarge.MedicationDetails [ID: 1099100002, Type: business object]
				else if (careContext != null && lookup != null && lookup.getId() == -1716)  
				{			
					if (Boolean.TRUE.equals(ttos))
					{
						String strCC = careContext.getId().toString();
						if (strCC != "" && ! careContextIDs.contains(strCC))
						{
							if (careContextIDs != "") 
								careContextIDs += " , ";

							careContexts.add(careContext);
							careContextIDs += careContext.getId();
							ccCount++;
						}
					}					
				}
				
				//TTORequired = -1718 (NOT_SPECIFIED) then the discharge report cannot be generated
				else if (careContext != null && lookup != null && lookup.getId() == -1718)  
				{
					
				}	
				
				if (ccCount == 999) // oracle restriction on the number of items in the where clause
				{
					System.out.println("Batch - careContexts list size : " + careContexts.size());
					voList = listDischargesInBatches(factory, careContextIDs);
					for (int i = 0 ; voList != null && i < voList.size() ; i++)
						voReturnList.add(voList.get(i));

					careContextIDs = "";
					ccCount = 0;
				}
			}
		}
		else
			return null;
		
		System.out.println("Final - careContexts list size : " + careContexts.size());
		if (voReturnList.size() == 0)
			return listDischargesInBatches(factory, careContextIDs);
		else
		{
			voList = listDischargesInBatches(factory, careContextIDs);
			for (int i = 0 ; voList != null && i < voList.size() ; i++)
				voReturnList.add(voList.get(i));
			
			return voReturnList;
		}
	}

	public DischargeReportDetailVoCollection listDischargesInBatches(DomainFactory factory, String careContextIDs)
	{
		if (careContextIDs.length() > 0)
		{
			List domainObjectList = null;
			
			System.out.println("CareContext list ids : " + careContextIDs);
			domainObjectList = factory.find("select drd from DischargeReportDetail as drd left join drd.careContext as cc where cc.id in ( " + careContextIDs + " )",1100);
			System.out.println("Size of DischargeReportDetail list is " + domainObjectList.size());
			
			return DischargeReportDetailVoAssembler.createDischargeReportDetailVoCollectionFromDischargeReportDetail(domainObjectList);
		}
		return null;
	}
	
	public DischargeReportDetailVoCollection getSuppPatientDocuments()
	{
		List<CareContext> careContexts = new ArrayList<CareContext>();
		String careContextIDs = "";
		List domainObjectList = null;
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" select dd.careContext from DischargeDetails dd where "); 
		String andStr = " ";
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
	
		hql.append(andStr + " dd.dischargeSupplementaryLetterStatus = :stat");
		markers.add("stat");
		values.add(getDomLookup(DischargeSupplementaryLetterStatus.REQUIRED));
		andStr = " and ";	

		List list = factory.find(hql.toString(), markers,values);
		if(list != null && !list.isEmpty())
		{
			for (Iterator iter = list.iterator(); iter.hasNext();) 
			{			
				CareContext careContext = (CareContext) iter.next();
													
				if (careContext != null)
				{
					if (careContextIDs != "")
						careContextIDs += " , ";
					
					careContexts.add(careContext);
					careContextIDs += careContext.getId();
				}
			}
		}
		else
			return null;
		
		if (careContexts.size() > 0)
		{
			domainObjectList = factory.find("select drd from DischargeReportDetail as drd left join drd.careContext as cc where cc.id in ( " + careContextIDs + " )");
			return DischargeReportDetailVoAssembler.createDischargeReportDetailVoCollectionFromDischargeReportDetail(domainObjectList);
		}
		
		return null;
	}
	
	public synchronized void doExecute(JobExecutionContext ctx, Date last, Date curr) throws Exception 
	{	
		String hostname = "";
		String ipAddress = "";
		long start = System.currentTimeMillis();
		
		try 
		{ 
			InetAddress addr 	 = InetAddress.getLocalHost();   
			hostname = addr.getHostName();											
		    ipAddress = addr.getHostAddress();		      
		} 
		catch (UnknownHostException err) 
		{ 
			throw new DomainRuntimeException(err.getMessage());			
		} 
		System.out.println("Executing " + ctx.getTrigger().getJobName() + " at: " + Calendar.getInstance().getTime() + " triggered by: hostname: " + hostname + "(" + ipAddress + ")");		
		
		try 
		{
			ims.admin.domain.DischargeSummarySchedule impl = (ims.admin.domain.DischargeSummarySchedule)DomainImplFlyweightFactory.getInstance().create(DischargeSummaryScheduleImpl.class, ims.domain.DomainSession.getSession());			
			
			DischargeSummaryScheduleVo jb = impl.getJob(ctx.getJobDetail().getName());
			if (jb != null)
			{
				printer = jb.getPrintAgentTo();
				
				if (jb.getJobTypeIsNotNull()
					&& jb.getJobType().equals(DischargeSummaryJobType.DISCHARGE_SUMMARY_REPORT))
				{
					System.out.println("Execute DSPrintReport");
					impl.executeDSPrintReport(jb);					
				}
				else if (jb.getJobTypeIsNotNull()
					&& jb.getJobType().equals(DischargeSummaryJobType.SUMMPLEMENTARY_REPORT))
				{
					System.out.println("Execute SUPPPrintReport");
					impl.executeSUPPPrintReport(jb);
				}
				
				System.out.println("Setting new Job details...");
				impl.setNewJob(impl.getJob(ctx.getJobDetail().getName()), ctx);
				System.out.println("Finish to set Job details!");
			}
		} 
		catch (InstantiationException err) 
		{
			throw new Exception(err);
		} 
		catch (IllegalAccessException err) 
		{				
			throw new Exception(err);
		} 
		catch (DomainInterfaceException err) 
		{			
			throw new Exception(err);
		}		
		
		long end = System.currentTimeMillis();
		System.out.println("Job was run successful in: " + + (end - start) + " ms" );		
	} 
	 
	private void execute(JobExecutionContext ctx, int maxExecutions) throws JobExecutionException
	{
		if (maxExecutions == 0)
		{
			System.out.println("Task execution failed 10 times. Exit!");
			return ;
		}
		
		long startExecutionTime = System.currentTimeMillis();		
		
		try 
		{
			JobDetail job = ctx.getJobDetail();			
			Date last = ctx.getTrigger().getPreviousFireTime();
			Calendar cal = Calendar.getInstance();
			Date curr = cal.getTime();
			
			System.out.println();
			System.out.println( job.getFullName() + " executes. Last run: " + last + " current: " + curr);
			
			System.out.println("Check if another job is running");
			
			while(true) 
			{				
				if (!running)
				{
					running = true;		
					System.out.println("No job running! Proced with doExecute()");
					doExecute(ctx, last, curr);
					
					break;
				}
				else
				{
					//If another thread is running try to retry for 60 seconds and after that exit
					long currentExecutionTime = System.currentTimeMillis();							
					if ((currentExecutionTime - startExecutionTime)/1000 >= 60)
					{		
						System.out.println("Try to retry for 60 sec and job cannot be run. Exit!");
						break;
					}
					
					System.out.println("Another job is running! Pause thread for 2 sec and retry");
					Thread.sleep(2000);
				}								
			}
			
			running = false;
		}
		catch (Exception exception)
		{
			LOG.error(exception);			
			
			running = false;			
			maxExecutions--;						
			execute(ctx, maxExecutions);
		} 	   
	}
	
	public void execute(JobExecutionContext ctx) throws JobExecutionException
	{
		execute(ctx, 10);
	}	
	
	public void setNewJob(DischargeSummaryScheduleVo oldBatch, JobExecutionContext ctx)
	{				
		DischargeSummaryScheduleVo batch = null;
		
		if (oldBatch == null) {
			batch = new DischargeSummaryScheduleVo();						
		}
		else {
			batch = oldBatch;
		}
		
		if( ctx.getTrigger() != null)
		{
			if (ctx.getTrigger().getPreviousFireTime() == null)
			{
				System.out.println("getPreviousFireTime() is null!");
			}
			if (ctx.getTrigger().getNextFireTime() == null)
			{
				System.out.println("getPreviousFireTime() is null!");
			}
			batch.setLastRun(ctx.getTrigger().getPreviousFireTime() != null?  new ims.framework.utils.DateTime(ctx.getTrigger().getPreviousFireTime()) : null);
			batch.setNextRun(ctx.getTrigger().getNextFireTime() != null?  new ims.framework.utils.DateTime(ctx.getTrigger().getNextFireTime()) : new DateTime());				
		}
		batch.setGeneratedLeettersNo(batch.getGeneratedLeettersNoIsNotNull() ? batch.getGeneratedLeettersNo() + generatedLetters : generatedLetters);
		batch.setPrintedLettersNo(batch.getPrintedLettersNoIsNotNull() ? batch.getPrintedLettersNo() + printedLetters : printedLetters);
		batch.setSuccessfulEmailsNo(batch.getSuccessfulEmailsNoIsNotNull() ? batch.getSuccessfulEmailsNo() + successfulSentEmail : successfulSentEmail);
		batch.setFailedEmailsNo(batch.getFailedEmailsNoIsNotNull() ? batch.getFailedEmailsNo() + failedSentEmail : failedSentEmail);
		batch.setFailedEmails(getSession().getAttribute("FailedEmails") != null ? (FailedEmailsDetailsVoCollection)getSession().getAttribute("FailedEmails")  : batch.getFailedEmails());
		
		batch.setSealedEnvelopePatientsNo(batch.getSealedEnvelopePatientsNo() != null ? batch.getSealedEnvelopePatientsNo() + sealedEnvelopePatients : sealedEnvelopePatients);
				
		printer = batch.getPrintAgentTo();
		
		DomainFactory factory = getDomainFactory();		
		try
		{
			factory.save(DischargeSummaryScheduleVoAssembler.extractDischargeSummarySchedule(factory, batch));
			
			getDomainFactory().getTransaction().commit();
			getDomainFactory().setTransaction(null);	
			
		}
		catch (StaleObjectException e) 
		{
			
		}				
	}
		 	
	public void executeDSPrintReport(DischargeSummaryScheduleVo job)
	{
		DischargeReportDetailVoCollection dischargeReportsDetails = null;

		do
		{
			dischargeReportsDetails = getPatientDocuments();

			if (dischargeReportsDetails != null && dischargeReportsDetails.size() > 0)
			{
				try
				{
					saveReports(dischargeReportsDetails, job, "Discharge Summary Report", DocumentCategory.DISCHARGE_SUMMARY);
				}
				catch (Exception e)
				{
					getDomainFactory().close();
					break;
				}
			}
		}
		while (getMorePatientDocuments);
	}	
	
	public void executeSUPPPrintReport(DischargeSummaryScheduleVo job) 
	{			
		DischargeReportDetailVoCollection dischargeReportsDetails = getSuppPatientDocuments();
		if (dischargeReportsDetails != null && dischargeReportsDetails.size() > 0)
		{
			try
			{
				saveReports(dischargeReportsDetails, job, "Supplementary Report", DocumentCategory.DISCHARGE_SUPPLEMENTARY);
			}
			catch(Exception e)
			{
				getDomainFactory().close();					
			}
		}		
	}			
	
	public DischargeDetailsVo getDischargeDetailsForCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("CareContext is null or id not provided for getDischargeDetailsForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List dischargeDetails = factory.find("select dd from DischargeDetails as dd left join dd.careContext as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		DischargeDetailsVoCollection discharge = DischargeDetailsVoAssembler.createDischargeDetailsVoCollectionFromDischargeDetails(dischargeDetails);		
		
		return discharge != null && discharge.size() > 0 ? (discharge.get(0) != null ? discharge.get(0) : null) : null;
	}
	
	protected synchronized void saveReports(DischargeReportDetailVoCollection dischargeReportsDetails, DischargeSummaryScheduleVo job, String docName, DocumentCategory category) throws Exception
	{		
		urlQueryServer 		= ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		urlReportServer 	= ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		urlPdfUploadServer 	= ConfigFlag.GEN.PDF_UPLOAD_URL.getValue();
		pdfStorePath 		= ConfigFlag.GEN.PDF_STORE_PATH.getValue();
		printer = job.getPrintAgentTo();
		
		if (urlPdfUploadServer == "")
		{			
			throw new Exception("PDF_UPLOAD_URL flag need to be set");
		}		
				
		for (int i = 0; i < dischargeReportsDetails.size(); i++) 
		{
			System.out.println("");
			System.out.println("");
			System.out.println("Generating new letter... ");
			System.out.println("CareContext ID: " + dischargeReportsDetails.get(i).getCareContext().getID_CareContext());
			System.out.println("DischargeReportsDetails ID: " + dischargeReportsDetails.get(i).getID_DischargeReportDetail());
			DischargeReportDetailVo report 			 = dischargeReportsDetails.get(i);	
			DischargeDetailsVo 		dischargeDetails = null;
			if (report != null)
			{
				CareContextRefVo careContext = report.getCareContext();
				
				PatientLiteVo patient = getPatientByCareContext(careContext);
				boolean isSealedEnvelopedPatient = hasSealedEnvelope(patient);
				
				if (careContext != null)
				{					
					dischargeDetails = getDischargeDetailsForCareContext(careContext);	
					if (dischargeDetails == null) {
						System.out.println("DischargeDetails returned by getDischargeDetailsForCareContext is null for careContext id = " + careContext.getID_CareContext());
						continue;
					}
					
					System.out.println("DischargeDetails ID: " +dischargeDetails.getID_DischargeDetails());
					
					if (category.equals(DocumentCategory.DISCHARGE_SUMMARY) &&
							dischargeDetails.getDischargeLetterStatusIsNotNull() && 
								(dischargeDetails.getDischargeLetterStatus().equals(DischargeLetterStatus.GENERATED) || dischargeDetails.getDischargeLetterStatus().equals(DischargeLetterStatus.ARCHIVED)))
					{
						continue;
					}

					if (category.equals(DocumentCategory.DISCHARGE_SUPPLEMENTARY) &&
						 dischargeDetails.getDischargeSupplementaryLetterStatusIsNotNull() && 
						 	(dischargeDetails.getDischargeSupplementaryLetterStatus().equals(DischargeSupplementaryLetterStatus.GENERATED) || dischargeDetails.getDischargeLetterStatus().equals(DischargeLetterStatus.ARCHIVED)))
					{
						continue;
					}

					fileName = generateName() + ".pdf";											
										
					int printToNo = 0;

					ArrayList<String> emails = new ArrayList<String>();
					if (dischargeReportsDetails.get(i).getGpRecipientsIsNotNull())
					{												
						GPLiteWithCommChannelsVoCollection gps = dischargeReportsDetails.get(i).getGpRecipients();
						if (gps != null &&
								gps.size() > 0)					
						{
							for (int k = 0; k < gps.size() ; k++) 
							{
								boolean flagForPrint = false;
								if (gps.get(k).getCommChannelsIsNotNull() &&
										gps.get(k).getCommChannels().size() > 0)
								{
									boolean commChannelHaveEmail = false;
									for (int l = 0; l < gps.get(k).getCommChannels().size(); l++) 
									{
										if (gps.get(k).getCommChannels().get(l).getChannelTypeIsNotNull() &&
												gps.get(k).getCommChannels().get(l).getChannelType().equals(ChannelType.EMAIL))
										{
											commChannelHaveEmail = true;
											emails.add(gps.get(k).getCommChannels().get(l).getCommValue());
											System.out.println("Add email: " + gps.get(k).getCommChannels().get(l).getCommValue() +  " for GP:" + gps.get(k).getName().toString());
										}
										else if(l == gps.get(k).getCommChannels().size() -1 && !commChannelHaveEmail)
										{
											if (!flagForPrint) {
												flagForPrint = true;													
												printToNo++;
												System.out.println("Increment printToNo to " + printToNo);
											}
										}
									}											
								}
								else
								{
									printToNo++;
									System.out.println("Increment printToNo to " + printToNo);
								}
							}								
						}							
					}
						

					PatientDocumentVo document = null;
					
						try
						{
							document = populatePatientDocumentVo(populateServetDocumentVo(), report, docName, category);
							String[] str = document.validate();		
							if (str != null && str.length > 0)
							{	
								LOG.error("PatientDocumentVo is not validate");
								continue;
							}							
							
							document = savePatientDocument(document);
							
							PatientDocumentVoCollection patientDocuments = report.getDischargeDocuments();
							if (patientDocuments == null) {
								patientDocuments = new PatientDocumentVoCollection();
							}
								
							patientDocuments.add(document);
							report.setDischargeDocuments(patientDocuments);																	
							
							if (category.equals(DocumentCategory.DISCHARGE_SUMMARY)) {
								dischargeDetails.setDischargeLetterStatus(DischargeLetterStatus.GENERATED);
							}
							else if (category.equals(DocumentCategory.DISCHARGE_SUPPLEMENTARY)) {
								dischargeDetails.setDischargeSupplementaryLetterStatus(DischargeSupplementaryLetterStatus.GENERATED);
							}							
							
							str = dischargeDetails.validate();		
							if (str != null && str.length > 0)
							{		
								LOG.error("DischargeDetailsVo is not validate");
								continue;
							}
							str = report.validate();		
							if (str != null && str.length > 0)
							{	
								LOG.error("DischargeReportDetailsVo is not validate");
								continue;
							}
							
							
							dischargeDetails 	= saveDischargeDetails(dischargeDetails);
							report 				= saveDischargeReportDetail(report);
							
							if (getDomainFactory() != null && getDomainFactory().getTransaction() != null)
							{
								getDomainFactory().getTransaction().commit();
								getDomainFactory().setTransaction(null);								
							}
							else
							{
								
								LOG.error("getDomainFactory or getDomainFactory().getTransaction() are null");
								continue;
							}
						}
						catch(StaleObjectException e)
						{		
							LOG.error(e.getMessage());
							System.out.println("StaleObjectException on saveDischargeDetails()! Continue with next record... ");
							getDomainFactory().getTransaction().rollback();
							getDomainFactory().setTransaction(null);
							continue;
						}
						
						QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, null);
								
						String 	emailMsgTxt 	= "";
						String 	emailSubjectTxt = "";	
						Integer reportID 		= -1;
						if (category.equals(DocumentCategory.DISCHARGE_SUMMARY))
						{
							reportID = 163;
							emailMsgTxt = "Discharge Summary Report";
							//emailSubjectTxt = " Discharge Summary Report";
							emailSubjectTxt = setEmailSummaryMessage(careContext);//WDEV-13753//setEmailSummaryMessage(dischargeDetails.getDateOfDischarge(), dischargeReportsDetails.get(i), careContext, "DISCH");
							System.out.println("Discharge Summary Report set");
						}
						else if (category.equals(DocumentCategory.DISCHARGE_SUPPLEMENTARY))
						{
							reportID = 170;
							emailMsgTxt = "Supplementary Summary Report";
							//emailSubjectTxt = "	Supplementary Summary Report";	
							emailSubjectTxt = setEmailSummaryMessage(careContext);//WDEV-13753//setEmailSummaryMessage(dischargeDetails.getDateOfDischarge(), dischargeReportsDetails.get(i), careContext, "DISCH");
							System.out.println("Supplementary Summary Report set");
						}
						
						Object[] obj = getSystemReportAndTemplate(reportID);
						client.addSeed(new SeedValue("CARE_CONTEXT",  careContext.getID_CareContext(), Integer.class));
						
						if(obj == null || obj.length < 2) 
						{		
							LOG.error("getSystemReportAndTemplate return null");
							LOG.error("Rollback all changes");
							rollback(dischargeDetails, report, document, category);
							
							continue;
						}
						
						if(obj[0] == null || obj[1] == null) 
						{		
							LOG.error("getSystemReportAndTemplate return null");
							LOG.error("Rollback all changes");
							rollback(dischargeDetails, report, document, category);	
							continue;
						}
						
						byte[] buffer = null;
						String message = "";
						try 	
						{							
							System.out.println("Report server URL:" + urlReportServer);
							System.out.println("Trying to build report...");
							long start = System.currentTimeMillis();
							buffer = client.buildReport((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 0);
							long end = System.currentTimeMillis();
							System.out.println("Report build successful in :" + (end - start) + " ms" );
							if (buffer == null || (buffer != null && buffer.length == 0)) 
							{
								message = "Generated report size is zero";
							}
			
						}
						catch (QueryBuilderClientException err) 
						{	
							if (message == "") {
								message = err.getMessage();
							}
														
							LOG.error("Build report failed!" + message);
							LOG.error("Rollback all changes");
							rollback(dischargeDetails, report, document, category);	
							continue;
						}							
						
						try
						{
							long start = System.currentTimeMillis();
							System.out.println("Trying to upload report...");
							uploadFile(buffer, fileName,  pdfStorePath);
							long end = System.currentTimeMillis();
							System.out.println("File upload successful in :" + (end - start) + " ms" );							
						}
						catch(Exception e)
						{
							LOG.error("Upload file failed!" + e.getMessage());
							LOG.error("Rollback all changes");							
							rollback(dischargeDetails, report, document, category);
							
							continue;
						}
																		
						generatedLetters ++;						
						
						System.out.println("Number of emails: " + emails.size());
						for (int m = 0; m < emails.size(); m++) 
						{
							System.out.println("Emails: " + emails.get(m));
						}						
						
						
						// This is the part were letters are e-mailed or printed
						if (isSealedEnvelopedPatient)
						{
							sealedEnvelopePatients++;
						}
						else if(emails.size() > 0)
						{	
							for (int j = 0; j < emails.size(); j++) 
							{
								System.out.println("SubjectTxt 	  : " + emailSubjectTxt);
								System.out.println("MsgTxt 		  : " + emailMsgTxt);
								System.out.println("Attached file : " + pdfStorePath + filePath);
								System.out.println("FromAddress   : " + ConfigFlag.FW.SMTP_SENDER.getValue());
																						
								/*//Verify recipient
								if (!(new SMTPMXLookup().isAddressValid(gps.get(k).getCommChannels().get(l).getCommValue())))
									throw new Exception("Address not valid");
								*/
								//Send Email
								
								try
								{
									long start = System.currentTimeMillis();									
									
									new SendMail().sendSSLMessage(emails.get(j), emailSubjectTxt,emailMsgTxt, pdfStorePath + filePath);									
									long end = System.currentTimeMillis();
									System.out.println("E-mail was sent successfully in :" + (end - start) + " ms" );//WDEV-18274 corrected spelling
									
									successfulSentEmail++;
								
								}
								catch (Exception err) 

								{	
									//WDEV-18274 failed count is now incremented
									/*
									failedEmail.setGPName(gps.get(k).getName().toString());
									failedEmail.setEmailAddress(gps.get(k).getCommChannels().get(l).getCommValue());
									failedEmail.setInitialDateTime(new DateTime());																
									failedEmail.setFailedDateTime(new DateTime());
									failedEmail.setFilePath(pdfStorePath + filePath);
									PatientLiteVo patient = getPatientByCareContext(report.getCareContext());
									failedEmail.setPatientName(patient != null ? patient.getName().toString() : null);
									failedEmail.setJobType(job.getJobType());
									failedEmails.add(failedEmail);
									 */
									LOG.error(err.getMessage());
									System.out.println("Failed! E-mail was not sent successfully"); //WDEV-18274 corrected spelling
									failedSentEmail++;
									continue;																											
								}								
							}
										//Store failedEmails
									//getSession().setAttribute("FailedEmails", failedEmails);
									
							if (printToNo > 0)
							{
								System.out.println("Number of reports to be printed for GP without email address: " + printToNo);										
								try 
								{
									long start = System.currentTimeMillis();
									client.buildReport((String)obj[0], (String)obj[1], urlReportServer, "PDF", printer, printToNo);
									long end = System.currentTimeMillis();
									System.out.println("Build report successful in :" + (end - start) + " ms" );			
									
								}
								catch (QueryBuilderClientException err) 
								{
									LOG.error("Build report failed!" + err.getMessage());
									LOG.error("Rollback all changes");
									rollback(dischargeDetails, report, document, category);	
									
									continue;
								}				
											
								printedLetters += printToNo;
							}																																									
						}
						else
						{
							System.out.println("Number of reports to be printed for GP without email address: " + printToNo);
							buffer = null;
							message = "";
							try {
								long start = System.currentTimeMillis();
								buffer = client.buildReport((String)obj[0], (String)obj[1], urlReportServer, "PDF", printer, printToNo);
								long end = System.currentTimeMillis();
								System.out.println("Build report successful in :" + (end - start) + " ms" );
								
								if (buffer == null || (buffer != null && buffer.length == 0))
								{
									message = "Generated report size is zero";
								}										
							}
							catch (QueryBuilderClientException err) 
							{
								if (message == "") {
									message = err.getMessage();
								}
								
								LOG.error("Build report failed!" + message);
								LOG.error("Rollback all changes");
								rollback(dischargeDetails, report, document, category);	
								
								continue;
							}
							
							printedLetters += printToNo;
							
							try 
							{
								long start = System.currentTimeMillis();
								uploadFile(buffer, fileName,  pdfStorePath);
								long end = System.currentTimeMillis();
								System.out.println("File upload successful in :" + (end - start) + " ms" );								
							}
							catch(Exception e)
							{								
								LOG.error("Upload file failed!" + e.getMessage());
								LOG.error("Rollback all changes");
								rollback(dischargeDetails, report, document, category);	
								
								continue;
							}
					}	
				}
			}
		}		
	}
	
	
	
	private boolean hasSealedEnvelope(PatientLiteVo patient)
	{
		if (patient == null || patient.getID_Patient() == null)
			return false;
		
		StringBuilder query = new StringBuilder("SELECT COUNT (patAlert.id) FROM PatientAlert AS patAlert LEFT JOIN patAlert.patient AS pat LEFT JOIN patAlert.alertType AS type ");
		query.append("WHERE pat.id = :PAT_ID AND type.id = :ALERT_TYPE AND patAlert.isCurrentlyActiveAlert = 1");
		
		long count = getDomainFactory().countWithHQL(query.toString(), new String[] {"PAT_ID", "ALERT_TYPE"}, new Object[] {patient.getID_Patient(), AlertType.SEALED_ENVELOPE_PATIENT.getID()});
		
		if (count > 0)
			return true;
		
		return false;
	}

	
	
	//WDEV-13753
	private String setEmailSummaryMessage(CareContextRefVo careContext) 
	{
		if(careContext == null)
			return EMAIL_SUBJECT;
		
		//PatientLiteVo patVo = getPatientByCareContext(careContext);
		PatientShort patVo = getPatientShortByCareContext(careContext);
		
		if(patVo != null)
		{
			//return EMAIL_SUBJECT + patVo.getName().getSurname();
			//wdev-16298
			
			AppSiteVo site = getSite();
			if(site.getSite().equals(ApplicationSiteName.RCHT))
			{
				return  EMAIL_SUBJECT + getnhsNumber(patVo.getIdentifiers()) + " - Hospital Correspondence";
			}
			else
			{
				return EMAIL_SUBJECT + patVo.getName().getSurname();
			}
			//-------------
			
			 
		}
		
		return EMAIL_SUBJECT;
	}
	public PatientShort getPatientShortByCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null || careContext.getID_CareContext() == null) {
			throw new CodingRuntimeException("CareContextRefVo is null");
		}
		if(careContext.getID_CareContext() == null) {
			throw new CodingRuntimeException("CareContextRefVo id is null");
		}
		
		DomainFactory factory = getDomainFactory();
		List domainObjectList = factory.find("select p from CareContext as cc left join cc.episodeOfCare as eoc left join eoc.careSpell as cs left join cs.patient as p where (cc.id = :idCareContext)", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		PatientShortCollection patient = PatientShortAssembler.createPatientShortCollectionFromPatient(domainObjectList);
		
		return patient != null && patient.size() > 0 ? (patient.get(0) != null ? patient.get(0) : null) : null;
	}
	//wdev-16298
	private String getnhsNumber(PatientIdCollection patidcoll)
	{
		if( patidcoll == null || patidcoll.size() == 0)
			return "";
		for(int i = 0; i < patidcoll.size();i++)
		{
			if( PatIdType.NHSN.equals(patidcoll.get(i).getType()))
			{
				java.lang.StringBuffer nhsn = new java.lang.StringBuffer("");
				String str = patidcoll.get(i).getIdValue().replace(" ", "");
				if ( str.length() > 6)
				{
					nhsn.append(str.substring(0, 3));
					nhsn.append(" ");
					nhsn.append(str.substring(3, 6));
					nhsn.append(" ");
					nhsn.append(str.substring(6));
						
					return nhsn.toString();
				}			
				else
					return patidcoll.get(i).getIdValue();
				//return patidcoll.get(i).getIdValue();
			}
		}
		for(int i = 0; i < patidcoll.size();i++)
		{
			if( PatIdType.HOSPNUM.equals(patidcoll.get(i).getType()))
				return PatIdType.HOSPNUM.getIItemText()+" : " +patidcoll.get(i).getIdValue();
		}
		return "";
	}
	//-----------
	//wdev-16298
	public AppSiteVo getSite()  
	{
		
		DomainFactory factory = getDomainFactory();	
		
		List list = factory.find("from AppSite");

		if(list.size() > 0)
			return AppSiteVoAssembler.create((AppSite) list.get(0));
		
		return null;
	}
	private String setEmailSummaryMessage(DateTime dateOfDischarge, DischargeReportDetailVo voDRD, CareContextRefVo careContext, String letterType) 
	{
		StringBuffer sb = new StringBuffer();
		
		if (voDRD.getCompletingHCPIsNotNull() && voDRD.getCompletingHCP().getName() != null)
		{
			if (voDRD.getCompletingHCP().getName().getTitleIsNotNull())
			{
				sb.append(voDRD.getCompletingHCP().getName().getTitle());
				sb.append(" ");
			}
			//wdev-11604
			sb.append(voDRD.getCompletingHCP().getName().getForenameIsNotNull() ? voDRD.getCompletingHCP().getName().getForename() : "");
			sb.append(" ");
			sb.append(voDRD.getCompletingHCP().getName().getSurnameIsNotNull() ? voDRD.getCompletingHCP().getName().getSurname() :"");
		}

		Patient patVo = getPatientForCareContext(careContext);
		sb.append(" - ");
		sb.append(patVo != null && patVo.getNameIsNotNull() && patVo.getName().getForenameIsNotNull() ? patVo.getName().getForename().toString() : "");

		sb.append(" - ");
		sb.append(patVo != null && patVo.getNameIsNotNull() && patVo.getName().getSurnameIsNotNull() ? patVo.getName().getSurname().toString() : "");

		boolean bFound = false;
		for (int ids = 0 ; patVo != null && patVo.getIdentifiersIsNotNull() && ids < patVo.getIdentifiers().size() ; ids++)
		{
			if (patVo.getIdentifiers().get(ids).getTypeIsNotNull()
				&& patVo.getIdentifiers().get(ids).getType().equals(PatIdType.NHSN))
			{
				sb.append(" - ");
				sb.append(patVo.getIdentifiers().get(ids).getValue());
				bFound = true;
			}
		}
		if ( !bFound)
			sb.append(" - NO NHS NUMBER FOUND ");
		
		
		String str = dateOfDischarge.getDate().toString();
		str = str.replace("/", "");
		
		sb.append(" - ");
		sb.append(str);//DateTimeFormat.ISO)); //ISO is "yyyyMMdd" we want ddmmyyyy

		sb.append(" - ");
		sb.append(letterType);

		sb.append(" - ");
		sb.append(getSpecialtyForCareContext(careContext)); 
		
		sb.append(" - RCHT Patient Information");

		return sb.toString();
	}


	private Patient getPatientForCareContext(CareContextRefVo careContext) 
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
		throw new CodingRuntimeException("CareContext is null or id not provided for getPatientForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List pat = factory.find("select careSpell.patient from CareSpell as careSpell left join careSpell.episodes as epis left join epis.careContexts as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		PatientCollection patVo = PatientAssembler.createPatientCollectionFromPatient(pat);		
		
		return patVo != null && patVo.size() > 0 ? patVo.get(0) : null;
	}

	public String getSpecialtyForCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
		throw new CodingRuntimeException("CareContext is null or id not provided for getSpecialtyForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List dischargeDetails = factory.find("select eoc from EpisodeOfCare as eoc left join eoc.careContexts as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		EpisodeofCareShortVoCollection eocVos = EpisodeofCareShortVoAssembler.createEpisodeofCareShortVoCollectionFromEpisodeOfCare(dischargeDetails);		
		
		return eocVos != null && eocVos.size() > 0 ? ((eocVos.get(0) != null && eocVos.get(0).getSpecialtyIsNotNull()) ? eocVos.get(0).getSpecialty().toString() : "") : "";
	}

	private void rollback(DischargeDetailsVo dischargeDetails, DischargeReportDetailVo report, PatientDocumentVo document, DocumentCategory category) throws ForeignKeyViolationException, StaleObjectException 
	{		
		DomainFactory factory = getDomainFactory();
		
		DischargeDetails boDischarge = (DischargeDetails) factory.getDomainObject(DischargeDetails.class, dischargeDetails.getID_DischargeDetails());
		dischargeDetails =  DischargeDetailsVoAssembler.create(boDischarge);
		
		DischargeReportDetail boDischargeReport = (DischargeReportDetail) factory.getDomainObject(DischargeReportDetail.class, report.getID_DischargeReportDetail());
		report =  DischargeReportDetailVoAssembler.create(boDischargeReport);
		
		PatientDocumentVoCollection documents = report.getDischargeDocuments();
		documents.remove(document);
		report.setDischargeDocuments(documents);				
				
		if (category.equals(DocumentCategory.DISCHARGE_SUMMARY)) {
			dischargeDetails.setDischargeLetterStatus(DischargeLetterStatus.IN_PROGRESS);
		}
		else if (category.equals(DocumentCategory.DISCHARGE_SUPPLEMENTARY)) {
			dischargeDetails.setDischargeSupplementaryLetterStatus(DischargeSupplementaryLetterStatus.REQUIRED);
		}					
		
		String[] str = dischargeDetails.validate();		
		if (str != null && str.length > 0)
		{		
			LOG.error("DischargeDetailsVo is not validate");
			return;
		}
		str = report.validate();		
		if (str != null && str.length > 0)
		{	
			LOG.error("DischargeReportDetailsVo is not validate");
			return;
		}
				
		dischargeDetails 	= saveDischargeDetails(dischargeDetails);
		report 				= saveDischargeReportDetail(report);
		try
		{
			deletePatientDocument(document);
		}
		catch(Exception e)
		{
			throw new StaleObjectException(null);
		}
		
		getDomainFactory().getTransaction().commit();
		getDomainFactory().setTransaction(null);								
	}

	private String generateName() throws Exception
	  {	
		  String str = "";
		  
		  try
		  {
			  //Get Random Segment
		      SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(prng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
			  
			  //Get CurrentTimeMillis() segment
		      str += Long.toHexString(System.currentTimeMillis());
		      while (str.length () < 12)
	          {
	              str = '0' + str;
	          }

			  //Get Random Segment
		      SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(secondPrng.nextInt());
		      while (str.length () < 8)
	          {	
	              str = '0' + str;
	          }

		      //Get IdentityHash() segment
		      str += Long.toHexString(System.identityHashCode((Object) this));
		      while (str.length() < 8)
		      {
		          str = '0' + str; 
		      }	  
		      //Get Third Random Segment
		      byte bytes[] = new byte[16]; 
		      SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
		      thirdPrng.nextBytes(bytes);
		      str += Integer.toHexString(thirdPrng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
		  }
		  catch(java.security.NoSuchAlgorithmException err)
		  {
			  throw new Exception(err);	
		  }
		  
		  return str;
	}	
		
	private ServerDocumentVo populateServetDocumentVo() 
	{
		ServerDocumentVo vo = new ServerDocumentVo();
		DateTime startDate = new ims.framework.utils.DateTime();								
		filePath =  startDate.getDate().getYear()+ "/" +startDate.getDate().getMonth() + "/" + startDate.getDate().getDay() + "/" + fileName;	
		vo.setFileName(filePath);
		vo.setFileType(FileType.PDF);						
		
		return vo;		
	}	
	
	//	wdev-13102
	public HcpRefVo getResponsibleHCPForCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
		throw new CodingRuntimeException("CareContext is null or id not provided for getResponsibleHCPForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List dischargeDetails = factory.find("select eoc from EpisodeOfCare as eoc left join eoc.careContexts as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		EpisodeofCareShortVoCollection eocVos = EpisodeofCareShortVoAssembler.createEpisodeofCareShortVoCollectionFromEpisodeOfCare(dischargeDetails);		
		
		return eocVos != null && eocVos.size() > 0 ? ((eocVos.get(0) != null && eocVos.get(0).getResponsibleHCPIsNotNull()) ? eocVos.get(0).getResponsibleHCP() : null) : null;
	}
	
	private PatientDocumentVo populatePatientDocumentVo(ServerDocumentVo serverDocumentVo, DischargeReportDetailVo reportDetails, String docName, DocumentCategory category)
	{		
		if (reportDetails != null)
		{
			if (reportDetails.getCareContextIsNotNull())
			{
				PatientLiteVo patient = getPatientByCareContext(reportDetails.getCareContext());
				
				if (patient != null)
				{
					PatientDocumentVo vo = new PatientDocumentVo();
					vo.setPatient(patient);					
					vo.setCareContext(reportDetails.getCareContext());
					
					//WDEV-12352 - starts here
					if(reportDetails.getCareContext() != null)
					{
						EpisodeOfCareInterfaceVo ep = getEpisodeOfCare(reportDetails.getCareContext());
						
						vo.setEpisodeofCare(ep);
						vo.setSpecialty(ep != null ? ep.getSpecialty() : null);
						
						vo.setResponsibleHCP(ep.getResponsibleHCP());//WDEV-14258
						
						CareContextForDischargeSummarySchedulerVo cc = getCareContext(reportDetails.getCareContext());//WDEV-14258
						
						//WDEV-14258
						if(cc != null && cc.getStartDateTimeIsNotNull())
						{
							vo.setDocumentDate(cc.getStartDateTime().getDate());
						}
					}
					
					//WDEV-14258
					if(vo.getDocumentDate() == null)
					{
						vo.setDocumentDate(new ims.framework.utils.Date());
					}
					////WDEV-12352 - ends here
					
					vo.setName(docName);
					vo.setServerDocument(serverDocumentVo);
					vo.setCreationType(DocumentCreationType.GENERATED);						
					vo.setCategory(category);
					
					vo.setRecordingUser(getMosUser() != null ? (MemberOfStaffLiteVo) getMosUser() : null);
					vo.setRecordingDateTime(new DateTime());
					vo.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
					
					//WDEV-14258 vo.setResponsibleHCP(getResponsibleHCPForCareContext(reportDetails.getCareContext()));//wdev-13102
					return vo;					
				}				
			}			
		}
		
		return null;	
	}
	
	//WDEV-14258
	private CareContextForDischargeSummarySchedulerVo getCareContext(CareContextRefVo careContext) 
	{
		if(careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("Can not get Care Context for a null CareContextId.");
		
		DomainFactory factory = getDomainFactory();
		CareContext cc = (CareContext) factory.getDomainObject(CareContext.class, careContext.getID_CareContext());
		
		return CareContextForDischargeSummarySchedulerVoAssembler.create(cc);
	}

	//WDEV-12352
	private EpisodeOfCareInterfaceVo getEpisodeOfCare(CareContextRefVo careContext)
	{
		if(careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("Can not get Specialty from Episode Of Care on null careContext.");
		
		DomainFactory factory = getDomainFactory();
		
		List<?> dischargeDetails = factory.find("select eoc from EpisodeOfCare as eoc left join eoc.careContexts as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		EpisodeOfCareInterfaceVoCollection eocVos = EpisodeOfCareInterfaceVoAssembler.createEpisodeOfCareInterfaceVoCollectionFromEpisodeOfCare(dischargeDetails);		
		
		return (eocVos != null && eocVos.size() > 0) ? eocVos.get(0) : null;
	}
	
	public String uploadFile(byte[] file, String fileName, String localFolder) throws Exception
	{		
		if(ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() == null || ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue().length() == 0)
		{
			throw new Exception("ConfigFlag GEN.FILE_UPLOAD_DIR is null");			
		}
		
		HttpClient conn = null;	  				
		StringBuffer sb = new StringBuffer(500);
		PostMethod filePost = new PostMethod(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue());		

		conn = new HttpClient(new MultiThreadedHttpConnectionManager());

		conn.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT);		
		conn.getParams().setBooleanParameter(HttpMethodParams.USE_EXPECT_CONTINUE, true);
		conn.getParams().setIntParameter(HttpMethodParams.BUFFER_WARN_TRIGGER_LIMIT, MAX_BUFFER_LIMIT_NO_WARNING);

		Part[] data = 
		{
		    new StringPart("name", localFolder), 
		    new StringPart("filename", fileName),	           
		    new FilePart(fileName, new ByteArrayPartSource(fileName, file))	           
		};
		  		
		filePost.setRequestEntity(new MultipartRequestEntity(data, filePost.getParams()));

	    int iGetResultCode;
		try
		{
			iGetResultCode = conn.executeMethod(filePost);

			if (iGetResultCode == HttpStatus.SC_OK) 
			{
				sb.append("Upload complete, status	=	" + iGetResultCode);
				sb.append("\nUpload complete, response	=	" + HttpStatus.getStatusText(iGetResultCode));
				sb.append("\nUpload complete, response	=	" + filePost.getResponseBodyAsString());				
				LOG.info(sb.toString());

				if (filePost.getResponseBodyAsString() != null &&
						filePost.getResponseBodyAsString().length() != 0 &&
							filePost.getResponseBodyAsString() != "")
				{
					return parse(filePost.getResponseBodyAsString());
				}				
			}
			else 
			{
				sb.append("Upload failed, status	=	" + iGetResultCode);
				sb.append("Upload failed, response=" + HttpStatus.getStatusText(iGetResultCode));
				sb.append("Upload failed, response=" + filePost.getResponseBodyAsString());
				LOG.info(sb.toString());
				
				throw new Exception(sb.toString());
			}
		} 
		catch (HttpException e)
		{			 			 
			throw new Exception(e);
		} 
		catch (IOException e)
		{			
			throw new Exception(e);
		}
		finally
		{
			filePost.releaseConnection();
		}		

	  	return null;		
	}	
	
	private String parse(String xml)
	{
		if (xml == null)
			return null;
		
		return (xml.split("\""))[1];	
	}
		
	private class SendMail 
	{
		private SendMail()
		{
			Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
			
			SMTP_HOST_NAME 		= ConfigFlag.FW.SMTP_SERVER.getValue();
			SMTP_PORT 			= ConfigFlag.FW.SMTP_PORT.getValue();
			SMTP_AUTH 			= ConfigFlag.FW.SMTP_AUTH.getValue();
			emailFromAddress 	= ConfigFlag.FW.SMTP_SENDER.getValue();	
		}
				
		public void sendSSLMessage(String recipient, String subject, String message, String atach) throws MessagingException 
		{
			System.out.println("Send email to: " + recipient + " with subject :" + subject + " and message : " + message + " and attach file: " + atach);
			
			boolean debug = false;									
			Properties props = new Properties();
			props.put("mail.host", SMTP_HOST_NAME);
			props.put("mail.smtp.auth", "true");
			props.put("mail.debug", "false");
			props.put("mail.smtp.port", SMTP_PORT);
			props.put("mail.smtp.socketFactory.port", SMTP_PORT);
			props.put("mail.smtp.socketFactory.fallback", "false");

			Session session = Session.getDefaultInstance(props,
			new javax.mail.Authenticator() 
			{
				protected PasswordAuthentication getPasswordAuthentication() 
				{
					String[] auth = SMTP_AUTH.split(":");
					return new PasswordAuthentication(auth[0], auth[1]);
				}
			});

			session.setDebug(debug);

			Message msg = new MimeMessage(session);
			InternetAddress addressFrom = new InternetAddress(emailFromAddress);
			msg.setFrom(addressFrom);

			InternetAddress addressTo = new InternetAddress(recipient);
			msg.setRecipient(Message.RecipientType.TO, addressTo);

			//Setting the Subject and Content Type
			msg.setSubject(subject);
			msg.setContent(message, "text/plain");
			
			//create and fill the first message part
			MimeBodyPart firstMsgBodyPart = new MimeBodyPart();
			firstMsgBodyPart.setText("");//WDEV-13753

			// create the second message part
			MimeBodyPart secondMsgBodyPart = new MimeBodyPart();

		    // attach the file to the message
			FileDataSource fds = new FileDataSource(atach);
			secondMsgBodyPart.setDataHandler(new DataHandler(fds));
			secondMsgBodyPart.setFileName(fds.getName());

			//create the Multipart and add its parts to it
			Multipart mp = new MimeMultipart();
			mp.addBodyPart(firstMsgBodyPart);
			mp.addBodyPart(secondMsgBodyPart);

			//add the Multipart to the message
			msg.setContent(mp);

			//set the Date: header
			msg.setSentDate(new Date());

			Transport tr = session.getTransport("smtp");
			tr.connect(SMTP_HOST_NAME, SMTP_PORT, null, null);
			msg.saveChanges();
			tr.sendMessage(msg, msg.getAllRecipients());
			tr.close();
		}
	}

	public void removeTask(DischargeSummaryJobType jobType) throws ForeignKeyViolationException 
	{
		DomainFactory factory 			= getDomainFactory();
		ArrayList<String> markers 		= new ArrayList<String>();
		ArrayList<Serializable> values 	= new ArrayList<Serializable>();		
		
		String sql = "from DischargeSummarySchedule as dss where dss.jobType = :id";         		
		markers.add("id");			
		values.add(getDomLookup(jobType));
		
		List jobs = factory.find(sql.toString(), markers, values);	
		if (jobs.size() > 0) {
			factory.delete((DischargeSummarySchedule) jobs.get(0));
		}
	}

	public DischargeSummaryScheduleVoCollection getJobs() 
	{
		DomainFactory factory = getDomainFactory();
		String sql = "from DischargeSummarySchedule";         		
		List jobs = factory.find(sql);
		if (jobs.size() > 0) {
			return DischargeSummaryScheduleVoAssembler.createDischargeSummaryScheduleVoCollectionFromDischargeSummarySchedule(jobs);
		}
		
		return null;		
	}		

	public DischargeSummaryScheduleVo getJob(String jobDesc) 
	{
		DomainFactory factory = getDomainFactory();
		String sql = "from DischargeSummarySchedule";         		
		List jobs = factory.find(sql);
		if (jobs.size() > 0)
		{
			for (int i = 0 ; i < jobs.size(); i ++)
			{
				DischargeSummaryScheduleVo voDSS = DischargeSummaryScheduleVoAssembler.create((DischargeSummarySchedule) jobs.get(i));

				StringBuffer sb = new StringBuffer();				
				sb.append(voDSS.getJobType().getText().toString());

				if (jobDesc.equals(sb.toString())) {
					return voDSS;
				}
			}
		}
		
		return null;		
	}
		

	/*public class SMTPMXLookup 
	{
	   private int hear( BufferedReader in ) throws IOException 
	   {
	     String line = null;
	     int res = 0;

	     while ( (line = in.readLine()) != null ) 
	     {
	         String pfx = line.substring( 0, 3 );
	         try 
	         {
	            res = Integer.parseInt( pfx );
	         }
	         catch (Exception ex) 
	         {
	            res = -1;
	         }
	         if ( line.charAt( 3 ) != '-' ) break;
	     }

	     return res;
	   }

	   private void say( BufferedWriter wr, String text ) throws IOException 
	   {
	     wr.write( text + "\r\n" );
	     wr.flush();

	     return;
	   }
	   
	   private ArrayList getMX(String hostName) throws NamingException 
	   {
	     // Perform a DNS lookup for MX records in the domain
	     Hashtable env = new Hashtable();
	     env.put("java.naming.factory.initial", "com.sun.jndi.dns.DnsContextFactory");
	     DirContext ictx = new InitialDirContext( env );
	     Attributes attrs = ictx.getAttributes( hostName, new String[] { "MX" });
	     Attribute attr = attrs.get( "MX" );

	     // if we don't have an MX record, try the machine itself
	     if (( attr == null ) || ( attr.size() == 0 )) 
	     {
	       attrs = ictx.getAttributes( hostName, new String[] { "A" });
	       attr = attrs.get( "A" );
	       if( attr == null )
	    	   throw new NamingException("No match for name '" + hostName + "'");
	     }
	         // Huzzah! we have machines to try. Return them as an array list
	     // NOTE: We SHOULD take the preference into account to be absolutely
	     //   correct. This is left as an exercise for anyone who cares.
	     ArrayList res = new ArrayList();
	     NamingEnumeration en = attr.getAll();

	     while ( en.hasMore() ) 
	     {
	        String mailhost;
	        String x = (String) en.next();
	        String f[] = x.split( " " );
	        //  THE fix *************
	        if (f.length == 1)
	            mailhost = f[0];
	        else if ( f[1].endsWith( "." ) )
	            mailhost = f[1].substring( 0, (f[1].length() - 1));
	        else
	            mailhost = f[1];
	        //  THE fix *************            
	        res.add( mailhost );
	     }
	     return res;
	   }

	   public boolean isAddressValid( String address ) 
	   {
	     // Find the separator for the domain name
	     int pos = address.indexOf( '@' );

	     // If the address does not contain an '@', it's not valid
	     if ( pos == -1 ) return false;

	     // Isolate the domain/machine name and get a list of mail exchangers
	     String domain = address.substring( ++pos );
	     ArrayList mxList = null;
	     try 
	     {
	        mxList = getMX( domain );
	     }
	     catch (NamingException ex) 
	     {
	        return false;
	     }

	     // Just because we can send mail to the domain, doesn't mean that the
	     // address is valid, but if we can't, it's a sure sign that it isn't
	     if ( mxList.size() == 0 ) return false;

	     // Now, do the SMTP validation, try each mail exchanger until we get
	     // a positive acceptance. It *MAY* be possible for one MX to allow
	     // a message [store and forwarder for example] and another [like
	     // the actual mail server] to reject it. This is why we REALLY ought
	     // to take the preference into account.
	     for ( int mx = 0 ; mx < mxList.size() ; mx++ ) 
	     {
	         boolean valid = false;
	         try {
	             int res;
	             //
	             Socket skt = new Socket( (String) mxList.get( mx ), 25 );
	             
	             BufferedReader rdr = new BufferedReader
	                ( new InputStreamReader( skt.getInputStream() ) );
	             BufferedWriter wtr = new BufferedWriter
	                ( new OutputStreamWriter( skt.getOutputStream() ) );

	             res = hear( rdr );
	             if ( res != 220 ) throw new Exception( "Invalid header" );
	             say( wtr, "EHLO rgagnon.com" );

	             res = hear( rdr );
	             if ( res != 250 ) throw new Exception( "Not ESMTP" );

	             // validate the sender address              
	             say( wtr, "MAIL FROM: <tim@orbaker.com>" );
	             res = hear( rdr );
	             if ( res != 250 ) throw new Exception( "Sender rejected" );

	             say( wtr, "RCPT TO: <" + address + ">" );
	             res = hear( rdr );

	             // be polite
	             say( wtr, "RSET" ); hear( rdr );
	             say( wtr, "QUIT" ); hear( rdr );
	             if ( res != 250 )
	                throw new Exception( "Address is not valid!" );

	             valid = true;
	             rdr.close();
	             wtr.close();
	             skt.close();
	         }
	         catch (Exception ex) {
	           // Do nothing but try next host
	           ex.printStackTrace();
	         }
	         finally {
	           if ( valid ) return true;
	         }
	     }
	     return false;
	   }	 
	} */ 
	
}
