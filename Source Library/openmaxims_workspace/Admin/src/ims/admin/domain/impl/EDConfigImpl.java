//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.admin.domain.impl;


import ims.admin.domain.base.impl.BaseEDConfigImpl;
import ims.admin.vo.AppRoleShortVoCollection;
import ims.admin.vo.domain.AppRoleShortVoAssembler;
import ims.core.admin.domain.objects.EDAttendenceformsConfig;
import ims.core.configuration.domain.objects.AppRole;
import ims.core.configuration.vo.AppRoleRefVo;
import ims.core.vo.EDAttendanceformsConfigVoCollection;
import ims.core.vo.domain.EDAttendanceformsConfigVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.configuration.domain.objects.AmbulanceArrivalsConfig;
import ims.emergency.configuration.domain.objects.MandatoryEDOutcomeCoding;
import ims.emergency.configuration.domain.objects.ReferToSpecialtyConfig;
import ims.emergency.configuration.domain.objects.TriageTabConfiguration;
import ims.emergency.vo.AmbulanceArrivalsConfigVo;
import ims.emergency.vo.MandatoryEDOutcomeCodingVo;
import ims.emergency.vo.ReferToSpecialtyConfigVo;
import ims.emergency.vo.ReferToSpecialtyConfigVoCollection;
import ims.emergency.vo.TriageTabConfigVo;
import ims.emergency.vo.domain.AmbulanceArrivalsConfigVoAssembler;
import ims.emergency.vo.domain.MandatoryEDOutcomeCodingVoAssembler;
import ims.emergency.vo.domain.ReferToSpecialtyConfigVoAssembler;
import ims.emergency.vo.domain.TriageTabConfigVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class EDConfigImpl extends BaseEDConfigImpl
{
	private static final long serialVersionUID = 1L;

	
	public ims.core.vo.EDAttendanceformsConfigVo getEDAttandanceformsConfigVo()
	{
		DomainFactory factory = getDomainFactory();
		List<?> lstedattendace =  factory.find("select e1_1 from EDAttendenceformsConfig as e1_1 where(e1_1.isRIE is null) order by e1_1.systemInformation.creationDateTime desc");
		if(lstedattendace != null && lstedattendace.size() >0)
		{
			EDAttendanceformsConfigVoCollection tempColl = EDAttendanceformsConfigVoAssembler.createEDAttendanceformsConfigVoCollectionFromEDAttendenceformsConfig(lstedattendace);
			if( tempColl != null && tempColl.size() > 0)
				return tempColl.get(0);
		}
		
		return null;		
				
	}

	public ims.core.vo.EDAttendanceformsConfigVo saveEDAttandanceformsConfigVo(ims.core.vo.EDAttendanceformsConfigVo record) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.ForeignKeyViolationException
	{
		if (record == null)
			throw new CodingRuntimeException("Cannot save null EDAttendanceformsConfigVo");

		DomainFactory factory = getDomainFactory();
				
		EDAttendenceformsConfig doEDAttendenceformsConfig = EDAttendanceformsConfigVoAssembler.extractEDAttendenceformsConfig(factory, record);
		
		factory.save(doEDAttendenceformsConfig);
		return EDAttendanceformsConfigVoAssembler.create(doEDAttendenceformsConfig);
		
	}

	//WDEV-18988
	public AppRoleShortVoCollection getAppRoles()
	{
		DomainFactory factory = getDomainFactory();
		return  AppRoleShortVoAssembler.createAppRoleShortVoCollectionFromAppRole(factory.listDomainObjects(AppRole.class)).sort();
	}

	public TriageTabConfigVo saveTrigeTabConfig(TriageTabConfigVo tabConfigToSave) throws StaleObjectException
	{
		if (tabConfigToSave == null)
			throw new CodingRuntimeException("Cannot save null Tab Configuration");

		DomainFactory factory = getDomainFactory();
		TriageTabConfiguration domainTabConfig = TriageTabConfigVoAssembler.extractTriageTabConfiguration(factory, tabConfigToSave);

		factory.save(domainTabConfig);

		return TriageTabConfigVoAssembler.create(domainTabConfig);
	}

	public TriageTabConfigVo getTabConfigForRole(AppRoleRefVo roleRef)
	{
		if (roleRef == null)
			throw new CodingRuntimeException("Cannot get TriageTabConfig on null Role Id");
		
		List list = getDomainFactory().find("select tabConfig from TriageTabConfiguration as tabConfig left join tabConfig.role as configRole where (configRole.id = :roleId)", 
				new String[] {"roleId"}, new Object[] {roleRef.getID_AppRole()});
		
		if (list == null || list.size() == 0)
			return null;
		
		return TriageTabConfigVoAssembler.createTriageTabConfigVoCollectionFromTriageTabConfiguration(list).get(0);
		
	}

	//WDEV-19013
	public MandatoryEDOutcomeCodingVo saveMandatoryEDOutcomeCodingVo(MandatoryEDOutcomeCodingVo mandatoryOutcomeCodingToSave) throws StaleObjectException
	{
		if (mandatoryOutcomeCodingToSave == null)
			throw new CodingRuntimeException("Cannot save null MandatoryEDOutcomeCodingVo");

		DomainFactory factory = getDomainFactory();
		MandatoryEDOutcomeCoding domainMandatoryEdOutcomeCoding = MandatoryEDOutcomeCodingVoAssembler.extractMandatoryEDOutcomeCoding(factory, mandatoryOutcomeCodingToSave);

		factory.save(domainMandatoryEdOutcomeCoding);

		return MandatoryEDOutcomeCodingVoAssembler.create(domainMandatoryEdOutcomeCoding);
	}

	//WDEV-19013
	public MandatoryEDOutcomeCodingVo getMandatoryEDOutcomeCoding()
	{
		List list = getDomainFactory().find(" from MandatoryEDOutcomeCoding  ");
		
		if (list == null || list.size() == 0)
			return null;
		
		return MandatoryEDOutcomeCodingVoAssembler.create((MandatoryEDOutcomeCoding)list.get(0));
	}

	
	public AmbulanceArrivalsConfigVo getAmbulanceArrivals()
	{
		return AmbulanceArrivalsConfigVoAssembler.create((AmbulanceArrivalsConfig) getDomainFactory().findFirst(" FROM AmbulanceArrivalsConfig "));
	}

	
	public AmbulanceArrivalsConfigVo saveAmbulanceArrivals(AmbulanceArrivalsConfigVo ambulanceArrivals) throws StaleObjectException
	{
		if (ambulanceArrivals == null)
			throw new CodingRuntimeException("Cannot save null AmbulanceArrivals");
		
		AmbulanceArrivalsConfig domAmbulanceArrivals = AmbulanceArrivalsConfigVoAssembler.extractAmbulanceArrivalsConfig(getDomainFactory(), ambulanceArrivals);
		getDomainFactory().save(domAmbulanceArrivals);
		
		return AmbulanceArrivalsConfigVoAssembler.create(domAmbulanceArrivals);
	}

	//wdev-22313
	public ReferToSpecialtyConfigVo saveReferToSpecialtyConfigVo(ReferToSpecialtyConfigVo record) throws StaleObjectException, UniqueKeyViolationException
	{
		if( record == null)
			throw new CodingRuntimeException("Cannot save null ReferToSpecialty");
		
		DomainFactory factory = getDomainFactory();
		
		ReferToSpecialtyConfig doReferToSpecialtyConfig = ReferToSpecialtyConfigVoAssembler.extractReferToSpecialtyConfig(factory, record);
		if( record.getID_ReferToSpecialtyConfig() == null )
		{
			if( getReferToSpecialtyConfigVo() != null )
				throw new StaleObjectException(doReferToSpecialtyConfig);
		}
		
		factory.save(doReferToSpecialtyConfig);
			
		return ReferToSpecialtyConfigVoAssembler.create(doReferToSpecialtyConfig);
	}

	//wdev-22313
	public ReferToSpecialtyConfigVo getReferToSpecialtyConfigVo()
	{
		DomainFactory factory = getDomainFactory();
		List<?> refertospec =  factory.find("select r1_1 from ReferToSpecialtyConfig as r1_1 where (r1_1.isRIE = 0 or r1_1.isRIE is null ) ");
		
		if( refertospec != null && refertospec.size() > 0 )
		{
			ReferToSpecialtyConfigVoCollection tempColl = ReferToSpecialtyConfigVoAssembler.createReferToSpecialtyConfigVoCollectionFromReferToSpecialtyConfig(refertospec);
			if( tempColl != null && tempColl.size() > 0 )
				return tempColl.get(0);
		}
		
		
		return null;
	}
}
