//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.patientactionsheetwizard;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageOverviewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 640, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccOverviewForm = loader.loadComponent(145106, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccOverviewControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(0), new Integer(824), new Integer(640), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccOverviewForm, instance1 } );
				ims.framework.Control m_ccOverviewControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccOverviewForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccOverviewControl);
				Menu[] menus1 = m_ccOverviewForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.eas.forms.easoverviewcomponent.IComponent ccOverview()
			{
				return (ims.eas.forms.easoverviewcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccOverviewValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccOverviewVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccOverviewVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccOverviewEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccOverviewEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageTreatOptionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 832, 648, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccTreatmentOptionsForm = loader.loadComponent(145107, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccTreatmentOptionsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), new Integer(0), new Integer(832), new Integer(648), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccTreatmentOptionsForm, instance1 } );
				ims.framework.Control m_ccTreatmentOptionsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccTreatmentOptionsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccTreatmentOptionsControl);
				Menu[] menus1 = m_ccTreatmentOptionsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.eas.forms.eastreatmentoptionscomponent.IComponent ccTreatmentOptions()
			{
				return (ims.eas.forms.eastreatmentoptionscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccTreatmentOptionsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccTreatmentOptionsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccTreatmentOptionsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccTreatmentOptionsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccTreatmentOptionsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPage1Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdImageTransferRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdImageTransferRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColImageTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColImageTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColImageTypeOpened()
				{
					super.row.showOpened(0);
				}
				public ims.oncology.vo.lookups.EASImageType getColImageType()
				{
					return (ims.oncology.vo.lookups.EASImageType)super.row.get(0);
				}
				public void setColImageType(ims.oncology.vo.lookups.EASImageType value)
				{
					super.row.set(0, value, true);
				}
				public void setCellColImageTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(1);
				}
				public ims.framework.utils.Date getColDate()
				{
					return (ims.framework.utils.Date)super.row.get(1);
				}
				public void setColDate(ims.framework.utils.Date value)
				{
					super.row.set(1, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColLocationReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColLocationReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColLocationOpened()
				{
					super.row.showOpened(2);
				}
				public Object getColLocation()
				{
					return super.row.get(2);
				}
				public void setColLocation(Object value)
				{
					super.row.set(2, value);
				}
				public void setCellColLocationTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSiteReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSiteReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSiteOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSite()
				{
					return (String)super.row.get(3);
				}
				public void setColSite(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSiteTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdImageTransferRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdImageTransferRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdImageTransferRow get(int index)
				{
					return new grdImageTransferRow(super.collection.get(index));
				}
				public grdImageTransferRow newRow()
				{
					return new grdImageTransferRow(super.collection.newRow());
				}
				public grdImageTransferRow newRow(boolean autoSelect)
				{
					return new grdImageTransferRow(super.collection.newRow(autoSelect));
				}
				public grdImageTransferRow newRowAt(int index)
				{
					return new grdImageTransferRow(super.collection.newRowAt(index));
				}
				public grdImageTransferRow newRowAt(int index, boolean autoSelect)
				{
					return new grdImageTransferRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdImageTransferGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdImageTransferRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdImageTransferRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdImageTransferRowCollection getRows()
				{
					return new grdImageTransferRowCollection(super.grid.getRows());
				}
				public grdImageTransferRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdImageTransferRow(row);
				}
				public void setColImageTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColImageTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public GridComboBox ColImageTypeComboBox()
				{
					return new GridComboBox(super.grid, 0);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColLocationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColLocationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public GridComboBox ColLocationComboBox()
				{
					return new GridComboBox(super.grid, 2);
				}
				public void setColSiteHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSiteHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 816, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Summary", new Integer(1), ""}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 192, 816, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Request Image Transfer", new Integer(1), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 200, 112, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Status>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 96, 112, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 200, 64, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<TreatmentSite>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 200, 88, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Protocol>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 200, 40, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<PrimaryTumour>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 96, 88, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Protocol:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 96, 64, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Site:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 96, 40, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Tumour:", new Integer(1), null, new Integer(0)}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 232, 800, 240, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdImageTransferTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Oncology.contextMenuEASImageTransfer, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdImageTransferTemp);
				grdImageTransferGrid grdImageTransfer = (grdImageTransferGrid)GridFlyweightFactory.getInstance().createGridBridge(grdImageTransferGrid.class, m_grdImageTransferTemp);
				grdImageTransfer.addComboBoxColumn("Image Type", 0, 0, 150, false, true, false, false, true, -1);
				grdImageTransfer.addDateColumn("Date", 0, 0, 100, false, true, null, false, 0, true);
				grdImageTransfer.addComboBoxColumn("Location Taken", 0, 0, 190, false, true, false, false, true, -1);
				grdImageTransfer.addStringColumn("Anatomical Site", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdImageTransfer);
			}

			public Label lblP1Status()
			{
				return (Label)super.getControl(2);
			}
			public Label lblP1TreatmentSite()
			{
				return (Label)super.getControl(4);
			}
			public Label lblP1Protocol()
			{
				return (Label)super.getControl(5);
			}
			public Label lblP1PrimaryTumour()
			{
				return (Label)super.getControl(6);
			}
			public grdImageTransferGrid grdImageTransfer()
			{
				return (grdImageTransferGrid)super.getGrid(0);
			}
		}
		public static class tabPage4Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 816, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Summary", new Integer(1), ""}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 0, 176, 816, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Options for Planning", new Integer(1), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 200, 112, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Status>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 96, 112, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 200, 64, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<TreatmentSite>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 200, 88, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Protocol>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 200, 40, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<PrimaryTumour>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 96, 88, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Protocol:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 96, 64, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Site:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 96, 40, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Tumour:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 560, 757, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "MUST SEND PATIENT FOR BLOODS PRIOR TO PLANNING IF CONTRAST IS REQUIRED", new Integer(0), null, new Integer(2)}));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 216, 792, 336, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public Label lblP2Status()
			{
				return (Label)super.getControl(2);
			}
			public Label lblP4TreatmentSite()
			{
				return (Label)super.getControl(4);
			}
			public Label lblP4Protocol()
			{
				return (Label)super.getControl(5);
			}
			public Label lblP4PrimaryTumour()
			{
				return (Label)super.getControl(6);
			}
			public Label lbl28()
			{
				return (Label)super.getControl(10);
			}
			public DynamicGrid dyngrdPlanningOptions()
			{
				return (DynamicGrid)super.getControl(11);
			}
		}
		public static class tabPage5Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbAgentComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPatientStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbIPOPPlanningComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTransportTreatmentComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbIPOPTreatmentComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTransportPlanningComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class GroupConcurentRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 296, 208, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper26.getX(), anchoringHelper26.getY(), anchoringHelper26.getWidth(), "No", -1);
					RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 240, 208, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper27.getX(), anchoringHelper27.getY(), anchoringHelper27.getWidth(), "Yes", -1);
				}
				public void setText(GroupConcurentEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupConcurentEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupConcurentEnumeration.None;
						case 0: return GroupConcurentEnumeration.rdoConcurentSystemicTreatmentNo;
						case 1: return GroupConcurentEnumeration.rdoConcurentSystemicTreatmentYes;
					}
					return null;
				}
				public void setValue(GroupConcurentEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupConcurentEnumeration.None.id);
				}
				public boolean isEnabled(GroupConcurentEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupConcurentEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupConcurentEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupConcurentEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupConcurentEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupConcurentEnumeration None = new GroupConcurentEnumeration(-1);
				public static GroupConcurentEnumeration rdoConcurentSystemicTreatmentNo = new GroupConcurentEnumeration(0);
				public static GroupConcurentEnumeration rdoConcurentSystemicTreatmentYes = new GroupConcurentEnumeration(1);
				private GroupConcurentEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupConcurentEnumeration)o).id;
				}
				private int id;
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 256, 816, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 168, 816, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 816, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Summary", new Integer(1), ""}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 336, 816, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Standard Questions", new Integer(1), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 200, 112, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Status>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 96, 112, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 200, 64, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<TreatmentSite>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 200, 88, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Protocol>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 200, 40, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<PrimaryTumour>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 96, 88, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Protocol:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 96, 64, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Site:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 96, 40, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Tumour:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 24, 296, 211, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planning Appointment at CCC given:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 408, 208, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Agent :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 24, 208, 189, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Concurrent Systemic Treatment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 408, 408, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "IP/OP Treatment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 24, 408, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "IP/OP Planning:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 24, 440, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 408, 376, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transport Treatment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 24, 376, 117, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transport Planning:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 240, 296, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 536, 208, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbAgentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAgentTemp);
				cmbAgentComboBox cmbAgent = (cmbAgentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAgentComboBox.class, m_cmbAgentTemp);
				super.addComboBox(cmbAgent);
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 152, 440, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPatientStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPatientStatusTemp);
				cmbPatientStatusComboBox cmbPatientStatus = (cmbPatientStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientStatusComboBox.class, m_cmbPatientStatusTemp);
				super.addComboBox(cmbPatientStatus);
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 152, 408, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbIPOPPlanningTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbIPOPPlanningTemp);
				cmbIPOPPlanningComboBox cmbIPOPPlanning = (cmbIPOPPlanningComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIPOPPlanningComboBox.class, m_cmbIPOPPlanningTemp);
				super.addComboBox(cmbIPOPPlanning);
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 536, 376, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTransportTreatmentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTransportTreatmentTemp);
				cmbTransportTreatmentComboBox cmbTransportTreatment = (cmbTransportTreatmentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportTreatmentComboBox.class, m_cmbTransportTreatmentTemp);
				super.addComboBox(cmbTransportTreatment);
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 536, 408, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbIPOPTreatmentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbIPOPTreatmentTemp);
				cmbIPOPTreatmentComboBox cmbIPOPTreatment = (cmbIPOPTreatmentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIPOPTreatmentComboBox.class, m_cmbIPOPTreatmentTemp);
				super.addComboBox(cmbIPOPTreatment);
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 152, 376, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTransportPlanningTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTransportPlanningTemp);
				cmbTransportPlanningComboBox cmbTransportPlanning = (cmbTransportPlanningComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTransportPlanningComboBox.class, m_cmbTransportPlanningTemp);
				super.addComboBox(cmbTransportPlanning);
		
				// Time Controls
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 376, 296, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
		
				// RadioButton Controls
				RadioButton tmpGroupConcurent = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupConcurent);
				GroupConcurentRadioButton GroupConcurent = (GroupConcurentRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupConcurentRadioButton.class, tmpGroupConcurent);
				GroupConcurent.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupConcurent);
			}

			public Label lblP3Status()
			{
				return (Label)super.getControl(4);
			}
			public Label lblP5TreatmentSite()
			{
				return (Label)super.getControl(6);
			}
			public Label lblP5Protocol()
			{
				return (Label)super.getControl(7);
			}
			public Label lblP5PrimaryTumour()
			{
				return (Label)super.getControl(8);
			}
			public DateControl dte4()
			{
				return (DateControl)super.getControl(20);
			}
			public cmbAgentComboBox cmbAgent()
			{
				return (cmbAgentComboBox)super.getComboBox(0);
			}
			public cmbPatientStatusComboBox cmbPatientStatus()
			{
				return (cmbPatientStatusComboBox)super.getComboBox(1);
			}
			public cmbIPOPPlanningComboBox cmbIPOPPlanning()
			{
				return (cmbIPOPPlanningComboBox)super.getComboBox(2);
			}
			public cmbTransportTreatmentComboBox cmbTransportTreatment()
			{
				return (cmbTransportTreatmentComboBox)super.getComboBox(3);
			}
			public cmbIPOPTreatmentComboBox cmbIPOPTreatment()
			{
				return (cmbIPOPTreatmentComboBox)super.getComboBox(4);
			}
			public cmbTransportPlanningComboBox cmbTransportPlanning()
			{
				return (cmbTransportPlanningComboBox)super.getComboBox(5);
			}
			public TimeControl tim1()
			{
				return (TimeControl)super.getControl(27);
			}
			public GroupConcurentRadioButton GroupConcurent()
			{
				return (GroupConcurentRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabSummaryContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 576, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public HTMLViewer htm1()
			{
				return (HTMLViewer)super.getControl(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 840, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageOverview = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL," Overview", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageOverviewContainer m_tabPageOverviewContainer = (tabPageOverviewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageOverviewContainer.class, m_tabPageOverview, factory);
			super.addContainer(m_tabPageOverview, m_tabPageOverviewContainer);
			ims.framework.utils.SizeInfo m_tabPageOverviewDesignSize = new ims.framework.utils.SizeInfo(840, 616);
			ims.framework.utils.SizeInfo m_tabPageOverviewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper57.getWidth(), anchoringHelper57.getHeight());
			m_tabPageOverviewContainer.setContext(form, appForm, m_tabPageOverview, loader, contextMenus, startControlID, m_tabPageOverviewDesignSize, m_tabPageOverviewRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 840, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageTreatOptions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Treatment Options", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageTreatOptionsContainer m_tabPageTreatOptionsContainer = (tabPageTreatOptionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTreatOptionsContainer.class, m_tabPageTreatOptions, factory);
			super.addContainer(m_tabPageTreatOptions, m_tabPageTreatOptionsContainer);
			ims.framework.utils.SizeInfo m_tabPageTreatOptionsDesignSize = new ims.framework.utils.SizeInfo(840, 616);
			ims.framework.utils.SizeInfo m_tabPageTreatOptionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper58.getWidth(), anchoringHelper58.getHeight());
			m_tabPageTreatOptionsContainer.setContext(form, appForm, m_tabPageTreatOptions, loader, contextMenus, startControlID, m_tabPageTreatOptionsDesignSize, m_tabPageTreatOptionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 840, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPage1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPage1Container m_tabPage1Container = (tabPage1Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPage1Container.class, m_tabPage1, factory);
			super.addContainer(m_tabPage1, m_tabPage1Container);
			ims.framework.utils.SizeInfo m_tabPage1DesignSize = new ims.framework.utils.SizeInfo(840, 616);
			ims.framework.utils.SizeInfo m_tabPage1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper59.getWidth(), anchoringHelper59.getHeight());
			m_tabPage1Container.setContext(form, appForm, m_tabPage1, loader, contextMenus, startControlID, m_tabPage1DesignSize, m_tabPage1RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 840, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPage4 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPage4Container m_tabPage4Container = (tabPage4Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPage4Container.class, m_tabPage4, factory);
			super.addContainer(m_tabPage4, m_tabPage4Container);
			ims.framework.utils.SizeInfo m_tabPage4DesignSize = new ims.framework.utils.SizeInfo(840, 616);
			ims.framework.utils.SizeInfo m_tabPage4RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper60.getWidth(), anchoringHelper60.getHeight());
			m_tabPage4Container.setContext(form, appForm, m_tabPage4, loader, contextMenus, startControlID, m_tabPage4DesignSize, m_tabPage4RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 840, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPage5 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPage5Container m_tabPage5Container = (tabPage5Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPage5Container.class, m_tabPage5, factory);
			super.addContainer(m_tabPage5, m_tabPage5Container);
			ims.framework.utils.SizeInfo m_tabPage5DesignSize = new ims.framework.utils.SizeInfo(840, 616);
			ims.framework.utils.SizeInfo m_tabPage5RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper61.getWidth(), anchoringHelper61.getHeight());
			m_tabPage5Container.setContext(form, appForm, m_tabPage5, loader, contextMenus, startControlID, m_tabPage5DesignSize, m_tabPage5RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 840, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSummary = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Summary", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabSummaryContainer m_tabSummaryContainer = (tabSummaryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSummaryContainer.class, m_tabSummary, factory);
			super.addContainer(m_tabSummary, m_tabSummaryContainer);
			ims.framework.utils.SizeInfo m_tabSummaryDesignSize = new ims.framework.utils.SizeInfo(840, 616);
			ims.framework.utils.SizeInfo m_tabSummaryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper62.getWidth(), anchoringHelper62.getHeight());
			m_tabSummaryContainer.setContext(form, appForm, m_tabSummary, loader, contextMenus, startControlID, m_tabSummaryDesignSize, m_tabSummaryRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageOverview().setVisible(false);
			tabPageTreatOptions().setVisible(false);
			tabPage1().setVisible(false);
			tabPage4().setVisible(false);
			tabPage5().setVisible(false);
			tabSummary().setVisible(false);
		}
		public void showtabPageOverview()
		{
			tabPageTreatOptions().setVisible(false);
			tabPage1().setVisible(false);
			tabPage4().setVisible(false);
			tabPage5().setVisible(false);
			tabSummary().setVisible(false);
			tabPageOverview().setVisible(true);
		}
		public void showtabPageTreatOptions()
		{
			tabPageOverview().setVisible(false);
			tabPage1().setVisible(false);
			tabPage4().setVisible(false);
			tabPage5().setVisible(false);
			tabSummary().setVisible(false);
			tabPageTreatOptions().setVisible(true);
		}
		public void showtabPage1()
		{
			tabPageOverview().setVisible(false);
			tabPageTreatOptions().setVisible(false);
			tabPage4().setVisible(false);
			tabPage5().setVisible(false);
			tabSummary().setVisible(false);
			tabPage1().setVisible(true);
		}
		public void showtabPage4()
		{
			tabPageOverview().setVisible(false);
			tabPageTreatOptions().setVisible(false);
			tabPage1().setVisible(false);
			tabPage5().setVisible(false);
			tabSummary().setVisible(false);
			tabPage4().setVisible(true);
		}
		public void showtabPage5()
		{
			tabPageOverview().setVisible(false);
			tabPageTreatOptions().setVisible(false);
			tabPage1().setVisible(false);
			tabPage4().setVisible(false);
			tabSummary().setVisible(false);
			tabPage5().setVisible(true);
		}
		public void showtabSummary()
		{
			tabPageOverview().setVisible(false);
			tabPageTreatOptions().setVisible(false);
			tabPage1().setVisible(false);
			tabPage4().setVisible(false);
			tabPage5().setVisible(false);
			tabSummary().setVisible(true);
		}

		public tabPageOverviewContainer tabPageOverview()
		{
			return (tabPageOverviewContainer)super.layers.get(0);
		}
		public tabPageTreatOptionsContainer tabPageTreatOptions()
		{
			return (tabPageTreatOptionsContainer)super.layers.get(1);
		}
		public tabPage1Container tabPage1()
		{
			return (tabPage1Container)super.layers.get(2);
		}
		public tabPage4Container tabPage4()
		{
			return (tabPage4Container)super.layers.get(3);
		}
		public tabPage5Container tabPage5()
		{
			return (tabPage5Container)super.layers.get(4);
		}
		public tabSummaryContainer tabSummary()
		{
			return (tabSummaryContainer)super.layers.get(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(840, 672);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Oncology.contextMenuEASImageTransfer = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Oncology.contextMenuEASImageTransferADD_IMAGEItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3540001)))
			contextMenus.Oncology.contextMenuEASImageTransfer.add(contextMenus.Oncology.contextMenuEASImageTransferADD_IMAGEItem);
		contextMenus.Oncology.contextMenuEASImageTransferEDIT_IMAGEItem = factory.createMenuItem(startControlID.intValue() + 2, "Eidt", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3540002)))
			contextMenus.Oncology.contextMenuEASImageTransfer.add(contextMenus.Oncology.contextMenuEASImageTransferEDIT_IMAGEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuEASImageTransfer);


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 152, 640, 160, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "View CCC Results", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 584, 640, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 408, 640, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Back", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 496, 640, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 672, 640, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Exit", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnCCCResults()
	{
		return (Button)super.getControl(6);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(7);
	}
	public Button btnBack()
	{
		return (Button)super.getControl(8);
	}
	public Button btnNext()
	{
		return (Button)super.getControl(9);
	}
	public Button btnExit()
	{
		return (Button)super.getControl(10);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Oncology = new OncologyForms();
			OCRR = new OCRRForms();
		}
		public final class OncologyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OncologyForms()
			{
				PatientActionSheetWizardConfirmationDialog = new LocalFormName(125159);
			}
			public final FormName PatientActionSheetWizardConfirmationDialog;
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				PatientResultsAndOrders = new LocalFormName(116183);
			}
			public final FormName PatientResultsAndOrders;
		}

		public OncologyForms Oncology;
		public OCRRForms OCRR;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ElectronisActionSheet = new ims.framework.ContextVariable("ElectronisActionSheet", prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier + "");
		}
		
		public boolean getElectronisActionSheetIsNotNull()
		{
			return !cxl_ElectronisActionSheet.getValueIsNull(context);
		}
		public ims.eas.vo.ElectronicActionSheetVo getElectronisActionSheet()
		{
			return (ims.eas.vo.ElectronicActionSheetVo)cxl_ElectronisActionSheet.getValue(context);
		}
		public void setElectronisActionSheet(ims.eas.vo.ElectronicActionSheetVo value)
		{
			cxl_ElectronisActionSheet.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ElectronisActionSheet = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public OncologyNamespace Oncology = new OncologyNamespace();
		public final class OncologyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class EASImageTransfer implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_IMAGE = 1;
				public static final int EDIT_IMAGE = 2;
			}
			public void disableAllEASImageTransferMenuItems()
			{
				this.contextMenuEASImageTransferADD_IMAGEItem.setEnabled(false);
				this.contextMenuEASImageTransferEDIT_IMAGEItem.setEnabled(false);
			}
			public void hideAllEASImageTransferMenuItems()
			{
				this.contextMenuEASImageTransferADD_IMAGEItem.setVisible(false);
				this.contextMenuEASImageTransferEDIT_IMAGEItem.setVisible(false);
			}
			private Menu contextMenuEASImageTransfer;
			public ReadOnlyMenuItem getEASImageTransferADD_IMAGEItem()
			{
				return this.contextMenuEASImageTransferADD_IMAGEItem;
			}
			private MenuItem contextMenuEASImageTransferADD_IMAGEItem;
			public ReadOnlyMenuItem getEASImageTransferEDIT_IMAGEItem()
			{
				return this.contextMenuEASImageTransferEDIT_IMAGEItem;
			}
			private MenuItem contextMenuEASImageTransferEDIT_IMAGEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[197];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-ID", "ID_ElectronicActionSheet");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PATIENT", "Patient");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-AUTHORISEDDATETIME", "AuthorisedDateTime");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-TPCREATED", "TPCreated");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-ACTIONREQUIRED", "ActionRequired");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-REMOVEDSTAT", "RemovedStat");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-REMOVALREASON", "RemovalReason");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DATESEEN", "DateSeen");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DATEDECISIONTOTREAT", "DateDecisionToTreat");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-FIRSTTHERAPEUTICINTERVENTION", "FirstTherapeuticIntervention");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CLINICALTRIALPATIENT", "ClinicalTrialPatient");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PROTOCOLUSED", "ProtocolUsed");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PATIENTCONSENT", "PatientConsent");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANCONSSESSION", "PlanConsSession");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-APPROPCCCL", "AppropCCCL");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IMAGETRANSFER", "ImageTransfer");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CONCURRENTSYSTEMICTREATMENT", "ConcurrentSystemicTreatment");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-SEENAT", "SeenAt");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-INTENT", "Intent");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PRIORITY", "Priority");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DELAYED", "Delayed");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DELAYEDCOMMENT", "DelayedComment");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-READYTOTREATDATE", "ReadyToTreatDate");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DELAYEDREASON", "DelayedReason");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-TREATSITELATERALITY", "TreatSiteLaterality");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-ANATOMICALSITE", "AnatomicalSite");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CLINICALTRIAL", "ClinicalTrial");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-OFFPROTOCOLREASON", "OffProtocolReason");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-EASCOMMENT", "EasComment");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGCT", "PlanningCT");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGCTTEXT", "PlanningCTText");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-MRIFORCOREG", "MRIforCoReg");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DENTISTREQUIRED", "DentistRequired");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PEGREQUIRED", "PegRequired");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-SIMULATIONREQUIRED", "SimulationRequired");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IVCONTRAST", "IVContrast");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-INVESTIGATIONDATE", "InvestigationDate");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CREATININELEVEL", "CreatinineLevel");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-GATINGOPTIONS", "GatingOptions");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IMRT", "IMRT");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PETCT", "PetCT");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IMMOBTYPE", "ImmobType");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-MOULDROOMACTIVITY", "MouldRoomActivity");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-AGENT", "Agent");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGAPPTDATE", "PlanningApptDate");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGTRANSPORT", "PlanningTransport");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-TREATMENTTRANSPORT", "TreatmentTransport");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IP_OP_PLANNING", "IP_OP_Planning");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IP_OP_TREATMENT", "IP_OP_Treatment");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PATIENTSTATUS", "PatientStatus");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-GRAPHICASSESSMENT", "GraphicAssessment");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-RECENTCREATININE", "RecentCreatinine");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.PatientActionSheetWizard.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGCTREQUIRED", "PlanningCTRequired");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
