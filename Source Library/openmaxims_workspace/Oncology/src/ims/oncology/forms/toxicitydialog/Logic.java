//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4050.19540)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.oncology.forms.toxicitydialog;

import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Date;
import ims.oncology.forms.toxicitydialog.GenForm.grdToxicityRow;
import ims.oncology.forms.toxicitydialog.GenForm.grdToxicityRowCollection;
import ims.oncology.vo.ChemoTxToxicityTypeVo;
import ims.oncology.vo.ChemoTxToxicityTypeVoCollection;
import ims.oncology.vo.ChemotherapyToxicityDetailsVo;
import ims.oncology.vo.RadioTxToxicityTypeVo;
import ims.oncology.vo.RadioTxToxicityTypeVoCollection;
import ims.oncology.vo.RadiotherapyToxicityDetailsVo;
import ims.oncology.vo.lookups.ChemoTherapyToxicityType;
import ims.oncology.vo.lookups.LookupHelper;
import ims.oncology.vo.lookups.RadioTherapyToxicityType;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setRadiotherapyScreen(true);
		initialise(args);
	}
	
	private void initialise(Object[] args) 
	{
		if(args != null && args.length == 1)
		{
			if(args[0] instanceof Boolean)
				form.getLocalContext().setRadiotherapyScreen((Boolean)args[0]);
		}
		initialise(form.getLocalContext().getRadiotherapyScreen());
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.dte1().getValue() == null) //WDEV-15238
		{
			engine.showMessage("Assessment Date is mandatory.");
			return;
		}
		else if  (form.dte1().getValue().isGreaterThan(new Date()))
		{
			engine.showMessage("Assessment Date must be less than or equal to current date.");
			return;
		}
		
		if (form.getLocalContext().getRadiotherapyScreen())
		{
			if (! saveRadioTherapy())
				return;
		}
		else
		{
			if (! saveChemoTherapy())
				return;
		}
		
		engine.close(DialogResult.OK);
	}

	private boolean saveRadioTherapy() 
	{
		RadiotherapyToxicityDetailsVo voToxicity = null;
		if (form.getGlobalContext().Oncology.getRadioToxicityDetailsRefIsNotNull())
			voToxicity = domain.getRadioToxicity(form.getGlobalContext().Oncology.getRadioToxicityDetailsRef());
		else
		{
			voToxicity = new RadiotherapyToxicityDetailsVo();
			voToxicity.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		}	

		voToxicity.setAssessmentDate(form.dte1().getValue());
		RadioTxToxicityTypeVoCollection voColl = new RadioTxToxicityTypeVoCollection();
		for(int i = 0 ; i < form.grdToxicity().getRows().size() ; i++)
			populateToxicity(form.grdToxicity().getRows().get(i), voColl);

		if (voColl.size() == 0)
		{
			engine.showMessage("Please enter at least one Toxicity Value and save again.");
			return false;
		}

		voToxicity.setToxicityDetails(voColl);
		
		String[] errors = voToxicity.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try 
		{
			domain.saveRadioToxicity(voToxicity);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		return true;
	}
	private boolean saveChemoTherapy() 
	{
		ChemotherapyToxicityDetailsVo voToxicity = null;
		if (form.getGlobalContext().Oncology.getChemoToxicityDetailsRefIsNotNull())
			voToxicity = domain.getChemoToxicity(form.getGlobalContext().Oncology.getChemoToxicityDetailsRef());
		else
		{
			voToxicity = new ChemotherapyToxicityDetailsVo();
			voToxicity.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		}	

		voToxicity.setAssessmentDate(form.dte1().getValue());
		ChemoTxToxicityTypeVoCollection voColl = new ChemoTxToxicityTypeVoCollection();
		for(int i = 0 ; i < form.grdToxicity().getRows().size() ; i++)
			populateToxicity(form.grdToxicity().getRows().get(i), voColl);

		if (voColl.size() == 0)
		{
			engine.showMessage("Please enter at least one Toxicity Value and save again.");
			return false;
		}
		
		voToxicity.setToxicityDetails(voColl);
		
		String[] errors = voToxicity.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try 
		{
			domain.saveChemoToxicity(voToxicity);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		return true;
	}
	
	private void populateToxicity(grdToxicityRow row, ChemoTxToxicityTypeVoCollection voColl) 
	{
		grdToxicityRowCollection childRows = row.getRows();
		for (int i = 0; i < childRows.size(); i++)
		{
			if (childRows.get(i).getColGrade() != null)
			{
				ChemoTxToxicityTypeVo voTox = null;
				if (childRows.get(i).getValue() != null)
					voTox = (ChemoTxToxicityTypeVo)childRows.get(i).getValue();
				else
					voTox = new ChemoTxToxicityTypeVo();
					
				voTox.setToxicityType((ChemoTherapyToxicityType)childRows.get(i).getColChemoToxicityType());
				voTox.setGrade(childRows.get(i).getColGrade());

				voColl.add(voTox);
			}
			populateToxicity(childRows.get(i), voColl);
		}
	}

	private void populateToxicity(grdToxicityRow row, RadioTxToxicityTypeVoCollection voColl) 
	{
		grdToxicityRowCollection childRows = row.getRows();
		for (int i = 0; i < childRows.size(); i++)
		{
			if (childRows.get(i).getColGrade() != null)
			{
				RadioTxToxicityTypeVo voTox = null;
				if (childRows.get(i).getValue() != null)
					voTox = (RadioTxToxicityTypeVo)childRows.get(i).getValue();
				else
					voTox = new RadioTxToxicityTypeVo();
					
				voTox.setToxicityType((RadioTherapyToxicityType)childRows.get(i).getColRadioToxicityType());
				voTox.setGrade(childRows.get(i).getColGrade());

				voColl.add(voTox);
			}
			populateToxicity(childRows.get(i), voColl);
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	public void initialise(Boolean bRadiotherapy)
	{
		if (bRadiotherapy)
		{
			if (form.getGlobalContext().Oncology.getRadioToxicityDetailsRefIsNotNull())
			{
				RadiotherapyToxicityDetailsVo voTox = domain.getRadioToxicity(form.getGlobalContext().Oncology.getRadioToxicityDetailsRef());
				form.dte1().setValue(voTox.getAssessmentDate());
				populateTree(LookupHelper.getRadioTherapyToxicityType(domain.getLookupService()), voTox.getToxicityDetails());
			}
			else
				populateTree(LookupHelper.getRadioTherapyToxicityType(domain.getLookupService()), new RadioTxToxicityTypeVoCollection());
		}
		else
		{
			if (form.getGlobalContext().Oncology.getChemoToxicityDetailsRefIsNotNull())
			{
				ChemotherapyToxicityDetailsVo voTox = domain.getChemoToxicity(form.getGlobalContext().Oncology.getChemoToxicityDetailsRef());
				form.dte1().setValue(voTox.getAssessmentDate());
				populateTree(LookupHelper.getChemoTherapyToxicityType(domain.getLookupService()), voTox.getToxicityDetails());
			}
			else
				populateTree(LookupHelper.getChemoTherapyToxicityType(domain.getLookupService()), new ChemoTxToxicityTypeVoCollection());
		}
	}
	
	private void populateTree(LookupInstanceCollection instColl, ChemoTxToxicityTypeVoCollection voColl)
	{
		LookupInstVo[] roots = instColl.getRoots();
		for (int j = 0; j < roots.length; j++)
		{
			LookupInstVo inst = roots[j];

			grdToxicityRow newRow = form.grdToxicity().getRows().newRow();
			newRow.setColToxicity(((ChemoTherapyToxicityType)inst).getText());
			newRow.setColChemoToxicityType((ChemoTherapyToxicityType)inst);
			newRow.setValue((ChemoTherapyToxicityType)inst);

			fillToxicity(newRow, inst, voColl);
		}
		form.grdToxicity().expandAll();
	}

	private void fillToxicity(grdToxicityRow rootRow, LookupInstVo inst, ChemoTxToxicityTypeVoCollection voColl)
	{
		ArrayList children = inst.getChildInstances();
		for (int i = 0; i < children.size(); i++)
		{
			ChemoTxToxicityTypeVo voToxicity = null;
			LookupInstVo child = (LookupInstVo) children.get(i);

			for (int j =0 ; voColl != null && j < voColl.size() ; j++)
			{
				if (child.equals(voColl.get(j).getToxicityType()))
					voToxicity = voColl.get(j);
			}

			grdToxicityRow newRow = rootRow.getRows().newRow();
			newRow.setColToxicity(((ChemoTherapyToxicityType)child).getText());
			newRow.setColChemoToxicityType((ChemoTherapyToxicityType)child);
			newRow.setColGrade(voToxicity != null ? voToxicity.getGrade() : null);
			newRow.setValue(voToxicity);
				
			fillToxicity(newRow, child, voColl);
		}
	}

	private void populateTree(LookupInstanceCollection instColl, RadioTxToxicityTypeVoCollection voColl)
	{
		LookupInstVo[] roots = instColl.getRoots();
		for (int j = 0; j < roots.length; j++)
		{
			LookupInstVo inst = roots[j];

			grdToxicityRow newRow = form.grdToxicity().getRows().newRow();
		//	newRow.setColToxicity(inst.getText());
			newRow.setColToxicity(((RadioTherapyToxicityType)inst).getText());

			fillToxicity(newRow, inst, voColl);
		}
		form.grdToxicity().expandAll();
	}

	private void fillToxicity(grdToxicityRow rootRow, LookupInstVo inst, RadioTxToxicityTypeVoCollection voColl)
	{
		ArrayList children = inst.getChildInstances();
		for (int i = 0; i < children.size(); i++)
		{
			RadioTxToxicityTypeVo voToxicity = null;
			LookupInstVo child = (LookupInstVo) children.get(i);

			for (int j =0 ; voColl != null && j < voColl.size() ; j++)
			{
				if (child.equals(voColl.get(j).getToxicityType()))
					voToxicity = voColl.get(j);
			}

			grdToxicityRow newRow = rootRow.getRows().newRow();
			newRow.setColToxicity(((RadioTherapyToxicityType)child).getText());
			newRow.setColRadioToxicityType((RadioTherapyToxicityType)child);
			newRow.setColGrade(voToxicity != null ? voToxicity.getGrade() : null);
			newRow.setValue(voToxicity);
				
			fillToxicity(newRow, child, voColl);
		}
	}

}
