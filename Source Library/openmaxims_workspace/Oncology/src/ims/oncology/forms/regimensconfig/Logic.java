//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4080.23374)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.oncology.forms.regimensconfig;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.forms.regimensconfig.GenForm.grdRegimensConfigRow;
import ims.oncology.forms.regimensconfig.GenForm.grpRegimenFilterEnumeration;
import ims.oncology.vo.ChemoRegimensConfigVo;
import ims.oncology.vo.ChemoRegimensConfigVoCollection;
import ims.oncology.vo.lookups.RegimenAcronym;
import ims.oncology.vo.lookups.RegimenAcronymCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// ----------------------------------------------------------------------------------------------------------
	// Enumeration utility class
	// ----------------------------------------------------------------------------------------------------------

	/**
	 * WDEV-12790
	 * Enumeration utility class used to determine how regimen text should be searched
	 * 		- BEGINS	- for "Begins with" search pattern in Regimen name
	 * 		- CONTAINS	- for "Contains" search pattern in Regimen name
	 * 		- EXACT		- for "Exact match" search pattern in Regimen name    
	 */
	public enum SearchPattern
	{
		NONE		(grpRegimenFilterEnumeration.None, -1),
		BEGINS		(grpRegimenFilterEnumeration.rdoBegins, 0),
		CONTAINS	(grpRegimenFilterEnumeration.rdoContains, 1),
		EXACT		(grpRegimenFilterEnumeration.rdoExact, 2);
		
		
		private int value;
		private grpRegimenFilterEnumeration selection;
		
		
		private SearchPattern(grpRegimenFilterEnumeration userSelection, int value)
		{
			this.selection = userSelection;
			this.value = value;
		}
		
		
		public int getIntValue()
		{
			return this.value;
		}
		
		public grpRegimenFilterEnumeration getUserSelection()
		{
			return this.selection;
		}
		
		
		public static SearchPattern getSearchPattern(grpRegimenFilterEnumeration userSelection)
		{
			if (grpRegimenFilterEnumeration.rdoBegins.equals(userSelection))
				return SearchPattern.BEGINS;
			
			if (grpRegimenFilterEnumeration.rdoContains.equals(userSelection))
				return SearchPattern.CONTAINS;
			
			if (grpRegimenFilterEnumeration.rdoExact.equals(userSelection))
				return SearchPattern.EXACT;
			
			return NONE;
		}
		
		public static SearchPattern getSearchPattern(int value)
		{
			switch (value)
			{
				case 0:
					return BEGINS;
					
				case 1:
					return CONTAINS;
					
				case 2:
					return EXACT;
					
					
				default:
					return NONE;
			}
		}
	}

	/**
	 * WDEV-12790
	 * Utility class used to keep search criteria
	 */
	private class SearchCriteria
	{
		private String regimenName;
		private boolean activeOnly;
		private SearchPattern pattern;
		
		public SearchCriteria(String regimenName, boolean activeOnly, SearchPattern pattern)
		{
			this.regimenName = regimenName;
			this.activeOnly = activeOnly;
			this.pattern = pattern;
		}
	}
	
	// ----------------------------------------------------------------------------------------------------------
	// Event Handlers region
	// ----------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// WDEV-12790
		initialize();
		
		open();
	}
	

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	

	/**
	 * WDEV-12790
	 */
	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		// Check if there is search criteria provided
		if (!validateSearchCriteria())
		{
			engine.showMessage("Please provide some search criteria");
			return;
		}
		
		// Keep search criteria in a local context (needed when search will be called from open() function) 
		form.getLocalContext().setSearchCriteria(new SearchCriteria(form.txtRegimenFilter().getValue().trim(), form.chkActiveOnly().getValue(), SearchPattern.getSearchPattern(form.grpRegimenFilter().getValue())));

		// Clear result grid and instance controls
		clearResults();
		// Clear selected unit
		form.getLocalContext().setCurrentRecord(null);
		
		// Perform search (will also populate the screen with results)
		search((SearchCriteria) form.getLocalContext().getSearchCriteria(), true);
		
		// Update the controls state
		updateControlsState();
	}


	/**
	 * WDEV-12790
	 */
	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		clearScreen();
		
		form.getLocalContext().setSearchCriteria(null);
		form.getLocalContext().setCurrentRecord(null);
		
		form.grpRegimenFilter().setValue(grpRegimenFilterEnumeration.rdoBegins);
		
		updateControlsState();
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onGrdRegimensConfigSelectionChanged()
	{
		selectionChanged();
	}
	
	@Override
	protected void onQmbRegimenTextSubmited(String value) throws PresentationLogicException
	{
		bindRegimens(value, form.ctnDetails().qmbRegimen().getValue());
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
			break;

			case GenForm.ContextMenus.GenericGrid.Update:
				updateInstance();
			break;
		}
	}


	
	// ----------------------------------------------------------------------------------------------------------
	// Form presentation functions
	// ----------------------------------------------------------------------------------------------------------

	/**
	 * WDEV-12790
	 * Function used to initialize the screen
	 * - will clear local contexts variables (or set them to default values)
	 * - will clear screen
	 * - will set default values to controls
	 * 
	 *	NOTE:	Do not add code to set/update the state of the controls
	 * 			(if need be call the 'updateControlsState()' function)
	 */
	public void initialize() throws FormOpenException
	{
		// Clear local context (set to default values) variables
		form.getLocalContext().setCurrentRecord(null);
		form.getLocalContext().setSearchCriteria(null);
		
		// Clear screen
		clearScreen();
		
		// Set default search pattern && 'Active Only' value
		form.grpRegimenFilter().setValue(grpRegimenFilterEnumeration.rdoBegins);
		form.chkActiveOnly().setValue(Boolean.TRUE);
	}
	
	
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// WDEV-12790
		search((SearchCriteria) form.getLocalContext().getSearchCriteria(), false);

		form.setMode(FormMode.VIEW);
	}

	/**
	 * WDEV-12790
	 * Function used to search database for records matching the search criteria or the id of selected record
	 * - will search data base for records (if the <b>showNoResultsMessage</b> is true and no results were found it will notify the user)
	 * - will populate results to grid
	 * - will reselect & populate instance controls & local context with currently selected record
	 */
	private void search(SearchCriteria criteria, boolean showNoResultsMessage) throws PresentationLogicException
	{
		ChemoRegimensConfigVoCollection searchResults = domain.listChemoRegimensConfig(form.getLocalContext().getCurrentRecord(),
																						criteria != null ? criteria.regimenName : null, criteria != null ? criteria.activeOnly : null,
																						criteria != null ? criteria.pattern.getIntValue() : null);
		
		if (showNoResultsMessage && (searchResults == null || searchResults.size() == 0))
		{
			engine.showMessage("No results found for search criteria");
		}
		
		populateGrid(searchResults);
		form.getLocalContext().setCurrentRecord(domain.getChemoRegimensConfig(form.grdRegimensConfig().getValue()));
		populateScreenFromData(form.getLocalContext().getCurrentRecord());
	}

	/**
	 * WDEV-12790
	 * Function used to determine if the search criteria is valid
	 */
	private boolean validateSearchCriteria()
	{
		if (form.txtRegimenFilter().getValue() == null || form.txtRegimenFilter().getValue().trim().length() == 0)
			return false;
		
		return true;
	}
	
	private void selectionChanged() 
	{
		form.getLocalContext().setCurrentRecord(domain.getChemoRegimensConfig(form.grdRegimensConfig().getValue()));
		
		populateScreenFromData(form.getLocalContext().getCurrentRecord());
		updateControlsState();
	}

	private void populateGrid(ChemoRegimensConfigVoCollection list) 
	{
		if(list == null || list.size() == 0)
			return;
		
		form.grdRegimensConfig().getRows().clear();
		
		for(int i=0; i<list.size(); i++)
		{
			addRow(list.get(i));
		}
	}
	
	private void populateScreenFromData(ChemoRegimensConfigVo value)
	{
		// WDEV-12790
		clearInstanceControls();

		if(value == null)
			return;

		if (value.getRegimenIsNotNull())
		{
			form.ctnDetails().qmbRegimen().newRow(value.getRegimen(), value.getRegimen().getText());
			form.ctnDetails().qmbRegimen().setValue(value.getRegimen());
		}
		form.ctnDetails().cmbProcurementCode().setValue(value.getProcurementCodeIsNotNull() ? value.getProcurementCode():null);
		form.ctnDetails().cmbStatus().setValue(value.getStatusIsNotNull() ? value.getStatus():null);
		form.ctnDetails().cmbDay1DeliveryCode().setValue(value.getDayOneDeliveryCodeIsNotNull() ? value.getDayOneDeliveryCode():null);
		form.ctnDetails().cmbDeliveryCode().setValue(value.getDeliveryCodeAllOtherDaysIsNotNull() ? value.getDeliveryCodeAllOtherDays():null);
		
		//WDEV-14425
		form.ctnDetails().txtRegimenDescription().setValue(value.getRegimenDescription());
		
	}

	/**
	 * WDEV-12790
	 * Function used to clear the screen
	 * 
	 * NOTE: Will only clear the on screen data, not the local context
	 */
	private void clearScreen()
	{
		clearSearchControls();

		clearResults();
	}


	/**
	 * WDEV-12790
	 * Function used to clear the results grid and the instance controls
	 * 
	 * NOTE: Will only clear the on screen data, not the local context
	 */
	private void clearResults()
	{
		form.grdRegimensConfig().getRows().clear();
		clearInstanceControls();
	}
	
	/**
	 * WDEV-12790
	 * Function used to clear search controls
	 * 
	 * NOTE: Will only clear the on screen data, not the local context
	 */
	private void clearSearchControls()
	{
		form.grpRegimenFilter().setValue(grpRegimenFilterEnumeration.None);
		form.txtRegimenFilter().setValue(null);
		form.chkActiveOnly().setValue(null);
	}

	private void addRow(ChemoRegimensConfigVo chemoregimensconfigvo) 
	{
		if(chemoregimensconfigvo == null)
			return;
		
		grdRegimensConfigRow row = form.grdRegimensConfig().getRows().newRow(chemoregimensconfigvo.equals(form.getLocalContext().getCurrentRecord()));
		
		row.setColRegimen(chemoregimensconfigvo.getRegimenIsNotNull() ? chemoregimensconfigvo.getRegimen().toString(): null);
		row.setColProcurementCode(chemoregimensconfigvo.getProcurementCodeIsNotNull() ? chemoregimensconfigvo.getProcurementCode().toString():null);
		row.setColDay1DeliveryCode(chemoregimensconfigvo.getDayOneDeliveryCodeIsNotNull() ? chemoregimensconfigvo.getDayOneDeliveryCode().toString():null);
		row.setColDeliveryCode(chemoregimensconfigvo.getDeliveryCodeAllOtherDaysIsNotNull() ? chemoregimensconfigvo.getDeliveryCodeAllOtherDays().toString(): null);
		row.setColStatus(chemoregimensconfigvo.getStatusIsNotNull() ? chemoregimensconfigvo.getStatus().toString() : null);
			
		row.setValue(chemoregimensconfigvo);
	}

	/**
	 * WDEV-12790
	 * Function used to clear instance controls (from the container)
	 */
	public void clearInstanceControls()
	{
		form.ctnDetails().qmbRegimen().clear();
		
		form.ctnDetails().cmbProcurementCode().setValue(null);
		form.ctnDetails().cmbStatus().setValue(null);
		form.ctnDetails().cmbDay1DeliveryCode().setValue(null);
		form.ctnDetails().cmbDeliveryCode().setValue(null);
		
		//WDEV-14425
		form.ctnDetails().txtRegimenDescription().setValue(null);
	}
	
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCurrentRecord(null);
		form.grdRegimensConfig().setValue(null);
		clearInstanceControls();
		form.setMode(FormMode.EDIT);
	}
	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		ChemoRegimensConfigVo record = populateDataFromScreen(form.getLocalContext().getCurrentRecord());
		
		String[] errors = record.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setCurrentRecord(domain.save(record));
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}
	
	private ChemoRegimensConfigVo populateDataFromScreen(ChemoRegimensConfigVo value)
	{
		if(value == null)
			value = new ChemoRegimensConfigVo();

		value.setRegimen(form.ctnDetails().qmbRegimen().getValue());
		value.setProcurementCode(form.ctnDetails().cmbProcurementCode().getValue());
		value.setStatus(form.ctnDetails().cmbStatus().getValue());
		value.setDayOneDeliveryCode(form.ctnDetails().cmbDay1DeliveryCode().getValue());
		value.setDeliveryCodeAllOtherDays(form.ctnDetails().cmbDeliveryCode().getValue());
		//WDEV-14425
		value.setRegimenDescription(form.ctnDetails().txtRegimenDescription().getValue());
		
		return value;
	}
	
	public void updateControlsState()
	{
		// WDEV-12790
		form.ctnDetails().setCollapsed(FormMode.VIEW.equals(form.getMode()) && !(form.grdRegimensConfig().getValue() != null));
		
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
		// WDEV-12790
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.grdRegimensConfig().getValue() != null);
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(true);
			// WDEV-12790
			form.btnEdit().setEnabled(form.grdRegimensConfig().getValue() != null);
		}
	}
	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	private void bindRegimens(String textName, RegimenAcronym selectedValue)
	{
		// Clear RegimenAcronym combo box
		form.ctnDetails().qmbRegimen().clear();
		
		// Get RegimenAcronym records from domain
		RegimenAcronymCollection unusedRegimen = domain.listUnusedRegimen(textName, selectedValue);
		
		if (unusedRegimen == null)
		{
			form.ctnDetails().qmbRegimen().showOpened();
			return;
		}
		
		for (int i = 0; i < unusedRegimen.size(); i++)
		{
			form.ctnDetails().qmbRegimen().newRow(unusedRegimen.get(i), unusedRegimen.get(i).getText());
		}
		
		form.ctnDetails().qmbRegimen().showOpened();
	}
}
