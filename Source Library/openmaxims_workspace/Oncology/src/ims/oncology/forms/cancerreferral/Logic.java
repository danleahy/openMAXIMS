//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4027.29767)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.oncology.forms.cancerreferral;

import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentVo;
import ims.core.admin.vo.ReferralRefVo;
import ims.core.vo.EpisodeOfCareForCancerReferralVo;
import ims.core.vo.PASReferralVo;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.SourceOfReferral;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.forms.cancerreferral.GenForm.lyrMainLayer.tabPageReferralContainer.GroupTumourRelatedEnumeration;
import ims.oncology.forms.cancerreferral.GenForm.lyrMainLayer.tabPageReferralContainer.GroupTumourRelatedRadioButton;
import ims.oncology.vo.CancerReferralDetailsVo;
import ims.oncology.vo.PatientDiagnosisForPrimaryTumourVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.lyrMain().tabPageReferralDetails().ccReferralAssessment().setReadOnly(Boolean.TRUE);
			form.lyrMain().tabPageReferralDetails().ccAuthoringInfo().setIsRequiredPropertyToControls(Boolean.FALSE);
		}
		else
		{
			form.lyrMain().tabPageReferralDetails().ccAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);
			form.lyrMain().tabPageReferralDetails().ccReferralAssessment().setReadOnly(Boolean.FALSE);
		}
		updateControlsState();
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if(save())
			open();
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

	public void initialize() throws FormOpenException
	{
		form.getLocalContext().setCurrentCancerReferral(null);
		form.getLocalContext().setCurrentReferral(null);
		
		form.lyrMain().tabPageReferralDetails().setHeaderVisible(true);
		
		form.lyrMain().tabPageReferralDetails().ccAuthoringInfo().setIsRequiredPropertyToControls(Boolean.FALSE);
		
		form.getLocalContext().setSelectedDiagnosisForPrimaryTumourDetails(null);
		form.setMode(FormMode.VIEW);
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		populateReferralRecordBrowser(domain.listCancerReferrals(form.getGlobalContext().Core.getEpisodeofCareShort()));
		
		clearScreen();
		
		if(form.recbrPASReferrals().getValue() instanceof ReferralRefVo)
		{
			form.getLocalContext().setCurrentCancerReferral(domain.getCancerReferral(form.getGlobalContext().Core.getEpisodeofCareShort(), form.recbrPASReferrals().getValue()));
					
			if(form.getLocalContext().getCurrentCancerReferral() == null)
			{
				form.getLocalContext().setCurrentReferral(domain.getReferral(form.recbrPASReferrals().getValue()));
				populateReferralControls(form.getLocalContext().getCurrentReferral());
				form.setMode(FormMode.VIEW);
				
				return;
			}
			
			populateScreenFromData(form.getLocalContext().getCurrentCancerReferral());
		}
		
		form.setMode(FormMode.VIEW);
	}

	private void populateReferralRecordBrowser(EpisodeOfCareForCancerReferralVo episodeWithReferrals) 
	{
		ReferralRefVo oldReferral = form.recbrPASReferrals().getValue();
		
		form.recbrPASReferrals().clear();
		
		if(episodeWithReferrals == null || !episodeWithReferrals.getLinkedReferralsIsNotNull())
			return;
		
		for(int i=0; i<episodeWithReferrals.getLinkedReferrals().size(); i++)
		{
			PASReferralVo referral = episodeWithReferrals.getLinkedReferrals().get(i);
			
			if(referral == null)
				continue;
			
			addReferralRow(referral);
		}
		
		if(oldReferral != null)
			form.recbrPASReferrals().setValue(oldReferral);
		
		else if(episodeWithReferrals.getCurrentReferralIsNotNull() && oldReferral == null)
			form.recbrPASReferrals().setValue(episodeWithReferrals.getCurrentReferral());
	}

	private void addReferralRow(PASReferralVo referral) 
	{
		if(referral == null)
			return;
		
		String displayedText = "";
		
		if(referral.getReferralTypeIsNotNull())
			displayedText += referral.getReferralType().getText();
		
		if(referral.getDetailsIsNotNull())
			displayedText += " - " + referral.getDetails();
		
		if (referral.getSourceOfReferralIsNotNull()
			&& referral.getSourceOfReferral().equals(SourceOfReferral.GP))
			displayedText += " - " + (referral.getReferringGPIsNotNull() && referral.getReferringGP().getNameIsNotNull() ? referral.getReferringGP().getName().toString() : "");
		else
			displayedText += " - " + (referral.getReferringClinicianIsNotNull() ? referral.getReferringClinician().getName().toString() : "");

		if(referral.getReferralReceivedDateIsNotNull())
			displayedText += " - " + referral.getReferralReceivedDate();
		
		if(referral.getOriginalReferralDateIsNotNull())
			displayedText += " - " + referral.getOriginalReferralDate();
		
		form.recbrPASReferrals().newRow(referral, displayedText);
	}

	private void clearScreen()
	{
		clearCancerReferralControls();
		clearInstanceControls();
	}

	private void clearCancerReferralControls()
	{
		form.lyrMain().tabPageReferral().txtCaseSheet().setValue(null);
		form.lyrMain().tabPageReferral().txtComments().setValue(null);
		form.lyrMain().tabPageReferral().txtDateFirstSeen().setValue(null);
		form.lyrMain().tabPageReferral().txtDateGPReferral().setValue(null);
		form.lyrMain().tabPageReferral().txtDateRecieved().setValue(null);
		form.lyrMain().tabPageReferral().txtDateReferral().setValue(null);
		form.lyrMain().tabPageReferral().txtOrganisation().setValue(null);
		form.lyrMain().tabPageReferral().txtReferredBy().setValue(null);
		form.lyrMain().tabPageReferral().txtReferredTo().setValue(null);
		form.lyrMain().tabPageReferral().GroupTumourRelated().setValue(null);
		form.lyrMain().tabPageReferral().cmbFirst().setValue(null);
		form.lyrMain().tabPageReferral().cmbPerformance().setValue(null);
		form.lyrMain().tabPageReferral().lblDiagnosisDescription().setValue("");
		form.lyrMain().tabPageReferral().lblDateDiagnosed().setValue("");
		form.lyrMain().tabPageReferral().lblDiagnosisStatus().setValue("");
		form.lyrMain().tabPageReferral().lblDiagnosisAuthoringHCP().setValue(""); 
	}

	public void clearInstanceControls()
	{
		form.lyrMain().tabPageReferralDetails().ccAuthoringInfo().setValue(null);
		form.lyrMain().tabPageReferralDetails().ccReferralAssessment().clearComponent();
	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	public boolean save() throws PresentationLogicException
	{
		form.getLocalContext().setCurrentCancerReferral(populateDataFromScreen(form.getLocalContext().getCurrentCancerReferral()));
		
		String[] errors = form.getLocalContext().getCurrentCancerReferral().validate(form.lyrMain().tabPageReferralDetails().ccReferralAssessment().validateData());
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setCurrentCancerReferral(domain.saveCancerReferral(form.getLocalContext().getCurrentCancerReferral()));
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}

	public void updateControlsState()
	{
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNew().setVisible(form.getLocalContext().getCurrentCancerReferral() == null);
			form.btnNew().setEnabled(form.getLocalContext().getCurrentCancerReferral() == null && form.recbrPASReferrals().getValue() instanceof ReferralRefVo);
			form.btnEdit().setVisible(form.getLocalContext().getCurrentCancerReferral() != null);
		}
	//	form.lyrMain().tabPageReferral().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		
		form.lyrMain().tabPageReferralDetails().setccAuthoringInfoEnabled(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getCurrentCancerReferral() == null);

		// WDEV-16110 If updating an existing referral and the Authoring information is null, then allow updates to it
		if (FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getCurrentCancerReferralIsNotNull() 
				&& (form.lyrMain().tabPageReferralDetails().ccAuthoringInfo().getValue() == null || !form.lyrMain().tabPageReferralDetails().ccAuthoringInfo().getValue().getAuthoringHcpIsNotNull()))
		{
			form.lyrMain().tabPageReferralDetails().setccAuthoringInfoEnabled(true);
			form.lyrMain().tabPageReferralDetails().ccAuthoringInfo().initializeComponent();
		}
			
		
		if(form.getMode().equals(FormMode.EDIT))
			radioButtonChange();
	}

	private void populateReferralControls(PASReferralVo referral)
	{
		if (referral == null)
			return;

		form.lyrMain().tabPageReferral().txtCaseSheet().setValue(referral.getDetails());
		form.lyrMain().tabPageReferral().txtComments().setValue(referral.getReferralDetails());
		form.lyrMain().tabPageReferral().txtDateFirstSeen().setValue(referral.getFirstApptDateIsNotNull() ? referral.getFirstApptDate().toString() : "");
		form.lyrMain().tabPageReferral().txtDateGPReferral().setValue(referral.getOriginalReferralDateIsNotNull() ? referral.getOriginalReferralDate().toString() : null);
		form.lyrMain().tabPageReferral().txtDateRecieved().setValue(referral.getReferralReceivedDateIsNotNull() ? referral.getReferralReceivedDate().toString() : null);
		form.lyrMain().tabPageReferral().txtDateReferral().setValue(referral.getDateOfReferralIsNotNull() ? referral.getDateOfReferral().toString() : null);
		form.lyrMain().tabPageReferral().txtOrganisation().setValue(referral.getReferralLocation());
		
		if (referral.getSourceOfReferralIsNotNull()
			&& referral.getSourceOfReferral().equals(SourceOfReferral.GP))
			form.lyrMain().tabPageReferral().txtReferredBy().setValue(referral.getReferringGPIsNotNull() && referral.getReferringGP().getNameIsNotNull() ? referral.getReferringGP().getName().toString() : null);
		else
			form.lyrMain().tabPageReferral().txtReferredBy().setValue(referral.getReferringClinicianIsNotNull() ? referral.getReferringClinician().getName().toString() : null);

		form.lyrMain().tabPageReferral().txtReferredTo().setValue(referral.getReferredToIsNotNull() && referral.getReferredTo().getName() != null ? referral.getReferredTo().getName().toString() : null);
		
	}

	private void populateInstanceControls(PatientAssessmentVo cancerReferralAssessment)
	{
		if (cancerReferralAssessment != null)
			form.lyrMain().tabPageReferralDetails().ccReferralAssessment().setPatientAssessment(cancerReferralAssessment, false);
	}

	private CancerReferralDetailsVo populateDataFromScreen(CancerReferralDetailsVo cancerDetails)
	{
		if(cancerDetails == null)
			cancerDetails = new CancerReferralDetailsVo();
		
		if(!cancerDetails.getEpisodeOfCareIsNotNull())
			cancerDetails.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		if(!cancerDetails.getPASReferralIsNotNull())
			cancerDetails.setPASReferral(form.getLocalContext().getCurrentReferral());
		
		if (form.lyrMain().tabPageReferralDetails().ccReferralAssessment().getPatientAssessment() != null)
		{
			PatientAssessmentVo referralAssessment = form.lyrMain().tabPageReferralDetails().ccReferralAssessment().getPatientAssessment();
			referralAssessment.setAuthoringInformation(form.lyrMain().tabPageReferralDetails().ccAuthoringInfo().getValue());
			
			cancerDetails.setAssessment(referralAssessment);
		}
		cancerDetails.setAuthoringInfo(form.lyrMain().tabPageReferralDetails().ccAuthoringInfo().getValue());

		if ( ! form.lyrMain().tabPageReferral().GroupTumourRelated().getValue().equals(GroupTumourRelatedEnumeration.None))
				cancerDetails.setTumourRel(form.lyrMain().tabPageReferral().GroupTumourRelated().getValue() != null && form.lyrMain().tabPageReferral().GroupTumourRelated().getValue().equals(GroupTumourRelatedEnumeration.rdoYes) ? true : (form.lyrMain().tabPageReferral().GroupTumourRelated().getValue() != null	&& form.lyrMain().tabPageReferral().GroupTumourRelated().getValue().equals(GroupTumourRelatedEnumeration.rdoNO) ? false : null));
		cancerDetails.setFirstTheraInter(form.lyrMain().tabPageReferral().cmbFirst().getValue());
		cancerDetails.setPerfStatus(form.lyrMain().tabPageReferral().cmbPerformance().getValue());
		
		cancerDetails.setDiagnosis(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails());

		return cancerDetails;
	}

	@Override
	protected void onRecbrPASReferralsValueChanged()throws PresentationLogicException 
	{
		clearScreen();
		
		if(!(form.recbrPASReferrals().getValue() instanceof ReferralRefVo))
			return;
		
		form.getLocalContext().setCurrentCancerReferral(domain.getCancerReferral(form.getGlobalContext().Core.getEpisodeofCareShort(), form.recbrPASReferrals().getValue()));
		
		if(form.getLocalContext().getCurrentCancerReferral() == null)
		{
			form.getLocalContext().setCurrentReferral(domain.getReferral(form.recbrPASReferrals().getValue()));
			populateReferralControls(form.getLocalContext().getCurrentReferral());
			form.lyrMain().showtabPageReferral();
			updateControlsState();
			
			return;
		}
		
		populateScreenFromData(form.getLocalContext().getCurrentCancerReferral());
		form.lyrMain().showtabPageReferral();	
		updateControlsState();
	}

	private void populateScreenFromData(CancerReferralDetailsVo cancerReferral) throws PresentationLogicException 
	{
		if(cancerReferral == null)
			return;
		
		form.lyrMain().tabPageReferralDetails().ccAuthoringInfo().setValue(cancerReferral.getAuthoringInfo());
		
		populateReferralControls(cancerReferral.getPASReferral());
		
		// WDEV-16109 
		// If no assessment for this record that exists, load in the new assessment if one found
		if (cancerReferral.getAssessmentIsNotNull())
			populateInstanceControls(cancerReferral.getAssessment());
		else
			newPatientAssessmentInstance(domain.getReferralAssessment());
		
		form.lyrMain().tabPageReferral().GroupTumourRelated().setValue(cancerReferral.getTumourRelIsNotNull() && cancerReferral.getTumourRel() ? GroupTumourRelatedEnumeration.rdoYes : (cancerReferral.getTumourRelIsNotNull() &&  !cancerReferral.getTumourRel() ? GroupTumourRelatedEnumeration.rdoNO: null));

		form.lyrMain().tabPageReferral().cmbFirst().setValue(cancerReferral.getFirstTheraInter());
		form.lyrMain().tabPageReferral().cmbPerformance().setValue(cancerReferral.getPerfStatus());


		populateDiagnosisLabels(cancerReferral.getDiagnosis());
	}

	private void populateDiagnosisLabels(PatientDiagnosisForPrimaryTumourVo diagnosis)
	{
		if (diagnosis == null)
			return;

		form.getLocalContext().setSelectedDiagnosisForPrimaryTumourDetails(diagnosis);
		
		form.lyrMain().tabPageReferral().lblDiagnosisDescription().setValue(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getDiagnosisDescription());
		form.lyrMain().tabPageReferral().lblDateDiagnosed().setValue(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getDiagnosedDateIsNotNull() ?  form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getDiagnosedDate().toString() : "");
		form.lyrMain().tabPageReferral().lblDiagnosisStatus().setValue(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getCurrentStatusIsNotNull() ? form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getCurrentStatus().getStatus().getText() : "");
		form.lyrMain().tabPageReferral().lblDiagnosisAuthoringHCP().setValue(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getAuthoringInfoIsNotNull() && form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getAuthoringInfo().getAuthoringHcpIsNotNull() ? 
																			form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails().getAuthoringInfo().getAuthoringHcp().toString() : "");
	}

	public void newInstance() throws PresentationLogicException 
	{
		form.lyrMain().tabPageReferralDetails().ccAuthoringInfo().initializeComponent();
		form.getLocalContext().setSelectedDiagnosisForPrimaryTumourDetails(null);

		newPatientAssessmentInstance(domain.getReferralAssessment());
		form.setMode(FormMode.EDIT);
	}

	private void newPatientAssessmentInstance(UserAssessmentVo referralAssessment) throws PresentationLogicException 
	{
		if(referralAssessment == null)
			return;
		
		// Create a new PatientAssessment
		PatientAssessmentVo patientAssessment = new PatientAssessmentVo();

		patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());

		patientAssessment.setAssessmentData(new PatientAssessmentDataVo());
		patientAssessment.getAssessmentData().setUserAssessment(referralAssessment);
		patientAssessment.getAssessmentData().setGroupQuestionWidth(referralAssessment.getGroupQuestionWidth());

		patientAssessment.setStatus(PatientAssessmentStatusReason.NOTCOMMENCED);
		patientAssessment.setStatusReason(PatientAssessmentStatusReason.NOTCOMMENCED);

		form.lyrMain().tabPageReferralDetails().ccReferralAssessment().setPatientAssessment(patientAssessment, false, PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		newInstance();
	}

	@Override
	protected void onRadioButtonGroupTumourRelatedValueChanged() throws PresentationLogicException
	{
		form.lyrMain().tabPageReferral().cmbFirst().setValue(null);
		form.lyrMain().tabPageReferral().cmbPerformance().setValue(null);
		
		//WDEV-14794
		if (form.lyrMain().tabPageReferral().GroupTumourRelated().getValue().equals(GroupTumourRelatedEnumeration.rdoYes))
		{
		form.lyrMain().tabPageReferral().lblDiagnosisDescription().setValue("");
		form.lyrMain().tabPageReferral().lblDateDiagnosed().setValue("");
		form.lyrMain().tabPageReferral().lblDiagnosisStatus().setValue("");
		form.lyrMain().tabPageReferral().lblDiagnosisAuthoringHCP().setValue("");
		
		form.getLocalContext().setSelectedDiagnosisForPrimaryTumourDetails(null);
		}

		form.lyrMain().tabPageReferral().cmbFirst().setEnabled(false);
		form.lyrMain().tabPageReferral().cmbPerformance().setEnabled(false);

		if (form.lyrMain().tabPageReferral().GroupTumourRelated().getValue().equals(GroupTumourRelatedEnumeration.rdoNO))
		{
			form.getGlobalContext().Clinical.setReturnToFormMode(FormMode.VIEW);
			form.getGlobalContext().Clinical.setDialogFormName(null);
		
			engine.open(form.getForms().Clinical.DiagnosisComplications_Dialog);
		}
		else
			radioButtonChange();
	}

	private void radioButtonChange()
	{
		form.lyrMain().tabPageReferral().cmbFirst().setEnabled(false);
		form.lyrMain().tabPageReferral().cmbPerformance().setEnabled(false);
		
		if (form.lyrMain().tabPageReferral().GroupTumourRelated().getValue().equals(GroupTumourRelatedEnumeration.rdoYes))
		{
			form.lyrMain().tabPageReferral().cmbFirst().setEnabled(true);
			form.lyrMain().tabPageReferral().cmbPerformance().setEnabled(true);
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().Clinical.DiagnosisComplications_Dialog.equals(formName))
		{
			// If a PatientDiagnosis was selected
			if (form.getGlobalContext().Oncology.getSelectedDiagnosisForPrimaryTumourDetailsIsNotNull() && DialogResult.OK.equals(result))
			{
				// Keep PatientDiagnosis in a local context
				form.getLocalContext().setSelectedDiagnosisForPrimaryTumourDetails(
						domain.getPatientDiagnosis(form.getGlobalContext().Oncology.getSelectedDiagnosisForPrimaryTumourDetails()));
				
				// Check if a PatientDiagnosis is available
				if (!form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetailsIsNotNull())
					throw new CodingRuntimeException("Major Logical Error - Patient Diagnosis record can not be null after selecting it");
				
				populateDiagnosisLabels(form.getLocalContext().getSelectedDiagnosisForPrimaryTumourDetails());
			}
		}
		
	}
}
