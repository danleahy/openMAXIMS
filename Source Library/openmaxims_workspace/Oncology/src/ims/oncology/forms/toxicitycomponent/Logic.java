//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4050.19540)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.oncology.forms.toxicitycomponent;

import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.forms.toxicitycomponent.GenForm.grdToxicityRow;
import ims.oncology.vo.ChemoTxToxicityTypeVo;
import ims.oncology.vo.ChemoTxToxicityTypeVoCollection;
import ims.oncology.vo.ChemotherapyToxicityDetailsRefVo;
import ims.oncology.vo.ChemotherapyToxicityDetailsVo;
import ims.oncology.vo.ChemotherapyToxicityDetailsVoCollection;
import ims.oncology.vo.RadioTxToxicityTypeVo;
import ims.oncology.vo.RadioTxToxicityTypeVoCollection;
import ims.oncology.vo.RadiotherapyToxicityDetailsRefVo;
import ims.oncology.vo.RadiotherapyToxicityDetailsVo;
import ims.oncology.vo.RadiotherapyToxicityDetailsVoCollection;
import ims.oncology.vo.lookups.LookupHelper;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
	}
	
	/**
	* if True, its Radiotherapy. If False, its Checmotherapy
	*/
	public void initialise(Boolean bRadiotherapy)
	{
		form.getLocalContext().setRadiotherapyScreen(bRadiotherapy);
		open();
	}
	
	private void open() 
	{
		form.getGlobalContext().Oncology.setChemoToxicityDetailsRef(null);
		form.getGlobalContext().Oncology.setRadioToxicityDetailsRef(null);
		form.fireCustomControlValueChanged();
		form.grdToxicity().getRows().clear();
		
		if (form.getLocalContext().getRadiotherapyScreenIsNotNull()
			&& form.getLocalContext().getRadiotherapyScreen())
			populateRadiotherapy();
		else
			populateChemotherapy();
		
		updateContextMenus();
	}

	private void populateChemotherapy() 
	{
		ChemotherapyToxicityDetailsVoCollection voColl = domain.listChemoToxicity(form.getGlobalContext().Core.getEpisodeofCareShort());
		for (int i = 0 ; voColl != null && i < voColl.size() ; i++)
			populateTree(LookupHelper.getChemoTherapyToxicityType(domain.getLookupService()), voColl.get(i));			
	}

	private void populateRadiotherapy() 
	{
		RadiotherapyToxicityDetailsVoCollection voColl = domain.listRadioToxicity(form.getGlobalContext().Core.getEpisodeofCareShort());
		for (int i = 0 ; voColl != null && i < voColl.size() ; i++)
			populateTree(LookupHelper.getRadioTherapyToxicityType(domain.getLookupService()), voColl.get(i));			
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		open();
	}
	
	private void populateTree(LookupInstanceCollection instColl, ChemotherapyToxicityDetailsVo voChemo )
	{
		ChemoTxToxicityTypeVoCollection voColl = voChemo.getToxicityDetails();

		grdToxicityRow newToxicity = form.grdToxicity().getRows().newRow();
		newToxicity.setColToxicity(voChemo.getAssessmentDateIsNotNull() ? voChemo.getAssessmentDate().toString() : "");
		newToxicity.setValue(voChemo);
		
		LookupInstVo[] roots = instColl.getRoots();
		for (int j = 0; j < roots.length; j++)
		{
			LookupInstVo inst = roots[j];

			boolean bHasInstChildren = false;
			for (int k =0 ; voChemo.getToxicityDetailsIsNotNull() && k < voChemo.getToxicityDetails().size() ; k++)
			{
				if (voChemo.getToxicityDetails().get(k).getToxicityTypeIsNotNull()
					&& voChemo.getToxicityDetails().get(k).getToxicityType().getParentInstance() != null
					&& inst.equals(voChemo.getToxicityDetails().get(k).getToxicityType().getParentInstance()))
					bHasInstChildren = true;
			}

			if (bHasInstChildren)
			{
				grdToxicityRow newRow = newToxicity.getRows().newRow();
				newRow.setColToxicity(inst.getText());
				newRow.setValue(voChemo);

				fillToxicity(newRow, inst, voColl, voChemo);
			}
		}
		form.grdToxicity().expandAll();
	}

	private void fillToxicity(grdToxicityRow rootRow, LookupInstVo inst, ChemoTxToxicityTypeVoCollection voColl, ChemotherapyToxicityDetailsVo voChemo)
	{
		ArrayList children = inst.getChildInstances();
		for (int i = 0; i < children.size(); i++)
		{
			ChemoTxToxicityTypeVo voToxicity = null;
			LookupInstVo child = (LookupInstVo) children.get(i);

			for (int j =0 ; voColl != null && j < voColl.size() ; j++)
			{
				if (child.equals(voColl.get(j).getToxicityType()))
					voToxicity = voColl.get(j);
			}

			if (voToxicity != null)
			{
				grdToxicityRow newRow = rootRow.getRows().newRow();
				newRow.setColToxicity(child.getText());
				newRow.setColGrade(voToxicity != null ? voToxicity.getGrade() : null);
				newRow.setValue(voChemo);
					
				fillToxicity(newRow, child, voColl, voChemo);
			}
		}
	}

	private void populateTree(LookupInstanceCollection instColl, RadiotherapyToxicityDetailsVo voRadio )
	{
		RadioTxToxicityTypeVoCollection voColl = voRadio.getToxicityDetails();

		grdToxicityRow newToxicity = form.grdToxicity().getRows().newRow();
		newToxicity.setColToxicity(voRadio.getAssessmentDateIsNotNull() ? voRadio.getAssessmentDate().toString() : "");
		newToxicity.setValue(voRadio);
		
		LookupInstVo[] roots = instColl.getRoots();
		for (int j = 0; j < roots.length; j++)
		{
			LookupInstVo inst = roots[j];

			boolean bHasInstChildren = false;
			for (int k =0 ; voRadio.getToxicityDetailsIsNotNull() && k < voRadio.getToxicityDetails().size() ; k++)
			{
				if (voRadio.getToxicityDetails().get(k).getToxicityTypeIsNotNull()
					&& voRadio.getToxicityDetails().get(k).getToxicityType().getParentInstance() != null
					&& inst.equals(voRadio.getToxicityDetails().get(k).getToxicityType().getParentInstance()))
					bHasInstChildren = true;
			}

			if (bHasInstChildren)
			{
				grdToxicityRow newRow = newToxicity.getRows().newRow();
				newRow.setColToxicity(inst.getText());
				newRow.setValue(voRadio);
				
				fillToxicity(newRow, inst, voColl, voRadio);
			}
		}
		form.grdToxicity().expandAll();
	}

	private void fillToxicity(grdToxicityRow rootRow, LookupInstVo inst, RadioTxToxicityTypeVoCollection voColl, RadiotherapyToxicityDetailsVo voRadio)
	{
		ArrayList children = inst.getChildInstances();
		for (int i = 0; i < children.size(); i++)
		{
			RadioTxToxicityTypeVo voToxicity = null;
			LookupInstVo child = (LookupInstVo) children.get(i);

			for (int j =0 ; voColl != null && j < voColl.size() ; j++)
			{
				if (child.equals(voColl.get(j).getToxicityType()))
					voToxicity = voColl.get(j);
			}

			if (voToxicity != null)
			{
				grdToxicityRow newRow = rootRow.getRows().newRow();
				newRow.setColToxicity(child.getText());
				newRow.setColGrade(voToxicity != null ? voToxicity.getGrade() : null);
				newRow.setValue(voRadio);
					
				fillToxicity(newRow, child, voColl, voRadio);
			}
		}
	}


	@Override
	protected void onGrdToxicitySelectionChanged() throws PresentationLogicException 
	{
		if (form.getLocalContext().getRadiotherapyScreenIsNotNull()
				&& form.getLocalContext().getRadiotherapyScreen())
		{
			RadiotherapyToxicityDetailsRefVo voRef = new RadiotherapyToxicityDetailsRefVo();
			if (form.grdToxicity().getSelectedRow().getValue() instanceof RadiotherapyToxicityDetailsVo)
			{
				voRef.setID_RadiotherapyToxicityDetails(((RadiotherapyToxicityDetailsVo)form.grdToxicity().getSelectedRow().getValue()).getID_RadiotherapyToxicityDetails());
				form.getGlobalContext().Oncology.setRadioToxicityDetailsRef(voRef);
				form.getGlobalContext().Oncology.setChemoToxicityDetailsRef(null);
				form.fireCustomControlValueChanged();
			}
		}
		else
		{
			ChemotherapyToxicityDetailsRefVo voRef = new ChemotherapyToxicityDetailsRefVo();
			if (form.grdToxicity().getSelectedRow().getValue() instanceof ChemotherapyToxicityDetailsVo)
			{
				voRef.setID_ChemotherapyToxicityDetails(((ChemotherapyToxicityDetailsVo)form.grdToxicity().getSelectedRow().getValue()).getID_ChemotherapyToxicityDetails());
				form.getGlobalContext().Oncology.setRadioToxicityDetailsRef(null);
				form.getGlobalContext().Oncology.setChemoToxicityDetailsRef(voRef);
				form.fireCustomControlValueChanged();
			}
		}
		updateContextMenus();
	}

	private void updateContextMenus()
	{
		form.getContextMenus().Oncology.hideAllToxicityMenuMenuItems();
		form.getContextMenus().Oncology.getToxicityMenuNEWItem().setVisible(true);
		form.getContextMenus().Oncology.getToxicityMenuUPDATEItem().setVisible(form.getGlobalContext().Oncology.getChemoToxicityDetailsRefIsNotNull() || form.getGlobalContext().Oncology.getRadioToxicityDetailsRefIsNotNull());
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.OncologyNamespace.ToxicityMenu.NEW :
				form.getGlobalContext().Oncology.setChemoToxicityDetailsRef(null);
				form.getGlobalContext().Oncology.setRadioToxicityDetailsRef(null);
				engine.open(form.getForms().Oncology.ToxicityDialog, new Object[]{form.getLocalContext().getRadiotherapyScreen()});
			break;
			case GenForm.ContextMenus.OncologyNamespace.ToxicityMenu.UPDATE :
				engine.open(form.getForms().Oncology.ToxicityDialog, new Object[]{form.getLocalContext().getRadiotherapyScreen()});
			break;
		}
	}

}
