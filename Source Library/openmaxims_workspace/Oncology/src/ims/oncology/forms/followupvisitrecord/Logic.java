//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 3972.30067)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.oncology.forms.followupvisitrecord;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.utils.Date;
import ims.oncology.vo.FollowUpLiteVo;
import ims.oncology.vo.FollowUpLiteVoCollection;
import ims.oncology.vo.FollowUpShortVo;
import ims.oncology.vo.PrimaryTumourDetailsDisplayVo;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Event handlers region
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialise the screen
		initialize();

		// Populate screen data
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		// Refresh controls state
		updateControlsState();
	}

	@Override
	protected void onRecbrFollowUpRecordsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Get selection from domain
		form.getLocalContext().setSelectedFollowUp(domain.getFollowUp(form.recbrFollowUpRecords().getValue()));
		
		// Populate controls with new selection
		populateInstanceControls(form.getLocalContext().getSelectedFollowUp());
	}

	@Override
	protected void onQmbSeenByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		// List HCP from domain
		populateHCPQueryCombobox(domain.listHcp(value));
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Create a new FollowUp record
		newInstance();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Edit currently selected FollowUp record
		updateInstance();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// If save is successful refresh screen
		if (save())
			open();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Refresh the screen
		open();
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Form presentation function
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	public void initialize() throws FormOpenException
	{
		// Populate form controls for current episode of care
		populatePrimaryTumourDetails(domain.getPrimaryTumourDetails(form.getGlobalContext().Core.getEpisodeofCareShort()));
		
		form.getLocalContext().setSelectedFollowUp(null);
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear screen
		clearScreen();

		// List records for currently Episode of Care
		populateRecordBrowser(domain.listFollowUpRecords(form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext()));

		// Get selected record from database (if one is present)
		form.getLocalContext().setSelectedFollowUp(domain.getFollowUp(form.recbrFollowUpRecords().getValue()));

		populateInstanceControls(form.getLocalContext().getSelectedFollowUp());

		// Set form mode to VIEW
		form.setMode(FormMode.VIEW);
	}

	private void clearScreen()
	{
		// Clear record browser
		form.recbrFollowUpRecords().clear();
		
		// Clear instance controls
		clearInstanceControls();
	}

	public void clearInstanceControls()
	{
		form.dteAssessment().setValue(null);
		form.qmbSeenBy().clear();
		form.cmbPrimaryTumourStatus().setValue(null);
		form.cmbNodalStatus().setValue(null);
		form.cmbMetatasticStatus().setValue(null);
		form.cmbMarkerResponseStatus().setValue(null);
		form.cmbPerformanceStatus().setValue(null);
		form.cmbFollowUpStatus().setValue(null);
		form.cmbSurgeryMorbidity().setValue(null);
		form.cmbChemotherapyMorbidity().setValue(null);
		form.cmbRadiotherapyMorbidity().setValue(null);
		form.cmbCombinationMorbidity().setValue(null);
		form.cmbDysnpeaScore().setValue(null);
	}

	public void updateInstance()
	{
		// Set form in EDIT mode
		form.setMode(FormMode.EDIT);
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear local context
		form.getLocalContext().setSelectedFollowUp(null);
		
		// Clear instance controls
		clearInstanceControls();
		
		// Set default values
		form.qmbSeenBy().newRow((HcpLiteVo) domain.getHcpLiteUser(), domain.getHcpLiteUser() != null ? domain.getHcpLiteUser().toString() : "");
		
		// Set form in EDIT mode
		form.setMode(FormMode.EDIT);
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			
			// Populate data from screen
		    FollowUpShortVo followUpToSave = populateDataFromScreen(form.getLocalContext().getSelectedFollowUp()); //WDEV-14433

			// Validate data & UI Rules
			String[] errors = followUpToSave.validate(); //WDEV-14433
			errors = validateUIRules(errors);

			// Show validation errors
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt save
			form.getLocalContext().setSelectedFollowUp(domain.saveFollowUpRecord(followUpToSave)); //WDEV-14433

			return true;
		}
		// Treat exceptions
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
	}

	public void updateControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(form.getLocalContext().getSelectedFollowUpIsNotNull());
		}
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange functions
	// --------------------------------------------------------------------------------------------------------------------------------------------------------

	private void populatePrimaryTumourDetails(PrimaryTumourDetailsDisplayVo primaryTumourDetails)
	{
		// Clear Primary Tumour Details
		form.txtTumourGroup().setValue(null);
		form.txtTStage().setValue(null);
		form.txtNStage().setValue(null);
		form.txtMStage().setValue(null);
		form.txtOverall().setValue(null);
		
		if (primaryTumourDetails == null)
			return;
		
		form.txtTumourGroup().setValue(primaryTumourDetails.getTumourGroupIsNotNull() ? primaryTumourDetails.getTumourGroup().getGroupName() : null);
		form.txtTStage().setValue(primaryTumourDetails.getPreTreatmentTValIsNotNull() ? primaryTumourDetails.getPreTreatmentTVal().getTNMValue() : null);
		form.txtNStage().setValue(primaryTumourDetails.getPreTreatmentNValIsNotNull() ? primaryTumourDetails.getPreTreatmentNVal().getTNMValue() : null);
		form.txtMStage().setValue(primaryTumourDetails.getPreTreatmentMValIsNotNull() ? primaryTumourDetails.getPreTreatmentMVal().getTNMValue() : null);
		form.txtOverall().setValue(primaryTumourDetails.getPreTreatmentOverallIsNotNull() && primaryTumourDetails.getPreTreatmentOverall().getOverallStageDescriptionIsNotNull() ?
											primaryTumourDetails.getPreTreatmentOverall().getOverallStageDescription().getText() : "");
	}

	private void populateRecordBrowser(FollowUpLiteVoCollection followUpRecords)
	{
		form.recbrFollowUpRecords().clear();

		if (followUpRecords == null)
			return;

		for (FollowUpLiteVo followUp : followUpRecords)
		{
			form.recbrFollowUpRecords().newRow(followUp, followUp.getAssessmentDate().toString() + " - " + followUp.getSeenBy().toString());
		}
		
		if (form.getLocalContext().getSelectedFollowUpIsNotNull())
		{
			form.recbrFollowUpRecords().setValue(form.getLocalContext().getSelectedFollowUp());
		}
		else if (followUpRecords.size() > 0)
		{
			form.recbrFollowUpRecords().setValue(followUpRecords.get(0));
		}
	}

	private void populateInstanceControls(FollowUpShortVo followUp)
	{
		// Clear instance controls
		clearInstanceControls();

		if (followUp == null)
			return;

		// Populate controls with values
		form.dteAssessment().setValue(followUp.getAssessmentDate());

		if (followUp.getSeenByIsNotNull())
		{
			form.qmbSeenBy().newRow(followUp.getSeenBy(), followUp.getSeenBy().toString());
			form.qmbSeenBy().setValue(followUp.getSeenBy());
		}

		form.cmbPrimaryTumourStatus().setValue(followUp.getPrimaryTumourStatus());
		form.cmbNodalStatus().setValue(followUp.getNodalStatus());
		form.cmbMetatasticStatus().setValue(followUp.getMetastaticStatus());
		form.cmbMarkerResponseStatus().setValue(followUp.getMarkerResponseStatus());
		form.cmbPerformanceStatus().setValue(followUp.getPerformanceStatus());
		form.cmbFollowUpStatus().setValue(followUp.getPatientFollowUpStatus());
		form.cmbSurgeryMorbidity().setValue(followUp.getMorbidityCodeSurgery());
		form.cmbChemotherapyMorbidity().setValue(followUp.getMorbidityCodeCancerChemotherapy());
		form.cmbRadiotherapyMorbidity().setValue(followUp.getMorbidityCodeCancerRadiotherapy());
		form.cmbCombinationMorbidity().setValue(followUp.getMorbidityCodeCancerCombination());
		form.cmbDysnpeaScore().setValue(followUp.getDyspneaScore());
	}

	private FollowUpShortVo populateDataFromScreen(FollowUpShortVo followUp)
	{
		if (followUp == null)
		{
			followUp = new FollowUpShortVo();
			
			followUp.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			followUp.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		
		
		followUp.setAssessmentDate(form.dteAssessment().getValue());
		followUp.setSeenBy(form.qmbSeenBy().getValue());
		followUp.setPrimaryTumourStatus(form.cmbPrimaryTumourStatus().getValue());
		followUp.setNodalStatus(form.cmbNodalStatus().getValue());
		followUp.setMetastaticStatus(form.cmbMetatasticStatus().getValue());
		followUp.setMarkerResponseStatus(form.cmbMarkerResponseStatus().getValue());
		followUp.setPerformanceStatus(form.cmbPerformanceStatus().getValue());
		followUp.setPatientFollowUpStatus(form.cmbFollowUpStatus().getValue());
		followUp.setMorbidityCodeSurgery(form.cmbSurgeryMorbidity().getValue());
		followUp.setMorbidityCodeCancerChemotherapy(form.cmbChemotherapyMorbidity().getValue());
		followUp.setMorbidityCodeCancerRadiotherapy(form.cmbRadiotherapyMorbidity().getValue());
		followUp.setMorbidityCodeCancerCombination(form.cmbCombinationMorbidity().getValue());
		followUp.setDyspneaScore(form.cmbDysnpeaScore().getValue());

		return followUp;
	}


	private void populateHCPQueryCombobox(HcpLiteVoCollection hcps)
	{
		// Clear medics
		form.qmbSeenBy().clear();
		
		if (hcps == null)
			return;
		
		for (HcpLiteVo hcp : hcps)
		{
			form.qmbSeenBy().newRow(hcp, hcp.toString());
		}
		
		if (hcps.size() == 1)
		{
			form.qmbSeenBy().setValue(hcps.get(0));
		}
		else
		{
			form.qmbSeenBy().showOpened();
		}
	}

	// WDEV-11130
	private String[] validateUIRules(String[] existingErrors)
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();
		
		if (existingErrors != null)
		{
			for (int i = 0; i < existingErrors.length; i++)
				listOfErrors.add(existingErrors[i]);
		}
		
		if (form.dteAssessment().getValue() != null && form.dteAssessment().getValue().isGreaterThan(new Date()))
			listOfErrors.add("Assessment Date can not be set into the future");
		
		if (listOfErrors.size() == 0)
			return null;
		
		String[] errors = new String[listOfErrors.size()];
		
		for (int i = 0; i < errors.length; i++)
			errors[i] = listOfErrors.get(i);
		
		return errors;
	}
}
