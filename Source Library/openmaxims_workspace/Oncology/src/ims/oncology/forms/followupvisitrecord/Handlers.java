//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.followupvisitrecord;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbDysnpeaScoreLookup();
	abstract protected void defaultcmbDysnpeaScoreLookupValue();
	abstract protected void bindcmbPerformanceStatusLookup();
	abstract protected void defaultcmbPerformanceStatusLookupValue();
	abstract protected void bindcmbFollowUpStatusLookup();
	abstract protected void defaultcmbFollowUpStatusLookupValue();
	abstract protected void bindcmbPrimaryTumourStatusLookup();
	abstract protected void defaultcmbPrimaryTumourStatusLookupValue();
	abstract protected void bindcmbNodalStatusLookup();
	abstract protected void defaultcmbNodalStatusLookupValue();
	abstract protected void bindcmbSurgeryMorbidityLookup();
	abstract protected void defaultcmbSurgeryMorbidityLookupValue();
	abstract protected void bindcmbChemotherapyMorbidityLookup();
	abstract protected void defaultcmbChemotherapyMorbidityLookupValue();
	abstract protected void bindcmbMetatasticStatusLookup();
	abstract protected void defaultcmbMetatasticStatusLookupValue();
	abstract protected void bindcmbMarkerResponseStatusLookup();
	abstract protected void defaultcmbMarkerResponseStatusLookupValue();
	abstract protected void bindcmbCombinationMorbidityLookup();
	abstract protected void defaultcmbCombinationMorbidityLookupValue();
	abstract protected void bindcmbRadiotherapyMorbidityLookup();
	abstract protected void defaultcmbRadiotherapyMorbidityLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDysnpeaScoreValueSet(Object value);
	abstract protected void onQmbSeenByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPerformanceStatusValueSet(Object value);
	abstract protected void oncmbFollowUpStatusValueSet(Object value);
	abstract protected void oncmbPrimaryTumourStatusValueSet(Object value);
	abstract protected void oncmbNodalStatusValueSet(Object value);
	abstract protected void oncmbSurgeryMorbidityValueSet(Object value);
	abstract protected void oncmbChemotherapyMorbidityValueSet(Object value);
	abstract protected void oncmbMetatasticStatusValueSet(Object value);
	abstract protected void oncmbMarkerResponseStatusValueSet(Object value);
	abstract protected void oncmbCombinationMorbidityValueSet(Object value);
	abstract protected void oncmbRadiotherapyMorbidityValueSet(Object value);
	abstract protected void onRecbrFollowUpRecordsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.cmbDysnpeaScore().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDysnpeaScoreValueSet(value);
			}
		});
		this.form.qmbSeenBy().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbSeenByTextSubmited(value);
			}
		});
		this.form.cmbPerformanceStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPerformanceStatusValueSet(value);
			}
		});
		this.form.cmbFollowUpStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbFollowUpStatusValueSet(value);
			}
		});
		this.form.cmbPrimaryTumourStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPrimaryTumourStatusValueSet(value);
			}
		});
		this.form.cmbNodalStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbNodalStatusValueSet(value);
			}
		});
		this.form.cmbSurgeryMorbidity().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSurgeryMorbidityValueSet(value);
			}
		});
		this.form.cmbChemotherapyMorbidity().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbChemotherapyMorbidityValueSet(value);
			}
		});
		this.form.cmbMetatasticStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbMetatasticStatusValueSet(value);
			}
		});
		this.form.cmbMarkerResponseStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbMarkerResponseStatusValueSet(value);
			}
		});
		this.form.cmbCombinationMorbidity().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCombinationMorbidityValueSet(value);
			}
		});
		this.form.cmbRadiotherapyMorbidity().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbRadiotherapyMorbidityValueSet(value);
			}
		});
		this.form.recbrFollowUpRecords().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRecbrFollowUpRecordsValueChanged();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.btnEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditClick();
			}
		});
		this.form.btnNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbDysnpeaScoreLookup();
		bindcmbPerformanceStatusLookup();
		bindcmbFollowUpStatusLookup();
		bindcmbPrimaryTumourStatusLookup();
		bindcmbNodalStatusLookup();
		bindcmbSurgeryMorbidityLookup();
		bindcmbChemotherapyMorbidityLookup();
		bindcmbMetatasticStatusLookup();
		bindcmbMarkerResponseStatusLookup();
		bindcmbCombinationMorbidityLookup();
		bindcmbRadiotherapyMorbidityLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbDysnpeaScoreLookup();
		bindcmbPerformanceStatusLookup();
		bindcmbFollowUpStatusLookup();
		bindcmbPrimaryTumourStatusLookup();
		bindcmbNodalStatusLookup();
		bindcmbSurgeryMorbidityLookup();
		bindcmbChemotherapyMorbidityLookup();
		bindcmbMetatasticStatusLookup();
		bindcmbMarkerResponseStatusLookup();
		bindcmbCombinationMorbidityLookup();
		bindcmbRadiotherapyMorbidityLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbDysnpeaScoreLookupValue();
		defaultcmbPerformanceStatusLookupValue();
		defaultcmbFollowUpStatusLookupValue();
		defaultcmbPrimaryTumourStatusLookupValue();
		defaultcmbNodalStatusLookupValue();
		defaultcmbSurgeryMorbidityLookupValue();
		defaultcmbChemotherapyMorbidityLookupValue();
		defaultcmbMetatasticStatusLookupValue();
		defaultcmbMarkerResponseStatusLookupValue();
		defaultcmbCombinationMorbidityLookupValue();
		defaultcmbRadiotherapyMorbidityLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
