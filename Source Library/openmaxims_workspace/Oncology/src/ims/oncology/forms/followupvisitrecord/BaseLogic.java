//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.followupvisitrecord;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.oncology.domain.FollowUpVisitRecord.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.oncology.domain.FollowUpVisitRecord domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbDysnpeaScoreValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbDysnpeaScore().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUDyspneaScore existingInstance = (ims.oncology.vo.lookups.FUDyspneaScore)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDysnpeaScoreLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.FUDyspneaScore)
		{
			ims.oncology.vo.lookups.FUDyspneaScore instance = (ims.oncology.vo.lookups.FUDyspneaScore)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDysnpeaScoreLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUDyspneaScore existingInstance = (ims.oncology.vo.lookups.FUDyspneaScore)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbDysnpeaScore().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDysnpeaScoreLookup()
	{
		this.form.cmbDysnpeaScore().clear();
		ims.oncology.vo.lookups.FUDyspneaScoreCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getFUDyspneaScore(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbDysnpeaScore().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDysnpeaScoreLookupValue(int id)
	{
		ims.oncology.vo.lookups.FUDyspneaScore instance = ims.oncology.vo.lookups.LookupHelper.getFUDyspneaScoreInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbDysnpeaScore().setValue(instance);
	}
	protected final void defaultcmbDysnpeaScoreLookupValue()
	{
		this.form.cmbDysnpeaScore().setValue((ims.oncology.vo.lookups.FUDyspneaScore)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.FUDyspneaScore.class, engine.getFormName().getID(), ims.oncology.vo.lookups.FUDyspneaScore.TYPE_ID));
	}
	protected final void oncmbPerformanceStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPerformanceStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.WHOPerformanceStatus existingInstance = (ims.oncology.vo.lookups.WHOPerformanceStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPerformanceStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.WHOPerformanceStatus)
		{
			ims.oncology.vo.lookups.WHOPerformanceStatus instance = (ims.oncology.vo.lookups.WHOPerformanceStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPerformanceStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.WHOPerformanceStatus existingInstance = (ims.oncology.vo.lookups.WHOPerformanceStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPerformanceStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPerformanceStatusLookup()
	{
		this.form.cmbPerformanceStatus().clear();
		ims.oncology.vo.lookups.WHOPerformanceStatusCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getWHOPerformanceStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPerformanceStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPerformanceStatusLookupValue(int id)
	{
		ims.oncology.vo.lookups.WHOPerformanceStatus instance = ims.oncology.vo.lookups.LookupHelper.getWHOPerformanceStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPerformanceStatus().setValue(instance);
	}
	protected final void defaultcmbPerformanceStatusLookupValue()
	{
		this.form.cmbPerformanceStatus().setValue((ims.oncology.vo.lookups.WHOPerformanceStatus)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.WHOPerformanceStatus.class, engine.getFormName().getID(), ims.oncology.vo.lookups.WHOPerformanceStatus.TYPE_ID));
	}
	protected final void oncmbFollowUpStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbFollowUpStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUPatientFollowUpStatus existingInstance = (ims.oncology.vo.lookups.FUPatientFollowUpStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbFollowUpStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.FUPatientFollowUpStatus)
		{
			ims.oncology.vo.lookups.FUPatientFollowUpStatus instance = (ims.oncology.vo.lookups.FUPatientFollowUpStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbFollowUpStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUPatientFollowUpStatus existingInstance = (ims.oncology.vo.lookups.FUPatientFollowUpStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbFollowUpStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbFollowUpStatusLookup()
	{
		this.form.cmbFollowUpStatus().clear();
		ims.oncology.vo.lookups.FUPatientFollowUpStatusCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getFUPatientFollowUpStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbFollowUpStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbFollowUpStatusLookupValue(int id)
	{
		ims.oncology.vo.lookups.FUPatientFollowUpStatus instance = ims.oncology.vo.lookups.LookupHelper.getFUPatientFollowUpStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbFollowUpStatus().setValue(instance);
	}
	protected final void defaultcmbFollowUpStatusLookupValue()
	{
		this.form.cmbFollowUpStatus().setValue((ims.oncology.vo.lookups.FUPatientFollowUpStatus)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.FUPatientFollowUpStatus.class, engine.getFormName().getID(), ims.oncology.vo.lookups.FUPatientFollowUpStatus.TYPE_ID));
	}
	protected final void oncmbPrimaryTumourStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPrimaryTumourStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUPrimaryTumourStatus existingInstance = (ims.oncology.vo.lookups.FUPrimaryTumourStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPrimaryTumourStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.FUPrimaryTumourStatus)
		{
			ims.oncology.vo.lookups.FUPrimaryTumourStatus instance = (ims.oncology.vo.lookups.FUPrimaryTumourStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPrimaryTumourStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUPrimaryTumourStatus existingInstance = (ims.oncology.vo.lookups.FUPrimaryTumourStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPrimaryTumourStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPrimaryTumourStatusLookup()
	{
		this.form.cmbPrimaryTumourStatus().clear();
		ims.oncology.vo.lookups.FUPrimaryTumourStatusCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getFUPrimaryTumourStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPrimaryTumourStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPrimaryTumourStatusLookupValue(int id)
	{
		ims.oncology.vo.lookups.FUPrimaryTumourStatus instance = ims.oncology.vo.lookups.LookupHelper.getFUPrimaryTumourStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPrimaryTumourStatus().setValue(instance);
	}
	protected final void defaultcmbPrimaryTumourStatusLookupValue()
	{
		this.form.cmbPrimaryTumourStatus().setValue((ims.oncology.vo.lookups.FUPrimaryTumourStatus)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.FUPrimaryTumourStatus.class, engine.getFormName().getID(), ims.oncology.vo.lookups.FUPrimaryTumourStatus.TYPE_ID));
	}
	protected final void oncmbNodalStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbNodalStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUNodalStatus existingInstance = (ims.oncology.vo.lookups.FUNodalStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbNodalStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.FUNodalStatus)
		{
			ims.oncology.vo.lookups.FUNodalStatus instance = (ims.oncology.vo.lookups.FUNodalStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbNodalStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUNodalStatus existingInstance = (ims.oncology.vo.lookups.FUNodalStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbNodalStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbNodalStatusLookup()
	{
		this.form.cmbNodalStatus().clear();
		ims.oncology.vo.lookups.FUNodalStatusCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getFUNodalStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbNodalStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbNodalStatusLookupValue(int id)
	{
		ims.oncology.vo.lookups.FUNodalStatus instance = ims.oncology.vo.lookups.LookupHelper.getFUNodalStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbNodalStatus().setValue(instance);
	}
	protected final void defaultcmbNodalStatusLookupValue()
	{
		this.form.cmbNodalStatus().setValue((ims.oncology.vo.lookups.FUNodalStatus)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.FUNodalStatus.class, engine.getFormName().getID(), ims.oncology.vo.lookups.FUNodalStatus.TYPE_ID));
	}
	protected final void oncmbSurgeryMorbidityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbSurgeryMorbidity().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMorbiditySurgery existingInstance = (ims.oncology.vo.lookups.FUMorbiditySurgery)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSurgeryMorbidityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.FUMorbiditySurgery)
		{
			ims.oncology.vo.lookups.FUMorbiditySurgery instance = (ims.oncology.vo.lookups.FUMorbiditySurgery)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSurgeryMorbidityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMorbiditySurgery existingInstance = (ims.oncology.vo.lookups.FUMorbiditySurgery)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbSurgeryMorbidity().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSurgeryMorbidityLookup()
	{
		this.form.cmbSurgeryMorbidity().clear();
		ims.oncology.vo.lookups.FUMorbiditySurgeryCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getFUMorbiditySurgery(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbSurgeryMorbidity().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSurgeryMorbidityLookupValue(int id)
	{
		ims.oncology.vo.lookups.FUMorbiditySurgery instance = ims.oncology.vo.lookups.LookupHelper.getFUMorbiditySurgeryInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbSurgeryMorbidity().setValue(instance);
	}
	protected final void defaultcmbSurgeryMorbidityLookupValue()
	{
		this.form.cmbSurgeryMorbidity().setValue((ims.oncology.vo.lookups.FUMorbiditySurgery)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.FUMorbiditySurgery.class, engine.getFormName().getID(), ims.oncology.vo.lookups.FUMorbiditySurgery.TYPE_ID));
	}
	protected final void oncmbChemotherapyMorbidityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbChemotherapyMorbidity().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMorbidityChemoTx existingInstance = (ims.oncology.vo.lookups.FUMorbidityChemoTx)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbChemotherapyMorbidityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.FUMorbidityChemoTx)
		{
			ims.oncology.vo.lookups.FUMorbidityChemoTx instance = (ims.oncology.vo.lookups.FUMorbidityChemoTx)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbChemotherapyMorbidityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMorbidityChemoTx existingInstance = (ims.oncology.vo.lookups.FUMorbidityChemoTx)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbChemotherapyMorbidity().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbChemotherapyMorbidityLookup()
	{
		this.form.cmbChemotherapyMorbidity().clear();
		ims.oncology.vo.lookups.FUMorbidityChemoTxCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getFUMorbidityChemoTx(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbChemotherapyMorbidity().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbChemotherapyMorbidityLookupValue(int id)
	{
		ims.oncology.vo.lookups.FUMorbidityChemoTx instance = ims.oncology.vo.lookups.LookupHelper.getFUMorbidityChemoTxInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbChemotherapyMorbidity().setValue(instance);
	}
	protected final void defaultcmbChemotherapyMorbidityLookupValue()
	{
		this.form.cmbChemotherapyMorbidity().setValue((ims.oncology.vo.lookups.FUMorbidityChemoTx)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.FUMorbidityChemoTx.class, engine.getFormName().getID(), ims.oncology.vo.lookups.FUMorbidityChemoTx.TYPE_ID));
	}
	protected final void oncmbMetatasticStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbMetatasticStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMetastaticStatus existingInstance = (ims.oncology.vo.lookups.FUMetastaticStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbMetatasticStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.FUMetastaticStatus)
		{
			ims.oncology.vo.lookups.FUMetastaticStatus instance = (ims.oncology.vo.lookups.FUMetastaticStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbMetatasticStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMetastaticStatus existingInstance = (ims.oncology.vo.lookups.FUMetastaticStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbMetatasticStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbMetatasticStatusLookup()
	{
		this.form.cmbMetatasticStatus().clear();
		ims.oncology.vo.lookups.FUMetastaticStatusCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getFUMetastaticStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbMetatasticStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbMetatasticStatusLookupValue(int id)
	{
		ims.oncology.vo.lookups.FUMetastaticStatus instance = ims.oncology.vo.lookups.LookupHelper.getFUMetastaticStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbMetatasticStatus().setValue(instance);
	}
	protected final void defaultcmbMetatasticStatusLookupValue()
	{
		this.form.cmbMetatasticStatus().setValue((ims.oncology.vo.lookups.FUMetastaticStatus)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.FUMetastaticStatus.class, engine.getFormName().getID(), ims.oncology.vo.lookups.FUMetastaticStatus.TYPE_ID));
	}
	protected final void oncmbMarkerResponseStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbMarkerResponseStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMarkerResponseStatus existingInstance = (ims.oncology.vo.lookups.FUMarkerResponseStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbMarkerResponseStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.FUMarkerResponseStatus)
		{
			ims.oncology.vo.lookups.FUMarkerResponseStatus instance = (ims.oncology.vo.lookups.FUMarkerResponseStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbMarkerResponseStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMarkerResponseStatus existingInstance = (ims.oncology.vo.lookups.FUMarkerResponseStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbMarkerResponseStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbMarkerResponseStatusLookup()
	{
		this.form.cmbMarkerResponseStatus().clear();
		ims.oncology.vo.lookups.FUMarkerResponseStatusCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getFUMarkerResponseStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbMarkerResponseStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbMarkerResponseStatusLookupValue(int id)
	{
		ims.oncology.vo.lookups.FUMarkerResponseStatus instance = ims.oncology.vo.lookups.LookupHelper.getFUMarkerResponseStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbMarkerResponseStatus().setValue(instance);
	}
	protected final void defaultcmbMarkerResponseStatusLookupValue()
	{
		this.form.cmbMarkerResponseStatus().setValue((ims.oncology.vo.lookups.FUMarkerResponseStatus)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.FUMarkerResponseStatus.class, engine.getFormName().getID(), ims.oncology.vo.lookups.FUMarkerResponseStatus.TYPE_ID));
	}
	protected final void oncmbCombinationMorbidityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbCombinationMorbidity().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMorbidityCombination existingInstance = (ims.oncology.vo.lookups.FUMorbidityCombination)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCombinationMorbidityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.FUMorbidityCombination)
		{
			ims.oncology.vo.lookups.FUMorbidityCombination instance = (ims.oncology.vo.lookups.FUMorbidityCombination)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCombinationMorbidityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMorbidityCombination existingInstance = (ims.oncology.vo.lookups.FUMorbidityCombination)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbCombinationMorbidity().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCombinationMorbidityLookup()
	{
		this.form.cmbCombinationMorbidity().clear();
		ims.oncology.vo.lookups.FUMorbidityCombinationCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getFUMorbidityCombination(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbCombinationMorbidity().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCombinationMorbidityLookupValue(int id)
	{
		ims.oncology.vo.lookups.FUMorbidityCombination instance = ims.oncology.vo.lookups.LookupHelper.getFUMorbidityCombinationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbCombinationMorbidity().setValue(instance);
	}
	protected final void defaultcmbCombinationMorbidityLookupValue()
	{
		this.form.cmbCombinationMorbidity().setValue((ims.oncology.vo.lookups.FUMorbidityCombination)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.FUMorbidityCombination.class, engine.getFormName().getID(), ims.oncology.vo.lookups.FUMorbidityCombination.TYPE_ID));
	}
	protected final void oncmbRadiotherapyMorbidityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbRadiotherapyMorbidity().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMorbidityRadiotx existingInstance = (ims.oncology.vo.lookups.FUMorbidityRadiotx)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbRadiotherapyMorbidityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.FUMorbidityRadiotx)
		{
			ims.oncology.vo.lookups.FUMorbidityRadiotx instance = (ims.oncology.vo.lookups.FUMorbidityRadiotx)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbRadiotherapyMorbidityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.FUMorbidityRadiotx existingInstance = (ims.oncology.vo.lookups.FUMorbidityRadiotx)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbRadiotherapyMorbidity().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbRadiotherapyMorbidityLookup()
	{
		this.form.cmbRadiotherapyMorbidity().clear();
		ims.oncology.vo.lookups.FUMorbidityRadiotxCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getFUMorbidityRadiotx(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbRadiotherapyMorbidity().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbRadiotherapyMorbidityLookupValue(int id)
	{
		ims.oncology.vo.lookups.FUMorbidityRadiotx instance = ims.oncology.vo.lookups.LookupHelper.getFUMorbidityRadiotxInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbRadiotherapyMorbidity().setValue(instance);
	}
	protected final void defaultcmbRadiotherapyMorbidityLookupValue()
	{
		this.form.cmbRadiotherapyMorbidity().setValue((ims.oncology.vo.lookups.FUMorbidityRadiotx)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.FUMorbidityRadiotx.class, engine.getFormName().getID(), ims.oncology.vo.lookups.FUMorbidityRadiotx.TYPE_ID));
	}
	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
	}
	public boolean allowNew()
	{
		return form.getMode() == ims.framework.enumerations.FormMode.VIEW && !form.isReadOnly();
	}
	public boolean allowUpdate()
	{
		return form.getMode() == ims.framework.enumerations.FormMode.VIEW && !form.isReadOnly();
	}
	public String[] validateUIRules()
	{
		return null;
	}
	public void clear()
	{
	}
	public void search()
	{
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.oncology.domain.FollowUpVisitRecord domain;
}
