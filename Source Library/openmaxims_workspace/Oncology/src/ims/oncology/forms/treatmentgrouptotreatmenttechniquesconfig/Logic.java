//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.oncology.forms.treatmentgrouptotreatmenttechniquesconfig;

import ims.ccosched.vo.lookups.Techniques;
import ims.ccosched.vo.lookups.TechniquesCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.oncology.forms.treatmentgrouptotreatmenttechniquesconfig.GenForm.grdGroupsRow;
import ims.oncology.forms.treatmentgrouptotreatmenttechniquesconfig.GenForm.grdTechniquesRow;
import ims.oncology.vo.TreatmentGroupTechniqueConfigVo;
import ims.oncology.vo.lookups.TreatmentGroupSite;
import ims.vo.LookupInstVo;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open(null);
	}
	
	private void open(TreatmentGroupTechniqueConfigVo voConfigGroup) 
	{
		form.setMode(FormMode.VIEW);

		form.getLocalContext().setSelectedRecord(voConfigGroup);
		loadConfiguredGroups();

		loadGroupSiteGrid(voConfigGroup);
		loadTechniqueGrid(voConfigGroup);
	}
	
	private void loadConfiguredGroups()
	{
		form.getLocalContext().setListConfiguredGroups(domain.listTreatmentGroupTechniqueConfig());
		
	}

	private void loadGroupSiteGrid(TreatmentGroupTechniqueConfigVo voConfigGroup) 
	{
		TreeNode[] coll = domain.loadGroupSiteLookup(domain.getLookupService()).getRootNodes(); 
		form.grdGroups().getRows().clear();
		if (coll != null)
		{
			for (int i = 0; i < coll.length; i++)
			{
				TreatmentGroupSite item = (TreatmentGroupSite) coll[i];
			
				grdGroupsRow row = form.grdGroups().getRows().newRow();
					
				row.setTooltip(! item.isActive() ? "InActive" : "");
				row.setTextColor(! item.isActive() ? Color.Red : Color.Black);

				row.setColGroupSite(item.getText());
				row.setValue(item);

				addChildInstances(row, item);
			}
		}
		if (voConfigGroup != null
			&& voConfigGroup.getTreatmentGroup() != null)
			form.grdGroups().setValue(voConfigGroup.getTreatmentGroup());
			groupSelectionChanged();
	}
	
	private void addChildInstances(grdGroupsRow row, TreatmentGroupSite item)
	{
		ArrayList<LookupInstVo> coll1 = item.getChildInstances();
		TreatmentGroupSite type = null;
		for(int j=0 ; j < coll1.size() ; j++)
		{
			type = (TreatmentGroupSite)coll1.get(j);
			if(type.isActive())
			{
				grdGroupsRow rowChild = row.getRows().newRow();
				rowChild.setColGroupSite(type.getText());
				rowChild.setSelectable(false);
				
				if (type.getChildInstances() != null
					&& type.getChildInstances().size() > 0)
					addChildInstances(rowChild, type);
			}
		}
	}

	private void loadTechniqueGrid(ims.oncology.vo.TreatmentGroupTechniqueConfigVo voGroupConfig) 
	{
		TreeNode[] coll = domain.loadTechniqueLookup(domain.getLookupService()).getRootNodes(); 
		form.grdTechniques().getRows().clear();
		if (coll != null)
		{
			for (int i = 0; i < coll.length; i++)
			{
				Techniques item = (Techniques) coll[i];

				boolean bTick = checkForTick(item, voGroupConfig);
				boolean bShowRow = false;
				
				if (form.getMode().equals(FormMode.EDIT)
					&& item.isActive())
					bShowRow = true;
					
				if (form.getMode().equals(FormMode.EDIT)
					&& ! item.isActive() 
					&& bTick)
					bShowRow = true;
					
				if (form.getMode().equals(FormMode.VIEW)
					&& bTick)
					bShowRow = true;

				if (bShowRow)
				{
					grdTechniquesRow row = form.grdTechniques().getRows().newRow();
					
					row.setTooltip(! item.isActive() ? "InActive" : "");
					row.setTextColor(! item.isActive() ? Color.Red : Color.Black);
					
					row.setColTechnique(item.getText());
					row.setValue(item);
				
					if (voGroupConfig != null)
						row.setColSelect(bTick);
				}
			}
		}
	}

	private boolean checkForTick(Techniques item, TreatmentGroupTechniqueConfigVo voGroupConfig)
	{
		for (int i = 0 ; item !=null && voGroupConfig != null && voGroupConfig.getTreatmentTechniquesIsNotNull() && i < voGroupConfig.getTreatmentTechniques().size() ; i++)
		{
			if (item.getID() == voGroupConfig.getTreatmentTechniques().get(i).getID())
				return true;	
		}
		return false;
	}

	@Override
	protected void onGrdTechniquesSelectionChanged()
	{
		// TODO Add your code here.
	}
	@Override
	protected void onGrdTechniquesGridCheckBoxClicked(int column, GenForm.grdTechniquesRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
	{
	}

	@Override
	protected void onGrdGroupsSelectionChanged()
	{
		groupSelectionChanged();
	}
	
	private void groupSelectionChanged() 
	{
		form.getLocalContext().setSelectedRecord(domain.getConfiguredGroup(form.grdGroups().getSelectedRow() != null ? form.grdGroups().getSelectedRow().getValue() : null));
		loadTechniqueGrid(form.getLocalContext().getSelectedRecord());
		updateContextMenus();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		TreatmentGroupTechniqueConfigVo voConfigGroup = form.getLocalContext().getSelectedRecord(); 
		if (voConfigGroup == null)
			voConfigGroup = new TreatmentGroupTechniqueConfigVo();
		
		voConfigGroup.setTreatmentGroup(form.grdGroups().getSelectedRow().getValue());
		voConfigGroup.setActive(PreActiveActiveInactiveStatus.ACTIVE);
		
		TechniquesCollection voColl = new TechniquesCollection();
		
		for (int i = 0 ; i < form.grdTechniques().getRows().size() ; i++)
		{
			if (form.grdTechniques().getRows().get(i).getColSelect())
				voColl.add(form.grdTechniques().getRows().get(i).getValue());
		}
		voConfigGroup.setTreatmentTechniques(voColl);
		String[] errors = voConfigGroup.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		try
		{
			voConfigGroup = domain.saveConfiguredGroup(voConfigGroup);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
		}
		open(voConfigGroup);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open(form.getLocalContext().getSelectedRecord());
	}

	@Override
	protected void onGrdTechniquesGridButtonClicked(int column, grdTechniquesRow row) throws PresentationLogicException 
	{
	}
	private void updateContextMenus()
	{
		form.getContextMenus().Oncology.hideAllTreatmentGroupTechniqueConfigMenuItems();

		form.getContextMenus().Oncology.getTreatmentGroupTechniqueConfigEDITItem().setVisible(form.grdGroups().getSelectedRow() != null 
				&& form.grdGroups().getSelectedRow().getValue() != null);
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.OncologyNamespace.TreatmentGroupTechniqueConfig.EDIT:
				editTechniques();
			break;
		}
	}

	private void editTechniques()
	{
		form.setMode(FormMode.EDIT);
		loadTechniqueGrid(domain.getConfiguredGroup(form.grdGroups().getSelectedRow().getValue()));
	}


}
