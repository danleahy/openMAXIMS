//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.oncology.domain.impl;

import ims.ccosched.vo.lookups.Techniques;
import ims.ccosched.vo.lookups.TechniquesCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupService;
import ims.framework.exceptions.CodingRuntimeException;
import ims.oncology.domain.base.impl.BaseTreatmentGrouptoTreatmentTechniquesConfigImpl;
import ims.oncology.domain.objects.TreatmentGroupTechniqueConfig;
import ims.oncology.vo.TreatmentGroupTechniqueConfigVo;
import ims.oncology.vo.domain.TreatmentGroupTechniqueConfigVoAssembler;
import ims.oncology.vo.lookups.TreatmentGroupSite;
import ims.oncology.vo.lookups.TreatmentGroupSiteCollection;

import java.util.List;

public class TreatmentGrouptoTreatmentTechniquesConfigImpl extends BaseTreatmentGrouptoTreatmentTechniquesConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.oncology.vo.TreatmentGroupTechniqueConfigVoCollection listTreatmentGroupTechniqueConfig()
	{
		DomainFactory factory = getDomainFactory();
		return TreatmentGroupTechniqueConfigVoAssembler.createTreatmentGroupTechniqueConfigVoCollectionFromTreatmentGroupTechniqueConfig(factory.listDomainObjects(TreatmentGroupTechniqueConfig.class)).sort();
	}

	public TreatmentGroupTechniqueConfigVo getConfiguredGroup(TreatmentGroupSite lkupGroup) 
	{
		if(lkupGroup == null)
			return null;

		StringBuilder query = new StringBuilder();
		String groupId = "GROUP_ID";
		query.append("from TreatmentGroupTechniqueConfig as tr where tr.treatmentGroup = :" + groupId);
		List list = getDomainFactory().find(query.toString(), groupId, getDomLookup(lkupGroup));
		if (list != null && list.size() > 0)
			return TreatmentGroupTechniqueConfigVoAssembler.createTreatmentGroupTechniqueConfigVoCollectionFromTreatmentGroupTechniqueConfig(list).get(0);
		else
			return null;
	}

	public TreatmentGroupTechniqueConfigVo saveConfiguredGroup(TreatmentGroupTechniqueConfigVo voConfiguredGroup) throws DomainInterfaceException, StaleObjectException 
	{
		if(voConfiguredGroup == null)
			throw new RuntimeException("Cannot save null TreatmentGroupTechniqueConfigVo");
		
		if(voConfiguredGroup.isValidated() == false)
			throw new CodingRuntimeException("TreatmentGroupTechniqueConfigVo is not validated");
			
		DomainFactory factory = getDomainFactory();
		TreatmentGroupTechniqueConfig doTreat = TreatmentGroupTechniqueConfigVoAssembler.extractTreatmentGroupTechniqueConfig(factory, voConfiguredGroup);
		factory.save(doTreat);
		
		return TreatmentGroupTechniqueConfigVoAssembler.create(doTreat);
	}

	public TreatmentGroupSiteCollection loadGroupSiteLookup(LookupService lookupService) 
	{
		return (TreatmentGroupSiteCollection) lookupService.getLookupCollection(TreatmentGroupSite.TYPE_ID, 
				TreatmentGroupSiteCollection.class, TreatmentGroupSite.class, true, false);
	}

	public TechniquesCollection loadTechniqueLookup(LookupService lookupService) 
	{
		return (TechniquesCollection) lookupService.getLookupCollection(Techniques.TYPE_ID, 
				TechniquesCollection.class, Techniques.class, true, false);
	}
	

}
