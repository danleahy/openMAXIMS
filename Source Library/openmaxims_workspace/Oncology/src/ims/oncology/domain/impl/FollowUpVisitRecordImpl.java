//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 3978.17812)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.oncology.domain.impl;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.oncology.domain.base.impl.BaseFollowUpVisitRecordImpl;
import ims.oncology.domain.objects.FollowUp;
import ims.oncology.domain.objects.PrimaryTumourDetails;
import ims.oncology.vo.FollowUpLiteVoCollection;
import ims.oncology.vo.FollowUpRefVo;
import ims.oncology.vo.FollowUpShortVo;
import ims.oncology.vo.PrimaryTumourDetailsDisplayVo;
import ims.oncology.vo.domain.FollowUpLiteVoAssembler;
import ims.oncology.vo.domain.FollowUpShortVoAssembler;
import ims.oncology.vo.domain.PrimaryTumourDetailsDisplayVoAssembler;

import java.util.ArrayList;

public class FollowUpVisitRecordImpl extends BaseFollowUpVisitRecordImpl
{

	private static final long serialVersionUID = 1L;

	public FollowUpLiteVoCollection listFollowUpRecords(EpisodeOfCareRefVo episodeOfCare, CareContextRefVo careContext)
	{
		if (episodeOfCare == null || !episodeOfCare.getID_EpisodeOfCareIsNotNull())
			throw new DomainRuntimeException("Null or invalid episode of care passed");
		
		StringBuilder query = new StringBuilder();
		query.append(" from FollowUp as fup where fup.episodeOfCare.id = :EP_ID order by fup.assessmentDate desc");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("EP_ID");
		paramValues.add(episodeOfCare.getID_EpisodeOfCare());
		
//		if (careContext == null || !careContext.getID_CareContextIsNotNull())
//		{
//			query.append(" and ctd.careContext.id = :CC_ID");
//			
//			paramNames.add("CC_ID");
//			paramValues.add(careContext.getID_CareContext());
//		}

		return FollowUpLiteVoAssembler.createFollowUpLiteVoCollectionFromFollowUp(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}

	public FollowUpShortVo getFollowUp(FollowUpRefVo followUp)
	{
		if (followUp == null || !followUp.getID_FollowUpIsNotNull())
			return null;
		
		return FollowUpShortVoAssembler.create((FollowUp) getDomainFactory().getDomainObject(FollowUp.class, followUp.getID_FollowUp()));
	}

	public FollowUpShortVo saveFollowUpRecord(FollowUpShortVo followUp) throws StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		if (followUp == null)
			throw new DomainRuntimeException("Can not save a null object to database");
		
		if (!followUp.isValidated())
			throw new DomainRuntimeException("Can not save an object not validated");
		
		
		FollowUp domFollowUp = FollowUpShortVoAssembler.extractFollowUp(getDomainFactory(), followUp);
		
		getDomainFactory().save(domFollowUp);
		
		return FollowUpShortVoAssembler.create(domFollowUp);
	}

	public PrimaryTumourDetailsDisplayVo getPrimaryTumourDetails(EpisodeOfCareRefVo episodeOfCare)
	{
		if (episodeOfCare == null || !episodeOfCare.getID_EpisodeOfCareIsNotNull())
			throw new DomainRuntimeException("Can not search Primary Tumour Details after null Episode Of Care");
		
		String query = "from PrimaryTumourDetails as ptd where ptd.isRIE is null and ptd.episodeOfCare.id = " + episodeOfCare.getID_EpisodeOfCare().toString() + " order by ptd.authoringInformation.authoringDateTime desc";
		
		return PrimaryTumourDetailsDisplayVoAssembler.create((PrimaryTumourDetails) getDomainFactory().findFirst(query));
	}

	public HcpLiteVoCollection listHcp(String value)
	{
		if (value == null || value.length() == 0)
			throw new DomainRuntimeException("Can not search HCPs after null name");
		
		String query = "from Hcp as hcp where hcp.isActive = 1 and hcp.isHCPaResponsibleHCP = 1 and hcp.isALocalConsultant = 1 and (hcp.mos.name.upperSurname like '%" + value.toUpperCase() + "%' or hcp.mos.name.upperForename like '%" + value.toUpperCase() + "%') order by hcp.mos.name.upperSurname, hcp.mos.name.upperForename asc ";
		
		return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(getDomainFactory().find(query));
	}
}
