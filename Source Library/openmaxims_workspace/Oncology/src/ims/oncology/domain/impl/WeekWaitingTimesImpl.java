//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Andreea Tugui using IMS Development Environment (version 1.70 build 3401.14277)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.oncology.domain.impl;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;

import ims.clinical.domain.objects.ReferralsRecording;
import ims.core.admin.domain.objects.CareContext;
import ims.core.clinical.coding.domain.objects.Icd10AmProc;
import ims.core.clinical.domain.objects.PatientDiagnosis;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.domain.objects.PatientId;
import ims.core.resource.place.domain.objects.Organisation;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.oncology.domain.base.impl.BaseWeekWaitingTimesImpl;
import ims.oncology.domain.objects.ActualPlanDetails;
import ims.oncology.domain.objects.CancerCarePlan;
import ims.oncology.domain.objects.PrimaryTumourDetails;
import ims.oncology.domain.objects.WaitingTimesAdjustmentsandReasons;
import ims.oncology.vo.lookups.TreatmentType;
import ims.oncology.waitingtimes.domain.objects.WaitingTimeFailures;
import ims.oncology.waitingtimes.domain.objects.WaitingTimes;
import ims.utils.Logging;

public class WeekWaitingTimesImpl extends BaseWeekWaitingTimesImpl
{
	private static final Logger					LOG					= Logging.getLogger(WeekWaitingTimesImpl.class);
	private static final long serialVersionUID = 1L;


	/**
	 * wdev-5492
	 * This method will generate the Manchester 2 week wait report based on data within the given date range.
	 * @param fromDate
	 * @param toDate
	 * @throws StaleObjectException 
	 * @throws DomainInterfaceException 
	 */
	public String[] generateTwoWeekWaitReport(Date fromDate, Date toDate) throws StaleObjectException, DomainInterfaceException
	{
		if (fromDate == null || toDate == null)
			throw new CodingRuntimeException("Invalid parameters - both fromDate and toDate must be supplied");
		
		String returnVal[] = new String[2];
		int passCount=0, failCount=0;
		
		DomainFactory factory = getDomainFactory();
		
		String hql = " from ReferralsRecording ref where ref.authoringInfo.authoringDateTime between :fromDate and :toDate order by ref.authoringInfo.authoringDateTime desc";
		ArrayList markers= new ArrayList();
		ArrayList values = new ArrayList();
	
		markers.add("fromDate");
		markers.add("toDate");
		values.add(fromDate.getDate());
		values.add(toDate.getDate());
		
		String siteOrganisationCode = getSiteOrgaCode(factory);
		
		List lst = factory.find(hql, markers, values);
		if (lst != null && lst.size() > 0)
		{
			// Delete current entries from the WaitingTimes object
			Connection conn = factory.getJdbcConnection();
			try {
				Statement stmt = conn.createStatement();
				stmt.executeUpdate("delete from onco_waitingtimes");
				stmt.executeUpdate("delete from onco_waitingtmfail");
				stmt.close();
				conn.close();

			}
			catch (SQLException e1)
			{
				LOG.error("SQLException occurred deleting from WaitingTimes tables: " + e1.getMessage(), e1);
				throw new DomainInterfaceException("SQLException occurred deleting from WaitingTimes tables: " + e1.getMessage(), e1);
			}
			
			
			
			for (int i=0; i<lst.size(); i++)
			{
				WaitingTimes domWT = new WaitingTimes();
				ReferralsRecording domRef = (ReferralsRecording) lst.get(i);
				PrimaryTumourDetails domPTD = getPrimaryTumourDetailsRec(factory, domRef);
				WaitingTimesAdjustmentsandReasons domWTAR = getWaitingTimesARRec(factory, domRef);
				CancerCarePlan domCCP = getCancerCarePlanRec(factory, domRef);
				ActualPlanDetails domAPD = getActualPlanDetailsRec(factory,domRef);
				
				domWT.setNHSNumber(getPatientsNHSN(domRef));
				domWT.setReferralSource(getExternalLookup(domRef.getReferralSource()));
				domWT.setRefDecisionDate(domRef.getDateSent());
				domWT.setRefReceivedDate(domRef.getDateReceived());
				if (domRef.getRefOrgaCode() != null)
					domWT.setReferredBy(getExternalTaxonomy(domRef.getRefOrgaCode().getCodeMappings(), TaxonomyType.TWO_WEEK_WAIT));
				domWT.setPriorityCode(getExternalLookup(domRef.getReferralPriority()));
				domWT.setReferralType(getExternalLookup(domRef.getUrgentCancerReferralType()));
				domWT.setFirstSeenDate(domRef.getDateFirstSeen());
				domWT.setFirstSeenOrgaCode(siteOrganisationCode);
				
				
				int tempLength = domRef == null ? 0: domRef.getDelayReasonText() == null ? 0 : domRef.getDelayReasonText().length();
				if(tempLength <= 255)
					domWT.setBreachReason(domRef == null ? null : domRef.getDelayReasonText());
				else
					domWT.setBreachReason(domRef.getDelayReasonText().substring(0, 255));
					
				
				// Cancer Specialist values - not sure whether it's ok to just set these as in the
				// old version, it did check priority code and if not particular values, go back to
				// icws_fref for values
				domWT.setSpecReferralDate(domRef.getDateReceived());
				domWT.setSpecDateFirstSeen(domRef.getDateFirstSeen());
				domWT.setSpecOrgCode(domWT.getReferredBy());
				
				
				if (domPTD != null)
				{
					//domWT.setPrimaryDiagnosis(getICD10(factory,domPTD.getPatientDiagnosis()));
					domWT.setPrimaryDiagnosis(getExternalTaxonomy(domPTD.getPatientDiagnosis() == null ? null:domPTD.getPatientDiagnosis().getDiagnosis() == null? null : domPTD.getPatientDiagnosis().getDiagnosis().getTaxonomyMap(), TaxonomyType.ICD10));

					String tumourLaterality = getExternalLookup(domPTD.getTumourLaterality());  
					if (tumourLaterality != null)
						domWT.setTumourLaterality(tumourLaterality.substring(0, 1));  
				}
				
				if (domWTAR != null)
				{					
					domWT.setWTAdjustmentFS(domWTAR.getAdjReferralFirstSeen());
					String reasRefFirstSeen = getExternalLookup(domWTAR.getReasReferralFirstSeen());
					if (reasRefFirstSeen != null)
						domWT.setWTAdjustmentReasonFS(reasRefFirstSeen.substring(0, 1));
					
					domWT.setWTAdjustFirstTreat(domWTAR.getAdjFirstSeenDecTreat());
					String reasFirstSeen = getExternalLookup(domWTAR.getReasFirstSeenDecTreat());
					if (reasFirstSeen != null)
						domWT.setWTAdjustmentReasonFT(reasFirstSeen.substring(0, 1));
					
					
					domWT.setWTAdjustmentTreat(domWTAR.getAdjDecTreatTreatment());
					String reasonDecTreat=getExternalLookup(domWTAR.getReasDecTreatTreatment());
					if (reasonDecTreat != null)
						domWT.setWTAdjustmentReasonTreat(reasonDecTreat.substring(0, 1));
					
					String delayReasTreat=getExternalLookup(domWTAR.getDelayReasReferralTreat());
					if (delayReasTreat != null)
						domWT.setDelayCodeRTT(delayReasTreat.substring(0, 1));
					domWT.setDelayReasonRTT(domWTAR.getNotesReferralTreat());
								
					String delayReasDDT=getExternalLookup(domWTAR.getDelayReasDecTreatTreat());
					if (delayReasDDT != null)
						domWT.setDelayCodeDTT(delayReasDDT.substring(0, 1));
					domWT.setDelayReasonDTT(domWTAR.getNotesDecTreatTreat());
				}
				
				
				domWT.setDelayReasonRefFirstSeen(getExternalLookup(domRef.getDelayReasonGPUrgentReferral()));
				String cancerStat = getExternalLookup(domRef.getCancerStatus());
				if (cancerStat != null)
					domWT.setCancerStatus(cancerStat.substring(0, 1));
				
				
				if (domCCP != null)
				{	
					if (domCCP.getMdtMeeting() == null)
						domWT.setMDTDiscussInd("N");
					else
					{
						domWT.setMDTDiscussInd("Y");
						domWT.setMDTDiscussDate(domCCP.getMdtMeeting().getDate());
					}
				}
				
				if (domAPD != null)
				{
					domWT.setDDTOrgCode(getExternalLookup(domAPD.getOrganisationPlanned()));
					domWT.setPlanCancerTreatType(getExternalLookup(domAPD.getPlannedTreatmentType()));
					domWT.setFirstTreatmentOrgCode(getExternalLookup(domAPD.getOrganisationOrganised()));
					domWT.setClinlInterventionDate(domAPD.getActualTreatmentDate());
					domWT.setClinInterventionOrgCode(getExternalLookup(domAPD.getOrganisationOrganised()));
				}

				// Depending on the treatment type, set the relevant first treatment date 
				if (domAPD != null && domAPD.getActualTreatmentType() != null && domAPD.getActualTreatmentType().getId() == TreatmentType.RADIOTHERAPY.getId())  
				{
					domWT.setFirstTreatmentDateTele(domAPD.getActualTreatmentDate());
				}
				
				if (domAPD != null && domAPD.getActualTreatmentType()!= null && domAPD.getActualTreatmentType().getId() == TreatmentType.CHEMOTHERAPY.getId())  
				{
					domWT.setFirstTreatmentDateChemo(domAPD.getActualTreatmentDate());
				}
				
				if (domAPD != null && domAPD.getActualTreatmentType() != null && domAPD.getActualTreatmentType().getId() == TreatmentType.NO_TREATMENT_AGREED.getId())  
				{
					domWT.setFirstTreatmentDateActiveMon(domAPD.getActualTreatmentDate());
				}
				
				if (domAPD != null && domAPD.getActualTreatmentType() != null && domAPD.getActualTreatmentType().getId() == TreatmentType.SURGERY.getId())  
				{
					domWT.setFirstTreatmentDateSurg(domAPD.getActualTreatmentDate());
				}
				
				if (domAPD != null && domAPD.getActualTreatmentType() != null && domAPD.getActualTreatmentType().getId() == TreatmentType.BRACHYTHERAPY.getId())  
				{
					domWT.setFirstTreatmentDateBrachy(domAPD.getActualTreatmentDate());
				}

				if (domAPD != null && domAPD.getActualTreatmentType() != null && domAPD.getActualTreatmentType().getId() == TreatmentType.SP_CARE.getId())  
				{
					domWT.setFirstTreatmentDateSPCare(domAPD.getActualTreatmentDate());
				}
				
				// depending on the planned treatment type, set the relevant DDT date value
				if (domAPD != null && domAPD.getPlannedTreatmentType() != null && domAPD.getPlannedTreatmentType().getId() == TreatmentType.RADIOTHERAPY.getId())  
				{
					domWT.setDDTDateTele(domAPD.getDateDecisionToTreat());
				}
				
				if (domAPD != null && domAPD.getPlannedTreatmentType()!= null && domAPD.getPlannedTreatmentType().getId() == TreatmentType.CHEMOTHERAPY.getId())  
				{
					domWT.setDDTDateChemo(domAPD.getDateDecisionToTreat());
				}
				
				if (domAPD != null && domAPD.getPlannedTreatmentType() != null && domAPD.getPlannedTreatmentType().getId() == TreatmentType.NO_TREATMENT_AGREED.getId())  
				{
					domWT.setDDTDateActiveMon(domAPD.getDateDecisionToTreat());
				}
				
				if (domAPD != null && domAPD.getPlannedTreatmentType() != null && domAPD.getPlannedTreatmentType().getId() == TreatmentType.SURGERY.getId())  
				{
					domWT.setDDTDateSurgery(domAPD.getDateDecisionToTreat());
				}
				
				if (domAPD != null && domAPD.getPlannedTreatmentType() != null && domAPD.getPlannedTreatmentType().getId() == TreatmentType.BRACHYTHERAPY.getId())  
				{
					domWT.setDDTDateBrachy(domAPD.getDateDecisionToTreat());
				}

				if (domAPD != null && domAPD.getPlannedTreatmentType() != null && domAPD.getPlannedTreatmentType().getId() == TreatmentType.SP_CARE.getId())  
				{
					domWT.setDDTDatePalliative(domAPD.getDateDecisionToTreat());
				}

				
				StringBuffer failReason = new StringBuffer();
				try {
					if (!validRecord(domWT, failReason))
					{
						recordFailure(factory, domWT, failReason, domRef.getCareContext());
						failCount++;
					}
					else
					{
						factory.save(domWT);
						passCount++;
					}
				} catch (ParseException e) 
				{
					LOG.error("ParseException occurred validating record - " + e.getMessage(), e);
					throw new DomainInterfaceException("ParseException occurred validating record - " + e.getMessage(), e);
				}
			}
		}
		
		returnVal[0]="" + passCount + " record(s) successfully added to WaitingTimes table (onco_waitingtimes)";
		returnVal[1]="" + failCount + " record(s) failed validation - details can found on WaitingTimes Failure table (onco_waitingtmfail)";
		
		return returnVal;
	}


	/**
	 * getSiteOrgaCode
	 * This method will look for a top level organisation
	 * with a mapping for two week wait
	 * @param factory
	 * @return
	 */
	private String getSiteOrgaCode(DomainFactory factory) 
	{
		
		LookupInstance twoWeekWait = getDomLookup(TaxonomyType.TWO_WEEK_WAIT);
		String hql = " from Organisation o join o.codeMappings map where o.parentOrganisation is null  and map.taxonomyName = :twoweekwait";
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		markers.add("twoweekwait");
		values.add(twoWeekWait);
		
		List lst = factory.find(hql, markers, values);
		if (lst == null || lst.size() == 0)
			return null;
		Organisation domOrg = (Organisation) lst.get(0);
		return (domOrg.getMappingValueOfType(twoWeekWait));
	}


	private void recordFailure(DomainFactory factory, WaitingTimes domWT, StringBuffer failReason, CareContext domCt) throws StaleObjectException
	{
	
		WaitingTimeFailures wtf = new WaitingTimeFailures();
		wtf.setCareContext(domCt);
		wtf.setPatient(domCt.getEpisodeOfCare().getCareSpell().getPatient());
		wtf.setNHSNumber(domWT.getNHSNumber());
		wtf.setReason(failReason.toString());
		factory.save(wtf);
	}


	private ActualPlanDetails getActualPlanDetailsRec(DomainFactory factory, ReferralsRecording domRef) 
	{
		if (domRef == null)
			return null;
		
		ActualPlanDetails domAPD = null;
		
		String hql = "from ActualPlanDetails as a1_1 where (a1_1.careContext = :carecontext) and a1_1.isRIE is null";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		markers.add("carecontext");
		values.add(domRef.getCareContext());
		
		List APDlst = factory.find(hql, markers, values);
		
		if (APDlst != null && APDlst.size() > 0)
			domAPD = (ActualPlanDetails) APDlst.get(0);
		
		return domAPD;
}


	private String getICD10(DomainFactory factory, PatientDiagnosis patientDiagnosis) 
	{
		if (patientDiagnosis == null || patientDiagnosis.getDiagnosis() == null)
			return null;

		
		// TODO
		// I think we need to get the icd10 value from taxonomy mappings from  diagnosis object
		
		String ICDcode = null;
		Icd10AmProc ICD10proc = null;
		
		String hql = "from Icd10AmProc p where upper(p.ascii_desc) like :diagnosisname";
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		markers.add("diagnosisname");
		values.add(patientDiagnosis.getDiagnosis().getDiagnosisName());
		
		List Codelst = factory.find(hql, markers, values);
		if (Codelst != null && Codelst.size() > 0)
			ICD10proc = (Icd10AmProc) Codelst.get(0);
		
		if (ICD10proc != null)
			ICDcode = ICD10proc.getCode_id();
		
	return ICDcode;
}


	private CancerCarePlan getCancerCarePlanRec(DomainFactory factory, ReferralsRecording domRef) 
	{
		if (domRef == null)
			return null;
	
		CancerCarePlan domCCP = null;
	
		String hql = "from CancerCarePlan as ccc where ccc.careContext = :carecontext and ccc.isRIE is null order by ccc.carePlanDate desc";
	
		ArrayList markers= new ArrayList();
		ArrayList values = new ArrayList();
	
		markers.add("carecontext");
		values.add(domRef.getCareContext());
	
		List CancerCarePlanlst = factory.find(hql, markers, values);
		if (CancerCarePlanlst != null && CancerCarePlanlst.size() > 0)
			domCCP = (CancerCarePlan) CancerCarePlanlst.get(0);
	
		return domCCP;
	
	}


	private String getPatientsNHSN(ReferralsRecording domRef) 
	{
		if (domRef == null)
			return null;
		
		String nhsn=null;
//		int cc = domRef.getCareContext().getId();
		Patient domPat = domRef.getCareContext().getEpisodeOfCare().getCareSpell().getPatient();
		List idList = domPat.getIdentifiers();
		for (int i=0; i<idList.size(); i++)
		{
			PatientId domId = (PatientId) idList.get(i);
			if (domId.getType().getId() == PatIdType.NHSN.getId())
			{
				nhsn=domId.getValue().replace(" ", "");
				break;
			}
		}
		
		return nhsn;
	}
	
	private String getExternalLookup(LookupInstance domInst)
	{
		if (domInst == null)  
			return null;
		return getLookupService().getRemoteLookup(domInst.getId(), TaxonomyType.TWO_WEEK_WAIT.getText());
	}
	
	private String getExternalTaxonomy(List idList, TaxonomyType type)
	{
		if (idList == null || idList.size() == 0)
			return null;
		
		if (type == null)
			throw new CodingRuntimeException("TaxonomyType must be passed into this method");
		
		String taxType=null;
		for (int i=0; i<idList.size(); i++)
		{
			ims.core.clinical.domain.objects.TaxonomyMap domId = (ims.core.clinical.domain.objects.TaxonomyMap) idList.get(i);
			if (domId.getTaxonomyName().getId() == type.getId())
			{
				taxType=domId.getTaxonomyCode();
				break;
			}
		}
		
		return taxType;
	}

	private PrimaryTumourDetails getPrimaryTumourDetailsRec(DomainFactory factory , ReferralsRecording domRef)
	{
		if (domRef == null)
			return null;
		PrimaryTumourDetails domPTD = null;
		StringBuffer hql = new StringBuffer ("from PrimaryTumourDetails ptd where ptd.careContext = :carecontext");
		hql.append (" and (ptd.authoringInformation.authoringDateTime is not null ) and ptd.isRIE is null");
		hql.append(" order by ptd.authoringInformation.authoringDateTime desc ");
		String query = hql.toString();
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		markers.add("carecontext");
		values.add(domRef.getCareContext());
		
		List PTDlst = factory.find(query, markers, values);
		
		if (PTDlst != null && PTDlst.size() > 0)
		{
			domPTD = (PrimaryTumourDetails) PTDlst.get(0);
	//		domPTD.getPatientDiagnosis().getDiagnosis().getId();
		}
		return domPTD;
	}
	
	private WaitingTimesAdjustmentsandReasons getWaitingTimesARRec(DomainFactory factory ,ReferralsRecording domRef)
	{
		if (domRef == null)
			return null;
		
		WaitingTimesAdjustmentsandReasons domWTAR = null;
		String hql = "from WaitingTimesAdjustmentsandReasons as wtar where wtar.careContext = :carecontext";
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		markers.add("carecontext");
		values.add(domRef.getCareContext());
		
		List WTARlst = factory.find(hql, markers, values);
		
		if (WTARlst != null && WTARlst.size() > 0)
			domWTAR = (WaitingTimesAdjustmentsandReasons) WTARlst.get(0);

		return domWTAR;
	}

	private boolean validRecord(WaitingTimes domWaitTimes, StringBuffer failReason) throws ParseException
	{
	
		// Validation
		
		// 1. If Urgent Cancer Referral Type is not blank, cancer referral priority type must be 01
		if (domWaitTimes.getReferralType() != null && (domWaitTimes.getPriorityCode() == null || !domWaitTimes.getPriorityCode().equals("01")))
		{
			failReason.append("1. If supplying an Urgent cancer referral type, then Cancer Referral Priority Type must be 01");
			return false;
		}
		
		if (domWaitTimes.getPriorityCode() != null && domWaitTimes.getPriorityCode().equals("01"))
		{
			// 2. If Cancer Referral Priority Type is 01, the Cancer Referral Decision Date must not be blank
			if (domWaitTimes.getRefDecisionDate() == null)
			{
				failReason.append("2. If Urgent Referral, then must supply a Cancer Referral Decision Date");
				return false;
			}

			// 3. If Cancer Referral Priority Type is 01, the referral request received date must not be blank
			if (domWaitTimes.getRefReceivedDate() == null)
			{
				failReason.append("3. If Urgent Referral, then must supply a Referral Request Received Date");
				return false;
			}
			
			// 4. If Cancer Referral Priority Type is 01 and date first seen is not blank, organisation code must not be blank
			if (domWaitTimes.getFirstSeenDate() != null && domWaitTimes.getFirstSeenOrgaCode() == null)
			{
				failReason.append("4. If Cancer Referral Priority Type is 01, and First Seen Date is supplied, must also supply Organisation Code (Provider First Seen)");
				return false;
			}
		}
		
		if (domWaitTimes.getPriorityCode() != null && domWaitTimes.getPriorityCode().equals("02"))
		{
//   As the RefDecisionDate is mandatory, this check is pointless
//			// 5. If Cancer Referral Priority Type is 02, the Cancer Referral Decision Date must be blank
//			if (domWaitTimes.getRefDecisionDate() != null)
//			{
//				failReason.append("5. If not Urgent Referral, then Cancer Referral Decision Date must be blank");
//				return false;
//			}
			
			// 6. If Cancer Referral Priority Type is 02, the Decision to treat date must not be blank
			if (domWaitTimes.getDDTDateActiveMon() == null && domWaitTimes.getDDTDateBrachy() == null && domWaitTimes.getDDTDateChemo() == null &&
					domWaitTimes.getDDTDatePalliative() == null && domWaitTimes.getDDTDateSurgery() == null && domWaitTimes.getDDTDateTele() == null)
			{
				failReason.append("6. Must supply a Decision To Treat date");
				return false;
			}
		}
		
		// 7. If cancer referral priority type is blank, cancer referral decision date must not be blank
		//   or decision to treat date must not be blank
		if (domWaitTimes.getPriorityCode() == null)
		{
			if (domWaitTimes.getDDTDateSurgery() == null && domWaitTimes.getDDTDateChemo() == null && domWaitTimes.getDDTDateTele() == null &&
				domWaitTimes.getDDTDateBrachy() == null && domWaitTimes.getDDTDatePalliative() == null && domWaitTimes.getDDTDateActiveMon() == null && 
					domWaitTimes.getRefDecisionDate() == null)
			{
				failReason.append("7. Cancer Referral Decision Date and Decision To Treat date cannot both be blank");
				return false;		
			}
		}
		
		// 8. Referral Request Received Date must not be before Cancer Referral Decision Date
		if (domWaitTimes.getRefReceivedDate() == null || domWaitTimes.getRefDecisionDate() == null ||
				domWaitTimes.getRefReceivedDate().before(domWaitTimes.getRefDecisionDate()))	
		{
			failReason.append("8. Referral Request Received Date cannot be before Cancer Referral Decision Date");
			return false;
		}
		
		// 9. Date First Seen must not be before Referral Request Received Date
		if (domWaitTimes.getFirstSeenDate() == null || domWaitTimes.getRefReceivedDate() == null ||
				domWaitTimes.getFirstSeenDate().before(domWaitTimes.getRefReceivedDate()))
		{
			failReason.append("9. Date First Seen cannot be before Referral Request Received Date");
			return false;
		}
		
		// If the wtAdjustmentReas has a value of '1', we know that means no adjustment
		// so we need to set it to null
		if (domWaitTimes.getWTAdjustmentReasonFS() != null && domWaitTimes.getWTAdjustmentReasonFS().equals("1"))
		{
			domWaitTimes.setWTAdjustmentReasonFS(null);
			domWaitTimes.setWTAdjustmentFS(null);
		}
		

		// 10. If Waiting Times Admustment (First Seen) is greater than 0, cancer referral decision date must not be blank
		// and Date First Seen must not be blank
		if (domWaitTimes.getWTAdjustmentFS() != null && domWaitTimes.getWTAdjustmentFS() > 0 &&
				(domWaitTimes.getRefDecisionDate() == null || domWaitTimes.getFirstSeenDate() == null))
		{
			failReason.append("10. If supply Waiting Time adjustment (First Seen), must also supply Cancer Referral decision date and Date first seen");
			return false;	
		}
		
		// 11. If Waiting Times admustment Reason (First Seen) is not blank, Waiting time adjustment (First Seen) must be 1 or more
		if (domWaitTimes.getWTAdjustmentReasonFS() != null && (domWaitTimes.getWTAdjustmentFS() == null || domWaitTimes.getWTAdjustmentFS() <= 0))
		{
			failReason.append("11. If supply Waiting Time adjustment reason (First Seen), must also supply Waiting Time adjustment (First Seen)");
			return false;
		}
		
		// 12. If Waiting Time Calculation (Referral To First Seen) is greater than 14, Delay Reason Comment (First Seen) must not be blank
		// Calculation is the difference in days between the cancer referral decision date and the date first seen
		if (domWaitTimes.getRefDecisionDate() != null && domWaitTimes.getFirstSeenDate() != null)
		{
			ims.framework.utils.Date refDate = new ims.framework.utils.Date(domWaitTimes.getRefDecisionDate());
			ims.framework.utils.Date fsDate = new ims.framework.utils.Date(domWaitTimes.getFirstSeenDate());
			
			long daysDiff = ims.framework.utils.Date.daysBetween(refDate, fsDate);
			
			if (daysDiff > 14 && (domWaitTimes.getBreachReason() == null || domWaitTimes.getBreachReason().equals("")))
			{
				failReason.append("12. Must supply Delay Reason Comment (First Seen) because Waiting Time Calculation (Referral to First Seen) is greater than 14 days");
				return false;  
			}
		}
		
		// 	13. First Seen By Specialist Date(Cancer) must not be before Cancer Specialist Referral Date
		if (domWaitTimes.getSpecDateFirstSeen() != null && domWaitTimes.getSpecReferralDate() != null &&
				domWaitTimes.getSpecDateFirstSeen().before(domWaitTimes.getSpecReferralDate()))
		{
			failReason.append("13. First Seen by Specialist Date must not be before Cancer Specialist Referral Date");
				return false;
		}
		
		
		// 14. Clinical Intervention Date (First Diagnostic Text) must not be before Referral Request Received Date
		if (domWaitTimes.getClinlInterventionDate() != null && domWaitTimes.getRefReceivedDate() != null &&
				domWaitTimes.getClinlInterventionDate().before(domWaitTimes.getRefReceivedDate()))
		{
			failReason.append("14. Clinical Intervention Date cannot be before Referral Request Received Date");
			return false;
		}
		
		
		//	15. If Waiting Time adjustment (Decision to Treat) is greater than 0, Date first seen must not be blank
		// 	and decision to treat date must not be blank
		if ((domWaitTimes.getWTAdjustFirstTreat() != null && domWaitTimes.getWTAdjustFirstTreat() > 0) &&
				(domWaitTimes.getFirstSeenDate() == null || (domWaitTimes.getDDTDateSurgery() == null &&
						domWaitTimes.getDDTDateActiveMon() == null && domWaitTimes.getDDTDateBrachy() == null &&
						domWaitTimes.getDDTDateChemo() == null && domWaitTimes.getDDTDatePalliative() == null &&
						domWaitTimes.getDDTDateTele() == null)))
			{
				failReason.append("15. If supply Waiting Time adjustment (Decision to Treat), must also supply Date first seen and Decision To Treat date");
				return false;	 	
			}
		
		
		// If the wtAdjustmentDTReas has a value of '1', we know that means no adjustment
		// 	so we need to set it to null
		if (domWaitTimes.getWTAdjustmentReasonTreat() != null && domWaitTimes.getWTAdjustmentReasonTreat().equals("1"))
		{
			domWaitTimes.setWTAdjustmentReasonTreat(null);
			domWaitTimes.setWTAdjustmentTreat(null);
		}
		
		// 16. If Waiting Time Adjustment Reason (Decision To Treat) is not blank, Waiting Time Adjustment (Decision to Treat) must be 1 or more
		if (domWaitTimes.getWTAdjustmentReasonTreat() != null && (domWaitTimes.getWTAdjustmentTreat() == null || domWaitTimes.getWTAdjustmentTreat() <= 0))
		{
			failReason.append("16. If supply Waiting Time adjustment reason (Decision to Treat), must also supply Waiting Time adjustment (Decision to Treat)");
			return false;
		}
			
		// 17. If First Definitive Treatment Date is not blank Organisation Code (Provider First Treatment) must
		// not be blank
		if ((domWaitTimes.getFirstTreatmentDateSurg() != null || domWaitTimes.getFirstTreatmentDateChemo() != null ||
				domWaitTimes.getFirstTreatmentDateTele() != null || domWaitTimes.getFirstTreatmentDateBrachy() != null ||
				domWaitTimes.getFirstTreatmentDateSPCare() != null || domWaitTimes.getFirstTreatmentDateActiveMon() != null) &&
				domWaitTimes.getFirstTreatmentOrgCode() == null)
		{
			failReason.append("17. If supply First Definitive Treatment (start date), must also supply Organisation Code (Provider First Treatment)");
			return false;
		}	

		
		// 18. If Waiting Time Adjustment (Treatment) is greater than 0 Decision To Treat Date must not be blank and First Definitive Treatment Date must not be blank
		if ((domWaitTimes.getWTAdjustmentTreat() != null && domWaitTimes.getWTAdjustmentTreat() > 0) &&
				(((domWaitTimes.getFirstTreatmentDateSurg() == null && domWaitTimes.getFirstTreatmentDateActiveMon() == null &&
				  domWaitTimes.getFirstTreatmentDateBrachy() == null && domWaitTimes.getFirstTreatmentDateChemo() == null &&
				  domWaitTimes.getFirstTreatmentDateSPCare() == null && domWaitTimes.getFirstTreatmentDateTele() == null)) ||
				  (domWaitTimes.getDDTDateActiveMon() == null && domWaitTimes.getDDTDateBrachy() == null && domWaitTimes.getDDTDateChemo() == null &&
				   domWaitTimes.getDDTDatePalliative() == null && domWaitTimes.getDDTDateSurgery() == null && domWaitTimes.getDDTDateTele() == null)))
		{
			failReason.append("18. If supply Waiting Time adjustment (Treatment), must also supply Decision To Treat date and First Definitive Treatment (start date)");
			 return false;
		}
		
		
		// If the wtAdjustmentTreatReas has a value of '1', we know that means no adjustment
		// 	so we need to set it to null
		if (domWaitTimes.getWTAdjustmentReasonFT() != null && domWaitTimes.getWTAdjustmentReasonFT().equals("1"))
		{
			domWaitTimes.setWTAdjustmentReasonFT(null);
			domWaitTimes.setWTAdjustFirstTreat(null);
		}
		
		//19. If waiting time adjustment reason (Treatment) is not blank, Waiting Time Adjustment(Treatment) must be 1 or more
		if (domWaitTimes.getWTAdjustmentReasonFT() != null && (domWaitTimes.getWTAdjustFirstTreat() == null || domWaitTimes.getWTAdjustFirstTreat() <= 0))
		{
			failReason.append("19. If supply Waiting Time adjustment reason (Treatment), must also supply Waiting Time adjustment (Treatment)");
			return false;
		}
		
		
		// 20. If Waiting Time Calculation (Decision to Treatment) > 31 and Primary Diagnosis (ICD) is one of C50 or D05,
		// Delay Reason Comment (Decision to Treatment) must not be blank
		ims.framework.utils.Date decisionToTreat=null;
		if (domWaitTimes.getDDTDateSurgery() != null)
			decisionToTreat = new ims.framework.utils.Date(domWaitTimes.getDDTDateSurgery());
		else if (domWaitTimes.getDDTDateChemo() != null)
			decisionToTreat = new ims.framework.utils.Date(domWaitTimes.getDDTDateChemo());
		else if (domWaitTimes.getDDTDateTele() != null)
			decisionToTreat = new ims.framework.utils.Date(domWaitTimes.getDDTDateTele());
		else if (domWaitTimes.getDDTDateBrachy() != null)
			decisionToTreat = new ims.framework.utils.Date(domWaitTimes.getDDTDateBrachy());
		else if (domWaitTimes.getDDTDatePalliative() != null)
			decisionToTreat = new ims.framework.utils.Date(domWaitTimes.getDDTDatePalliative());
		else if (domWaitTimes.getDDTDateActiveMon() != null)
			decisionToTreat = new ims.framework.utils.Date(domWaitTimes.getDDTDateActiveMon());
	
		ims.framework.utils.Date firstDefDate=null;
		if (domWaitTimes.getFirstTreatmentDateSurg() != null)
			firstDefDate = new ims.framework.utils.Date(domWaitTimes.getFirstTreatmentDateSurg());
		else if (domWaitTimes.getFirstTreatmentDateChemo() != null)
			firstDefDate = new ims.framework.utils.Date(domWaitTimes.getFirstTreatmentDateChemo());
		else if (domWaitTimes.getFirstTreatmentDateTele() != null)
			firstDefDate = new ims.framework.utils.Date(domWaitTimes.getFirstTreatmentDateTele());
		else if (domWaitTimes.getFirstTreatmentDateBrachy() != null)
			firstDefDate = new ims.framework.utils.Date(domWaitTimes.getFirstTreatmentDateBrachy());
		else if (domWaitTimes.getFirstTreatmentDateSPCare() != null)
			firstDefDate = new ims.framework.utils.Date(domWaitTimes.getFirstTreatmentDateSPCare());
		else if (domWaitTimes.getFirstTreatmentDateActiveMon() != null)
			firstDefDate = new ims.framework.utils.Date(domWaitTimes.getFirstTreatmentDateActiveMon());
		
		if (decisionToTreat != null && firstDefDate != null)
		{
			long waitTimesCalc = ims.framework.utils.Date.daysBetween(firstDefDate, decisionToTreat);
			if (waitTimesCalc < 0)
				waitTimesCalc *= -1;
			if (domWaitTimes.getWTAdjustFirstTreat() != null)
				waitTimesCalc -= domWaitTimes.getWTAdjustFirstTreat();
		
			if (waitTimesCalc > 31 && domWaitTimes.getPrimaryDiagnosis() != null && (domWaitTimes.getPrimaryDiagnosis().equals("C50") || domWaitTimes.getPrimaryDiagnosis().equals("D05"))
					&& domWaitTimes.getDelayReasonDTT() == null)
			{
				failReason.append("20. Must supply Delay reason comment (Decision to Treatment) when Primary Diagnosis (ICD) is C50 or D05 and Waiting Time Calculation (Decision to Treat) is greater than 31 days");
				return false;  
			}
		}
		
		if (domWaitTimes.getRefDecisionDate() != null && firstDefDate != null)
		{
			// 21. If Waiting Time Calculation (Referral To Treatment) > 31 and Primary Diagnosis (ICD) is on of
			// C62, C91.0, C92.0, C92.5, C93.0, C94.2, C95.0 Delay Reason Comment (Referral To Treatment) must not be blank
			long waitTimesCalc = ims.framework.utils.Date.daysBetween(firstDefDate, new ims.framework.utils.Date(domWaitTimes.getRefDecisionDate()));
			if (waitTimesCalc < 0)
				waitTimesCalc *= -1;
			
			int wtAdjTr=0;
			if (domWaitTimes.getWTAdjustFirstTreat() != null)
				wtAdjTr =  domWaitTimes.getWTAdjustFirstTreat();
			int wtAdjFs=0;
			if (domWaitTimes.getWTAdjustmentFS() != null)
				wtAdjFs = domWaitTimes.getWTAdjustmentFS();
			int wtAdjDT=0;
			if (domWaitTimes.getWTAdjustmentTreat() != null)
				wtAdjDT = domWaitTimes.getWTAdjustmentTreat();
			waitTimesCalc -= (wtAdjTr + wtAdjFs + wtAdjDT);
			if (waitTimesCalc > 31 && domWaitTimes.getPrimaryDiagnosis() != null && (domWaitTimes.getPrimaryDiagnosis().equals("C62") || domWaitTimes.getPrimaryDiagnosis().equals("C91.0") ||
					domWaitTimes.getPrimaryDiagnosis().equals("C92.0") || domWaitTimes.getPrimaryDiagnosis().equals("C92.5") || domWaitTimes.getPrimaryDiagnosis().equals("93.0") || 
					domWaitTimes.getPrimaryDiagnosis().equals("94.2") || domWaitTimes.getPrimaryDiagnosis().equals("95.0") || domWaitTimes.getPrimaryDiagnosis().equals("C93.0") || 
					domWaitTimes.getPrimaryDiagnosis().equals("C94.2") || domWaitTimes.getPrimaryDiagnosis().equals("C95.0")) 
				&& domWaitTimes.getDelayReasonRTT() == null)
			
			{
				failReason.append("21. Must supply Delay reason comment (Referral to Treatment) for this Primary Diagnosis (ICD) when Waiting Time Calculation (Treatment) is greater than 31 days");
				return false;
			}
		
			// 22. If Cancer Referral Decision Date is on or after 1 Jan 2003 and Waiting Time Calcilation (Referral To Treatment) > 62
			// and Primary Diagnosie (ICD) is one of C50 or D05, Delay Reason Comment (Referral to Treatment) must not be blank
			ims.framework.utils.Date dt = new ims.framework.utils.Date("20021231", DateFormat.ISO);
			if (domWaitTimes.getRefDecisionDate().after(dt.getDate()) && waitTimesCalc > 62 && domWaitTimes.getPrimaryDiagnosis() != null 
					&& (domWaitTimes.getPrimaryDiagnosis().equals("C50") || domWaitTimes.getPrimaryDiagnosis().equals("D05")) && domWaitTimes.getDelayReasonRTT() == null)
			{
				failReason.append("22. Must supply Delay reason comment (Referral to Treatment) for this Primary Diagnosis (ICD) when Waiting Time Calculation (Treatment) is greater than 62 days");
				return false;
			}
		}
		
		// 23. If Delay Reason Decision to Treatment (Cancer) is not blank, Decision To Treat Date must not be blank and
		// First Definitive Treatment Date must not be blank
		if (domWaitTimes.getDelayReasonDTT() != null && (decisionToTreat == null || firstDefDate == null))
		{
			failReason.append("23. If supply Delay reason Referral to Treatment (Cancer), must also supply Date first seend and First Definitive Treatment (start date)");
			return false; 
		}
		
		// 24. If Delay  Reason Referral To Treatment (Cancer) is not blank, Date First Seen must not be blank and
		// 	First Definitive Treatment Date must not be blank
		if (domWaitTimes.getDelayReasonRTT() != null && (firstDefDate == null || domWaitTimes.getFirstSeenDate() == null))
		{
			failReason.append("24. If supply Delay reason Referral to Treatment (Cancer), must also supply Date first seen and First Definitive Treatment (start date)");
			return false;
		}
		
		// 25. Only one of the following fields can hold a value (but all can be blank) Decision to Treat date
		if (decisionToTreat != null)
		{
			int dtCount=0;
			if (domWaitTimes.getDDTDateSurgery() != null)
				dtCount++;
			else if (domWaitTimes.getDDTDateChemo() != null)
				dtCount++;
			else if (domWaitTimes.getDDTDateTele() != null)
				dtCount++;
			else if (domWaitTimes.getDDTDateBrachy() != null)
				dtCount++;
			else if (domWaitTimes.getDDTDatePalliative() != null)
				dtCount++;
			else if (domWaitTimes.getDDTDateActiveMon() != null)
				dtCount++;
			if (dtCount > 1)
			{
				failReason.append("25. You may only specify one Decision to Treat Date");
				return false;
			}
		}
		
		// 	26. Only one of the following fields can hold a value (but all can be blank) First Definitive Treatment Date
		if (firstDefDate != null)
		{
			int dtCount=0;
			if (domWaitTimes.getFirstTreatmentDateSurg() != null)
				dtCount++;
			else if (domWaitTimes.getFirstTreatmentDateChemo() != null)
				dtCount++;
			else if (domWaitTimes.getFirstTreatmentDateTele() != null)
				dtCount++;
			else if (domWaitTimes.getFirstTreatmentDateSPCare() != null)
				dtCount++;
			else if (domWaitTimes.getFirstTreatmentDateBrachy() != null)
				dtCount++;
			else if (domWaitTimes.getFirstTreatmentDateActiveMon() != null)
				dtCount++;
			if (dtCount > 1)
			{
				failReason.append("26. You may only specify one First Definitive Treatment (start date)");
				return false;
			}
		}
		
		// 27. If a date has been entered into one of the Decision to Treat Date... fields, and into one of the
		// First Definitive Treatment Date... fields, the same "type" of field must be completed in each
		// case (e.g. if Decision to Treat Date(Surgery) holds a date value, the First Definitive Treatment Date...
		// field used must be First Definitive Treatment Date (Surgery).
		if (decisionToTreat != null && firstDefDate != null)
		{
			boolean errFound=false;
			if ((domWaitTimes.getFirstTreatmentDateSurg() != null && domWaitTimes.getDDTDateSurgery() == null) ||
				 (domWaitTimes.getFirstTreatmentDateSurg() == null && domWaitTimes.getDDTDateSurgery() != null))
				errFound=true;
			else if ((domWaitTimes.getFirstTreatmentDateChemo() != null && domWaitTimes.getDDTDateChemo() == null) ||
					(domWaitTimes.getFirstTreatmentDateChemo() == null && domWaitTimes.getDDTDateChemo() != null))
				errFound=true;
			else if ((domWaitTimes.getFirstTreatmentDateTele() != null && domWaitTimes.getDDTDateTele() == null) ||
					 (domWaitTimes.getFirstTreatmentDateTele() == null && domWaitTimes.getDDTDateTele() != null))
				errFound=true;
			else if ((domWaitTimes.getFirstTreatmentDateBrachy() != null && domWaitTimes.getDDTDateBrachy() == null) ||
					 (domWaitTimes.getFirstTreatmentDateBrachy() == null && domWaitTimes.getDDTDateBrachy() != null))
				errFound=true;
			else if ((domWaitTimes.getFirstTreatmentDateSPCare() != null && domWaitTimes.getDDTDatePalliative() == null) ||
					 (domWaitTimes.getFirstTreatmentDateSPCare() == null && domWaitTimes.getDDTDatePalliative() != null))
				errFound=true;
			else if ((domWaitTimes.getFirstTreatmentDateActiveMon() != null && domWaitTimes.getDDTDateActiveMon() == null) ||
					 (domWaitTimes.getFirstTreatmentDateActiveMon() == null && domWaitTimes.getDDTDateActiveMon() != null))
				errFound=true;
			if (errFound)
			{
				failReason.append("27. Decision To Treat Type must be the same as First Definitive Treatment");
				return false;
			}
		}
	
		return true; // A Valid Record
	}


}
