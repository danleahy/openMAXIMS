//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4050.19540)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.oncology.domain.impl;

import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.oncology.domain.base.impl.BaseToxicityComponentImpl;
import ims.oncology.vo.RadiotherapyToxicityDetailsVoCollection;
import ims.oncology.vo.domain.ChemotherapyToxicityDetailsVoAssembler;
import ims.oncology.vo.domain.RadiotherapyToxicityDetailsVoAssembler;

import java.util.ArrayList;
import java.util.List;

public class ToxicityComponentImpl extends BaseToxicityComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.oncology.vo.ChemotherapyToxicityDetailsVoCollection listChemoToxicity(ims.core.admin.vo.EpisodeOfCareRefVo voEpisode)
	{
		if(voEpisode == null)
			throw new CodingRuntimeException("Mandatory parameter - voEpisode not supplied");
		
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from ChemotherapyToxicityDetails ctd where ");
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		
		condStr.append(andStr + " ctd.episodeOfCare.id = :EP_ID");
		names.add("EP_ID");
		values.add(voEpisode.getID_EpisodeOfCare());

		hql.append(condStr.toString());
		
		hql.append(" order by ctd.assessmentDate desc");

		List list = factory.find(hql.toString(), names,values);
		return (ChemotherapyToxicityDetailsVoAssembler.createChemotherapyToxicityDetailsVoCollectionFromChemotherapyToxicityDetails(list));
	}

	public RadiotherapyToxicityDetailsVoCollection listRadioToxicity(EpisodeOfCareRefVo voEpisode) 
	{
		if(voEpisode == null)
			throw new CodingRuntimeException("Mandatory parameter - voEpisode not supplied");
		
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from RadiotherapyToxicityDetails ctd where ");
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		
		condStr.append(andStr + " ctd.episodeOfCare.id = :EP_ID");
		names.add("EP_ID");
		values.add(voEpisode.getID_EpisodeOfCare());

		hql.append(condStr.toString());
		
		hql.append(" order by ctd.assessmentDate desc");

		List list = factory.find(hql.toString(), names,values);
		return (RadiotherapyToxicityDetailsVoAssembler.createRadiotherapyToxicityDetailsVoCollectionFromRadiotherapyToxicityDetails(list));
	}
}
