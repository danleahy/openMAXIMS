//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4035.27320)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.oncology.domain.impl;

import ims.assessment.configuration.domain.objects.UserAssessment;
import ims.assessment.vo.domain.UserAssessmentVoAssembler;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.domain.objects.Referral;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.admin.vo.ReferralRefVo;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.vo.EpisodeOfCareForCancerReferralVo;
import ims.core.vo.PASReferralVo;
import ims.core.vo.domain.EpisodeOfCareForCancerReferralVoAssembler;
import ims.core.vo.domain.PASReferralVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserAssessmentCategory;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.oncology.domain.TumourDetails;
import ims.oncology.domain.base.impl.BaseCancerReferralImpl;
import ims.oncology.domain.objects.CancerReferralDetails;
import ims.oncology.vo.CancerReferralDetailsVo;
import ims.oncology.vo.PatientDiagnosisForPrimaryTumourVo;
import ims.oncology.vo.domain.CancerReferralDetailsVoAssembler;

import java.util.List;

public class CancerReferralImpl extends BaseCancerReferralImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* Function will retrieve the configuration of the first active UserAssessment of type Referral Assessment
	*/
	public ims.assessment.vo.UserAssessmentVo getReferralAssessment()
	{
		DomainFactory factory = getDomainFactory();
		
		String query = "from UserAssessment as ua where ua.activeStatus.id = :status and ua.category.id = :category and ua.isRIE is null order by ua.systemInformation.creationDateTime desc";
		DomainObject doUserAssessment = factory.findFirst(query, new String[] {"status", "category"}, new Object[] {PreActiveActiveInactiveStatus.ACTIVE.getID(), UserAssessmentCategory.REFERRAL_ASSESSMENT.getID()});
		
		if(doUserAssessment == null)
			return null;
		
		return UserAssessmentVoAssembler.create((UserAssessment) doUserAssessment);
	}

	public CancerReferralDetailsVo getCancerReferral(EpisodeOfCareRefVo episodeOfCare, ReferralRefVo cancerReferral) 
	{
		if(episodeOfCare == null || !episodeOfCare.getID_EpisodeOfCareIsNotNull())
			throw new CodingRuntimeException("Can not get CancerReferral on null EpisodeOfCareId.");
		
		if(cancerReferral == null || !cancerReferral.getID_ReferralIsNotNull())
			throw new CodingRuntimeException("Can not get CancerReferral on null ReferralId.");
		
		DomainFactory factory = getDomainFactory();
		
		String query = "from CancerReferralDetails as cr where cr.episodeOfCare.id = :ep and cr.pASReferral.id = :referral and cr.isRIE is null";
		
		List<?> doCancerReferral = factory.find(query, new String[] {"ep", "referral"}, new Object[] {episodeOfCare.getID_EpisodeOfCare(), cancerReferral.getID_Referral()});
		
		if(doCancerReferral != null && doCancerReferral.size() > 1)
			throw new DomainRuntimeException("Can not have more than one record of type CancerReferralDetails per Referral.");
		
		if(doCancerReferral != null && doCancerReferral.size() == 1)
			return CancerReferralDetailsVoAssembler.create((CancerReferralDetails) doCancerReferral.get(0));
		
		return null;
	}

	public CancerReferralDetailsVo saveCancerReferral(CancerReferralDetailsVo cancerReferralDetails) throws DomainInterfaceException, StaleObjectException,	UniqueKeyViolationException 
	{
		if(cancerReferralDetails == null)
			throw new CodingRuntimeException("Can not save a null CancerReferralDetails.");
		
		if(!cancerReferralDetails.isValidated())
			throw new CodingRuntimeException("CancerReferralDetails is not validated.");
		
		DomainFactory factory = getDomainFactory();
		CancerReferralDetails doCancerReferralDetails = CancerReferralDetailsVoAssembler.extractCancerReferralDetails(factory, cancerReferralDetails);
		
		try
		{
			factory.save(doCancerReferralDetails);
		}
		catch(UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException(e);
		}
		
		return CancerReferralDetailsVoAssembler.create(doCancerReferralDetails);
	}

	public EpisodeOfCareForCancerReferralVo listCancerReferrals(EpisodeOfCareRefVo episodeOfCare) 
	{
		if(episodeOfCare == null || !episodeOfCare.getID_EpisodeOfCareIsNotNull())
			throw new CodingRuntimeException("Can not get Episode Of Care on null Id.");
		
		return EpisodeOfCareForCancerReferralVoAssembler.create((EpisodeOfCare) getDomainFactory().getDomainObject(EpisodeOfCare.class, episodeOfCare.getID_EpisodeOfCare()));
	}

	public PASReferralVo getReferral(ReferralRefVo referral) 
	{
		if(referral == null || !referral.getID_ReferralIsNotNull())
			throw new CodingRuntimeException("Can not get Referral on null Id.");
		
		return PASReferralVoAssembler.create((Referral) getDomainFactory().getDomainObject(Referral.class, referral.getID_Referral()));
	}

	public PatientDiagnosisForPrimaryTumourVo getPatientDiagnosis(PatientDiagnosisRefVo diagnosis)
	{
		TumourDetails tdIMPL = (TumourDetails) getDomainImpl(TumourDetailsImpl.class);
		return tdIMPL.getPatientDiagnosis(diagnosis);
	}
}
