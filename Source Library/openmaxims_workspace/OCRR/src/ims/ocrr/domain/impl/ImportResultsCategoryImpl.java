//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.66 build 3243.27592)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.domain.impl;

import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.ocrr.configuration.domain.objects.ImportResultsConfig;
import ims.ocrr.domain.base.impl.BaseImportResultsCategoryImpl;
import ims.ocrr.vo.ImportResultsConfigVoCollection;
import ims.ocrr.vo.domain.ImportResultsConfigVoAssembler;

public class ImportResultsCategoryImpl extends BaseImportResultsCategoryImpl
{

	private static final long serialVersionUID = 1L;

	public ims.ocrr.vo.ImportResultsConfigVo getImportResultsConfig()
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = "from ImportResultsConfig res "; 
		
		ImportResultsConfigVoCollection coll = ImportResultsConfigVoAssembler.createImportResultsConfigVoCollectionFromImportResultsConfig(factory.find(hql)).sort();
		if(coll!=null && coll.size()>0)
			return coll.get(0);
		
		return null;
	}

	public ims.ocrr.vo.ImportResultsConfigVo saveImportResultsConfig(ims.ocrr.vo.ImportResultsConfigVo voSaveImportResultsConfig, ims.ocrr.vo.ImportResultsConfigVo voDeleteImportResultsConfig) throws ims.domain.exceptions.StaleObjectException, ForeignKeyViolationException
	{
		if (!voSaveImportResultsConfig.isValidated())
			throw new DomainRuntimeException("ImportResultsConfig has not been validated");
		
		DomainFactory factory = getDomainFactory();
		if(voDeleteImportResultsConfig!=null){
			ImportResultsConfig doDelete = ImportResultsConfigVoAssembler.extractImportResultsConfig(factory, voDeleteImportResultsConfig);
			factory.delete(doDelete);
		}
		ImportResultsConfig doSave = ImportResultsConfigVoAssembler.extractImportResultsConfig(factory, voSaveImportResultsConfig);
			
		factory.save(doSave);
		
		return ImportResultsConfigVoAssembler.create(doSave);
	}
}
