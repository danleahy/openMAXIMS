//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.ocrr.domain.impl;

import ims.core.vo.DataSetTypeForAnalyteConfigVo;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.configuration.domain.objects.Analyte;
import ims.ocrr.domain.base.impl.BaseAnalyteConfigurationImpl;
import ims.ocrr.vo.AnalyteConfigurationSearchCriteriaVo;
import ims.ocrr.vo.AnalyteConfigurationVo;
import ims.ocrr.vo.AnalyteConfigurationVoCollection;
import ims.ocrr.vo.domain.AnalyteConfigurationVoAssembler;
import ims.ocrr.vo.domain.ProviderSystemLiteVoAssembler;

import java.util.ArrayList;
import java.util.List;

public class AnalyteConfigurationImpl extends BaseAnalyteConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.ServiceLiteVoCollection getServices()
	{
		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(getDomainFactory().find("select serv from Service as serv "));
	}

	public ims.ocrr.vo.ProviderSystemLiteVoCollection getProviderSystems()
	{
		return ProviderSystemLiteVoAssembler.createProviderSystemLiteVoCollectionFromProviderSystem(getDomainFactory().find("select provSystem from ProviderSystem as provSystem "));
	}

	public AnalyteConfigurationVoCollection getAnalites(AnalyteConfigurationSearchCriteriaVo searchCriteria)
	{
		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer();
		hql.append(" select analytes from Analyte as analytes ");
		StringBuffer condStr = new StringBuffer();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		if (searchCriteria.getAnalyteCode() != null)
		{
			String code = searchCriteria.getAnalyteCode().trim();
			code = code.toUpperCase();
			code = "%" + code + "%";
			condStr.append(" where upper(analytes.analyteExtCode) like :code");
			markers.add("code");
			values.add(code);
		}

		if (searchCriteria.getService() != null)
		{
			if (condStr.length() == 0)
				condStr.append(" where ");
			else
				condStr.append(" and ");

			hql.append("left join analytes.service as serv ");
			condStr.append("serv.id = :servId");
			markers.add("servId");
			values.add(searchCriteria.getService().getID_Service());
		}

		if (searchCriteria.getProviderSystem() != null)
		{
			if (condStr.length() == 0)
				condStr.append(" where ");
			else
				condStr.append(" and ");

			hql.append("left join analytes.providerSystem as provSystem ");
			condStr.append(" provSystem.id = :provSystemId");
			markers.add("provSystemId");
			values.add(searchCriteria.getProviderSystem().getID_ProviderSystem());
		}

		condStr.append(" order by analytes.analyteExtText asc");
		
		hql.append(condStr);

		return AnalyteConfigurationVoAssembler.createAnalyteConfigurationVoCollectionFromAnalyte(factory.find(hql.toString(), markers, values));
	}

	public AnalyteConfigurationVo saveAnalyte(AnalyteConfigurationVo analyteToSave) throws StaleObjectException
	{
		if (analyteToSave == null)
			throw new CodingRuntimeException("Cannot save null Analyte");

		DomainFactory factory = getDomainFactory();
		Analyte domainAnalyte = AnalyteConfigurationVoAssembler.extractAnalyte(factory, analyteToSave);

		factory.save(domainAnalyte);

		return AnalyteConfigurationVoAssembler.create(domainAnalyte);
	}

	public Boolean analyteAlreadyExists(DataSetTypeForAnalyteConfigVo datasetType)
	{
		if (datasetType == null)
			return true;

		List<?> list = getDomainFactory().find("select dataset from DatasetType as dataset where upper(trim(dataset.name)) = :name and dataset.id != :datasetId", 
				new String[] { "name", "datasetId" }, new Object[] { datasetType.getName().trim().toUpperCase(), datasetType.getID_DatasetType() });

		if (list != null && list.size() > 0)
			return true;

		return false;
	}

}
