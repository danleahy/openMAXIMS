//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by George Cristian Josan using IMS Development Environment (version 1.62 build 3040.26452)
//Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.domain.impl;

import java.util.ArrayList;

import ims.core.resource.place.domain.objects.DED;
import ims.core.vo.DEDLiteVoCollection;
import ims.core.vo.domain.DEDFullVoAssembler;
import ims.core.vo.domain.DEDLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.ntpf.vo.lookups.County;
import ims.pci.domain.base.impl.BaseDEDAdminImpl;

public class DEDAdminImpl extends BaseDEDAdminImpl
{

	private static final long serialVersionUID = 1L;

	/**
	 * WDEV-10350
	 * Returns all DED matching the search parameters
	 */
	public DEDLiteVoCollection listDED(String name, County county, Boolean active)
	{
		DomainFactory factory = getDomainFactory();
		
		StringBuilder query = new StringBuilder();

		query.append("from DED as ded");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		String aux = " where ";
		
		if (name != null)
		{
			query.append(aux);
			query.append(" ded.upperName like :NAME");
			aux = " and ";
			
			paramNames.add("NAME");
			paramValues.add("%" + name.toUpperCase() + "%");
		}
		
		if (county != null)
		{
			query.append(aux);
			query.append(" ded.county.id = :COUNTY ");
			aux = " and ";
			
			paramNames.add("COUNTY");
			paramValues.add(county.getID());
		}
		
		if (Boolean.TRUE.equals(active))
		{
			query.append(aux);
			query.append(" ded.isActive = 1 ");
		}

		return DEDLiteVoAssembler.createDEDLiteVoCollectionFromDED(factory.find(query.toString(), paramNames, paramValues));
	}

	/**
	 * Returns full information about a DED based on a DED_ID reference
	 */
	public ims.core.vo.DEDFullVo getDED(ims.core.resource.place.vo.DEDRefVo idDED)
	{
		if (idDED == null)
			return null;

		DomainFactory factory = getDomainFactory();

		return DEDFullVoAssembler.create((DED) factory.getDomainObject(DED.class, idDED.getID_DED()));
	}

	/**
	 * Saves a DED in the database and returns back the saved DED
	 */
	public ims.core.vo.DEDFullVo saveDED(ims.core.vo.DEDFullVo fullDED) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.ForeignKeyViolationException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if (!fullDED.isValidated())
			throw new DomainInterfaceException("DED has not been validated");

		DomainFactory factory = getDomainFactory();

		DED domainDED = DEDFullVoAssembler.extractDED(factory, fullDED);

		try
		{
			factory.save(domainDED);
			return DEDFullVoAssembler.create(domainDED);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException("Schedule Configuration already exists within the system.", e);
		}
	}
}
