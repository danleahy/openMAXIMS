//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.62 build 3040.26452)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.domain.impl;

import ims.core.vo.LocationLiteVo;
import ims.core.vo.domain.LocSiteLiteVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.framework.utils.Date;
import ims.pci.domain.base.impl.BasePHNListImpl;
import ims.pci.vo.ClientPHNListVoCollection;
import ims.pci.vo.domain.ClientPHNListVoAssembler;

import java.util.ArrayList;

public class PHNListImpl extends BasePHNListImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.LocSiteLiteVoCollection listCCA()
	{
		DomainFactory factory = getDomainFactory();
		
		// WDEV-12633 - Updated query to list back only CCA locations
		String query = "from LocSite as ls where ls.type.id = " + LocationType.CCA.getID();
		
		return LocSiteLiteVoAssembler.createLocSiteLiteVoCollectionFromLocSite(factory.find(query));
	}

	public ims.core.vo.LocationLiteVoCollection listSector(ims.core.vo.LocSiteLiteVo filterCCA)
	{
		if (filterCCA == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		// WDEV-12633 - Updated query to list back only Sector locations
		String query = "select loc from LocSite as ls left join ls.locations as loc where (ls.name = :CCANAME and loc.type.id = :VALUE)";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		markers.add("CCANAME");
		values.add(filterCCA.getName());
		
		markers.add("VALUE");
		values.add(new Integer(LocationType.SECTOR.getID()));
		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(factory.find(query, markers, values));
	}

	public ims.core.vo.LocationLiteVoCollection listDistrict(ims.core.vo.LocationLiteVo filterSector)
	{
		if (filterSector == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		// WDEV-12633 - Updated query to list back only PHN District locations
		String query = "select loc from Location as lsec left join lsec.locations as loc where (lsec.name = :SECNAME and loc.type.id = :VALUE)";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		markers.add("SECNAME");
		values.add(filterSector.getName());
		
		markers.add("VALUE");
		values.add(new Integer(LocationType.PHN_DISTRICT.getID()));
		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(factory.find(query, markers, values));
	}

	
	// If you pass a null on valueDistrict it will generate a DomainRuntimeException
	public ClientPHNListVoCollection searchPatients(LocationLiteVo valueDistrict, Date minDOB, Date maxDOB)
	{		
		DomainFactory factory = getDomainFactory();
		
		StringBuilder query = new StringBuilder();
		query.append("from Patient as pat where pat.communityCare.phnDistrict.id = :VALUE");
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		markers.add("VALUE");
		values.add(new Integer(valueDistrict.getID()));
		
		if (minDOB != null)
		{
			query.append(" and pat.dob >= :MinDOB");
			markers.add("MinDOB");
			values.add(minDOB.toPartialDate().toInteger());
		}
		
		if (maxDOB != null)
		{
			query.append(" and pat.dob <= :MaxDOB");
			markers.add("MaxDOB");
			values.add(maxDOB.toPartialDate().toInteger());
		}
		
		return ClientPHNListVoAssembler.createClientPHNListVoCollectionFromPatient(factory.find(query.toString(), markers, values));
	}
}
