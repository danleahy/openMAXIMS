//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.62 build 3019.30328)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.domain.impl;

import ims.core.vo.GpLiteWithNameVoCollection;
import ims.core.vo.domain.GpLiteWithNameVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.pci.domain.base.impl.BaseGPContractsImpl;
import ims.pci.domain.objects.GpContract;
import ims.pci.vo.GpContractVo;
import ims.pci.vo.GpContractVoCollection;
import ims.pci.vo.domain.GpContractVoAssembler;

import java.util.ArrayList;
import java.util.List;

public class GPContractsImpl extends BaseGPContractsImpl
{

	private static final long serialVersionUID = 1L;

	public ims.pci.vo.GpContractVoCollection listGpContract(ims.core.vo.GpLiteWithNameVo gpName)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from GpContract gpc ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if (gpName != null && gpName.getID_GpIsNotNull())
		{
			hql.append("gpc.gP.id = :gpid");
			markers.add("gpid");
			values.add(gpName.getID_Gp());
		}
		
		if (markers.size() > 0)
			query += " where ";
		query += hql.toString();
		
		List gpContractList = factory.find(query, markers, values);
		
		return GpContractVoAssembler.createGpContractVoCollectionFromGpContract(gpContractList);
	}

	public ims.pci.vo.GpContractVo getGpContract(ims.pci.vo.GpContractRefVo gpContractRef)
	{
		if(gpContractRef == null || !gpContractRef.getID_GpContractIsNotNull())
			throw new DomainRuntimeException("GpContract not provided for get call. ");
		
		DomainFactory factory = getDomainFactory();
		
		GpContract doGpContract = (GpContract) factory.getDomainObject(GpContract.class, gpContractRef.getID_GpContract());
		return GpContractVoAssembler.create(doGpContract);
	}

	private void checkDateInterval(GpContractVo gpContract) throws ims.domain.exceptions.DomainInterfaceException
	{
		GpContractVoCollection listGpContracts = listGpContract(gpContract.getGP());
		for(int i = 0; i < listGpContracts.size(); i++)
		{
			if(!gpContract.getID_GpContractIsNotNull() || (gpContract.getID_GpContractIsNotNull() && !gpContract.getID_GpContract().equals(listGpContracts.get(i).getID_GpContract())))
			{
				checkDateInterval(listGpContracts.get(i).getContractStartDate(), listGpContracts.get(i).getContractEndDate(), gpContract.getContractStartDate(), gpContract.getContractEndDate());
			}
		}
	}
	
	private void checkDateInterval(Date existingStartDate, Date existingEndDate, Date newStartDate, Date newEndDate) throws ims.domain.exceptions.DomainInterfaceException
	{	
		boolean allowThrow = false;
		if(newStartDate.compareTo(existingStartDate) >= 0)
		{
			if(existingEndDate != null && newStartDate.compareTo(existingEndDate) <= 0)
			{
				allowThrow = true;
			}
			else if(existingEndDate == null)
			{
				allowThrow = true;
			}
		}
		if(newEndDate != null && newEndDate.compareTo(existingStartDate) >= 0)
		{
			if(existingEndDate != null && newEndDate.compareTo(existingEndDate) <= 0)
			{
				allowThrow = true;
			}
			else if(existingEndDate == null)
			{
				allowThrow = true;
			}
		}
		if(newStartDate.compareTo(existingStartDate) <= 0)
		{
			if(existingEndDate != null && newEndDate != null && newEndDate.compareTo(existingEndDate) >= 0)
			{
				allowThrow = true;
			}
			else if(newEndDate == null)
			{
				allowThrow = true;
			}
		}
		if(allowThrow)
		{
			throw new ims.domain.exceptions.DomainInterfaceException("Invalid contract date interval.");
		}
	}

	// WDEV - 5151
	// Hitting the database to check for the existing GP contract ID instead of the UniqueKey exception
	private boolean checkExistsContractID(GpContractVo gpContract)
	{
		if (gpContract == null)
			return false;
		
		if (gpContract.getContractIdIsNotNull() && !gpContract.getID_GpContractIsNotNull())
		{
			DomainFactory factory = getDomainFactory();
			String query = "from GpContract gpc where gpc.contractId = :ID";
			ArrayList markers = new ArrayList();
			markers.add("ID");
			ArrayList values = new ArrayList();
			values.add(gpContract.getContractId());
			
			List gpContractList = factory.find(query, markers, values);
			
			if (gpContractList != null && gpContractList.size() > 0)
				return true;
		}
		else if (gpContract.getContractIdIsNotNull())
		{
			DomainFactory factory = getDomainFactory();
			String query = "from GpContract gpc where gpc.contractId = :ID and gpc.id <> :VOID";
			ArrayList markers = new ArrayList();
			markers.add("ID");
			markers.add("VOID");
			ArrayList values = new ArrayList();
			values.add(gpContract.getContractId());
			values.add(gpContract.getID_GpContract());
			
			List gpContractList = factory.find(query, markers, values);
			
			if (gpContractList != null && gpContractList.size() > 0)
				return true;
		}
		
		return false;
	}

	public GpContractVo saveGpContract(GpContractVo gpContract) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		if(!gpContract.isValidated())
			throw new DomainRuntimeException("GpContractVo is not validated");
		
		if (checkExistsContractID(gpContract))
			throw new UniqueKeyViolationException("A GP Contract already exists with the inputted Contract ID.");
		
		checkDateInterval(gpContract);			
		
		DomainFactory factory = getDomainFactory();
		GpContract doGpContract = GpContractVoAssembler.extractGpContract(factory, gpContract);
		try
		{
			factory.save(doGpContract);
		}
		catch(UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException(e);
		}
		
		return GpContractVoAssembler.create(doGpContract);
	}

	public GpLiteWithNameVoCollection listGP(String gpName) throws DomainInterfaceException 
	{
		if (gpName == null || gpName.trim() == null || gpName.trim().length() == 0)
			throw new DomainInterfaceException("Can not search for GP with no name provided");

		DomainFactory factory = getDomainFactory();

		String query = "from Gp as gp ";

		StringBuffer hql = new StringBuffer();
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		hql.append(" where gp.name.upperSurname like :sName");
		markers.add("sName");
		values.add(gpName.toUpperCase() + "%");
		
		if (markers.size() > 0)
			query += hql;

		return GpLiteWithNameVoAssembler.createGpLiteWithNameVoCollectionFromGp(factory.find(query, markers, values));
	}

	public GpContractVoCollection listGPContractsById(String contractID) throws DomainInterfaceException 
	{
		if(contractID == null || (contractID != null && contractID.length()== 0))
			throw new CodingRuntimeException("Cannot search on null contractId!");
		
		DomainFactory factory = getDomainFactory();
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		String query = "from GpContract gpc where gpc.contractId = :contractId";
		markers.add("contractId");
		values.add(contractID);
		
		List gpContractList = factory.find(query, markers, values);
		
		return GpContractVoAssembler.createGpContractVoCollectionFromGpContract(gpContractList);
	}
}
