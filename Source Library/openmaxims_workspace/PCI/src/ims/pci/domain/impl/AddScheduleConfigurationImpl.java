//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by George Cristian Josan using IMS Development Environment (version 1.62 build 3070.24992)
//Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.domain.impl;

import java.util.ArrayList;

import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.pci.domain.RecordingScheduling;
import ims.pci.domain.base.impl.BaseAddScheduleConfigurationDialogImpl;
import ims.pci.vo.ClientImmunisationScheduleVo;
import ims.pci.vo.ClientLiteVo;
import ims.pci.vo.domain.ClientLiteVoAssembler;
import ims.pci.vo.domain.ScheduleConfigurationVoAssembler;

public class AddScheduleConfigurationImpl extends BaseAddScheduleConfigurationDialogImpl
{

    private static final long serialVersionUID = 1L;

    public ims.pci.vo.ScheduleConfigurationVoCollection listSchedules(ims.pci.vo.ScheduleConfigurationRefVoCollection existingSchedules) throws ims.domain.exceptions.DomainInterfaceException
    {
	DomainFactory factory = getDomainFactory();

	if (existingSchedules == null || existingSchedules.size() == 0)
	{
	    ArrayList<String> markers = new ArrayList<String>();
	    ArrayList<Object> values = new ArrayList<Object>();

	    String query = "from ScheduleConfiguration as sc where sc.status.id = :STATUS";
	    markers.add("STATUS");
	    values.add(PreActiveActiveInactiveStatus.ACTIVE.getID());

	    return ScheduleConfigurationVoAssembler.createScheduleConfigurationVoCollectionFromScheduleConfiguration(factory.find(query, markers, values));
	}

	String query = "from ScheduleConfiguration as sc";
	
	StringBuffer hql = new StringBuffer();
	ArrayList<String> markers = new ArrayList<String>();
	ArrayList<Object> values = new ArrayList<Object>();
	
	hql.append(" where sc.id not in (");

	// Build list
	for (int i = 0; i < existingSchedules.size(); i++)
	{
	    if (existingSchedules.get(i) != null)
	    {
		hql.append(":ID" + i + " ");
		markers.add("ID" + i);
		values.add(existingSchedules.get(i).getID_ScheduleConfiguration());
		
		if (i != existingSchedules.size() - 1)
		    hql.append(", ");
	    }
	}
	
	hql.append(")");
	if (markers.size() > 0)
	{
	    query += hql;
	    query += " and sc.status.id = :STATUS order by UPPER(sc.scheduleName) asc";
	    markers.add("STATUS");
	    values.add(PreActiveActiveInactiveStatus.ACTIVE.getID());
	}
	else
	{
	    query += " and sc.status.id = :STATUS order by UPPER(sc.scheduleName) asc";
	    markers.add("STATUS");
	    values.add(PreActiveActiveInactiveStatus.ACTIVE.getID());
	}
	
	return ScheduleConfigurationVoAssembler.createScheduleConfigurationVoCollectionFromScheduleConfiguration(factory.find(query, markers, values));
    }

    public ClientImmunisationScheduleVo saveClientImmunisationScheduleVo(ClientImmunisationScheduleVo schedule) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
    {
	RecordingScheduling impl = (RecordingScheduling) getDomainImpl(RecordingSchedulingImpl.class);
	return impl.saveClientImmunisationSchedule(schedule);
    }

    public ClientLiteVo getClient(PatientRefVo patientRef) throws DomainInterfaceException
    {
	// Check for a client
	if (patientRef == null)
	    throw new DomainInterfaceException("Can not add schedule. Client was not found in records");

	// Look for a client in the database
	DomainFactory factory = getDomainFactory();
	ClientLiteVo clientLiteVo = ClientLiteVoAssembler.create((Patient) factory.getDomainObject(Patient.class, patientRef.getID_Patient()));

	if (clientLiteVo == null)
	    throw new DomainInterfaceException("Desired client does not exist");

	return clientLiteVo;
    }
}
