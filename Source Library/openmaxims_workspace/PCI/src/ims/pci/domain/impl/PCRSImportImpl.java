//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.65 build 3202.18140)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.domain.impl;

import ims.core.patient.domain.objects.Patient;
import ims.core.patient.domain.objects.PatientId;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.PatientPcrsVo;
import ims.core.vo.lookups.PatIdType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.pci.domain.base.impl.BasePCRSImportImpl;
import ims.pci.vo.ClientPCRSImportVo;
import ims.pci.vo.GmsPaymentsVo;
import ims.pci.vo.GmsPaymentsVoCollection;
import ims.pci.vo.GpContractRefVo;
import ims.pci.vo.domain.GmsPaymentsVoAssembler;
import ims.pci.vo.lookups.GMSPaymentType;
import ims.pci.vo.lookups.LookupHelper;

import java.util.List;

public class PCRSImportImpl extends BasePCRSImportImpl
{

	private static final long serialVersionUID = 1L;

	public ClientPCRSImportVo getClientInfo(String clientId)
	{
		DomainFactory domainFactory = getDomainFactory();
		String query = "select p1_1.id, p1_1.isRIE from Patient as p1_1 left join p1_1.identifiers as p2_1 left join p2_1.type as l1_1 where (l1_1.id = -1422 and p2_1.value = :CLIENT_ID) ";
		
		List list = domainFactory.find(query, new String[] {"CLIENT_ID"}, new Object[] {clientId});

		if(list == null || list.size() == 0)
			return null;
		
		Integer pid = null;

		ClientPCRSImportVo retVo = new ClientPCRSImportVo();
		
		for (Object object : list)
		{
			Object[] item = (Object[]) object;

			pid = (Integer) item[0];
			
			retVo.setId(pid);
			retVo.setIsRie((Boolean) item[1]);
			retVo.setClientId(clientId);
		}
		
		query = "select p2_1.value from Patient as p1_1 left join p1_1.identifiers as p2_1 left join p2_1.type as l1_1 where (l1_1.id = -1423 and p1_1.id = :PID) ";
		
		list = domainFactory.find(query, new String[] {"PID"}, new Object[] {pid});

		if(list == null || list.size() == 0)
			return retVo;
		
		for (Object object : list)
		{
			retVo.setGmsId((String) object);
				
			break;
		}
		
		return retVo;
	}

	@SuppressWarnings("unchecked")
	public void updateClientGmsId(ClientPCRSImportVo clientInfo) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		try
		{
			if (clientInfo == null || clientInfo.getId() == null)
				throw new CodingRuntimeException("clientInfo parameter cannot be null (or clientInfo.id is null) !");

			DomainFactory domainFactory = getDomainFactory();

			Patient client = (Patient) domainFactory.loadDomainObject(Patient.class, clientInfo.getId().intValue());

			PatientId pid = new PatientId();

			pid.setType(getDomLookup(PatIdType.GMSID));
			pid.setValue(clientInfo.getGmsId());

			client.getIdentifiers().add(pid);

			domainFactory.save(client);
		}
		catch (ims.domain.exceptions.UnqViolationUncheckedException exception)
		{
			throw new UniqueKeyViolationException(exception.getMessage());
		}
	}

	public GpContractRefVo getGpContract(String contractId)
	{
		if(contractId == null)
			return null;

		DomainFactory domainFactory = getDomainFactory();
		
		String query = "select g1_1.id, g1_1.version from GpContract as g1_1 where (g1_1.contractId = :CONTRACT)";
		
		List list = domainFactory.find(query, new String[] {"CONTRACT"}, new Object[] {contractId});
		
		if(list != null && list.size() > 0)
		{
			Object[] item = (Object[]) list.get(0);
			
			return new GpContractRefVo((Integer)item[0], ((Integer)item[1]).intValue());
		}
		
		return null;
	}

	public void insertPaymentRecord(GmsPaymentsVo gmsPayment) throws DomainInterfaceException, ForeignKeyViolationException, UniqueKeyViolationException, StaleObjectException
	{
		if(gmsPayment == null)
			throw new CodingRuntimeException("gmsPayment parameter cannot be null !");

		DomainFactory domainFactory = getDomainFactory();

		domainFactory.save(GmsPaymentsVoAssembler.extractGmsPayments(domainFactory, gmsPayment));
	}

	public PatientPcrsVo getClient(String clientId)
	{
		if(clientId == null)
			return null;
		

		DomainFactory domainFactory = getDomainFactory();
		
		String query = "select p1_1.id, p1_1.version, p1_1.isRIE from Patient as p1_1 left join p1_1.identifiers as p2_1 left join p2_1.type as l1_1 where (l1_1.id = -1422 and p2_1.value = :CLIENT_ID) ";
		
		List list = domainFactory.find(query, new String[] {"CLIENT_ID"}, new Object[] {clientId});
		
		if(list != null && list.size() > 0)
		{
			Object[] item = (Object[]) list.get(0);

			PatientPcrsVo retVo = new PatientPcrsVo();
			
			retVo.setPatientRef(new PatientRefVo((Integer)item[0], ((Integer)item[1]).intValue()));
			retVo.setIsRie((Boolean) item[2]);
			
			return retVo;
		}
		
		return null;
	}

	public GMSPaymentType getPaymentType(String type)
	{
		DomainFactory domainFactory = getDomainFactory();
		
		String query = "select l1_1.id	from LookupInstance as l1_1 left join l1_1.mappings as l2_1 where (l1_1.type.id = 1331015 and l2_1.extSystem = 'Report' and l2_1.extCode = :CODE)";
		
		List list = domainFactory.find(query, new String[] {"CODE"}, new Object[] {type});
		
		if(list != null && list.size() > 0)
		{
			Object item = list.get(0);
			
			return LookupHelper.getGMSPaymentTypeInstance(getLookupService(), ((Integer)item).intValue());
		}
		
		return null;
	}

	public void insertPaymentCollection(GmsPaymentsVoCollection coll) throws StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		if(coll == null)
			throw new CodingRuntimeException("coll parameter cannot be null !");

		DomainFactory domainFactory = getDomainFactory();

		for (GmsPaymentsVo vo : coll)
		{
			domainFactory.save(GmsPaymentsVoAssembler.extractGmsPayments(domainFactory, vo));	
		}
	}

	public Integer checkYearMonthRecords(Integer monthYear)
	{
		String query = "select count (g1_1.id) from GmsPayments as g1_1 where (g1_1.yearMonth = :YM)";

		List list = getDomainFactory().find(query, new String[] {"YM"}, new Object[] {monthYear});
		
		if(list != null && list.size() > 0)
		{
			Object item = list.get(0);
			
			if(item instanceof Integer)
				return (Integer)item;
			else if(item instanceof Long)
			{
				return new Integer(((Long)item).intValue());
			}
		}
		
		return 0;
	}

	public String getGmsId(Integer id) throws DomainInterfaceException
	{
		DomainFactory domainFactory = getDomainFactory();
		String query = "select p2_1.value from Patient as p1_1 left join p1_1.identifiers as p2_1 left join p2_1.type as l1_1 where (l1_1.id = -1423 and p1_1.id = :ID) ";
		
		List list = domainFactory.find(query, new String[] {"ID"}, new Object[] {id});

		if(list == null || list.size() == 0)
			return null;

		return (String) list.get(0);
	}

}
