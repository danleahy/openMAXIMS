//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.62 build 3019.30328)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.domain.impl;

import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.hibernate3.IMSCriteria;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.pci.domain.RecordingScheduling;
import ims.pci.domain.base.impl.BaseBirthDetailsImpl;
import ims.pci.domain.objects.ClientBirthDetails;
import ims.pci.vo.ClientBirthDetailsVoCollection;
import ims.pci.vo.ClientImmunisationScheduleVo;
import ims.pci.vo.domain.ClientBirthDetailsVoAssembler;

import java.util.List;

public class BirthDetailsImpl extends BaseBirthDetailsImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* SaveClient Birth Details
	*/
	public ims.pci.vo.ClientBirthDetailsVo saveClientBirthDetails(ims.pci.vo.ClientBirthDetailsVo voClientBirthDetails) throws ims.domain.exceptions.StaleObjectException
	{
		if(!voClientBirthDetails.isValidated())
			throw new DomainRuntimeException("This ClientBirthDetails has not been validated");
		
		DomainFactory factory = getDomainFactory();
		ClientBirthDetails doClientBirthDetails = ClientBirthDetailsVoAssembler.extractClientBirthDetails(factory, voClientBirthDetails);
		factory.save(doClientBirthDetails);
		return ClientBirthDetailsVoAssembler.create(doClientBirthDetails);
	}

	/**
	* Get a Specific ClientBirthDetail
	*/
	public ims.pci.vo.ClientBirthDetailsVo getClientBirthDetails(ims.pci.vo.ClientBirthDetailsVo clientBirthDetailsVo)
	{
		if(clientBirthDetailsVo == null || (clientBirthDetailsVo != null && clientBirthDetailsVo.getClient() == null))
			throw new DomainRuntimeException("Birth details not provided for get call.");
		
		DomainFactory factory = getDomainFactory();
		IMSCriteria criteria = new IMSCriteria(ClientBirthDetails.class, factory);
		criteria.equal("this.client.id", clientBirthDetailsVo.getClient().getID_Patient());
			
		List dets = criteria.find();
		ClientBirthDetailsVoCollection coll = ClientBirthDetailsVoAssembler.createClientBirthDetailsVoCollectionFromClientBirthDetails(dets).sort();
		if (coll.size() > 0)
			return coll.get(0);
		else
			return null;
	}

	public void addDefaultSchedule(PatientRefVo client, MemberOfStaffLiteVo user, DateTime currentDate) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException 
	{
		RecordingScheduling impl = (RecordingScheduling) getDomainImpl(RecordingSchedulingImpl.class);
		ClientImmunisationScheduleVo clientIS = impl.saveDefaultScheduleToClient(client, user);
	}

	//WDEV-14663
	public ClientBirthDetailsVoCollection getAllClientBirthDetails(PatientRefVo patientRef)
	{
		if (patientRef == null || patientRef.getID_Patient() == null)
		{
			throw new CodingRuntimeException("Cannot get ClientBirthDetailsVoCollection on null Id for Patient ");
		}

		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer();
		hql.append("select clientBirth from ClientBirthDetails as clientBirth where clientBirth.client.id = :patID order by clientBirth.systemInformation.creationDateTime desc  ");

		List<?> list = factory.find(hql.toString(), new String[] { "patID" }, new Object[] { patientRef.getID_Patient() });

		return ClientBirthDetailsVoAssembler.createClientBirthDetailsVoCollectionFromClientBirthDetails(list);
	}

	
}
