//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by George Cristian Josan using IMS Development Environment (version 1.62 build 3040.26452)
//Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.domain.impl;

import ims.core.vo.VaccineLiteVo;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.pci.domain.base.impl.BaseScheduleConfigurationImpl;
import ims.pci.domain.objects.ScheduleConfiguration;
import ims.pci.forms.scheduleconfiguration.GenForm.GroupStatusOptionEnumeration;
import ims.pci.vo.ScheduleConfigurationLiteVoCollection;
import ims.pci.vo.ScheduleConfigurationRefVo;
import ims.pci.vo.ScheduleConfigurationVo;
import ims.pci.vo.StageConfigurationVo;
import ims.pci.vo.StageVaccineVo;
import ims.pci.vo.StageVaccineVoCollection;
import ims.pci.vo.domain.ScheduleConfigurationLiteVoAssembler;
import ims.pci.vo.domain.ScheduleConfigurationVoAssembler;
import ims.pci.vo.lookups.Stage;

import java.text.ParseException;
import java.util.ArrayList;


public class PCIScheduleConfigurationImpl extends BaseScheduleConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	public ScheduleConfigurationLiteVoCollection listScheduleConfiguration(GroupStatusOptionEnumeration statusOption)
	{
		// No need to check for null parameters - for null the if statement fails and returns all records

		DomainFactory factory = getDomainFactory();

		String query = "from ScheduleConfiguration as sc";

		// If it is required to list only the active records
		if (statusOption == GroupStatusOptionEnumeration.rdoActive)
		{
			StringBuffer hql = new StringBuffer();
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Object> values = new ArrayList<Object>();

			hql.append(" where sc.status.id = :VALUE");
			markers.add("VALUE");
			values.add(new Integer(PreActiveActiveInactiveStatus.ACTIVE.getId()));

			query += hql;

			return ScheduleConfigurationLiteVoAssembler.createScheduleConfigurationLiteVoCollectionFromScheduleConfiguration(factory.find(query, markers, values));
		}

		return ScheduleConfigurationLiteVoAssembler.createScheduleConfigurationLiteVoCollectionFromScheduleConfiguration(factory.find(query));
	}

	public ScheduleConfigurationVo getScheduleConfigurationDetails(ScheduleConfigurationRefVo scheduleConfiguration)
	{
		if (scheduleConfiguration == null)
			return null;

		DomainFactory factory = getDomainFactory();

		return ScheduleConfigurationVoAssembler.create((ScheduleConfiguration) factory.getDomainObject(ScheduleConfiguration.class, scheduleConfiguration.getID_ScheduleConfiguration())); 
	}

	public ScheduleConfigurationVo saveScheduleConfigurationDetails(ScheduleConfigurationVo scheduleConfigurationVo) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		if (scheduleConfigurationVo == null)
			throw new CodingRuntimeException("MAJOR LOGICAL ERROR - No VO provided");
		
		if (!scheduleConfigurationVo.isValidated())
			throw new DomainInterfaceException("ScheduleConfigurationVo has not been validated");

		DomainFactory factory = getDomainFactory();

		if (scheduleConfigurationVo.getIsDefaultSchedule() == true)
		{
			// Validate the isDefault option
			String query = "from ScheduleConfiguration as sc";

			StringBuffer hql = new StringBuffer();
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Object> values = new ArrayList<Object>();

			// Select all active default schedules
			hql.append(" where sc.isDefaultSchedule = 1 ");

			// Filter different schedule
			if (scheduleConfigurationVo.getID_ScheduleConfigurationIsNotNull())
			{
				hql.append(" and sc.id <> :ID ");

				markers.add("ID");
				values.add(scheduleConfigurationVo.getID_ScheduleConfiguration());
			}

			// Filter all schedules that have the start date or the end date in the interval
			hql.append(" and (");

			if (scheduleConfigurationVo.getStartDobIsNotNull() && scheduleConfigurationVo.getEndDobIsNotNull())
			{
				hql.append("sc.startDob between :STARTDATE and :ENDDATE or sc.endDob between :STARTDATE and :ENDDATE");
				markers.add("STARTDATE");
				markers.add("ENDDATE");
				values.add(scheduleConfigurationVo.getStartDob().getDate());
				values.add(scheduleConfigurationVo.getEndDob().getDate());

				// Filter all that contain the interval
				hql.append(" or (");
				hql.append("sc.startDob < :STARTDATE and sc.endDob > :ENDDATE");
				hql.append(")");
			}
			else if (scheduleConfigurationVo.getStartDobIsNotNull())
			{
				hql.append("sc.endDob > :STARTDATE");
				markers.add("STARTDATE");
				values.add(scheduleConfigurationVo.getStartDob().getDate());
				
				hql.append(" or (");
				hql.append("sc.startDob <  :STARTDATE and sc.endDob is null");
				hql.append(")");				
			}
			else if (scheduleConfigurationVo.getEndDobIsNotNull())
			{
				hql.append("sc.startDob < :ENDDATE");
				markers.add("ENDDATE");
				values.add(scheduleConfigurationVo.getEndDob().getDate());
			}

			hql.append(")");

			query += hql;

			ScheduleConfigurationLiteVoCollection schedules = ScheduleConfigurationLiteVoAssembler.createScheduleConfigurationLiteVoCollectionFromScheduleConfiguration(factory.find(query, markers, values));

			if (schedules != null && schedules.size() > 0)
				throw new DomainInterfaceException("Can not add a default schedule for this period of time. A default schedule already exists for this period of time");
		}

		ScheduleConfiguration domScheduleConfiguration = ScheduleConfigurationVoAssembler.extractScheduleConfiguration(factory, scheduleConfigurationVo);


		try
		{
			factory.save(domScheduleConfiguration);

			return ScheduleConfigurationVoAssembler.create(domScheduleConfiguration);
		}
		catch (UnqViolationUncheckedException exception)
		{
			throw new UniqueKeyViolationException("Schedule Configuration already exists within the system.", exception);
		}

	}
}
