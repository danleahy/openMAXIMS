//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.62 build 3009.29450)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.forms.clientdemographics;

import java.util.ArrayList;
import java.util.List;

import ims.configuration.AppRight;
import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.GpLiteWithNameVo;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonName;
import ims.core.vo.PersonNameCollection;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ISelectedPatient;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.pci.vo.ClientAddressVo;
import ims.pci.vo.ClientVo;
import ims.pci.vo.CommunityCareVo;
import ims.pci.vo.GpContractVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		displayHistory(args);
		open();
	}
	
	private void displayHistory(Object[] args) 
	{
		if (args != null && args.length == 1 && args[0] instanceof ISelectedPatient)
		{
			form.getGlobalContext().Core.setPatientShort(null);
			PatientShort ps = new ims.core.vo.PatientShort(((ISelectedPatient) args[0]).getISelectedPatientID(), 0);
			PatientId psId = new PatientId();
			PatientIdCollection psColl = new PatientIdCollection();
			ims.core.vo.lookups.PatIdType type = ims.core.vo.lookups.PatIdType.getNegativeInstance(((ISelectedPatient) args[0]).getISelectedPatientInterfaceIDType());
			if (type != null)
			{
				psId.setType(type);
				psId.setValue(((ISelectedPatient) args[0]).getISelectedPatientInterfaceID());
				if (psId.getValueIsNotNull())
				{
					psColl.add(psId);
					ps.setIdentifiers(psColl);
				}
			}
			form.getGlobalContext().Core.setPatientToBeDisplayed(ps);
		}
	}

	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
		clearScreen();
	}
	
	private void populateFromFilter(PatientFilter voPatFilter) 
	{
		clearScreen();
		
		if (voPatFilter == null)
			return;
		
		form.txtSurname().setValue(voPatFilter.getSurnameIsNotNull() ? voPatFilter.getSurname() : null);
		form.txtForename1().setValue(voPatFilter.getForenameIsNotNull() ? voPatFilter.getForename() : null);
		form.cmbSex().setValue(voPatFilter.getSexIsNotNull() ? voPatFilter.getSex() : null);
	}

	private void newClient(ClientVo client, PatientFilter filter) 
	{
		form.getLocalContext().setCurrentClient(client);
		
		if(filter != null)
		{
			populateFromFilter(filter);	
		}
		form.customControlAddress().setMode(FormMode.EDIT);
		form.setMode(FormMode.EDIT);
	}

	protected void populateScreenFromData(ims.pci.vo.ClientVo client)
	{
		clearScreen();
		if(client == null)
			return;
		
		if(client.getNameIsNotNull())
		{
			this.form.cmbTitle().setValue(client.getName().getTitleIsNotNull() ? client.getName().getTitle() : null);
			this.form.txtSurname().setValue(client.getName().getSurnameIsNotNull() ? client.getName().getSurname() : null);
			this.form.txtForename1().setValue(client.getName().getForenameIsNotNull() ? client.getName().getForename() : null);
		}
		
		if(client.getOtherNamesIsNotNull() && client.getOtherNames().size() > 0)
		{
			this.form.txtOtherSurname().setValue(client.getOtherNames().get(0).getSurnameIsNotNull() ? client.getOtherNames().get(0).getSurname() : null);
		}
		
		this.form.txtGPContact().setValue(client.getGpIsNotNull() ? client.getGp().toString() : null);
		form.getLocalContext().setContactGP(client.getGpIsNotNull() ? client.getGp() : null);
		
		if(client.getCommunityCareIsNotNull())
		{
			this.form.txtGPRegistered().setValue(client.getCommunityCare().getRegisteredGpIsNotNull() ? client.getCommunityCare().getRegisteredGp().getName().toString() : null);
			form.getLocalContext().setRegisteredGP(client.getCommunityCare().getRegisteredGpIsNotNull() ? client.getCommunityCare().getRegisteredGp() : null);
			this.form.dteGPRegisteredDate().setValue(client.getCommunityCare().getGPRegistrationDateIsNotNull() ? client.getCommunityCare().getGPRegistrationDate() : null);
			this.form.cmbUserField1().setValue(client.getCommunityCare().getUserDefinedField1IsNotNull() ? client.getCommunityCare().getUserDefinedField1() : null);
			this.form.cmbUserField2().setValue(client.getCommunityCare().getUserDefinedField2IsNotNull() ? client.getCommunityCare().getUserDefinedField2() : null);
			this.form.cmbUserField3().setValue(client.getCommunityCare().getUserDefinedField3IsNotNull() ? client.getCommunityCare().getUserDefinedField3() : null);
			this.form.cmbUserField4().setValue(client.getCommunityCare().getUserDefinedField4IsNotNull() ? client.getCommunityCare().getUserDefinedField4() : null);
			this.form.cmbUserField5().setValue(client.getCommunityCare().getUserDefinedField5IsNotNull() ? client.getCommunityCare().getUserDefinedField5() : null);
			
			this.form.txtSchool().setValue(client.getCommunityCare().getCurrentSchoolIsNotNull() ? client.getCommunityCare().getCurrentSchool().getSchoolName() + (client.getCommunityCare().getCurrentSchool().getLocationIsNotNull() ? ", " + client.getCommunityCare().getCurrentSchool().getLocation() : ""): null);
			form.getLocalContext().setCurrentSchool(client.getCommunityCare().getCurrentSchool());
		}
		
		//Client addresses
		ClientAddressVo clientAddress = new ClientAddressVo();
		
		clientAddress.setPersonAddress(client.getAddress());
		clientAddress.setCommunityCare(client.getCommunityCare());
		
		this.form.customControlAddress().setValue(clientAddress);
		
		if(client.getCommChannelsIsNotNull() && client.getCommChannels().size() > 0)
		{
			for(int i=0; i<client.getCommChannels().size(); i++)
			{
				if(client.getCommChannels().get(i) != null && client.getCommChannels().get(i).getChannelTypeIsNotNull() && client.getCommChannels().get(i).getChannelType().equals(ChannelType.HOME_PHONE))
				{
					this.form.txtHomePhone().setValue(client.getCommChannels().get(i).getCommValueIsNotNull() ? client.getCommChannels().get(i).getCommValue() : null);
				}
				if(client.getCommChannels().get(i) != null && client.getCommChannels().get(i).getChannelTypeIsNotNull() && client.getCommChannels().get(i).getChannelType().equals(ChannelType.MOBILE))
				{
					this.form.txtMobilePhone().setValue(client.getCommChannels().get(i).getCommValueIsNotNull() ? client.getCommChannels().get(i).getCommValue() : null);
				}
			}
		}
		
		this.form.cmbSex().setValue(client.getSexIsNotNull() ? client.getSex() : null);
		this.form.cmbMaritalStatus().setValue(client.getMaritalStatusIsNotNull() ? client.getMaritalStatus() : null);
		this.form.cmbNationality().setValue(client.getNationalityIsNotNull() ? client.getNationality() : null);
		this.form.dteDOB().setValue(client.getDobIsNotNull() ? client.getDob().toDate() : null);
		this.form.dteDOD().setValue(client.getDodIsNotNull() ? client.getDod() : null);
		this.form.cmbDODSource().setValue(client.getDodSourceIsNotNull() ? client.getDodSource() : null);
		
		if(client.getIdentifiersIsNotNull() && client.getIdentifiers().size() > 0)
		{
			for(int i=0; i<client.getIdentifiers().size(); i++)
			{
				if(client.getIdentifiers().get(i) != null)
				{
					if(client.getIdentifiers().get(i).getTypeIsNotNull())
					{
						if(client.getIdentifiers().get(i).getType().equals(PatIdType.CLIENTID))
						{
							this.form.txtClientID().setValue(client.getIdentifiers().get(i).getValueIsNotNull() ? client.getIdentifiers().get(i).getValue() : null);
						}
						if(client.getIdentifiers().get(i).getType().equals(PatIdType.GMSID))
						{
							this.form.txtGMSID().setValue(client.getIdentifiers().get(i).getValueIsNotNull() ? client.getIdentifiers().get(i).getValue() : null);
						}
						if(client.getIdentifiers().get(i).getType().equals(PatIdType.PPSN))
						{
							this.form.txtPPSN().setValue(client.getIdentifiers().get(i).getValueIsNotNull() ? client.getIdentifiers().get(i).getValue() : null);
							this.form.chkPPSN().setValue(client.getIdentifiers().get(i).getVerifiedIsNotNull() ? client.getIdentifiers().get(i).getVerified():null);  //wdev-14709
						}
					}
				}
			}
		}
		
		this.form.chkSCFlag().setValue(client.getIsConfidentialIsNotNull() ? client.getIsConfidential() : null);
		if(client.getIsConfidentialIsNotNull() && client.getIsConfidential())
		{
			this.form.cmbConfidentialReason().setValue(client.getConfidentialReasonIsNotNull() ? client.getConfidentialReason() : null);
		}
		else
		{
			this.form.cmbConfidentialReason().setValue(null);
		}
		this.form.cmbSourceOfInfo().setValue(client.getSourceOfInformationIsNotNull() ? client.getSourceOfInformation() : null);
	}
	
	private void clearScreen() 
	{
		form.cmbTitle().setValue(null);
		form.txtSurname().setValue(null);
		form.txtForename1().setValue(null);
		form.txtOtherSurname().setValue(null);
		
		form.txtGPContact().setValue(null);
		form.getLocalContext().setContactGP(null);
		form.txtGPRegistered().setValue(null);
		form.getLocalContext().setRegisteredGP(null);
		form.dteGPRegisteredDate().setValue(null);
		
		form.customControlAddress().setValue(null);
		
		form.txtHomePhone().setValue(null);
		form.txtMobilePhone().setValue(null);
		
		form.cmbSex().setValue(null);
		form.cmbMaritalStatus().setValue(null);
		form.cmbNationality().setValue(null);
		form.dteDOB().setValue(null);
		form.dteDOD().setValue(null);
		form.cmbDODSource().setValue(null);
		
		form.txtPPSN().setValue(null);
		form.txtGMSID().setValue(null);
		form.txtClientID().setValue(null);
		form.chkPPSN().setValue(null);
		
		form.cmbUserField1().setValue(null);
		form.cmbUserField2().setValue(null);
		form.cmbUserField3().setValue(null);
		form.cmbUserField4().setValue(null);
		form.cmbUserField5().setValue(null);
		form.chkSCFlag().setValue(null);
		form.cmbSourceOfInfo().setValue(null);
		form.txtSchool().setValue(null);
		form.getLocalContext().setCurrentSchool(null);
	}

	protected ims.pci.vo.ClientVo populateDataFromScreen(ims.pci.vo.ClientVo client)
	{
		if(client == null)
			client = new ims.pci.vo.ClientVo();
		
		if (client.getCommunityCare() == null)
			client.setCommunityCare(new CommunityCareVo());
		
		CommunityCareVo clientCC = client.getCommunityCare();
		
//		if(clientCC == null)
//			clientCC = new CommunityCareVo();

		// client name
		PersonName clientName = new PersonName();
		clientName.setTitle(this.form.cmbTitle().getValue());
		clientName.setSurname(this.form.txtSurname().getValue());
		clientName.setForename(this.form.txtForename1().getValue());
		clientName.setUppers();
		client.setName(clientName);
		
		//client other surname
		if(this.form.txtOtherSurname().getValue() != null && this.form.txtOtherSurname().getValue().trim().length() > 0)
		{
			PersonNameCollection otherSurnameColl = new PersonNameCollection();
			PersonName otherSurname = new PersonName();
			otherSurname.setSurname(this.form.txtOtherSurname().getValue());
			otherSurname.setUppers();
			otherSurnameColl.add(otherSurname);
			client.setOtherNames(otherSurnameColl);
		}
		else
		{
			client.setOtherNames(null);
		}
		
		ClientAddressVo clientAddress = this.form.customControlAddress().getValue();
		if(form.getLocalContext().getCurrentClientIsNotNull() 
				&& !form.getLocalContext().getCurrentClient().getAddressIsNotNull())
		{
			//clientAddress
			if(clientAddress != null)
			{
				if(clientAddress.getCommunityCare() != null)
				{
					if(clientAddress.getCommunityCare().getAddressHistory() != null && clientAddress.getCommunityCare().getAddressHistory().get(0) != null)
					{
						clientAddress.getCommunityCare().getAddressHistory().get(0).setUpdateDate(new DateTime());
						clientAddress.getCommunityCare().getAddressHistory().get(0).setNotificationDate(new Date());
					}
					
					client.setAddress(clientAddress.getPersonAddress());
				}
				//client.setAddresses(clientAddress.getPersonAddress());
				clientCC = clientAddress.getCommunityCare();
			}
		}
		else if(form.getLocalContext().getCurrentClientIsNotNull() 
				&& form.getLocalContext().getCurrentClient().getCommunityCareIsNotNull() && form.getLocalContext().getCurrentClient().getCommunityCare().getAddressHistoryIsNotNull())
		{
			client.setAddress(clientAddress.getPersonAddress());
			clientCC = clientAddress.getCommunityCare();
		}
		
		//home phone from address
		if(client.getAddress() != null)
		{
			client.getAddress().setPhone(this.form.txtHomePhone().getValue());
		}
		
		//GP
		client.setGp(form.getLocalContext().getContactGP());
		clientCC.setRegisteredGp(form.getLocalContext().getRegisteredGP());
		clientCC.setGPRegistrationDate(this.form.dteGPRegisteredDate().getValue());
		
		
		//Communication Channels
		CommChannelVoCollection clientCommChannels = new CommChannelVoCollection();
		
		if(this.form.txtHomePhone().getValue() != null && this.form.txtHomePhone().getValue().trim().length() > 0)
		{
			CommChannelVo clientHomePhone = new CommChannelVo();
			clientHomePhone.setChannelType(ChannelType.HOME_PHONE);
			clientHomePhone.setCommValue(this.form.txtHomePhone().getValue());
			clientCommChannels.add(clientHomePhone);
		}
		if(this.form.txtMobilePhone().getValue() != null && this.form.txtMobilePhone().getValue().trim().length() > 0)
		{
			CommChannelVo clientMobilePhone = new CommChannelVo();
			clientMobilePhone.setChannelType(ChannelType.MOBILE);
			clientMobilePhone.setCommValue(this.form.txtMobilePhone().getValue());
			clientCommChannels.add(clientMobilePhone);
		}
		client.setCommChannels(clientCommChannels);
		
		//client details
		client.setSex(this.form.cmbSex().getValue());
		client.setMaritalStatus(this.form.cmbMaritalStatus().getValue());
		client.setNationality(this.form.cmbNationality().getValue());
		client.setDob(this.form.dteDOB().getValue() != null ? this.form.dteDOB().getValue().toPartialDate() : null);
		client.setDod(this.form.dteDOD().getValue());
		client.setDodSource(this.form.cmbDODSource().getValue());
		
		//client ids
		PatientIdCollection clientIds = new PatientIdCollection();
		if(this.form.txtPPSN().getValue() != null && this.form.txtPPSN().getValue().trim().length() > 0)
		{
			PatientId clientPPSN = new PatientId();
			clientPPSN.setType(PatIdType.PPSN);
			clientPPSN.setValue(this.form.txtPPSN().getValue());
			clientPPSN.setVerified(form.chkPPSN().getValue());      //wdev-14709
			clientIds.add(clientPPSN);
		}
		if(this.form.txtClientID().getValue() != null && this.form.txtClientID().getValue().trim().length() > 0)
		{
			PatientId clientID = new PatientId();
			clientID.setType(PatIdType.CLIENTID);
			clientID.setValue(this.form.txtClientID().getValue());
			clientIds.add(clientID);
		}
		if(this.form.txtGMSID().getValue() != null && this.form.txtGMSID().getValue().trim().length() > 0)
		{
			PatientId clientGMSID = new PatientId();
			clientGMSID.setType(PatIdType.GMSID);
			clientGMSID.setValue(this.form.txtGMSID().getValue());
			clientIds.add(clientGMSID);
		}
		client.setIdentifiers(clientIds);
		
		//client reports settings 
		clientCC.setUserDefinedField1(this.form.cmbUserField1().getValue());
		clientCC.setUserDefinedField2(this.form.cmbUserField2().getValue());
		clientCC.setUserDefinedField3(this.form.cmbUserField3().getValue());
		clientCC.setUserDefinedField4(this.form.cmbUserField4().getValue());
		clientCC.setUserDefinedField5(this.form.cmbUserField5().getValue());
		
		clientCC.setCurrentSchool(form.getLocalContext().getCurrentSchool());
		
		client.setIsConfidential(this.form.chkSCFlag().getValue());
		client.setConfidentialReason(this.form.cmbConfidentialReason().getValue());
		
		client.setSourceOfInformation(this.form.cmbSourceOfInfo().getValue());

		client.setCommunityCare(clientCC);
		
		return client;
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(!isChild())
		{
			if(domain.isParent(form.getLocalContext().getCurrentClient()) && form.getLocalContext().getisDOBChangedIsNotNull() && form.getLocalContext().getisDOBChanged() && form.dteDOB().getValue() != null && new Date().yearDiff(form.dteDOB().getValue()) < 16)
			{
				form.getLocalContext().setidSaveDOBChangedMessageBox(engine.showMessage("This client is a parent and his age is less than 16 years. Do you want to continue?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
			}
			else if(save(null))
				open();
		}
		else
		{
			form.getLocalContext().setidSaveAsChildMessageBox(engine.showMessage("Register this client as a child of " + (form.getLocalContext().getParentClient() != null ? form.getLocalContext().getParentClient().getName().toString() : "") + "?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
		}
	}
	
	private boolean isChild() 
	{
		//verify if this client is a child
		return form.getLocalContext().getAllowSaveChildIsNotNull() && form.getLocalContext().getAllowSaveChild();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		cancelInstance();
	}

	private void cancelInstance() throws PresentationLogicException 
	{
		//WDEV-5300
		form.getGlobalContext().PCI.setIsChildAddressUpdated(null);
		
		if(form.getLocalContext().getAllowSaveChildIsNotNull())
		{
			form.getLocalContext().setAllowSaveChild(null);
		}
		
		if(form.getLocalContext().getCurrentClientIsNotNull())
		{
			if(form.getLocalContext().getCurrentClient().getID_PatientIsNotNull())
			{
				open();
			}
			else if(!form.getLocalContext().getCurrentClient().getID_PatientIsNotNull())
			{
				engine.open(form.getForms().PCI.ClientSearch);
				form.getGlobalContext().Core.setPatientShort(null);
				form.getGlobalContext().Core.setPatientToBeDisplayed(null);
			}
		}
	}
	
	public void clearInstanceControls() 
	{
	}
	
	public void newInstance() throws PresentationLogicException 
	{
		
	}
	
	public boolean save(ClientVo client) throws PresentationLogicException 
	{
		updateControlsState();
		
		ClientVo clientToSave = client;
		
		if(clientToSave == null)
		{
			ClientVo newClient = (ClientVo) form.getLocalContext().getCurrentClient().clone();
			clientToSave = populateDataFromScreen(newClient);
		}
		String [] errors = validateUIRules();	//wdev-14709
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		errors = clientToSave.validateCustomRulesPCI();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			clientToSave = domain.saveClient(clientToSave);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage("Data has been modified by another user - screen will be refreshed");
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		form.getLocalContext().setCurrentClient(clientToSave);
		form.getGlobalContext().Core.setPatientShort(clientToSave);
		form.getGlobalContext().Core.setPatientToBeDisplayed(clientToSave);
		
		form.getLocalContext().setisDOBChanged(null);
		
		return true;
	}
	
	public String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.txtSurname().getValue() == null || (form.txtSurname().getValue() != null && form.txtSurname().getValue().trim().length() == 0))
		{
			uiErrors.add("Surname is mandatory.");					
		}
		if(form.txtForename1().getValue() == null || (form.txtForename1().getValue() != null && form.txtForename1().getValue().trim().length() == 0))
		{
			uiErrors.add("Forename is mandatory.");					
		}
		if(form.cmbSex().getValue() == null)
		{
			uiErrors.add("Sex is mandatory.");					
		}
		if(form.dteDOB().getValue() == null)
		{
			uiErrors.add("DOB is mandatory.");					
		}
		if(form.cmbSourceOfInfo().getValue() == null)
		{
			uiErrors.add("Source of Info is mandatory.");					
		}
		if(form.dteDOB().getValue() != null && form.dteDOB().getValue().isGreaterThan(new Date()))
		{
			uiErrors.add("DOB can not be set in the future.");
		}
		if(form.dteDOD().getValue() != null && form.dteDOD().getValue().isGreaterThan(new Date()))
		{
			uiErrors.add("DOD can not be set in the future.");
		}
		if(form.dteDOB().getValue() != null && form.dteDOD().getValue() != null && form.dteDOB().getValue().isGreaterThan(form.dteDOD().getValue()))
		{
			uiErrors.add("DOD can not be set before DOB.");
		}
		if(form.chkSCFlag().getValue() && form.cmbConfidentialReason().getValue() == null)
		{
			uiErrors.add("Confidential Reason is mandatory");
		}
		if(form.txtGPRegistered().getValue() != null)
		{
			if(form.dteGPRegisteredDate().getValue() == null)		//wdev-14709
			{
				uiErrors.add("Registered Date is mandatory");
			}
		}
		
		String[] voValidate = new String[uiErrors.size()];
		uiErrors.toArray(voValidate);
		
		String [] addressErrors = form.customControlAddress().validate();
		String [] results = new String[voValidate.length + addressErrors.length];
		
		if(voValidate != null)
		{
			for(int i=0; i< voValidate.length; i++)
			{
				results[i] = voValidate[i];
			}
		}
		if(addressErrors != null)
		{
			int next = (voValidate != null && voValidate.length > 0) ? voValidate.length : 0;
			for(int i=0; i<addressErrors.length; i++)
			{
				results[next + i] = addressErrors[i];
			}
		}
		
		return results;
	}
	
	public void updateControlsState() 
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.cmbDODSource().setEnabled(form.dteDOD().getValue() != null);
			form.imbGPRegistered().setEnabled(form.getLocalContext().getCurrentClientIsNotNull() && form.getLocalContext().getCurrentClient().getID_PatientIsNotNull());
			form.dteGPRegisteredDate().setEnabled(form.getLocalContext().getRegisteredGPIsNotNull() && form.txtGMSID().getValue() == null);
			form.cmbConfidentialReason().setEnabled(form.chkSCFlag().getValue());
			
			form.imbClearContactGP().setEnabled(form.getLocalContext().getContactGPIsNotNull());
			form.imbClearRegisteredGp().setEnabled(form.getLocalContext().getRegisteredGPIsNotNull());
			form.imbClearSchool().setEnabled(form.getLocalContext().getCurrentSchoolIsNotNull());
		}
		if(form.getMode().equals(FormMode.VIEW))
		{
			//you can add a child from demographics only if you have right
			form.btnCloneRecord().setEnabled(form.getLocalContext().getCurrentClientIsNotNull() && form.getLocalContext().getCurrentClient().getID_PatientIsNotNull() && engine.hasRight(AppRight.CAN_REGISTER_CHILD_FROM_CLIENT_RECORD));
		}
		form.btnUpdateAddress().setEnabled(form.getLocalContext().getCurrentClientIsNotNull() && form.getLocalContext().getCurrentClient().getCommunityCareIsNotNull() && form.getLocalContext().getCurrentClient().getCommunityCare().getAddressHistoryIsNotNull() && form.getLocalContext().getCurrentClient().getCommunityCare().getAddressHistory().size() > 0);
		form.customControlAddress().setEnabled(form.getLocalContext().getCurrentClientIsNotNull() && !form.getLocalContext().getCurrentClient().getAddressIsNotNull() && !form.getLocalContext().getCurrentClient().getCommunityCareIsNotNull());
	}
	
	public void updateInstance() 
	{
		
	}
	
	public void open() throws PresentationLogicException 
	{
		PatientShort clientToDisplay =form.getGlobalContext().Core.getPatientToBeDisplayed();
		if(clientToDisplay == null)
			clientToDisplay = form.getGlobalContext().Core.getPatientShort();
		
		if(clientToDisplay != null && clientToDisplay.getID_PatientIsNotNull())
		{
			ClientVo clientFull;
			try
			{
				clientFull = domain.getClientFull(clientToDisplay);
			}
			catch (StaleObjectException e)
			{
				throw new FormOpenException("Failed to retrieve Client due to StaleObjectException");
			}
			
			// for record in error
			if (clientFull == null)
			{
				form.getGlobalContext().Core.setPatientShort(null);
				form.getGlobalContext().Core.setPatientToBeDisplayed(null);
				engine.clearPatientSelectionHistory();
				engine.setPatientInfo(null);
				engine.showMessage("Data has been changed, Please perform another Client Search");
				engine.open(form.getForms().PCI.ClientSearch);
				return;
			}
			
			engine.addPatientSelectionToHistory(clientFull);
			form.getLocalContext().setCurrentClient(clientFull);
			form.getGlobalContext().Core.setPatientShort(clientFull);
			
			populateScreenFromData(clientFull);
			form.setMode(FormMode.VIEW);
			form.customControlAddress().setMode(FormMode.VIEW);
		}
		if(clientToDisplay != null && !clientToDisplay.getID_PatientIsNotNull()) // new client
		{
			PatientFilter voPatFilter = form.getGlobalContext().Core.getPatientFilter();
			newClient(new ClientVo(), voPatFilter);
		}
		
		
		// WDEV-5300
		//
		// WDEV-5534
		// Also check to see if client has children, moved to on form dialog closed()
//		if(form.getLocalContext().getCurrentClient().getClientParentIsNotNull() && form.getGlobalContext().PCI.getIsChildAddressUpdatedIsNotNull() && form.getGlobalContext().PCI.getIsChildAddressUpdated())
//		{
//			form.getLocalContext().setidUpdateFamilyAddress(engine.showMessage("Warning! This client has linked family records. Use Family Records form to change Family Address.\nDo you wish to continue to change this client address only?", "", MessageButtons.YESNO, MessageIcon.WARNING));
//		}
//		form.getGlobalContext().PCI.setIsChildAddressUpdated(null);
		
		updateControlsState();
	}
	
	@Override
	protected void onBtnCloneRecordClick() throws PresentationLogicException 
	{
		if(form.getLocalContext().getCurrentClientIsNotNull() 
				&& form.getLocalContext().getCurrentClient().getDobIsNotNull()
					&& form.getLocalContext().getCurrentClient().calculateAge() < 16)
		{
			form.getLocalContext().setidChildMessageBox(engine.showMessage("WARNING! The current client is < 16 years old. Do you wish to continue to create a child record?", "", MessageButtons.YESNO, MessageIcon.WARNING));
		}
		else
		{
			registerChild();
		}
	}
	
	private void registerChild() 
	{
		form.getLocalContext().setParentClient((ClientVo)((ClientVo) form.getLocalContext().getCurrentClient()).clone());
		
		populateScreenWithParentDate(form.getLocalContext().getParentClient());
		
		ClientVo child = new ClientVo();
		form.getLocalContext().setAllowSaveChild(true);
		newClient(child, null);
	}

	private void populateScreenWithParentDate(ClientVo parentClient) 
	{
		clearScreen();
		
		if(parentClient == null)
			return;
		
		form.txtSurname().setValue(parentClient.getNameIsNotNull() ? parentClient.getName().getSurname() : null);
		
		PersonAddress childAddress = parentClient.getAddressIsNotNull() ? parentClient.getAddress() : null;
		
		ClientAddressVo childAddressVo = new ClientAddressVo();
		childAddressVo.setPersonAddress(childAddress);
		
		// WDEV-5481 - The clone() function creates a copy of the object, but also copies the id, thus the new VO is pointing
		// to the same BO as the original BO - overwriting the data (which is not what we want to do)
		// We can fix this by seting the id of the new Vo to null
		CommunityCareVo communityCare = (CommunityCareVo) (parentClient.getCommunityCare().clone());
		communityCare.setID_CommunityCareDetail(null);
		childAddressVo.setCommunityCare(communityCare);
		
		form.customControlAddress().setIsChildAddress(true);
		form.customControlAddress().setValue(childAddressVo);
		
		form.getLocalContext().setContactGP(parentClient.getGpIsNotNull() ? parentClient.getGp() : null);
		form.txtGPContact().setValue(parentClient.getGpIsNotNull() ? parentClient.getGp().getName().toString() : null);
		
		//copy parent mobile phone
		if(parentClient.getCommChannelsIsNotNull() && parentClient.getCommChannels().size() > 0)
		{
			for(int i=0; i<parentClient.getCommChannels().size(); i++)
			{
				if(parentClient.getCommChannels().get(i) != null && parentClient.getCommChannels().get(i).getChannelTypeIsNotNull() && parentClient.getCommChannels().get(i).getChannelType().equals(ChannelType.HOME_PHONE))
				{
					form.txtHomePhone().setValue(parentClient.getCommChannels().get(i).getCommValueIsNotNull() ? parentClient.getCommChannels().get(i).getCommValue() : null);
				}
				if(parentClient.getCommChannels().get(i) != null && parentClient.getCommChannels().get(i).getChannelTypeIsNotNull() && parentClient.getCommChannels().get(i).getChannelType().equals(ChannelType.MOBILE))
				{
					this.form.txtMobilePhone().setValue(parentClient.getCommChannels().get(i).getCommValueIsNotNull() ? parentClient.getCommChannels().get(i).getCommValue() : null);
				}
			}
		}
		
		form.cmbNationality().setValue(parentClient.getNationalityIsNotNull() ? parentClient.getNationality() : null);
		
		form.cmbSourceOfInfo().setValue(parentClient.getSourceOfInformationIsNotNull() ? parentClient.getSourceOfInformation() : null);
		form.chkSCFlag().setValue(parentClient.getIsConfidentialIsNotNull() ? parentClient.getIsConfidential() : null);
		if(parentClient.getIsConfidentialIsNotNull() && parentClient.getIsConfidential())
		{
			form.cmbConfidentialReason().setValue(parentClient.getConfidentialReasonIsNotNull() ? parentClient.getConfidentialReason() : null);
		}
		else
		{
			form.cmbConfidentialReason().setValue(null);
		}
	}

	@Override
	protected void onBtnUpdateAddressClick() throws PresentationLogicException 
	{
		if(form.getLocalContext().getCurrentClientIsNotNull() 
				&& form.getLocalContext().getCurrentClient().getCommunityCareIsNotNull() 
					&& form.getLocalContext().getCurrentClient().getCommunityCare().getAddressHistoryIsNotNull()
						&& form.getLocalContext().getCurrentClient().getCommunityCare().getAddressHistory().size() > 0)
		{
			ClientAddressVo addresses = new ClientAddressVo();
			addresses.setPersonAddress(form.getLocalContext().getCurrentClient().getAddress());
			addresses.setCommunityCare(form.getLocalContext().getCurrentClient().getCommunityCare());
			form.getGlobalContext().PCI.setClientAddresses(addresses);
			
			if(form.getMode().equals(FormMode.VIEW))
			{
				form.getGlobalContext().PCI.AddressHistory.setAllowSave(true);
			}
			else
			{
				form.getGlobalContext().PCI.AddressHistory.setAllowSave(false);
			}
			engine.open(form.getForms().PCI.AddressHistoryDialog);
		}
	}
	
	@Override
	protected void onBtnViewFamilyLinksClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().PCI.FamilyRecordsDialog);
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}

	@Override
	protected void onDteDODValueChanged() throws PresentationLogicException 
	{
		if(form.getLocalContext().getCurrentClient() == null || !form.getLocalContext().getCurrentClient().getID_PatientIsNotNull())
			return;
			
		if(form.dteDOD().getValue() != null)
		{
			Boolean flag = domain.allowRecordDateOfDeath(form.getLocalContext().getCurrentClient());
			
			if(!flag)
			{
				form.dteDOD().setValue(null);
				engine.showErrors(new String[] {"Data of Death cannot be recorded against a client unless all vaccinations have been terminated , cancelled or completed."});
			}
		}
		
		updateControlsState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().PCI.AddressHistoryDialog) && result.equals(DialogResult.CANCEL))
		{
			if(form.getGlobalContext().PCI.getClientAddressesIsNotNull() 
					&& form.getGlobalContext().PCI.getClientAddresses().getPersonAddressIsNotNull())
			{
				form.getLocalContext().getCurrentClient().setAddress(form.getGlobalContext().PCI.getClientAddresses().getPersonAddress());
				
				form.getLocalContext().getCurrentClient().setCommunityCare(populateCommunityCare(form.getLocalContext().getCurrentClient().getCommunityCare(), form.getGlobalContext().PCI.getClientAddresses().getCommunityCare()));
				form.getLocalContext().setFamilyAddress(form.getGlobalContext().PCI.getClientAddresses());
				
				if(form.getGlobalContext().PCI.AddressHistory.getAllowSave())
				{
					if(save(form.getLocalContext().getCurrentClient()))
					{
						open();
//						//WDEV-5300
//						/*if(form.getLocalContext().getCurrentClient().getClientParentIsNotNull() && form.getGlobalContext().PCI.getIsChildAddressUpdatedIsNotNull() && form.getGlobalContext().PCI.getIsChildAddressUpdated())
//						{
//							form.getLocalContext().setidUpdateFamilyAddress(engine.showMessage("Update address of linked family members?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
//						}
//						form.getGlobalContext().PCI.setIsChildAddressUpdated(null);*/
					}
					form.getGlobalContext().PCI.AddressHistory.setAllowSave(false);
				}
				else
				{
					form.customControlAddress().setValue(form.getGlobalContext().PCI.getClientAddresses());
				}
			}
		}
		if(formName.equals(form.getForms().Core.GpSelectionOnly) && result.equals(DialogResult.OK))
		{
			if(form.getLocalContext().getOpenDialogForGpContactIsNotNull() && form.getLocalContext().getOpenDialogForGpContact())
			{
				if(form.getGlobalContext().Core.getGPDetails() != null && form.getGlobalContext().Core.getGPDetails().getNameIsNotNull())
				{
					form.getLocalContext().setContactGP(form.getGlobalContext().Core.getGPDetails());
					form.txtGPContact().setValue(form.getGlobalContext().Core.getGPDetails().getName().toString());
				}
			}
			else if(form.getLocalContext().getOpenDialogForGPRegisteredIsNotNull() && form.getLocalContext().getOpenDialogForGPRegistered())
			{
				if(form.getGlobalContext().Core.getGPDetails() != null && form.getGlobalContext().Core.getGPDetails().getNameIsNotNull())
				{
					form.getLocalContext().setRegisteredGP(form.getGlobalContext().Core.getGPDetails());
					form.txtGPRegistered().setValue(form.getGlobalContext().Core.getGPDetails().getName().toString());
					
					// WDEV-5483 - setting the registration date to be the same as DOB date - needs further testing when the issue WDEV-5493 is fixed
					// as it needs to see what can occur when save is hit with no value
					form.dteGPRegisteredDate().setValue(form.dteDOB().getValue());
					
					verifyGpCotract(form.getLocalContext().getRegisteredGP(), form.dteGPRegisteredDate().getValue());
				}
			}
		}
		if(formName.equals(form.getForms().PCI.FamilyRecordsDialog))
		{
			open();
		}
		if(formName.equals(form.getForms().PCI.SchoolQueryDialog) && result.equals(DialogResult.OK))
		{
			if(form.getGlobalContext().PCI.getSchoolIsNotNull())
			{
				form.getLocalContext().setCurrentSchool(form.getGlobalContext().PCI.getSchool());
				form.txtSchool().setValue(form.getLocalContext().getCurrentSchool().getSchoolName() + (form.getLocalContext().getCurrentSchool().getLocationIsNotNull() ? ", " + form.getLocalContext().getCurrentSchool().getLocation() : ""));
			}
		}
		
		updateControlsState();
	}

	private CommunityCareVo populateCommunityCare(CommunityCareVo clientCommunityCare, CommunityCareVo communityCareWithNewAddress) 
	{
		if(clientCommunityCare == null)
			clientCommunityCare = new CommunityCareVo();
		
		clientCommunityCare.setLho(communityCareWithNewAddress.getLho());
		clientCommunityCare.setCca(communityCareWithNewAddress.getCca());
		clientCommunityCare.setSector(communityCareWithNewAddress.getSector());
		clientCommunityCare.setPhnDistrict(communityCareWithNewAddress.getPhnDistrict());
		clientCommunityCare.setDED(communityCareWithNewAddress.getDED());
		clientCommunityCare.setAddressHistory(communityCareWithNewAddress.getAddressHistory());
		
		return clientCommunityCare;
	}

	public boolean save() throws PresentationLogicException 
	{
		return false;
	}

	@Override
	protected void onImbGPContractClick() throws PresentationLogicException 
	{
		searchGPContact();	
	}

	private void searchGPContact() 
	{
		form.getLocalContext().setOpenDialogForGpContact(true);
		form.getLocalContext().setOpenDialogForGPRegistered(false);
		engine.open(form.getForms().Core.GpSelectionOnly);
	}

	@Override
	protected void onImbGPRegisteredClick() throws PresentationLogicException 
	{
		if(form.txtGMSID().getValue() != null)
		{
			engine.showMessage("GMSID is set.");
			updateControlsState();
		}
		else if(form.txtGMSID().getValue() == null)
		{
			searchGPRegistered();
		}
	}

	private void searchGPRegistered() 
	{
		if(form.getLocalContext().getContactGPIsNotNull())
		{
			form.getLocalContext().setidMessageBox(engine.showMessage("Do you want to set the registered GP to be the same as the contact GP?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
		}
		else
		{
			form.getLocalContext().setOpenDialogForGpContact(false);
			form.getLocalContext().setOpenDialogForGPRegistered(true);
			engine.open(form.getForms().Core.GpSelectionOnly);
		}
	}
	
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		//message box from registered gp
		if(form.getLocalContext().getidMessageBoxIsNotNull() && form.getLocalContext().getidMessageBox() == messageBoxId)
		{
			if(result.equals(DialogResult.YES))
			{
				form.getLocalContext().setRegisteredGP(form.getLocalContext().getContactGP());
				form.txtGPRegistered().setValue(form.getLocalContext().getRegisteredGP().getName().toString());

				// Default registered date to DOB (WDEV - 5483)
				form.dteGPRegisteredDate().setValue(form.dteDOB().getValue());
				
				verifyGpCotract(form.getLocalContext().getRegisteredGP(), form.dteGPRegisteredDate().getValue());
			}
			else if(result.equals(DialogResult.NO))
			{
				form.getLocalContext().setOpenDialogForGpContact(false);
				form.getLocalContext().setOpenDialogForGPRegistered(true);
				engine.open(form.getForms().Core.GpSelectionOnly);
			}
		}
		//message box from register child
		if(form.getLocalContext().getidChildMessageBoxIsNotNull() && form.getLocalContext().getidChildMessageBox() == messageBoxId)
		{
			if(result.equals(DialogResult.YES))
			{
				registerChild();
			}
			else if(result.equals(DialogResult.NO))
			{
				cancelInstance();
			}
		}
		//message box from save as a child
		if(form.getLocalContext().getidSaveAsChildMessageBoxIsNotNull() && form.getLocalContext().getidSaveAsChildMessageBox() == messageBoxId)
		{
			if(result.equals(DialogResult.YES))
			{
				if(form.getLocalContext().getParentClientIsNotNull() && form.getLocalContext().getCurrentClientIsNotNull())
				{
					form.getLocalContext().getCurrentClient().setClientParent(form.getLocalContext().getParentClient());
					form.getLocalContext().getCurrentClient().setIsChild(true);
				}
				if(save(null))
				{
					//save as child once
					form.getLocalContext().setAllowSaveChild(null);
					
					form.getLocalContext().setidBirthDetailsMesageBox(engine.showMessage("Do you wish to register birth details for " + (form.getLocalContext().getCurrentClientIsNotNull() ? form.getLocalContext().getCurrentClient().getName().toString() : "") + "?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
				}
			}
			if(result.equals(DialogResult.NO))
			{
				if(save(null))
				{
					//save as child once
					form.getLocalContext().setAllowSaveChild(null);
					
					open();
				}
			}	
		}
		//message box from birth details
		if(form.getLocalContext().getidBirthDetailsMesageBoxIsNotNull() && form.getLocalContext().getidBirthDetailsMesageBox() == messageBoxId)
		{
			if(result.equals(DialogResult.YES))
			{
				form.getGlobalContext().PCI.setBirthDetailsMode(FormMode.EDIT);
				engine.open(form.getForms().PCI.BirthDetails);
			}
			else if(result.equals(DialogResult.NO))
			{
				open();
			}
		}
		if(form.getLocalContext().getidSaveDOBChangedMessageBoxIsNotNull() && form.getLocalContext().getidSaveDOBChangedMessageBox() == messageBoxId)
		{
			//save a parent with DOB < 16 years
			if(result.equals(DialogResult.YES))
			{
				if(save(null))
				{
					open();
				}
			}
			else if(result.equals(DialogResult.NO))
			{
				return;
			}
		}
		// WDEV-5534
		// Warning when updating an address to a family member
		// Will no longer modify the address of the family members - uncomment the code if the address must be updated
//		if(form.getLocalContext().getidUpdateFamilyAddressIsNotNull() && form.getLocalContext().getidUpdateFamilyAddress() == messageBoxId)
//		{
//			if(result.equals(DialogResult.YES))
//			{
//				if(save(form.getLocalContext().getCurrentClient()))
//				{
//					open();
////					//WDEV-5300
////					/*if(form.getLocalContext().getCurrentClient().getClientParentIsNotNull() && form.getGlobalContext().PCI.getIsChildAddressUpdatedIsNotNull() && form.getGlobalContext().PCI.getIsChildAddressUpdated())
////					{
////						form.getLocalContext().setidUpdateFamilyAddress(engine.showMessage("Update address of linked family members?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
////					}
////					form.getGlobalContext().PCI.setIsChildAddressUpdated(null);*/
//				}
////				Integer numberOfPersonUpdated = 0;
////				try 
////				{
////					numberOfPersonUpdated = domain.updateFamilyAddress(form.getLocalContext().getCurrentClient(), form.getLocalContext().getFamilyAddress());
////				} 
////				catch (StaleObjectException e) 
////				{
////					engine.showMessage("Data has been modified by another user - screen will be refreshed");
////					open();
////				} 
////				catch (UniqueKeyViolationException e) 
////				{
////					engine.showMessage(e.getMessage());
////				}
////				
////				if(numberOfPersonUpdated > 0)
////				{
////					engine.showMessage("Address updated for " + numberOfPersonUpdated + " clients", "",MessageButtons.OK,MessageIcon.INFORMATION);
////				}
//			}
//			else if(result.equals(DialogResult.NO))
//			{
//				open();
//				return;
//			}
//		}
		updateControlsState();
	}

	@Override
	protected void onTxtGMSIDValueChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onDteGPRegisteredDateValueChanged() throws PresentationLogicException 
	{
		verifyGpCotract(form.getLocalContext().getRegisteredGP(),form.dteGPRegisteredDate().getValue());
	}

	private void verifyGpCotract(GpLiteWithNameVo registeredGP, Date dateRegistered) 
	{
		if(registeredGP == null || dateRegistered == null)
			return;
		
		GpContractVo gpContract = domain.getGPContract(registeredGP, dateRegistered);
		
		if(gpContract == null)
		{
			engine.showMessage("The registered GP does not have a valid contract on " + dateRegistered);
		}
	}

	@Override
	protected void onDteDOBValueChanged() throws PresentationLogicException 
	{
		if(form.dteDOB().getValue() != null && form.getLocalContext().getCurrentClientIsNotNull() && form.getLocalContext().getCurrentClient().getDobIsNotNull())
		{
			engine.showMessage("WARNING: You are changing client dob. Please Note - if this client was previously scheduled for vaccines, the vaccine schedule date(s) will not be updated.", "", MessageButtons.OK, MessageIcon.WARNING);
		}
		form.getLocalContext().setisDOBChanged(true);
	}

	@Override
	protected void onChkSCFlagValueChanged() throws PresentationLogicException 
	{
		form.cmbConfidentialReason().setValue(null);
		updateControlsState();
	}

	@Override
	protected void onImbClearContactGPClick() throws PresentationLogicException 
	{
		form.getLocalContext().setContactGP(null);
		form.txtGPContact().setValue(null);
		updateControlsState();
	}

	@Override
	protected void onImbClearRegisteredGpClick() throws PresentationLogicException 
	{
		if(form.txtGMSID().getValue() == null)
		{
			form.getLocalContext().setRegisteredGP(null);
			form.txtGPRegistered().setValue(null);
			form.dteGPRegisteredDate().setValue(null);
		}
		else if(form.txtGMSID().getValue() != null)
		{
			engine.showMessage("GMSID is set.");
		}
		
		updateControlsState();
	}

	@Override
	protected void onImbSearchSchoolClick() throws PresentationLogicException 
	{
		ClientAddressVo clientAddress = this.form.customControlAddress().getValue();
		
		if(clientAddress != null && clientAddress.getCommunityCareIsNotNull())
		{
			form.getGlobalContext().PCI.setCurrentSector(clientAddress.getCommunityCare().getSector());
		}
		
		engine.open(form.getForms().PCI.SchoolQueryDialog);
	}

	@Override
	protected void onImbClearSchoolClick() throws PresentationLogicException 
	{
		form.getLocalContext().setCurrentSchool(null);
		form.txtSchool().setValue(null);
		updateControlsState();
	}
}
