//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.62 build 3040.26452)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.forms.clientaddress;

import java.util.ArrayList;
import java.util.List;

import ims.core.vo.DEDLiteVo;
import ims.core.vo.DEDLiteVoCollection;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocSiteLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.OrgLiteVo;
import ims.core.vo.OrgLiteVoCollection;
import ims.core.vo.PersonAddress;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.pci.vo.ClientAddressVo;
import ims.pci.vo.CommunityCareVo;
import ims.pci.vo.PciAddressHistoryVo;
import ims.pci.vo.PciAddressHistoryVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
	}
	
	private void initialise() throws FormOpenException 
	{
		populateLHO();
		updateControlsState();
	}

	private void populateLHO() throws FormOpenException  
	{
		OrgLiteVoCollection orgColl = null;
		
		orgColl = domain.listLHOs();
		
		if(orgColl == null || (orgColl != null && orgColl.size() == 0))
			throw new FormOpenException("Please set up LHO before open form.");
		
		form.cmbLHO().clear();
		for (int i = 0; i < orgColl.size(); i++)
		{
			OrgLiteVo vo = orgColl.get(i);
			form.cmbLHO().newRow(vo, vo.getName());
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	public ims.pci.vo.ClientAddressVo getValue()
	{
		ClientAddressVo clientAddress = populateDataFromScreen();
		
		return clientAddress;
	}

	private ClientAddressVo populateDataFromScreen() 
	{
		ClientAddressVo clientAddress = new ClientAddressVo();
		
		PciAddressHistoryVoCollection personAddressHistoryCollection;
		
		if(form.getLocalContext().getAddressHistoryIsNotNull())
		{
			personAddressHistoryCollection = (PciAddressHistoryVoCollection) form.getLocalContext().getAddressHistory().clone();
		}
		else
		{
			personAddressHistoryCollection = new PciAddressHistoryVoCollection();
		}
		
		PersonAddress personAddress = new PersonAddress();
		personAddress.setLine1(form.txtAddressLine1().getValue());
		personAddress.setLine2(form.txtAddressLine2().getValue());
		personAddress.setLine3(form.txtAddressLine3().getValue());
		personAddress.setLine4(form.txtAddressLine4().getValue());
		personAddress.setPostCode(form.txtPostCode().getValue());
		personAddress.setCounty(form.cmbCounty().getValue());
		
		CommunityCareVo communityCare = form.getLocalContext().getCommunityCare();
		
		if(communityCare == null)
			communityCare = new CommunityCareVo();
		
		communityCare.setCca(form.cmbCCA().getValue());
		communityCare.setLho(form.cmbLHO().getValue());
		communityCare.setSector(form.cmbSector().getValue());
		communityCare.setPhnDistrict(form.cmbPHN().getValue());
		communityCare.setDED(form.qmbDED().getValue());
		
		PciAddressHistoryVo newAddressHistoty = createAddressHistoryVo(personAddress, communityCare);
		
		if(personAddressHistoryCollection.size() > 0)
		{
			//verify if only date notified changed
			if(hasAddressChanged(newAddressHistoty, personAddressHistoryCollection.get(0)))
			{
				personAddressHistoryCollection.add(0, newAddressHistoty);
			}
		}
		else 
		{
			personAddressHistoryCollection.add(0, newAddressHistoty);
		}
			
		clientAddress.setPersonAddress(personAddress);
		
		communityCare.setAddressHistory(personAddressHistoryCollection);
		clientAddress.setCommunityCare(communityCare);
		
		return clientAddress;
	}

	private PciAddressHistoryVo createAddressHistoryVo(PersonAddress personAddress, CommunityCareVo communityCare) 
	{
		if(personAddress == null && communityCare == null)
			return null;
		
		PciAddressHistoryVo newAddress = new PciAddressHistoryVo();
		
		newAddress.setLine1(personAddress.getLine1());
		newAddress.setLine2(personAddress.getLine2());
		newAddress.setLine3(personAddress.getLine3());
		newAddress.setLine4(personAddress.getLine4());
		newAddress.setLine5(personAddress.getLine5());
		newAddress.setPostCode(personAddress.getPostCode());
		newAddress.setCounty(personAddress.getCounty());
		newAddress.setLho(communityCare.getLho());
		newAddress.setCca(communityCare.getCca());
		newAddress.setSector(communityCare.getSector());
		newAddress.setPhnDistrict(communityCare.getPhnDistrict());
		newAddress.setDED(communityCare.getDED());
		
		return newAddress;
	}

	private Boolean hasAddressChanged(PciAddressHistoryVo newAddress, PciAddressHistoryVo historyAddress)
	{
		if ((newAddress.getLine1() != null && historyAddress.getLine1() != null) && !newAddress.getLine1().equals(historyAddress.getLine1())) return true;
		if ((newAddress.getLine1() != null && historyAddress.getLine1() == null) || (newAddress.getLine1() == null && historyAddress.getLine1() != null)) return true;

		if ((newAddress.getLine2() != null && historyAddress.getLine2() != null) && !newAddress.getLine2().equals(historyAddress.getLine2())) return true;
		if ((newAddress.getLine2() != null && historyAddress.getLine2() == null) || (newAddress.getLine2() == null && historyAddress.getLine2() != null)) return true;

		if ((newAddress.getLine3() != null && historyAddress.getLine3() != null) && !newAddress.getLine3().equals(historyAddress.getLine3())) return true;
		if ((newAddress.getLine3() != null && historyAddress.getLine3() == null) || (newAddress.getLine3() == null && historyAddress.getLine3() != null)) return true;

		if ((newAddress.getLine4() != null && historyAddress.getLine4() != null) && !newAddress.getLine4().equals(historyAddress.getLine4())) return true;
		if ((newAddress.getLine4() != null && historyAddress.getLine4() == null) || (newAddress.getLine4() == null && historyAddress.getLine4() != null)) return true;

		if ((newAddress.getLine5() != null && historyAddress.getLine5() != null) && !newAddress.getLine5().equals(historyAddress.getLine5())) return true;
		if ((newAddress.getLine5() != null && historyAddress.getLine5() == null) || (newAddress.getLine5() == null && historyAddress.getLine5() != null)) return true;

		if ((newAddress.getPostCode() != null && historyAddress.getPostCode() != null) && !newAddress.getPostCode().equals(historyAddress.getPostCode())) return true;
		if ((newAddress.getPostCode() != null && historyAddress.getPostCode() == null) || (newAddress.getPostCode() == null && historyAddress.getPostCode() != null)) return true;

		if ((newAddress.getCounty() != null && historyAddress.getCounty() != null) && !newAddress.getCounty().equals(historyAddress.getCounty())) return true;
		if ((newAddress.getCounty() != null && historyAddress.getCounty() == null) || (newAddress.getCounty()== null && historyAddress.getCounty() != null)) return true;
		
		//community care
		if ((newAddress.getLho() != null && historyAddress.getLho() != null) && !newAddress.getLho().equals(historyAddress.getLho())) return true;
		if ((newAddress.getLho() != null && historyAddress.getLho() == null) || (newAddress.getLho()== null && historyAddress.getLho() != null)) return true;
		
		if ((newAddress.getCca() != null && historyAddress.getCca() != null) && !newAddress.getCca().equals(historyAddress.getCca())) return true;
		if ((newAddress.getCca() != null && historyAddress.getCca() == null) || (newAddress.getCca()== null && historyAddress.getCca() != null)) return true;
		
		if ((newAddress.getSector() != null && historyAddress.getSector() != null) && !newAddress.getSector().equals(historyAddress.getSector())) return true;
		if ((newAddress.getSector() != null && historyAddress.getSector() == null) || (newAddress.getSector()== null && historyAddress.getSector() != null)) return true;
		
		if ((newAddress.getPhnDistrict() != null && historyAddress.getPhnDistrict() != null) && !newAddress.getPhnDistrict().equals(historyAddress.getPhnDistrict())) return true;
		if ((newAddress.getPhnDistrict() != null && historyAddress.getPhnDistrict() == null) || (newAddress.getPhnDistrict()== null && historyAddress.getPhnDistrict() != null)) return true;
		
		if ((newAddress.getDED() != null && historyAddress.getDED() != null) && !newAddress.getDED().equals(historyAddress.getDED())) return true;
		if ((newAddress.getDED() != null && historyAddress.getDED() == null) || (newAddress.getDED()== null && historyAddress.getDED() != null)) return true;

		return false;
	}
	
	public ims.pci.vo.ClientAddressVo setValue(ims.pci.vo.ClientAddressVo clientAddress)
	{
		populateScreenFromData(clientAddress);
		updateControlsState();
		return null;
	}

	private void populateScreenFromData(ClientAddressVo clientAddress) 
	{
		clearScreen();
		if(clientAddress == null)
		{
			return;
		}
		if(clientAddress.getPersonAddressIsNotNull())
		{
			if(!form.getLocalContext().getisChildAddressIsNotNull() || (form.getLocalContext().getisChildAddressIsNotNull() && !form.getLocalContext().getisChildAddress()))
			{
				form.getLocalContext().setAddressHistory(clientAddress.getCommunityCareIsNotNull() ? clientAddress.getCommunityCare().getAddressHistory() : null);
			}
			else
			{
				form.getLocalContext().setisChildAddress(null);
				form.getLocalContext().setAddressHistory(null);
			}
			
			if(clientAddress.getPersonAddress() != null)
			{
				form.txtAddressLine1().setValue(clientAddress.getPersonAddress().getLine1IsNotNull() ? clientAddress.getPersonAddress().getLine1() : null);
				form.txtAddressLine2().setValue(clientAddress.getPersonAddress().getLine2IsNotNull() ? clientAddress.getPersonAddress().getLine2() : null);
				form.txtAddressLine3().setValue(clientAddress.getPersonAddress().getLine3IsNotNull() ? clientAddress.getPersonAddress().getLine3() : null);
				form.txtAddressLine4().setValue(clientAddress.getPersonAddress().getLine4IsNotNull() ? clientAddress.getPersonAddress().getLine4() : null);
				form.txtPostCode().setValue(clientAddress.getPersonAddress().getPostCodeIsNotNull() ? clientAddress.getPersonAddress().getPostCode() : null);
				form.cmbCounty().setValue(clientAddress.getPersonAddress().getCountyIsNotNull() ? clientAddress.getPersonAddress().getCounty() : null);
			}
		}
		if(clientAddress.getCommunityCareIsNotNull())
		{
			form.getLocalContext().setCommunityCare(clientAddress.getCommunityCare());
			
			if(clientAddress.getCommunityCare().getLhoIsNotNull())
			{
				try 
				{
					populateLHO();
				} 
				catch (FormOpenException e) 
				{
					
				}
				form.cmbLHO().setValue(clientAddress.getCommunityCare().getLho());
				
				if(clientAddress.getCommunityCare().getCcaIsNotNull())
				{
					addCCAToCombo(clientAddress.getCommunityCare().getLho());
					form.cmbCCA().setValue(clientAddress.getCommunityCare().getCca());
					
					if(clientAddress.getCommunityCare().getSectorIsNotNull())
					{
						addSectorToCombo(clientAddress.getCommunityCare().getCca());
						form.cmbSector().setValue(clientAddress.getCommunityCare().getSector());
						
						if(clientAddress.getCommunityCare().getPhnDistrictIsNotNull())
						{
							addDistrictToCombo(clientAddress.getCommunityCare().getSector());
							form.cmbPHN().setValue(clientAddress.getCommunityCare().getPhnDistrict());
						}
					}
				}
			}

			if(clientAddress.getCommunityCare().getDEDIsNotNull())
			{
				form.qmbDED().newRow(clientAddress.getCommunityCare().getDED(), clientAddress.getCommunityCare().getDED().getName());
				form.qmbDED().setValue(clientAddress.getCommunityCare().getDED());
			}
		}
	}

	private void clearScreen() 
	{
		form.txtAddressLine1().setValue(null);
		form.txtAddressLine2().setValue(null);
		form.txtAddressLine3().setValue(null);
		form.txtAddressLine4().setValue(null);
		form.txtPostCode().setValue(null);
		form.cmbCounty().setValue(null);
		form.cmbPHN().setValue(null);
		form.cmbCCA().setValue(null);
		form.cmbSector().setValue(null);
		form.qmbDED().setValue(null);
		form.cmbLHO().setValue(null);
	}

	public String[] validate() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.txtAddressLine1().getValue() == null || (form.txtAddressLine1().getValue() != null && form.txtAddressLine1().getValue().trim().length() == 0))
		{
			uiErrors.add("Address Line 1 is mandatory."); //WDEV-18168
		}
		
		if(form.cmbCounty().getValue() == null)
		{
			uiErrors.add("County is mandatory.");
		}
		
		if(form.cmbLHO().getValue() == null)
		{
			uiErrors.add("LHO is mandatory.");
		}
		
		if(form.cmbCCA().getValue() == null)
		{
			uiErrors.add("CCA is mandatory.");		
		}
		
		if(form.cmbSector().getValue() == null)
		{
			uiErrors.add("Sector is mandatory.");
		}
		
		if(form.cmbPHN().getValue() == null)
		{
			uiErrors.add("PHN District is mandatory.");
		}
		
		String[] result = new String[uiErrors.size()];
		uiErrors.toArray(result);
		return result;
	}

	public void setEnabled(Boolean value) 
	{
		form.txtAddressLine1().setEnabled(value);
		form.txtAddressLine2().setEnabled(value);
		form.txtAddressLine3().setEnabled(value);
		form.txtAddressLine4().setEnabled(value);
		form.txtPostCode().setEnabled(value);
		form.cmbCounty().setEnabled(value);
		form.btnTownland().setEnabled(value);
		form.cmbLHO().setEnabled(value);
		form.qmbDED().setEnabled(value);
		updateControlsState();
	}

	@Override
	protected void onCmbCCAValueChanged() throws PresentationLogicException 
	{
		form.cmbSector().clear();
		form.cmbPHN().clear();
		
		if(form.cmbCCA().getValue() instanceof LocSiteLiteVo)
		{
			addSectorToCombo(form.cmbCCA().getValue());
		}
		
		updateControlsState();
	}

	private void addSectorToCombo(LocSiteLiteVo locSiteLiteVo) 
	{
		LocationLiteVoCollection sectors = domain.listSectors(locSiteLiteVo);
		
		if(sectors == null)
			return;
		
		form.cmbSector().clear();
		for(int i=0; i<sectors.size(); i++)
		{
			if(sectors.get(i) != null)
			{
				form.cmbSector().newRow(sectors.get(i), sectors.get(i).getName());
			}
		}
	}

	private void updateControlsState() 
	{
		form.cmbCCA().setEnabled(form.getMode().equals(FormMode.EDIT) && form.cmbLHO().getValue() instanceof OrgLiteVo);
		form.cmbSector().setEnabled(form.getMode().equals(FormMode.EDIT) && form.cmbCCA().getValue() instanceof LocSiteLiteVo);
		form.cmbPHN().setEnabled(form.getMode().equals(FormMode.EDIT) && form.cmbSector().getValue() instanceof LocationLiteVo);
	}

	@Override
	protected void onCmbSectorValueChanged() throws PresentationLogicException 
	{
		form.cmbPHN().clear();
		
		if(form.cmbSector().getValue() instanceof LocationLiteVo)
		{
			addDistrictToCombo(form.cmbSector().getValue());
		}
		
		updateControlsState();
	}

	private void addDistrictToCombo(LocationLiteVo locationLiteVo) 
	{
		form.cmbPHN().clear();
		LocationLiteVoCollection districts = domain.listPHNDistricts(locationLiteVo);
		
		if(districts == null)
			return;
		
		form.cmbPHN().clear();
		for(int i=0; i<districts.size(); i++)
		{
			if(districts.get(i) != null)
			{
				form.cmbPHN().newRow(districts.get(i), districts.get(i).getName());
			}
		}
	}

	@Override
	protected void onBtnTownlandClick() throws PresentationLogicException 
	{
		form.getGlobalContext().PCI.setCounty(form.cmbCounty().getValue());
		engine.open(form.getForms().PCI.TownlandQueryDialog);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().PCI.TownlandQueryDialog) && result.equals(DialogResult.OK))
		{
			if(form.getGlobalContext().PCI.getDEDIsNotNull())
			{
				form.qmbDED().newRow(form.getGlobalContext().PCI.getDED(), form.getGlobalContext().PCI.getDED().getName());
				form.qmbDED().setValue(form.getGlobalContext().PCI.getDED());
			}
		}
	}

	@Override
	protected void onCmbLHOValueChanged() throws PresentationLogicException 
	{
		form.cmbCCA().clear();
		form.cmbSector().clear();
		form.cmbPHN().clear();
		
		if(form.cmbLHO().getValue() instanceof OrgLiteVo)
		{
			addCCAToCombo(form.cmbLHO().getValue());
		}
		
		updateControlsState();
	}

	private void addCCAToCombo(OrgLiteVo orgLiteVo) 
	{
		LocSiteLiteVoCollection coll = null;
			
		coll = domain.listCCAs(orgLiteVo); 
			
		if(coll == null)
			return;
			
		form.cmbCCA().clear();
			
		for (int i = 0; i < coll.size(); i++)
		{
			LocSiteLiteVo vo = coll.get(i);
			if(vo != null)
			{
				form.cmbCCA().newRow(vo, vo.getName());
			}
		}
	}

	public void setIsChildAddress(Boolean flag) 
	{
		form.getLocalContext().setisChildAddress(flag);
	}

	@Override
	protected void onQmbDEDTextSubmited(String value) throws PresentationLogicException 
	{
		listDED(value);
	}

	private void listDED(String value) 
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter at least 3 characters for search criteria");
			return;
		}

		DEDLiteVoCollection coll = null;
		
		coll = domain.listDEDs(value, form.cmbCounty().getValue()); 
		
		form.qmbDED().setValue(null);
		form.qmbDED().clear();
		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				DEDLiteVo vo = coll.get(i);
				form.qmbDED().newRow(vo, vo.getName());
			}
		}

		if (coll.size() > 0)
		{
			form.qmbDED().showOpened();
		}
	}
}
