//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.62 build 3009.29450)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.forms.birthdetails;

import java.util.ArrayList;
import java.util.List;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.pci.vo.ClientBirthDetailsVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}	
	
	private void initialize()
	{
		ClientBirthDetailsVo voClientBirth = new ClientBirthDetailsVo();
		voClientBirth.setClient(form.getGlobalContext().Core.getPatientShort());
		form.getLocalContext().setSelectedRecord(domain.getClientBirthDetails(voClientBirth ));
		
		if(!form.getLocalContext().getSelectedRecordIsNotNull() || (form.getLocalContext().getSelectedRecordIsNotNull() && !form.getLocalContext().getSelectedRecord().getID_ClientBirthDetailsIsNotNull()))
		{
			form.getLocalContext().setCanSchedule(true);
		}
		else if(form.getLocalContext().getSelectedRecordIsNotNull() && form.getLocalContext().getSelectedRecord().getID_ClientBirthDetailsIsNotNull())
		{
			form.getLocalContext().setCanSchedule(false);
		}
		
		if(form.getGlobalContext().Core.getPatientShort() != null)
		{
			form.getLocalContext().setClientDOB(form.getGlobalContext().Core.getPatientShort());
		}
		
		form.getLocalContext().setDialogOnNew(false);
		form.getLocalContext().setDialogOnSave(false);
	}
	
	private void open()
	{
		clearControls();
		//WDEV-14663
		if(domain.getAllClientBirthDetails(form.getGlobalContext().Core.getPatientShort()).size()>0)
		{
			form.getLocalContext().setSelectedRecord(domain.getAllClientBirthDetails(form.getGlobalContext().Core.getPatientShort()).get(0));
		}
		populateScreenFromData(form.getLocalContext().getSelectedRecord());
		enableButtons();
		form.setMode(FormMode.VIEW);
		
		//verify if this form is open from demographics
		if(form.getGlobalContext().PCI.getBirthDetailsModeIsNotNull() && form.getGlobalContext().PCI.getBirthDetailsMode().equals(FormMode.EDIT))
		{
			form.getGlobalContext().PCI.setBirthDetailsMode(null);
			newInstance();
		}
	}

	private void populateScreenFromData(ClientBirthDetailsVo voCBD)
	{
		if (voCBD == null)
			return;
		
		form.cmbPlaceOfBirth().setValue(voCBD.getPlaceOfBirth());
		form.txtTimeOfBirth().setValue(voCBD.getTimeOfBirth());
		if(voCBD.getWeightAtBirth() != null)
			form.intWeightAtBirth().setValue(voCBD.getWeightAtBirth().intValue());
		
		form.dteDateNotified().setValue(voCBD.getDateNotified());
		form.intDurationOfPregnancy().setValue(voCBD.getDurationOfPregnancy());
		
		form.cmbDeliveryMethod().setValue(voCBD.getDeliveryMethod());
		form.ansEpidural().setValue(voCBD.getEpidural());
		form.ansEpisiotomy().setValue(voCBD.getEpisiotomy());

		form.intOBOrder().setValue(voCBD.getOrderOfBirthOrder());
		form.intOBNr().setValue(voCBD.getOrderOfBirthNr());
		
		form.intApgar1().setValue(voCBD.getApgar1());
		form.intApgar5().setValue(voCBD.getApgar5());
		form.intApgar10().setValue(voCBD.getApgar10());

		form.intPBStillborn().setValue(voCBD.getStillborn());
		form.intPBLive().setValue(voCBD.getLive());
		form.intPBMiscarriages().setValue(voCBD.getMiscarriages());

		form.cmbMaritalStatus().setValue(voCBD.getMaritalStatusAtBirth());
		
		form.ansPKUTest().setValue(voCBD.getPKUTest());
		
		if(voCBD.getStillBornIndicator() != null)
		{
			form.ansStillborn().setValue(voCBD.getStillBornIndicator() ? YesNo.YES : YesNo.NO);
		}
		
		form.ansBreastFeeding().setValue(voCBD.getBreastFeeding());
		form.cmbBFDischarge().setValue(voCBD.getBreastFeedingAtDischarge());
		form.dtimDischarge().setValue(voCBD.getDischargeDateTime());
		form.cmbBFPHNVisit().setValue(voCBD.getBreastFeedingAtPHN());
		form.dtimBFPHNVisit().setValue(voCBD.getFirstPHNVisitDateTime());
		form.cmbBFThreeMonths().setValue(voCBD.getBreastFeedingAt3months());
		
		form.txtCCCSID().setValue(voCBD.getClientIDOfMother());
		form.txtClientNotes().setValue(voCBD.getClientNotes());
	}

	private void clearControls()
	{
		form.cmbPlaceOfBirth().setValue(null);
		form.txtTimeOfBirth().setValue(null);
		form.intWeightAtBirth().setValue(null);
		
		form.dteDateNotified().setValue(null);
		form.intDurationOfPregnancy().setValue(null);
		
		form.cmbDeliveryMethod().setValue(null);
		form.ansEpidural().setValue(null);
		form.ansEpisiotomy().setValue(null);

		form.intOBOrder().setValue(null);
		form.intOBNr().setValue(null);
		
		form.intApgar1().setValue(null);
		form.intApgar5().setValue(null);
		form.intApgar10().setValue(null);

		form.intPBStillborn().setValue(null);
		form.intPBLive().setValue(null);
		form.intPBMiscarriages().setValue(null);

		form.cmbMaritalStatus().setValue(null);
		
		form.ansPKUTest().setValue(null);
		form.ansStillborn().setValue(null);
		form.ansBreastFeeding().setValue(null);
		form.cmbBFDischarge().setValue(null);
		form.dtimDischarge().setValue(null);
		form.cmbBFPHNVisit().setValue(null);
		form.dtimBFPHNVisit().setValue(null);
		form.cmbBFThreeMonths().setValue(null);
		
		form.txtCCCSID().setValue(null);
		form.txtClientNotes().setValue(null);
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	private void updateInstance()
	{
		initialize();
		populateScreenFromData(form.getLocalContext().getSelectedRecord());
		form.setMode(FormMode.EDIT);
	}
	
	private void enableButtons()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(form.getLocalContext().getSelectedRecordIsNotNull() 
						&& form.getLocalContext().getSelectedRecord().getID_ClientBirthDetailsIsNotNull() ? true : false);
			
			form.btnNew().setVisible(true);
			form.btnNew().setEnabled(form.getLocalContext().getSelectedRecord() == null);
		}
	}

	private void newInstance()
	{
		if(form.getLocalContext().getClientDOBIsNotNull() && form.getLocalContext().getClientDOB().getDob() != null)
		{
			//verify if client age is > 12 months
			Integer age = form.getLocalContext().getClientDOB().calculateAge();
			if(age != null && age > 0)
			{
				form.getGlobalContext().Core.setYesNoDialogMessage("Warning! Client is older than one year. Do you wish to continue?");
				form.getGlobalContext().Core.setHideCancelButton(true);
				form.getLocalContext().setDialogOnNew(true);
				engine.open(form.getForms().Core.YesNoDialog);
			}
			
			//setDefaultValues();
			form.getLocalContext().setSelectedRecord(null);
			form.setMode(FormMode.EDIT);
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			if(form.getLocalContext().getCanScheduleIsNotNull() && form.getLocalContext().getCanSchedule())
			{
				form.getGlobalContext().Core.setYesNoDialogMessage("Do you wish to setup a default PCI schedule for this child?");
				form.getGlobalContext().Core.setHideCancelButton(true);
				form.getLocalContext().setDialogOnSave(true);
				engine.open(form.getForms().Core.YesNoDialog);
			}
			open();
		}	
	}
	
	private boolean save()
	{
		ClientBirthDetailsVo voCBD = form.getLocalContext().getSelectedRecord();
		if (voCBD == null)
		{
			voCBD = new ClientBirthDetailsVo();
			form.getLocalContext().setSelectedRecord(voCBD);
		}

		voCBD = populateDataFromScreen();

		voCBD.setClient(form.getGlobalContext().Core.getPatientShort());
		
		String[] errors = voCBD.validate(validateUIRules());
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			form.getLocalContext().setSelectedRecord(domain.saveClientBirthDetails(voCBD));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}
	
	public String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.dteDateNotified().getValue() != null && form.dteDateNotified().getValue().isGreaterThan(new Date()))
		{
			uiErrors.add("Date Notified can not be set in the future.");
		}
		
		if(form.dtimDischarge().getValue() != null && form.getGlobalContext().Core.getPatientShort().getDob() != null && form.dtimDischarge().getValue().getDate().isLessThan(form.getGlobalContext().Core.getPatientShort().getDob().toDate()))
		{
			uiErrors.add("Date/Time of Discharge can not be set before DOB.");
		}
		
		if(form.dtimBFPHNVisit().getValue() != null && form.getGlobalContext().Core.getPatientShort().getDob() != null && form.dtimBFPHNVisit().getValue().getDate().isLessThan(form.getGlobalContext().Core.getPatientShort().getDob().toDate()))
		{
			uiErrors.add("Date/Time of 1st PHN Visit can not be set before DOB.");
		}
		
		String[] voValidate = new String[uiErrors.size()];
		uiErrors.toArray(voValidate);
		
		return voValidate;
	}

	private ClientBirthDetailsVo populateDataFromScreen()
	{		
		ClientBirthDetailsVo voCBD = form.getLocalContext().getSelectedRecord();
		
		voCBD.setPlaceOfBirth(form.cmbPlaceOfBirth().getValue());
		voCBD.setTimeOfBirth(form.txtTimeOfBirth().getValue());
		
		voCBD.setWeightAtBirth(form.intWeightAtBirth().getValue());
		
		voCBD.setDateNotified(form.dteDateNotified().getValue());
		voCBD.setDurationOfPregnancy(form.intDurationOfPregnancy().getValue());
		
		voCBD.setDeliveryMethod(form.cmbDeliveryMethod().getValue());
		voCBD.setEpidural(form.ansEpidural().getValue());
		voCBD.setEpisiotomy(form.ansEpisiotomy().getValue());

		voCBD.setOrderOfBirthOrder(form.intOBOrder().getValue());
		voCBD.setOrderOfBirthNr(form.intOBNr().getValue());
		
		voCBD.setApgar1(form.intApgar1().getValue());
		voCBD.setApgar5(form.intApgar5().getValue());
		voCBD.setApgar10(form.intApgar10().getValue());

		voCBD.setStillborn(form.intPBStillborn().getValue());
		voCBD.setLive(form.intPBLive().getValue());
		voCBD.setMiscarriages(form.intPBMiscarriages().getValue());

		voCBD.setMaritalStatusAtBirth(form.cmbMaritalStatus().getValue());
		
		voCBD.setPKUTest(form.ansPKUTest().getValue());
		
		if(form.ansStillborn().getValue() != null)
		{
			voCBD.setStillBornIndicator(form.ansStillborn().getValue().equals(YesNo.YES) ? true : false);
		}
		else
		{
			voCBD.setStillBornIndicator(null);
		}
		
		voCBD.setBreastFeeding(form.ansBreastFeeding().getValue());
		voCBD.setBreastFeedingAtDischarge(form.cmbBFDischarge().getValue());
		voCBD.setDischargeDateTime(form.dtimDischarge().getValue());
		voCBD.setBreastFeedingAtPHN(form.cmbBFPHNVisit().getValue());
		voCBD.setFirstPHNVisitDateTime(form.dtimBFPHNVisit().getValue());
		voCBD.setBreastFeedingAt3months(form.cmbBFThreeMonths().getValue());
		
		voCBD.setClientIDOfMother(form.txtCCCSID().getValue());
		voCBD.setClientNotes(form.txtClientNotes().getValue());
		
		return voCBD;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Core.YesNoDialog))
		{
			if(result.equals(DialogResult.NO))
			{
				if(form.getLocalContext().getDialogOnNewIsNotNull() && form.getLocalContext().getDialogOnNew())
				{
					form.getLocalContext().setDialogOnNew(false);
					open();
				}
				else if(form.getLocalContext().getDialogOnSaveIsNotNull() && form.getLocalContext().getDialogOnSave())
				{
					form.getLocalContext().setDialogOnSave(false);
					
				}
			}
			else if(result.equals(DialogResult.YES))
			{
				if(form.getLocalContext().getDialogOnNewIsNotNull() && form.getLocalContext().getDialogOnNew())
				{
					form.getLocalContext().setDialogOnNew(false);
					form.getLocalContext().setSelectedRecord(null);
					form.setMode(FormMode.EDIT);
				}
				else if(form.getLocalContext().getDialogOnSaveIsNotNull() && form.getLocalContext().getDialogOnSave())
				{
					form.getLocalContext().setDialogOnSave(false);
					
					//save default schedule
					if(form.getLocalContext().getSelectedRecordIsNotNull())
					{
						try 
						{
							domain.addDefaultSchedule(form.getLocalContext().getSelectedRecord().getClient(), (MemberOfStaffLiteVo) domain.getMosUser(), new DateTime());
						} 
						catch (DomainInterfaceException e) 
						{
							engine.showMessage(e.getMessage());
						} 
						catch (StaleObjectException e) 
						{
							engine.showMessage(e.getMessage());
							//open();
						} 
						catch (ForeignKeyViolationException e) 
						{
							engine.showMessage(e.getMessage());
						} 
						catch (UniqueKeyViolationException e) 
						{
							engine.showMessage(e.getMessage());
						}
						
						engine.open(form.getForms().PCI.RecordingScheduling);
					}
				}
			}
		}
	}

	@Override
	protected void onFormModeChanged() 
	{
		enableButtons();
	}
}
