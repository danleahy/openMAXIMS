//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by George Cristian Josan using IMS Development Environment (version 1.62 build 3040.26452)
//Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.forms.dedadmin;

import java.util.ArrayList;

import ims.core.vo.DEDFullVo;
import ims.core.vo.DEDLiteVo;
import ims.core.vo.DEDLiteVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.pci.forms.dedadmin.GenForm.grdDEDListRow;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	REGION - EVENTS
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		form.ctnDetails().custTaxonomyMap().setComponentMode(FormMode.EDIT.equals(form.getMode()) ? FormMode.EDIT : FormMode.VIEW);

		updateControlsState();
	}


	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		searchFilterDED(false);			// WDEV-10350
		updateControlsState();
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		clearInstanceControls();
		updateControlsState();
	}


	@Override
	protected void onGrdDEDListSelectionChanged() throws PresentationLogicException
	{
		DEDFullVo valueDED = domain.getDED(form.grdDEDList().getValue());

		populateScreenFromData(valueDED);
		form.getLocalContext().setselectedDED(valueDED);
		updateControlsState();
	}

	@Override
	protected void onGrdDEDListSelectionCleared() throws PresentationLogicException
	{
		populateScreenFromData(null);
		form.getLocalContext().setselectedDED(null);
		updateControlsState();
	}


	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PCINamespace.DEDAdmin.NEW:
			{
				newInstance();
				break;
			}

			case GenForm.ContextMenus.PCINamespace.DEDAdmin.EDIT:
			{
				updateInstance();
				break;
			}
		}

		updateControlsState();
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	REGION - FORM LOGIC
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	@Override
	public void initialize() throws FormOpenException
	{
		form.chkSearchActiveStatus().setValue(Boolean.TRUE);

		form.ctnDetails().custTaxonomyMap().initialize();
		form.getLocalContext().setsearchOnOpen(false);

		super.initialize();
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.getLocalContext().getsearchOnOpen()))
		{
			searchFilterDED(true);				// WDEV-10350
		}

		form.grdDEDList().setValue(form.getLocalContext().getselectedDED());
		populateScreenFromData(domain.getDED(form.grdDEDList().getValue()));

		form.setMode(FormMode.VIEW);
	}

	public void clearInstanceControls()
	{
		// Clear search filter
		form.txtSearchDEDName().setValue(null);
		form.cmbSearchCounty().setValue(null);
		form.chkSearchActiveStatus().setValue(null);

		// Clear grid
		clearDEDGrid();
		// Clear the selected DED from local context as well
		form.getLocalContext().setselectedDED(null);
		form.getLocalContext().setsearchOnOpen(Boolean.FALSE);

		updateControlsState();
	}

	private void clearDEDGrid()
	{
		form.grdDEDList().getRows().clear();

		// Clear details
		clearDetailsContainer();
	}

	private void clearDetailsContainer()
	{
		form.ctnDetails().txtDEDName().setValue(null);
		form.ctnDetails().cmbCounty().setValue(null);
		form.ctnDetails().chkActiveStatus().setValue(null);

		form.ctnDetails().custTaxonomyMap().clear();
	}

	public void updateControlsState()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(form.grdDEDList().getSelectedRow() != null); //WDEV-14739
			form.btnEdit().setEnabled(form.grdDEDList().getSelectedRow() != null);
		}

		form.ctnDetails().setCollapsed(form.getMode().equals(FormMode.EDIT) ? false : form.grdDEDList().getSelectedRow() == null);

		updateContextMenuState();
	}

	public void updateContextMenuState()
	{
		form.getContextMenus().PCI.getDEDAdminNEWItem().setVisible(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().PCI.getDEDAdminEDITItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdDEDList().getSelectedRow() != null);
	}


	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		populateScreenFromData(null);
		form.getLocalContext().setselectedDED(null);

		form.ctnDetails().chkActiveStatus().setValue(Boolean.TRUE);
		form.setMode(FormMode.EDIT);
	}

	public void updateInstance()
	{
		DEDFullVo value = domain.getDED(form.grdDEDList().getValue());

		populateScreenFromData(value);
		form.getLocalContext().setselectedDED(value);

		form.setMode(FormMode.EDIT);
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		DEDFullVo valueDED = populateDataFromScreen(form.getLocalContext().getselectedDED());

		//WDEV-14739 
		if ( ! validateUIRulesBeforeVo())
		{
			return false;
		}
		
		// Validate the VO
		String[] errors = form.ctnDetails().custTaxonomyMap().validate(); 
		errors = valueDED.validate(errors);
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}


		try
		{
			valueDED = domain.saveDED(valueDED);
			form.getLocalContext().setselectedDED(valueDED);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		return true;
	}

	//WDEV-14739
	private Boolean validateUIRulesBeforeVo()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();
		
			if (form.ctnDetails().txtDEDName().getValue() == null)
			{
				listOfErrors.add("DED Name is mandatory.");
			}
			if (form.ctnDetails().cmbCounty().getValue() == null)
			{
				listOfErrors.add("County is mandatory.");
			}
		

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		if (result != null && result.length > 0)
		{
			engine.showErrors(result);
			return false;
		}

		return true;
	}

	/**
	 * WDEV-10350
	 * Function used to search for DED records and list results to screen
	 * @param fromOpen - <b>true</b> indicates the function is called from open() and will not display "No results found" message
	 */
	private void searchFilterDED(boolean fromOpen)
	{
		DEDLiteVoCollection results = domain.listDED(form.txtSearchDEDName().getValue(), form.cmbSearchCounty().getValue(), form.chkSearchActiveStatus().getValue());
		
		if (!fromOpen && (results == null || results.size() == 0))
		{
			engine.showMessage("No results found to match search criteria.");
		}
		
		populateDEDGrid(results);
		form.getLocalContext().setsearchOnOpen(true);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	REGION - POPULATE DED GRID
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private void populateDEDGrid(DEDLiteVoCollection collectionDED)
	{
		clearDEDGrid();

		if (collectionDED == null)
			return;

		for (int i = 0 ; i < collectionDED.size(); i++)
		{
			DEDLiteVo liteVo = collectionDED.get(i);
			if (liteVo == null && !isEmpty(liteVo))
				continue;

			populateDEDGridRow(form.grdDEDList().getRows().newRow(), liteVo);
		}
	}

	private void populateDEDGridRow(grdDEDListRow row, DEDLiteVo value)
	{
		row.setColDEDName(value.getName());
		row.setColCounty(value.getCounty() == null ? null : value.getCounty().getText());
		row.setColActiveStatus(Boolean.TRUE.equals(value.getIsActive()) ? form.getImages().Core.GreenSquare : form.getImages().Core.RedSqaure);

		row.setValue(value);
	}

	private boolean isEmpty(DEDLiteVo filterVo)
	{
		if (filterVo == null)
			return true;

		if (filterVo.getName() != null && filterVo.getName().length() > 0)
			return false;

		if (filterVo.getCounty() != null)
			return false;

		return true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	REGION - DATA BINDING (IS CUSTOM DATA BINDING !!!)
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	protected void populateScreenFromData(DEDFullVo value)
	{
		clearDetailsContainer();

		if(value == null)
			return;

		form.ctnDetails().chkActiveStatus().setValue(value.getIsActive());
		form.ctnDetails().cmbCounty().setValue(value.getCounty());
		form.ctnDetails().txtDEDName().setValue(value.getName());

		form.ctnDetails().custTaxonomyMap().setValue(value.getCodeMappings());
	}

	protected DEDFullVo populateDataFromScreen(DEDFullVo value)
	{
		if(value == null)
			value = new ims.core.vo.DEDFullVo();

		value.setIsActive(form.ctnDetails().chkActiveStatus().getValue());
		value.setCounty(form.ctnDetails().cmbCounty().getValue());
		value.setName(form.ctnDetails().txtDEDName().getValue());

		value.setUpperName(value.getName() == null ? null : value.getName().toUpperCase());

		value.setCodeMappings(form.ctnDetails().custTaxonomyMap().getValueNoWarnings());

		return value;
	}

	protected DEDFullVo populateDataFromScreen()
	{
		return populateDataFromScreen(new DEDFullVo());
	}
}
