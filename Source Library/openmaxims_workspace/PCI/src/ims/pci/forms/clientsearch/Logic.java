//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.62 build 3023.13950)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.forms.clientsearch;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocSiteLiteVoCollection;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.pci.vo.ClientSearchVo;
import ims.pci.vo.ClientSearchVoCollection;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	/**
	 * WDEV-12523
	 * Custom comparator used for sorting by "Age"
	 */
	private class AgeComparator implements Comparator<ClientSearchVo>
	{
		private int sortOrder;

		public AgeComparator(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				sortOrder = 1;
			else
				sortOrder = -1;
		}

		public int compare(ClientSearchVo object1, ClientSearchVo object2)
		{
			// Calculate client age
			Integer age1 = object1.calculateAge();
			Integer age2 = object2.calculateAge();
			
			// If neither object has age then take no action
			if (age1 == null && age2 == null)
				return 0;
			
			// Consider null values to be last, regardless of the sort order
			if (age1 == null && age2 != null)
				return 1;
			
			if (age1 != null && age2 == null)
				return -1;
			
			// Return default comparison for Integer
			return age1.compareTo(age2) * sortOrder;
		}
	}

	private static final long serialVersionUID = 1L;

	private static final Integer COL_SURNAME = new Integer(1);
	private static final Integer COL_FORENAME = new Integer(2);
	private static final Integer COL_IDENTIFIER = new Integer(3);
	private static final Integer COL_SEX = new Integer(4);
	private static final Integer COL_AGE = new Integer(5);
	private static final Integer COL_DOB = new Integer(6);
	private static final Integer COL_ADDRESS = new Integer(7);
	private static final Integer COL_OPTIONAL = new Integer(8);

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
	}

	private void initialise()
	{
		// WDEV-12523 - Set 'Age' & 'DOB' sorting order as ASCENDING by default
		form.getLocalContext().setAgeSortOrder(SortOrder.ASCENDING);
		form.getLocalContext().setDOBSortOrder(SortOrder.ASCENDING);
		
		form.getLocalContext().setallowNewClient(null);
		setDefaults();
		loadCCAs();
		formatClientResultsGrid();
		updateControlsState();
		setClientFilterControls();
	}

	private void loadCCAs()
	{
		LocSiteLiteVoCollection voColl = domain.listCCAs();
		form.cmbCCA().clear();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
			form.cmbCCA().newRow(voColl.get(i), voColl.get(i).getName());
	}

	private void formatClientResultsGrid()
	{
		boolean bDisplayOptionalCol = ConfigFlag.UI.DISPLAY_OPTIONAL_COLUMN_PATIENT_SEARCH.getValue();
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());

		form.dyngrdClient().clear();

		form.dyngrdClient().setSelectable(true);

		DynamicGridColumn column = form.dyngrdClient().getColumns().newColumn("Surname");
		column.setIdentifier(COL_SURNAME);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdClient().getColumns().newColumn("Forename");
		column.setIdentifier(COL_FORENAME);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdClient().getColumns().newColumn(dispIdType.getText());
		column.setIdentifier(COL_IDENTIFIER);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdClient().getColumns().newColumn("Sex");
		column.setIdentifier(COL_SEX);
		column.setWidth(50);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		// WDEV-12523 - Changed SortMode value to SortMode.MANUAL
		column = form.dyngrdClient().getColumns().newColumn("Age");
		column.setIdentifier(COL_AGE);
		column.setWidth(35);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdClient().getColumns().newColumn("DOB");
		column.setIdentifier(COL_DOB);
		column.setWidth(70);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);

		column = form.dyngrdClient().getColumns().newColumn("Address");
		column.setIdentifier(COL_ADDRESS);
		if (bDisplayOptionalCol)
			column.setWidth(275);
		else
			column.setWidth(-1);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		if (bDisplayOptionalCol)
		{
			String strOptional = "Ward"; // Default Column Name
			if (ConfigFlag.UI.PAT_SEARCH_OPTIONAL_COL_TYPE.getValue().equalsIgnoreCase("CONTACT"))
			{
				strOptional = "Contact No.";
			}
			column = form.dyngrdClient().getColumns().newColumn(strOptional);
			column.setIdentifier(COL_OPTIONAL);
			column.setWidth(-1);
		}
	}

	private void setDefaults()
	{
		form.pdtDOB().setFocus();

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		form.cmbPatientID().setValue(dispIdType);
		form.txtIdentifier().setValue("");
	}

	private void updateControlsState()
	{
		// If this is local demographics, the new client button is enabled, otherwise it is disabled
		form.imbNewClient().setVisible(ConfigFlag.DOM.LOCAL_PATIENT_REGISTRATION.getValue() && !isParentSearch());
		form.imbNewClient().setEnabled(ConfigFlag.DOM.LOCAL_PATIENT_REGISTRATION.getValue() && !isParentSearch() && form.getLocalContext().getallowNewClientIsNotNull() && form.getLocalContext().getallowNewClient());

		form.txtAddress().setVisible(ConfigFlag.UI.DISPLAY_ADDRESS_AND_COUNTY_PATIENT_SEARCH.getValue());
		form.cmbCounty().setVisible(ConfigFlag.UI.DISPLAY_ADDRESS_AND_COUNTY_PATIENT_SEARCH.getValue());
		form.lblAddress().setVisible(ConfigFlag.UI.DISPLAY_ADDRESS_AND_COUNTY_PATIENT_SEARCH.getValue());
		form.lblCounty().setVisible(ConfigFlag.UI.DISPLAY_ADDRESS_AND_COUNTY_PATIENT_SEARCH.getValue());
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		clearSearch();
		updateControlsState();
	}

	// @Override
	// protected void onBtnClearClick() throws PresentationLogicException
	// {
	// clearSearch();
	// updateControlsState();
	// }

	private void clearSearch()
	{
		form.dyngrdClient().getRows().clear();
		clearSearchFields(true);
		form.cmbPatientID().setValue(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
		form.txtIdentifier().setValue(null);
		form.getGlobalContext().Core.setPatientFilter(null);

		// Clear the selected patient information in the Engine 
		if (!isParentSearch()) //WDEV-14321 if the form is not ParentSearch
		{
			form.getGlobalContext().Core.clearPatientShort();
			form.getGlobalContext().Core.setPatientToBeDisplayed(null);
			engine.setPatientInfo("Please enter Patient ID or Surname and/or Forename");
		}

		form.lblTotal().setValue("Total : " + form.dyngrdClient().getRows().size());
		form.pdtDOB().setFocus();
	}

	private void clearSearchFields(boolean bClearIdentifier)
	{
		form.txtSurname().setValue("");
		form.txtForename().setValue("");
		form.pdtDOB().setValue(null);
		form.cmbSex().setValue(null);

		form.txtAddress().setValue("");
		form.cmbCounty().setValue(null);

		if (bClearIdentifier)
			form.txtIdentifier().setValue("");
	}

	@Override
	protected void onImbNewClientClick() throws PresentationLogicException
	{
		newClient();
	}

	// @Override
	// protected void onBtnNewClick() throws PresentationLogicException
	// {
	// newClient();
	// }

	private void newClient()
	{
		form.getGlobalContext().Core.clearPatientShort();

		setClientFilterDetails();

		PatientShort voPatShort = new PatientShort();
		form.getGlobalContext().Core.setPatientToBeDisplayed(voPatShort);

		engine.open(ConfigFlag.UI.DEMOGRAPHICS_FORM.getValue());
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		searchClient();
		displayNumberOfRows();
		form.pdtDOB().setFocus();
		updateControlsState();
	}

	// @Override
	// protected void onBtnSearchClick() throws PresentationLogicException
	// {
	// searchClient();
	// displayNumberOfRows();
	// form.pdtDOB().setFocus();
	// updateControlsState();
	// }

	private void displayNumberOfRows()
	{
		form.lblTotal().setValue("Total : " + form.dyngrdClient().getRows().size());
	}

	private void searchClient()
	{
		ClientSearchVoCollection clientCollection = null;

		form.dyngrdClient().getRows().clear();

		if (form.txtIdentifier().getValue() != null && form.txtIdentifier().getValue().length() > 0)
		{
			if (form.cmbPatientID().getValue() == null)
			{
				engine.showMessage("Please select a Patient ID Type");
				form.cmbPatientID().setFocus();
				return;
			}
			clearSearchFields(false);

			try
			{
				clientCollection = domain.searchClientsById(form.cmbPatientID().getValue(), form.txtIdentifier().getValue());
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			// allow to record a new client
			form.getLocalContext().setallowNewClient(true);
		}
		else
		{
			if (form.pdtDOB().getValue() == null)
			{
				if (form.txtSurname().getValue() == null || form.txtSurname().getValue().replaceAll("[^a-zA-Z%]", "").length() == 0)
				{
					engine.showMessage("Please enter a valid Surname search string");
					return;
				}
				if (ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue() && (form.txtForename().getValue() == null || form.txtForename().getValue().replaceAll("[^a-zA-Z%]", "").length() == 0))
				{
					engine.showMessage("Please enter a valid Forename search string");
					return;
				}
			}

			PatientFilter voPatFilter = new PatientFilter();
			voPatFilter.setForename(form.txtForename().getValue());
			voPatFilter.setSurname(form.txtSurname().getValue());
			voPatFilter.setDob(form.pdtDOB().getValue());
			voPatFilter.setSex(form.cmbSex().getValue());
			voPatFilter.setAddress(form.txtAddress().getValue());
			voPatFilter.setCCA(form.cmbCCA().getValue());
			voPatFilter.setCounty(form.cmbCounty().getValue());

			try
			{

				clientCollection = domain.searchClient(voPatFilter);
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			// allow to record a new client
			form.getLocalContext().setallowNewClient(true);
		}

		if (clientCollection == null || (clientCollection != null && clientCollection.size() == 0))
		{
			engine.showMessage("No patients found");
			return;
		}
		form.getLocalContext().setFoundClientSearchVoCollection(clientCollection);

		clientCollection.sort(new SurnameComparator(SortOrder.ASCENDING));
		populateGridWithClients(clientCollection);

	}

	private void populateGridWithClients(ClientSearchVoCollection clientCollection)
	{
		for (int i = 0; i < clientCollection.size(); i++)
		{
			ClientSearchVo client = clientCollection.get(i);
			DynamicGridRow row = form.dyngrdClient().getRows().newRow();
			String strTooltip = getClientTooltip(client);

			if (client.getName() != null)
			{
				// surname should probably be part of minimum data on registration
				// and so negate the need for this.
				if (client.getName().getSurnameIsNotNull())
				{
					DynamicGridCell cellSurname = row.getCells().newCell(form.dyngrdClient().getColumns().getByIdentifier(COL_SURNAME), DynamicCellType.STRING);
					cellSurname.setValue(client.getName().getSurname());
					cellSurname.setTooltip(strTooltip);
				}

				if (client.getName().getForenameIsNotNull())
				{
					DynamicGridCell cellForename = row.getCells().newCell(form.dyngrdClient().getColumns().getByIdentifier(COL_FORENAME), DynamicCellType.STRING);
					cellForename.setValue(client.getName().getForename());

					cellForename.setTooltip(strTooltip);
				}
			}

			if (client.getDisplayId() != null)
			{
				DynamicGridCell cellId = row.getCells().newCell(form.dyngrdClient().getColumns().getByIdentifier(COL_IDENTIFIER), DynamicCellType.STRING);
				cellId.setValue(client.getDisplayId().getValue());

				cellId.setTooltip(strTooltip);
			}

			if (client.getSex() != null)
			{
				DynamicGridCell cellSex = row.getCells().newCell(form.dyngrdClient().getColumns().getByIdentifier(COL_SEX), DynamicCellType.STRING);
				cellSex.setValue(client.getSex().getText());

				cellSex.setTooltip(strTooltip);
			}

			if (client.getAge() != null)
			{
				DynamicGridCell cellAge = row.getCells().newCell(form.dyngrdClient().getColumns().getByIdentifier(COL_AGE), DynamicCellType.INT);
				cellAge.setValue(client.getAge());

				cellAge.setTooltip(strTooltip);
			}
			if (client.getDob() != null)
			{
				DynamicGridCell cellDob = row.getCells().newCell(form.dyngrdClient().getColumns().getByIdentifier(COL_DOB), DynamicCellType.STRING);
				cellDob.setValue(client.getDob().toString(DateFormat.STANDARD));

				cellDob.setTooltip(strTooltip);
			}
			if (client.getAddress() != null)
			{
				DynamicGridCell cellAddress = row.getCells().newCell(form.dyngrdClient().getColumns().getByIdentifier(COL_ADDRESS), DynamicCellType.STRING);
				cellAddress.setValue(client.getAddress().toDisplayString());

				cellAddress.setTooltip(strTooltip);
			}

			if (ConfigFlag.UI.DISPLAY_OPTIONAL_COLUMN_PATIENT_SEARCH.getValue())
			{
				if (ConfigFlag.UI.PAT_SEARCH_OPTIONAL_COL_TYPE.getValue().equalsIgnoreCase("CONTACT"))
				{
					if (client.getCommChannelsIsNotNull() && client.getMobile() != null)
					{
						DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdClient().getColumns().getByIdentifier(COL_OPTIONAL), DynamicCellType.STRING);
						cellLabel.setValue(client.getMobile().getCommValue());

						cellLabel.setTooltip(strTooltip);
					}
				}
				else if (client.getWard() != null)
				{
					DynamicGridCell cellWard = row.getCells().newCell(form.dyngrdClient().getColumns().getByIdentifier(COL_OPTIONAL), DynamicCellType.STRING);
					cellWard.setValue(client.getWard().toString());

					cellWard.setTooltip(strTooltip);
				}
			}

			row.setValue(client);

			if (client.getAssociatedPatientIsNotNull())
			{
				row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
			}

			if (client.getIsDead().booleanValue())
			{
				row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());
			}
		}
	}

	private String getClientTooltip(ClientSearchVo client)
	{
		java.lang.StringBuffer sb = new java.lang.StringBuffer("");
		// sb.append("<font color=\"#FF0000\"><b><u>Client</b></u></font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ");
		sb.append("<font color=\"#FF0000\"><b><u>Client</b></u></font>");// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ");
		if (client.getAddressIsNotNull())
			sb.append("<br>" + client.getAddress().toDisplayString() + "<br>");

		sb.append("<font color=\"#FF0000\"><b><u>Phone Numbers</b></u></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ");
		if (client.getAddress() != null && client.getAddress().getPhone() != null)
			sb.append("<br>" + "Home Phone: " + client.getAddress().getPhone());

		if (client.getWorkPhoneNumber() != null)
			sb.append("<br>" + "Work Phone: " + client.getWorkPhoneNumber());

		if (client.getMobile() != null)
			sb.append("<br>" + "Mobile Phone: " + client.getMobile());

		sb.append("<br>");
		sb.append("<font color=\"#FF0000\"><b><u>CCA</b></u></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ");
		if (client.getCommunityCareIsNotNull() && client.getCommunityCare().getCcaIsNotNull())
			sb.append("<br>" + client.getCommunityCare().getCca().getName());

		sb.append("<br>");
		sb.append("<font color=\"#FF0000\"><b><u>Other Surname</b></u></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ");
		if (client.getOtherNamesIsNotNull() && client.getOtherNames().size() > 0)
		{
			sb.append("<br>");
			for (int i = 0; i < client.getOtherNames().size(); i++)
			{
				sb.append(client.getOtherNames().get(i).getSurname().toString());
				if (i != (client.getOtherNames().size() - 1))
					sb.append(",");
			}

		}
		return sb.toString();
	}

	@Override
	protected void onDyngrdClientRowSelectionChanged(DynamicGridRow row)
	{
		if (row == null)
			return;

		if (row.getValue() instanceof PatientShort)
		{
			if (!isParentSearch())
			{
				form.getGlobalContext().Core.clearPatientShort();

				PatientShort ps = (PatientShort) form.dyngrdClient().getValue();
				form.getGlobalContext().Core.setPatientToBeDisplayed(ps);
				setClientFilterDetails();

				engine.open(ConfigFlag.UI.DEMOGRAPHICS_FORM.getValue());
			}
			else
			{
				form.getGlobalContext().PCI.setClient((PatientShort) form.dyngrdClient().getValue());
				engine.close(DialogResult.OK);
			}
		}
	}

	private boolean isParentSearch()
	{
		if (engine.getFormName().equals(form.getForms().PCI.ParentSearch))
			return true;
		return false;
	}

	private void setClientFilterControls()
	{
		PatientFilter voPatFilter = form.getGlobalContext().Core.getPatientFilter();
		if (voPatFilter == null)
			return;

		if (voPatFilter.getPersIdIsNotNull())
		{
			form.cmbPatientID().setValue(voPatFilter.getPersId().getType());
			form.txtIdentifier().setValue(voPatFilter.getPersId().getValue());
		}
		else
		{
			form.txtForename().setValue(voPatFilter.getForename());
			form.txtSurname().setValue(voPatFilter.getSurname());
			form.cmbSex().setValue(voPatFilter.getSex());
			form.pdtDOB().setValue(voPatFilter.getDob());
			form.txtAddress().setValue(voPatFilter.getAddress());
			form.cmbCounty().setValue(voPatFilter.getCounty());
			form.cmbCCA().setValue(voPatFilter.getCCA());
		}
	}

	private void setClientFilterDetails()
	{
		PatientFilter voPatFilter = new PatientFilter();

		if (form.txtIdentifier().getValue() != null && form.txtIdentifier().getValue().length() > 0)
		{
			if (form.cmbPatientID().getValue() == null)
			{
				engine.showMessage("Please select a Client ID Type");
				form.cmbPatientID().setFocus();
				return;
			}
			PatientId pid = new PatientId();
			pid.setType(form.cmbPatientID().getValue());
			pid.setValue(form.txtIdentifier().getValue());
			voPatFilter.setPersId(pid);

		}
		else
		{
			voPatFilter.setForename(form.txtForename().getValue());
			voPatFilter.setSurname(form.txtSurname().getValue());
			voPatFilter.setSex(form.cmbSex().getValue());
			voPatFilter.setDob(form.pdtDOB().getValue());
			voPatFilter.setAddress(form.txtAddress().getValue());
			voPatFilter.setCounty(form.cmbCounty().getValue());
			voPatFilter.setCCA(form.cmbCCA().getValue());

		}
		form.getGlobalContext().Core.setPatientFilter(voPatFilter);
	}

	public class DOBComparator implements Comparator<ClientSearchVo>
	{
		private int direction = 1;

		public DOBComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public DOBComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}

		public int compare(ClientSearchVo object1, ClientSearchVo object2)
		{
			// Get client Date of Birth
			Date dob1 = object1.getDobIsNotNull() ? object1.getDob().toDate() : null;
			Date dob2 = object2.getDobIsNotNull() ? object2.getDob().toDate() : null;

			// If neither object has DOB take no action
			if (dob1 == null && dob2 == null)
				return 0;
			
			// Consider null values to be last, regardless of the sort order
			if (dob1 == null && dob2 != null)
				return 1;
			
			if (dob1 != null && dob2 == null)
				return -1;
			
			// Return default comparison for date
			return dob1.compareTo(dob2) * direction;
		}
	}

	/**
	 * WDEV-12523
	 * Event handler for dynamic grid column header click - used for custom sort on "Age" and "DOB" columns
	 */
	protected void onDyngrdClientColumnHeaderClicked(DynamicGridColumn column)
	{
		if (COL_DOB.equals(column.getIdentifier()))
		{
			// Sort dynamic grid by "DOB" column
			sortDynamicGridByDOB(form.getLocalContext().getDOBSortOrder());
			
			// Change sort order for "DOB" column
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getDOBSortOrder()))
				form.getLocalContext().setDOBSortOrder(SortOrder.DESCENDING);
			else
				form.getLocalContext().setDOBSortOrder(SortOrder.ASCENDING);
			
			// Reset sort order for the rest of the custom sort order columns
			form.getLocalContext().setAgeSortOrder(SortOrder.ASCENDING);
		}
		else if (COL_AGE.equals(column.getIdentifier()))
		{
			// Sort dynamic grid by "Age" column
			sortDynamicGridByAge(form.getLocalContext().getAgeSortOrder());
			
			// Change sort order for "Age" column
			if (SortOrder.ASCENDING.equals(form.getLocalContext().getAgeSortOrder()))
				form.getLocalContext().setAgeSortOrder(SortOrder.DESCENDING);
			else
				form.getLocalContext().setAgeSortOrder(SortOrder.ASCENDING);
			
			// Reset sort order for the rest of the custom sort order columns
			form.getLocalContext().setDOBSortOrder(SortOrder.ASCENDING);
		}
		else
		{
			// Reset sort order for custom sort order columns
			form.getLocalContext().setAgeSortOrder(SortOrder.ASCENDING);
			form.getLocalContext().setDOBSortOrder(SortOrder.ASCENDING);
		}
	}

	/**
	 * WDEV-12523
	 * Function used to custom sort the dynamic grid by "DOB" column
	 */
	private void sortDynamicGridByDOB(SortOrder sortOrder)
	{
		// Get values from dynamic grid
		ClientSearchVoCollection clients = getDynamicGridClients();
		
		// Sort by DOB
		clients.sort(new DOBComparator(sortOrder));
		
		// Populate dynamic grid with sorted collection
		form.dyngrdClient().getRows().clear();
		populateGridWithClients(clients);
	}

	/**
	 * WDEV-12523
	 * Function used to custom sort the dynamic grid by "Age" column
	 */
	private void sortDynamicGridByAge(SortOrder sortOrder)
	{
		// Get values from dynamic grid
		ClientSearchVoCollection clients = getDynamicGridClients();
		
		// Sort by DOB
		clients.sort(new AgeComparator(sortOrder));
		
		// Populate dynamic grid with sorted collection
		form.dyngrdClient().getRows().clear();
		populateGridWithClients(clients);
	}

	/**
	 * WDEV-12523
	 * Function used retrieve a collection with the values from Client grid
	 */
	private ClientSearchVoCollection getDynamicGridClients()
	{
		// Create collection of clients
		ClientSearchVoCollection clients = new ClientSearchVoCollection();
		
		// Iterate dynamic grid rows & add to collection the ClientPHNList values
		for (int i = 0; i < form.dyngrdClient().getRows().size(); i++)
		{
			Object rowValue = form.dyngrdClient().getRows().get(i).getValue();
			
			if (rowValue instanceof ClientSearchVo)
				clients.add((ClientSearchVo) rowValue);
		}
		
		return clients;
	}

	public class SurnameComparator implements Comparator<ClientSearchVo>
	{
		private int direction = 1;

		public SurnameComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public SurnameComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}

		public int compare(ClientSearchVo client1, ClientSearchVo client2)
		{
			String sur1 = client1.getNameIsNotNull() ? client1.getName().getSurname() : null;
			String sur2 = client2.getNameIsNotNull() ? client2.getName().getSurname() : null;

			if (sur1 != null)
				return sur1.compareToIgnoreCase(sur2) * direction;

			if (sur2 != null)
				return -1 * direction;

			return 0;
		}
	}
}
