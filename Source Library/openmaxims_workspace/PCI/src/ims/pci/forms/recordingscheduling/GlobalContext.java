//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pci.forms.recordingscheduling;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		PCI = new PCIContext(context);
		Core = new CoreContext(context);
	}
	public final class PCIContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private PCIContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getTerminationDetailsIsNotNull()
		{
			return !cx_PCITerminationDetails.getValueIsNull(context);
		}
		public ims.pci.vo.TerminationDetailsVo getTerminationDetails()
		{
			return (ims.pci.vo.TerminationDetailsVo)cx_PCITerminationDetails.getValue(context);
		}
		public void setTerminationDetails(ims.pci.vo.TerminationDetailsVo value)
		{
			cx_PCITerminationDetails.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PCITerminationDetails = new ims.framework.ContextVariable("PCI.TerminationDetails", "_cv_PCI.TerminationDetails");
		public boolean getClientImmunisationScheduleIsNotNull()
		{
			return !cx_PCIClientImmunisationSchedule.getValueIsNull(context);
		}
		public ims.pci.vo.ClientImmunisationScheduleVo getClientImmunisationSchedule()
		{
			return (ims.pci.vo.ClientImmunisationScheduleVo)cx_PCIClientImmunisationSchedule.getValue(context);
		}
		public void setClientImmunisationSchedule(ims.pci.vo.ClientImmunisationScheduleVo value)
		{
			cx_PCIClientImmunisationSchedule.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PCIClientImmunisationSchedule = new ims.framework.ContextVariable("PCI.ClientImmunisationSchedule", "_cv_PCI.ClientImmunisationSchedule");
		public boolean getCancelDetailsIsNotNull()
		{
			return !cx_PCICancelDetails.getValueIsNull(context);
		}
		public ims.pci.vo.CancelDetailsVo getCancelDetails()
		{
			return (ims.pci.vo.CancelDetailsVo)cx_PCICancelDetails.getValue(context);
		}
		public void setCancelDetails(ims.pci.vo.CancelDetailsVo value)
		{
			cx_PCICancelDetails.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PCICancelDetails = new ims.framework.ContextVariable("PCI.CancelDetails", "_cv_PCI.CancelDetails");
		public boolean getScheduleDateIsNotNull()
		{
			return !cx_PCIScheduleDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getScheduleDate()
		{
			return (ims.framework.utils.Date)cx_PCIScheduleDate.getValue(context);
		}
		public void setScheduleDate(ims.framework.utils.Date value)
		{
			cx_PCIScheduleDate.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PCIScheduleDate = new ims.framework.ContextVariable("PCI.ScheduleDate", "_cv_PCI.ScheduleDate");
		public boolean getClientAddScheduleIsNotNull()
		{
			return !cx_PCIClientAddSchedule.getValueIsNull(context);
		}
		public ims.pci.vo.ScheduleConfigurationVo getClientAddSchedule()
		{
			return (ims.pci.vo.ScheduleConfigurationVo)cx_PCIClientAddSchedule.getValue(context);
		}
		public void setClientAddSchedule(ims.pci.vo.ScheduleConfigurationVo value)
		{
			cx_PCIClientAddSchedule.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PCIClientAddSchedule = new ims.framework.ContextVariable("PCI.ClientAddSchedule", "_cv_PCI.ClientAddSchedule");
		public boolean getClientSchedulesIsNotNull()
		{
			return !cx_PCIClientSchedules.getValueIsNull(context);
		}
		public ims.pci.vo.ScheduleConfigurationRefVoCollection getClientSchedules()
		{
			return (ims.pci.vo.ScheduleConfigurationRefVoCollection)cx_PCIClientSchedules.getValue(context);
		}
		public void setClientSchedules(ims.pci.vo.ScheduleConfigurationRefVoCollection value)
		{
			cx_PCIClientSchedules.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PCIClientSchedules = new ims.framework.ContextVariable("PCI.ClientSchedules", "_cv_PCI.ClientSchedules");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");
		public boolean getGPDetailsIsNotNull()
		{
			return !cx_CoreGPDetails.getValueIsNull(context);
		}
		public ims.core.vo.GpShortVo getGPDetails()
		{
			return (ims.core.vo.GpShortVo)cx_CoreGPDetails.getValue(context);
		}
		public void setGPDetails(ims.core.vo.GpShortVo value)
		{
			cx_CoreGPDetails.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreGPDetails = new ims.framework.ContextVariable("Core.GPDetails", "_cv_Core.GPDetails");

		private ims.framework.Context context;
	}

	public PCIContext PCI;
	public CoreContext Core;
}
