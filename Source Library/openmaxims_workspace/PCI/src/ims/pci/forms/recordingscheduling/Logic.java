//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.62 build 3012.31808)
//Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.forms.recordingscheduling;

import ims.configuration.AppRight;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.GpToPracticesVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.OrganisationWithSitesVo;
import ims.core.vo.PersonAddress;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.VaccineLiteVo;
import ims.core.vo.VaccineManufacturerBatchVo;
import ims.core.vo.VaccineManufacturerBatchVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.controls.DynamicGrid;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.PartialDate;
import ims.pci.vo.CancelDetailsVo;
import ims.pci.vo.ClientImmunisationScheduleVo;
import ims.pci.vo.ClientLiteVo;
import ims.pci.vo.ClientScheduleStageVaccineVo;
import ims.pci.vo.ClientScheduleStageVaccineVoCollection;
import ims.pci.vo.ClientScheduleStageVo;
import ims.pci.vo.ClientScheduleStageVoCollection;
import ims.pci.vo.ClientVaccineSummaryVo;
import ims.pci.vo.DeliverShotDetailsVo;
import ims.pci.vo.TerminationDetailsVo;
import ims.pci.vo.VaccineStatusLiteVo;
import ims.pci.vo.lookups.PaymentType;
import ims.pci.vo.lookups.TerminatedBy;
import ims.pci.vo.lookups.VaccineStatus;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// Confirmation message box
	private static final int CONFIRM_SAVE = 0;
	private static final int CONFIRM_RESTART = 1;
	private static final int CONFIRM_DELETE = 2;

	private enum RowType
	{ STAGE, VACCINE };

	// Column identifiers
	private static final int COL_STAGE_VACCINE_NAME = 1;
	private static final int COL_SCHEDULE_DATE = 2;
	private static final int COL_DELIVERED_DATE = 3;
	private static final int COL_TERMINATED_DATE = 4;
	private static final int COL_TERMINATION_REASON = 5;
	private static final int COL_SHOT_NUMBER = 6;

	// WDEV - 7565
	private static final int MAXIMS_INTERNAL = -1811;
	private static final String TAX_MENC = "MENC";
	private static final String TAX_PCV = "PCV";
	private static final String TAX_6IN1 = "6IN1";
	private static final String TAX_5IN1 = "5IN1";
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	EVENTS REGION
	////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// FORM
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		open();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().PCI.AddScheduleConfigurationDialog.equals(formName))
		{
			open();
			return;
		}

		if (form.getForms().PCI.TerminationDetailsDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			terminateShot();
			return;
		}
		
		if(form.getForms().PCI.TerminateAllDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			terminateAll();
			return;
		}
		
		if(form.getForms().PCI.CancelDetailsDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			saveCancelDose();
			return;
		}
		
		if(form.getForms().PCI.ScheduleDateDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			saveNewScheduleDate();
			return;
		}
		
		if(formName.equals(form.getForms().Core.GpSelectionOnly) && result.equals(DialogResult.OK))
		{
			if(form.getLocalContext().getOpenDialogForDeliveredByIsNotNull() && form.getLocalContext().getOpenDialogForDeliveredBy())
			{
				if(form.getGlobalContext().Core.getGPDetails() != null && form.getGlobalContext().Core.getGPDetails().getNameIsNotNull())
				{
					form.getLocalContext().setDeliveredByGp(form.getGlobalContext().Core.getGPDetails());
					form.ctnVaccineDetails().txtDeliveredBy().setValue(displayGP(form.getGlobalContext().Core.getGPDetails()));
				}
			}
			else if(form.getLocalContext().getOpenDialogForPaymentGPIsNotNull() && form.getLocalContext().getOpenDialogForPaymentGP())
			{
				if(form.getGlobalContext().Core.getGPDetails() != null && form.getGlobalContext().Core.getGPDetails().getNameIsNotNull())
				{
					form.getLocalContext().setPaymentGP(form.getGlobalContext().Core.getGPDetails());
					form.ctnVaccineDetails().txtPaymentGP().setValue(displayGP(form.getGlobalContext().Core.getGPDetails()));
				}
			}
		}
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getWarningMessageBoxIDIsNotNull())
		{
			if (form.getLocalContext().getWarningMessageBoxID().equals(messageBoxId) && DialogResult.YES.equals(result))
			{
				switch (form.getLocalContext().getConfirmationType())
				{
					case CONFIRM_SAVE:
					{
						//wdev-7565
						alertToTerminate();
						
						if (save())
							open();
						break;
					}
				}
			}

			if (form.getLocalContext().getWarningMessageBoxID().equals(messageBoxId) && DialogResult.OK.equals(result))
			{
				switch (form.getLocalContext().getConfirmationType())
				{
					case CONFIRM_DELETE:
						deleteVaccine();
						break;

					case CONFIRM_RESTART:
						restartVaccine();
						break;
				}

				form.getLocalContext().setConfirmationType(null);		
			}
		}
		
		if(form.getLocalContext().getClearVaccinationDetailsBoxIdIsNotNull())
		{
			if(form.getLocalContext().getClearVaccinationDetailsBoxId().equals(messageBoxId) && DialogResult.YES.equals(result))
			{
				saveVaccineWithoutDetails();
			}
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}


	// BUTTONS
	@Override
	protected void onBtnRecordShotDetailsClick() throws PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onBtnEditShotDetailsClick() throws PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		ClientScheduleStageVo stage = form.ctnVaccineDetails().cmbStage().getValue();
		ClientScheduleStageVaccineVo vaccine = form.ctnVaccineDetails().cmbVaccine().getValue();

		if (updateShotDetails(stage, vaccine))
			open();
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}


	// DYNAMC GRID
	@Override
	protected void onDyngrdStagesRowSelectionChanged(DynamicGridRow row)
	{
		// Fill container data (chose the appropriate function to use, depending on the selected row type)
		if (row.getValue() instanceof ClientScheduleStageVo)
		{
			setContainerValue((ClientScheduleStageVo) row.getValue(), null);
		}
		else if (row.getValue() instanceof ClientScheduleStageVaccineVo && row.getParent() != null && row.getParent().getValue() instanceof ClientScheduleStageVo)
		{
			setContainerValue((ClientScheduleStageVo) row.getParent().getValue(), (ClientScheduleStageVaccineVo) row.getValue());
		}
		else
		{
			clearContainer();
		}

		// Update controls
		updateControlsState();
	}

	@Override
	protected void onDyngrdStagesRowSelectionCleared() throws PresentationLogicException
	{
		// Clear container
		clearContainer();

		// Fill the stages
		populateStagesCombo();

		// Update controls
		updateControlsState();
	}


	// CONTAINER - COMBO STAGE
	@Override
	protected void onCmbStageValueChanged() throws PresentationLogicException
	{
		// Select stage row in grid
		form.dyngrdStages().setValue(form.ctnVaccineDetails().cmbStage().getValue());
		// Populate the vaccines
		populateVaccinesCombo(form.ctnVaccineDetails().cmbStage().getValue());

		// Update control state
		updateControlsState();
	}
	
	// CONTAINER - COMBO 
	@Override
	protected void onCmbVaccineValueChanged() throws PresentationLogicException
	{
		ClientScheduleStageVaccineVo value = form.ctnVaccineDetails().cmbVaccine().getValue();

		// Select vaccine row in grid
		form.dyngrdStages().setValue(value);
		// Populate the container
		setVaccineDetails(value);

		if (value == null)
			form.dyngrdStages().setValue(form.ctnVaccineDetails().cmbStage().getValue());
		
		if (form.dyngrdStages().getSelectedRow() != null && form.dyngrdStages().getSelectedRow().getParent() != null)
			form.dyngrdStages().getSelectedRow().getParent().setExpanded(true);

		// Update control state
		updateControlsState();
	}

	// CONTAINER - QUERY COMBO BATCH
	@Override
	protected void onQmbBatchNumberTextSubmited(String value) throws PresentationLogicException
	{
		// Check for a vaccine
		if (form.ctnVaccineDetails().cmbVaccine().getValue() == null)
		{
			engine.showMessage("Please select a vaccine to search batch for", "PCI - Error");
			return;
		}

		// Check for a valid vaccine VO
		if (form.ctnVaccineDetails().cmbVaccine().getValue().getStageVaccine() == null)
			throw new CodingRuntimeException("Logical error - the selected vaccine is not properly populated");

		// Get vaccine to search for
		VaccineLiteVo vaccine = form.ctnVaccineDetails().cmbVaccine().getValue().getStageVaccine().getVaccine();


		// Populate combobox with vaccine batches
		try
		{
			VaccineManufacturerBatchVoCollection listBatchVaccine = domain.listBatchVaccine(form.ctnVaccineDetails().qmbBatchNumber().getEditedText(), vaccine);
			
			if (form.ctnVaccineDetails().qmbBatchNumber().getValue() != null && listBatchVaccine.indexOf(form.ctnVaccineDetails().qmbBatchNumber().getValue()) == -1)
				listBatchVaccine.add(form.ctnVaccineDetails().qmbBatchNumber().getValue());
			
			if (form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo)
			{
				ClientScheduleStageVaccineVo vaccineVo = (ClientScheduleStageVaccineVo)form.dyngrdStages().getValue();
				VaccineManufacturerBatchVo batchVaccine = domain.getBatchVaccine(vaccineVo.getBatchNumber());
				
				if (batchVaccine != null && listBatchVaccine.indexOf(batchVaccine) == -1)
				{
					listBatchVaccine.add(0, batchVaccine);
				}
			}
			
			populateBatchVaccine(listBatchVaccine);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage(), "PCI - Error");
			return;
		}
	}

	@Override
	protected void onQmbBatchNumberValueChanged() throws PresentationLogicException
	{
		fillBatchDetails(form.ctnVaccineDetails().qmbBatchNumber().getValue());
	}

	// CONTAINER - COMBO PAYMENT TYPE
	@Override
	protected void onCmbPaymentTypeValueChanged() throws PresentationLogicException
	{
		// This should never occur (Combobox should not be enabled if a different selection is made)
		if (form.getGlobalContext().PCI.getClientImmunisationSchedule() == null || form.getGlobalContext().PCI.getClientImmunisationSchedule().getClient() == null)
			throw new CodingRuntimeException("Major Logical Error - Can not edit data for an invalid ClientImmunisationScheduleVo");

		updateControlsState();
		updatePaymentValues(form.ctnVaccineDetails().cmbPaymentType().getValue());
	}
	// CONTAINER - QUERY COMBO DELIVERED BY
	@Override
	protected void onQmbDeliveredByTextSubmited(String value) throws PresentationLogicException
	{
		try
		{
			if (PaymentType.AMO.equals(form.ctnVaccineDetails().cmbPaymentType().getValue()))
			{
				fillDeliveredByMedic(domain.listMembersOfStaff(value));
			}
			
			if (form.ctnVaccineDetails().qmbDeliveredBy().getValues() != null && form.ctnVaccineDetails().qmbDeliveredBy().getValues().size() > 0)
			{
				form.ctnVaccineDetails().qmbDeliveredBy().showOpened();
			}
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		form.ctnVaccineDetails().qmbDeliveredBy().showOpened();
	}

	// CONTAINER - IMAGE BUTTON DELIVERED BY
	@Override
	protected void onImbDeliveredByClick() throws PresentationLogicException 
	{
		form.getLocalContext().setOpenDialogForDeliveredBy(true);
		form.getLocalContext().setOpenDialogForPaymentGP(false);
		engine.open(form.getForms().Core.GpSelectionOnly);
	}

	// CONTAINER - IMAGE BUTTON PAYMENT GP
	@Override
	protected void onImbPaymentGPClick() throws PresentationLogicException 
	{
		form.getLocalContext().setOpenDialogForDeliveredBy(false);
		form.getLocalContext().setOpenDialogForPaymentGP(true);
		engine.open(form.getForms().Core.GpSelectionOnly);
	}

	// CONTEXT MENU
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.ADD:
				if (domain.getMosUser() == null)
				{
					engine.showMessage("A schedule can be added only by a Member of staff user", "PCI - Error");
					return;
				}
				engine.open(form.getForms().PCI.AddScheduleConfigurationDialog);
				break;

			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.RECORD:
				if (domain.getMosUser() == null)
				{
					engine.showMessage("A vaccine shot can only be recorded by a Member of staff user", "PCI - Error");
				}
				newInstance();
				break;

			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.EDIT:
				if (domain.getMosUser() == null)
				{
					engine.showMessage("A vaccine shot can only be recorded by a Member of staff user", "PCI - Error");
				}
				updateInstance();
				break;

			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.RESTART:
				form.getLocalContext().setConfirmationType(CONFIRM_RESTART);
				form.getLocalContext().setWarningMessageBoxID(engine.showMessage("Do you want to restart the vaccine?", "Please Confirm", MessageButtons.OKCANCEL));
				break;

			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.DELETE:
				form.getLocalContext().setConfirmationType(CONFIRM_DELETE);
				form.getLocalContext().setWarningMessageBoxID(engine.showMessage("Do you want to delete the vaccine?", "Please Confirm", MessageButtons.OKCANCEL));
				break;

			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.TERMINATEDBYGP:
				terminateVaccine(TerminatedBy.GP);
				break;

			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.TERMINATEDBYPATIENT:
				terminateVaccine(TerminatedBy.PARENT);
				break;
				
			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.CANCELDOSE:
				cancelDose();
				break;
				
			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.UNDOCANCELDOSE:
				undoDoseCancellation();
				break;
				
			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.CLEARVACCINATIONDETAILS:
				clearVaccinationDetails();
				break;
				
			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.UPDATESCHEDULEDATE:
				updateScheduleDate();
				break;
				
			case GenForm.ContextMenus.PCINamespace.RecordingScheduling.TERMINATEALL:
				terminateFullVaccinationSchedule();
				break;
		}

		updateControlsState();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	FORM LOGIC METHODS
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	@Override
	public void initialize() throws FormOpenException
	{
		displayClientAddress();
		initializeDynamicGrid(form.dyngrdStages());
	}

	public void open() throws PresentationLogicException
	{
		// Keep current selection
		ClientScheduleStageVo stage = form.ctnVaccineDetails().cmbStage().getValue();
		ClientScheduleStageVaccineVo vaccine = form.ctnVaccineDetails().cmbVaccine().getValue();

		clearInstanceControls();

		try
		{
			// Get selected client
			PatientRefVo client = form.getGlobalContext().Core.getPatientShort();
			form.getGlobalContext().PCI.setClientImmunisationSchedule(domain.getClientImmunisationSchedule(client));
			setDynamicGrid(form.dyngrdStages(), form.getGlobalContext().PCI.getClientImmunisationSchedule());
			populateStagesCombo();
		}
		catch (DomainInterfaceException exception)
		{
			engine.showMessage(exception.getMessage(), "PCI - Error");
			return;
		}

		// Update the vaccine
		if (form.getGlobalContext().PCI.getClientImmunisationScheduleIsNotNull())
		{
			vaccine = form.getGlobalContext().PCI.getClientImmunisationSchedule().getVaccineDetails(stage, vaccine);
		}
		
		if (vaccine != null)
		{
			// Reselect the vaccine
			form.dyngrdStages().setValue(vaccine);
			setContainerValue(stage, vaccine);
			
			updateControlsState();
		}
		
		form.setMode(FormMode.VIEW);
	}

	public void newInstance() throws PresentationLogicException
	{
		if (form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo)
			form.setMode(FormMode.EDIT);
	}

	public void updateInstance()
	{
		if (form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo)
			form.setMode(FormMode.EDIT);
	}

	public boolean save() throws PresentationLogicException
	{
		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();

		// Should not occur - a client immunisation schedule should be defined at this point
		if (clientImmunisationSchedule == null)
			throw new CodingRuntimeException("Major Logical Error - Can not save a null client immunisation schedule");

		// Validate the vo
		String[] validationErrors = clientImmunisationSchedule.validate();

		if (validationErrors != null && validationErrors.length != 0)
		{
			engine.showErrors(validationErrors);
			return false;
		}

		// Attempt to save the VO
		try
		{
			clientImmunisationSchedule = domain.saveClientImmunisationSchedule(clientImmunisationSchedule);
			form.getGlobalContext().PCI.setClientImmunisationSchedule(clientImmunisationSchedule);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage(), "PCI - Error");
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		return true;
	}

	private boolean updateShotDetails(ClientScheduleStageVo stage, ClientScheduleStageVaccineVo vaccine) throws ims.framework.exceptions.PresentationLogicException
	{
		// It should not occur
		if (stage == null || vaccine == null)
			throw new CodingRuntimeException("Major Logical Error - A stage and a vaccine must be selected to edit details");
		
		if (!(domain.getMosUser() instanceof MemberOfStaffLiteVo))
			throw new CodingRuntimeException("Major Logical Error - A vaccine shot delivery can only be recorded by a Member of staff.");

		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		if (clientImmunisationSchedule == null)
			throw new CodingRuntimeException("Major Logical Error - A ClientImmunisationSchedule must be selected");

		clientImmunisationSchedule.deliverVaccineShot((MemberOfStaffLiteVo) domain.getMosUser(), stage, vaccine, populateDataFromScreen(null));

		// Call validate UI rules
		String[] errors = validateUIRules();
//		errors = clientImmunisationSchedule.getVaccineDetails(stage, vaccine).validateCustomRules(errors);

		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}

		// Call warning / confirmation
		String[] warningsConfirmation = validateWarnings();
		if (warningsConfirmation != null && warningsConfirmation.length != 0)
		{
			String warning = "";
			for (int i = 0; i < warningsConfirmation.length; i++)
			{
				if (warningsConfirmation[i] != null)
				{
					warning += warningsConfirmation[i] + "\n";
				}
			}
			warning += "Do you want to save?";

			form.getLocalContext().setConfirmationType(CONFIRM_SAVE);
			form.getLocalContext().setWarningMessageBoxID(engine.showMessage(warning, "Please Confirm", MessageButtons.YESNO));
			return false;
		}

		//wdev-7565
		alertToTerminate();
		
		return save();
	}



	public void clearInstanceControls()
	{
		clearContainer();
	}

	private void clearContainer()
	{
		// Clear the stages and the vaccines
		form.ctnVaccineDetails().cmbStage().clear();
		form.ctnVaccineDetails().cmbVaccine().clear();

		// Clear the shot details
		clearShotDetails();
	}

	private void clearShotDetails()
	{
		// Clear actual date delivered
		form.ctnVaccineDetails().dteActualDate().setValue(null);

		// Clear batch details
		form.ctnVaccineDetails().qmbBatchNumber().clear();
		form.ctnVaccineDetails().txtManufacturer().setValue(null);
		form.ctnVaccineDetails().txtExpiryDate().setValue(null);

		// Clear payment details
		form.ctnVaccineDetails().cmbPaymentType().setValue(null);
		form.ctnVaccineDetails().qmbDeliveredBy().clear();
		form.getLocalContext().setDeliveredByGp(null);
		form.ctnVaccineDetails().txtDeliveredBy().setValue(null);
		form.getLocalContext().setPaymentGP(null);
		form.ctnVaccineDetails().txtPaymentGP().setValue(null);
	}


	public void updateControlsState()
	{
		// Update the container state
		form.ctnVaccineDetails().setCollapsed(FormMode.VIEW.equals(form.getMode()) && (form.dyngrdStages().getValue() == null));

		// Update the buttons stage
		if (FormMode.VIEW.equals(form.getMode()))
		{
			if ((form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo)  && (domain.getMosUser() != null))
			{
				ClientScheduleStageVaccineVo vaccine = (ClientScheduleStageVaccineVo) form.dyngrdStages().getValue();
				ClientVaccineSummaryVo summary = form.getGlobalContext().PCI.getClientImmunisationSchedule().getVaccineSummary(vaccine.getVaccine());

				if (summary == null || summary.getCurrentStatus() == null)
					throw new CodingRuntimeException("Major Logical Error - A vaccine must have a status");

				VaccineStatus status = summary.getCurrentStatus().getStatus();

				// Record shot details
				form.btnRecordShotDetails().setVisible(true);
				form.btnRecordShotDetails().setEnabled(((VaccineStatus.STARTED.equals(status) && vaccine.getDeliveredDate() == null) || VaccineStatus.SCHEDULED.equals(status)) && (!vaccine.getIsCancelledIsNotNull() || !vaccine.getIsCancelled()));

				// Edit shot details
				form.btnEditShotDetails().setVisible(true);
				form.btnEditShotDetails().setEnabled(((VaccineStatus.STARTED.equals(status) && vaccine.getDeliveredDate() != null) || VaccineStatus.COMPLETED.equals(status)) && (!vaccine.getIsCancelledIsNotNull() || !vaccine.getIsCancelled()));
			}
			else
			{
				form.btnRecordShotDetails().setVisible(false);
				form.btnEditShotDetails().setVisible(false);
			}
		}

		// Update the container controls
		updateContainerControlsState();

		// Update the context menu
		updateContextMenuState();
	}

	private void updateContainerControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.ctnVaccineDetails().cmbVaccine().setEnabled(form.ctnVaccineDetails().cmbStage().getValue() != null);
			form.ctnVaccineDetails().cmbStage().setEnabled(form.ctnVaccineDetails().cmbVaccine().getValue() == null);
		}

		PaymentType value = form.ctnVaccineDetails().cmbPaymentType().getValue();

		form.ctnVaccineDetails().qmbDeliveredBy().setVisible(PaymentType.AMO.equals(value));
		form.ctnVaccineDetails().txtDeliveredBy().setVisible((PaymentType.GP.equals(value) || PaymentType.NONPAYGP.equals(value)) || value == null);
		form.ctnVaccineDetails().imbDeliveredBy().setVisible((PaymentType.GP.equals(value) || PaymentType.NONPAYGP.equals(value)) || value == null);
		
		form.ctnVaccineDetails().txtDeliveredBy().setEnabled(false);
		form.ctnVaccineDetails().qmbDeliveredBy().setEnabled(FormMode.EDIT.equals(form.getMode()) && value != null);
		form.ctnVaccineDetails().imbDeliveredBy().setEnabled(FormMode.EDIT.equals(form.getMode()) && (PaymentType.GP.equals(value) || PaymentType.NONPAYGP.equals(value)));
		form.ctnVaccineDetails().txtDeliveredRequired().setEnabled(FormMode.EDIT.equals(form.getMode()) && (PaymentType.GP.equals(value) || PaymentType.NONPAYGP.equals(value)));
		
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.ctnVaccineDetails().imbPaymentGP().setEnabled(PaymentType.GP.equals(value));
			form.ctnVaccineDetails().txtPaymentGPRequired().setEnabled(PaymentType.GP.equals(value));
		}
	}

	private void updateContextMenuState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			// OPTION - Add schedule
			form.getContextMenus().PCI.getRecordingSchedulingADDItem().setVisible(domain.getMosUser() != null);

			//OPTION - Terminate Vaccination Schedule
			form.getContextMenus().PCI.getRecordingSchedulingTERMINATEALLItem().setVisible(domain.getMosUser() != null && form.dyngrdStages().getRows().size() > 0 && !form.getGlobalContext().PCI.getClientImmunisationSchedule().areAllTerminated());
			
			
			if ((form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo) && (domain.getMosUser() != null))
			{
				// Get vaccine status
				ClientScheduleStageVaccineVo vaccine = (ClientScheduleStageVaccineVo) form.dyngrdStages().getValue();
				ClientVaccineSummaryVo summary = form.getGlobalContext().PCI.getClientImmunisationSchedule().getVaccineSummary(vaccine.getVaccine());

				if (summary == null || summary.getCurrentStatus() == null)
					throw new CodingRuntimeException("Major Logical Error - A vaccine must have a status");

				VaccineStatus status = summary.getCurrentStatus().getStatus();
				
				Boolean oneVaccineFromTheSchedulehasDeliveryDate = form.getGlobalContext().PCI.getClientImmunisationSchedule().doesOneVaccineFromTheScheduleHasDeliveryDate(vaccine.getVaccine(), (ClientScheduleStageVo) form.dyngrdStages().getSelectedRow().getParent().getValue()); //WDEV-18853 
				
				// OPTION - Record shot details
				form.getContextMenus().PCI.getRecordingSchedulingRECORDItem().setVisible(((VaccineStatus.STARTED.equals(status) && vaccine.getDeliveredDate() == null) || VaccineStatus.SCHEDULED.equals(status) || (VaccineStatus.COMPLETED.equals(status) && !oneVaccineFromTheSchedulehasDeliveryDate)) && (!vaccine.getIsCancelledIsNotNull() || !vaccine.getIsCancelled())); //WDEV-18853 
				// OPTION - Edit shot details
				form.getContextMenus().PCI.getRecordingSchedulingEDITItem().setVisible(((VaccineStatus.STARTED.equals(status) && vaccine.getDeliveredDate() != null) || (VaccineStatus.COMPLETED.equals(status) && oneVaccineFromTheSchedulehasDeliveryDate)) && (!vaccine.getIsCancelledIsNotNull() || !vaccine.getIsCancelled())); //WDEV-18853 
				// OPTION - Restart vaccine
				form.getContextMenus().PCI.getRecordingSchedulingRESTARTItem().setVisible(VaccineStatus.TERMINATEDBYGP.equals(status) || VaccineStatus.TERMINATEDBYPARENTGUARDIAN.equals(status));
				// OPTION - Delete vaccine
				form.getContextMenus().PCI.getRecordingSchedulingDELETEItem().setVisible(VaccineStatus.SCHEDULED.equals(status) || !oneVaccineFromTheSchedulehasDeliveryDate); // //WDEV-18853 
				// OPTION - Terminated by GP
				form.getContextMenus().PCI.getRecordingSchedulingTERMINATEDBYGPItem().setVisible(VaccineStatus.SCHEDULED.equals(status) || VaccineStatus.STARTED.equals(status));
				// OPTION - Terminated by Patient
				form.getContextMenus().PCI.getRecordingSchedulingTERMINATEDBYPATIENTItem().setVisible(VaccineStatus.SCHEDULED.equals(status) || VaccineStatus.STARTED.equals(status));
				// OPTION - Cancel Dose
				form.getContextMenus().PCI.getRecordingSchedulingCANCELDOSEItem().setVisible((VaccineStatus.SCHEDULED.equals(status) || VaccineStatus.STARTED.equals(status)) && (!vaccine.getIsCancelledIsNotNull() || !vaccine.getIsCancelled()) && (!vaccine.getIsDeletedIsNotNull() || !vaccine.getIsDeleted()));
				// OPTION - Undo Dose Cancellation
				form.getContextMenus().PCI.getRecordingSchedulingUNDOCANCELDOSEItem().setVisible((VaccineStatus.SCHEDULED.equals(status) || VaccineStatus.STARTED.equals(status)) && Boolean.TRUE.equals(vaccine.getIsCancelled()));
				// OPTION - Clear Vaccination Details
				form.getContextMenus().PCI.getRecordingSchedulingCLEARVACCINATIONDETAILSItem().setVisible(engine.hasRight(AppRight.ALLOWED_TO_CLEAR_VACCINE_DETAILS) && vaccine.getDeliveredDate() != null);
				// OPTION - Update Shot Schedule Date
				form.getContextMenus().PCI.getRecordingSchedulingUPDATESCHEDULEDATEItem().setVisible(true);			
			}
			else
			{
				form.getContextMenus().PCI.getRecordingSchedulingRECORDItem().setVisible(false);
				form.getContextMenus().PCI.getRecordingSchedulingEDITItem().setVisible(false);

				form.getContextMenus().PCI.getRecordingSchedulingRESTARTItem().setVisible(false);
				form.getContextMenus().PCI.getRecordingSchedulingDELETEItem().setVisible(false);

				form.getContextMenus().PCI.getRecordingSchedulingTERMINATEDBYGPItem().setVisible(false);
				form.getContextMenus().PCI.getRecordingSchedulingTERMINATEDBYPATIENTItem().setVisible(false);
				
				form.getContextMenus().PCI.getRecordingSchedulingCANCELDOSEItem().setVisible(false);
				form.getContextMenus().PCI.getRecordingSchedulingUNDOCANCELDOSEItem().setVisible(false);
				form.getContextMenus().PCI.getRecordingSchedulingCLEARVACCINATIONDETAILSItem().setVisible(false);
				form.getContextMenus().PCI.getRecordingSchedulingUPDATESCHEDULEDATEItem().setVisible(false);
			}
		}
		else
		{
			form.getContextMenus().PCI.hideAllRecordingSchedulingMenuItems();
		}
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	DYNAMIC GRID LOGIC (INITIALIZATION, POPULATE WITH DATA - ALL PARAMETRIZED TO WORK WITH ANY DYNAMIC GRID PROPERLY INITIALIZED)
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private void initializeDynamicGrid(DynamicGrid dyngrdStages)
	{
		dyngrdStages.setSelectable(true);
		dyngrdStages.setUnselectable(true);

		
		
		// setting the dynamic grid columns
		DynamicGridColumn column;

		column = dyngrdStages.getColumns().newColumn("STAGE / VACCINE", COL_STAGE_VACCINE_NAME);
		column.setSortMode(SortMode.NONE);//WDEV-14276
		column.setWidth(230);
		
		column = dyngrdStages.getColumns().newColumn("Shot Nr.", COL_SHOT_NUMBER);
		column.setSortMode(SortMode.NONE);//WDEV-14276
		column.setAlignment(Alignment.CENTER);
		column.setWidth(60);

		column = dyngrdStages.getColumns().newColumn("Schedule Date", COL_SCHEDULE_DATE);
		column.setSortMode(SortMode.NONE);//WDEV-14276
		column.setWidth(100);

		column = dyngrdStages.getColumns().newColumn("Delivered Date", COL_DELIVERED_DATE);
		column.setSortMode(SortMode.NONE);//WDEV-14276
		column.setWidth(100);

		column = dyngrdStages.getColumns().newColumn("Terminated Date", COL_TERMINATED_DATE);	
		column.setWidth(100);

		column = dyngrdStages.getColumns().newColumn("Termination Reason/Cancellation Reason", COL_TERMINATION_REASON);
		column.setSortMode(SortMode.NONE);//WDEV-14276
		column.setHeaderAlignment(Alignment.CENTER);
		column.setWidth(-1);
	}


	private void setDynamicGrid(DynamicGrid dynamicGrid, ClientImmunisationScheduleVo clientImmunisationSchedule)
	{
		dynamicGrid.getRows().clear();

		if (clientImmunisationSchedule == null || clientImmunisationSchedule.getStages() == null)
			return;

		clientImmunisationSchedule.getStages().sort();

		for (int i = 0; i < clientImmunisationSchedule.getStages().size(); i++)
		{
			ClientScheduleStageVo clientStage = clientImmunisationSchedule.getStages().get(i);
			if (clientStage != null && !Boolean.TRUE.equals(clientStage.getIsDeleted()))
			{
				setDynamicGridStageRow(form.dyngrdStages().getRows().newRow(), clientStage);
			}
		}
	}

	private void setDynamicGridStageRow(DynamicGridRow row, ClientScheduleStageVo scheduleStage)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not set a value to a null row");

		row.setExpanded(true);

		if (scheduleStage == null)
			return;

		// Set up the row
		DynamicGridColumn column;
		DynamicGridCell cell;

		// Fist column (the only one - with the stage name)
		column = form.dyngrdStages().getColumns().getByIdentifier(COL_STAGE_VACCINE_NAME);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(scheduleStage.getStage() == null ? null : scheduleStage.getStage().getStage() == null ? null : scheduleStage.getStage().getStage().getText());

		// Set the row value to the stage
		row.setValue(scheduleStage);
		row.setIdentifier(RowType.STAGE);

		setDynamicGridVaccinesRows(row, scheduleStage.getVaccines());
		
//		// Delete the empty stage rows
//		if (row.getRows().size() == 0)
//			form.dyngrdStages().getRows().remove(row);
	}

	private void setDynamicGridVaccinesRows(DynamicGridRow row, ClientScheduleStageVaccineVoCollection vaccines)
	{
		if (row == null)
			throw new CodingRuntimeException("Major logical error - Can not set a value to a null row");

		row.getRows().clear();

		if (vaccines == null)
			return;

		vaccines.sort();

		for (int i = 0; i < vaccines.size(); i++)
		{
			ClientScheduleStageVaccineVo vaccineVo = vaccines.get(i);
			if (vaccineVo != null)
			{
				if (vaccineVo.getIsDeleted() == null || vaccineVo.getIsDeleted() == false)
				{
					ClientVaccineSummaryVo vaccineSummary = form.getGlobalContext().PCI.getClientImmunisationSchedule().getVaccineSummary(vaccineVo.getVaccine());
					//if (!(VaccineStatus.DELETEDVACCINESCHEDULE.equals(vaccineSummary == null ? null : vaccineSummary.getCurrentStatus() == null ? null : vaccineSummary.getCurrentStatus().getStatus())))//WDEV-18853 
						setDynamicGridDynamicGridVaccineRow(row.getRows().newRow(), vaccineVo);
				}
			}
		}
	}

	private void setDynamicGridDynamicGridVaccineRow(DynamicGridRow row, ClientScheduleStageVaccineVo clientStageVaccine)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not set a value to a null row");

		row.setExpanded(true);
		
		if(clientStageVaccine != null && clientStageVaccine.getStageVaccineIsNotNull() 
				&& clientStageVaccine.getStageVaccine().getDriverIsNotNull() 
					&& clientStageVaccine.getStageVaccine().getDriver())
			row.setBold(true);

		if (clientStageVaccine == null)
			return;

		// Set up the row
		DynamicGridColumn column;
		DynamicGridCell cell;

		// Fist cell - vaccine name
		column = form.dyngrdStages().getColumns().getByIdentifier(COL_STAGE_VACCINE_NAME);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(clientStageVaccine.getStageVaccine() == null ? null : clientStageVaccine.getStageVaccine() == null ? null : clientStageVaccine.getStageVaccine().getVaccine() == null ? null : clientStageVaccine.getStageVaccine().getVaccine().getVaccineName());

		//WDEV-7570
		column = form.dyngrdStages().getColumns().getByIdentifier(COL_SHOT_NUMBER);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(clientStageVaccine.getStageVaccine() != null ? (clientStageVaccine.getStageVaccine().getShotNoIsNotNull() ? clientStageVaccine.getStageVaccine().getShotNo().toString() : null) : null);
		
		// Second cell - scheduled date
		column = form.dyngrdStages().getColumns().getByIdentifier(COL_SCHEDULE_DATE);
		cell = row.getCells().newCell(column, DynamicCellType.DATE);
		cell.setValue(clientStageVaccine.getScheduledDate());

		// Third cell - delivered date
		column = form.dyngrdStages().getColumns().getByIdentifier(COL_DELIVERED_DATE);
		cell = row.getCells().newCell(column, DynamicCellType.DATE);
		cell.setValue(clientStageVaccine.getDeliveredDate());

		// Fourth cell - terminated date
		column = form.dyngrdStages().getColumns().getByIdentifier(COL_TERMINATED_DATE);
		cell = row.getCells().newCell(column, DynamicCellType.DATE);
		cell.setValue(clientStageVaccine.getTerminatedDate());

		// Fifth cell - terminated date
		column = form.dyngrdStages().getColumns().getByIdentifier(COL_TERMINATION_REASON);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(clientStageVaccine.getTerminationReason() == null ? (clientStageVaccine.getCancellationReason() == null ? null : clientStageVaccine.getCancellationReason().getText()) : clientStageVaccine.getTerminationReason().getText());
		cell.setIdentifier(clientStageVaccine.getTerminationReason() == null ? (clientStageVaccine.getCancellationReason() == null ? null : clientStageVaccine.getCancellationReason()) : clientStageVaccine.getTerminationReason());
		cell.setTextColor((clientStageVaccine.getTerminationReason() == null && clientStageVaccine.getCancellationReason() != null) ? Color.Red : Color.Black);
		
		row.setValue(clientStageVaccine);
		row.setIdentifier(RowType.VACCINE);

		// Get Vaccine Summary
		ClientVaccineSummaryVo summary = form.getGlobalContext().PCI.getClientImmunisationSchedule().getVaccineSummary(clientStageVaccine.getVaccine());

		if (summary == null || summary.getCurrentStatus() == null || summary.getCurrentStatus().getStatus() == null)
		{
			// If the summary is null - highlight red (this is a Major problem)
			row.setBackColor(Color.Red);
			return;
		}

	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	CONTAINER FUNTIONS
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private void setContainerValue(ClientScheduleStageVo stage, ClientScheduleStageVaccineVo stageVaccineValue)
	{
		clearContainer();

		if (stage == null)
			return;

		if (stageVaccineValue == null)
		{
			populateStagesCombo();

			form.ctnVaccineDetails().cmbStage().setValue(stage);
			populateVaccinesCombo(stage);

			return;
		}
		else
		{
			// Populate the stages
			populateStagesCombo();
			
			// Set the stage - disabled
//			form.ctnVaccineDetails().cmbStage().newRow(stage, stage.getStage() == null ? null : stage.getStage().getStage() == null ? null : stage.getStage().getStage().getText());
			form.ctnVaccineDetails().cmbStage().setValue(stage);

			// Populate the vaccines
			populateVaccinesCombo(stage);

			// Select the vaccine
			form.ctnVaccineDetails().cmbVaccine().setValue(stageVaccineValue);

			// Set vaccine details
			setVaccineDetails(stageVaccineValue);

			return;
		}
	}

	// COMBO STAGES
	private void populateStagesCombo()
	{
		form.ctnVaccineDetails().cmbStage().clear();

		// If there is not selected client immunisation schedule - do not continue
		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		if (clientImmunisationSchedule == null)
			return;

		ClientScheduleStageVoCollection stages = clientImmunisationSchedule.getStages();

		// Should not occur
		if (stages == null)
			return;

		for (int i = 0; i < stages.size(); i++)
		{
			ClientScheduleStageVo clientStage = stages.get(i);

			if (clientStage != null && !Boolean.TRUE.equals(clientStage.getIsDeleted())) //WDEV-14319
			{
				form.ctnVaccineDetails().cmbStage().newRow(clientStage, clientStage.getStage() == null ? null : clientStage.getStage().getStage() == null ? null : clientStage.getStage().getStage().getText());
			}
		}	
	}

	// COMBO VACCINE
	private void populateVaccinesCombo(ClientScheduleStageVo stage)
	{
		form.ctnVaccineDetails().cmbVaccine().clear();

		if (stage == null)
			return;

		ClientScheduleStageVaccineVoCollection vaccines = stage.getVaccines();

		if (vaccines == null)
			return;

		for (int i = 0; i < vaccines.size(); i++)
		{
			ClientScheduleStageVaccineVo vaccine = vaccines.get(i);
			if (vaccine != null)
			{
				if (Boolean.TRUE.equals(vaccine.getIsDeleted()))
					continue;
				
				ClientVaccineSummaryVo vaccineSummary = form.getGlobalContext().PCI.getClientImmunisationSchedule().getVaccineSummary(vaccine.getVaccine());
				if (vaccineSummary == null || vaccineSummary.getCurrentStatus() == null || VaccineStatus.DELETEDVACCINESCHEDULE.equals(vaccineSummary.getCurrentStatus().getStatus()))
					continue;

				form.ctnVaccineDetails().cmbVaccine().newRow(vaccine, vaccine.getStageVaccine() == null ? null : vaccine.getStageVaccine().getVaccine() == null ? null : vaccine.getStageVaccine().getVaccine().getVaccineName());
			}

		}
	}

	private void setVaccineDetails(ClientScheduleStageVaccineVo vaccine)
	{
		clearShotDetails();

		// If the vaccine passed is null - end the function
		if (vaccine == null)
			return;

		// Populate ActualDateDelivered
		form.ctnVaccineDetails().dteActualDate().setValue(vaccine.getDeliveredDate());

		// Populate vaccine batch number, manufacturer, expiry date
		if (vaccine.getBatchNumber() != null)
		{
			VaccineManufacturerBatchVo vaccineBatchNumber = new VaccineManufacturerBatchVo();
			vaccineBatchNumber.setBatchNumber(vaccine.getBatchNumber());
			vaccineBatchNumber.setManufacturer(vaccine.getVaccineManufacturer());
			vaccineBatchNumber.setExpiryDate(vaccine.getExpiryDate());

			setBatchDetails(vaccineBatchNumber);
		}

		// Populate PaymentType
		form.ctnVaccineDetails().cmbPaymentType().setValue(vaccine.getPaymentType());
		setPaymentValues(vaccine.getPaymentType(), vaccine);
	}


	private void setBatchDetails(VaccineManufacturerBatchVo value)
	{
		form.ctnVaccineDetails().qmbBatchNumber().clear();

		if (value == null)
			return;

		form.ctnVaccineDetails().qmbBatchNumber().newRow(value, value.getBatchNumber());
		form.ctnVaccineDetails().qmbBatchNumber().setValue(value);

		fillBatchDetails(value);
	}

	private void fillBatchDetails(VaccineManufacturerBatchVo value)
	{
		form.ctnVaccineDetails().txtManufacturer().setValue(null);
		form.ctnVaccineDetails().txtExpiryDate().setValue(null);

		if (value == null)
			return;

		form.ctnVaccineDetails().txtManufacturer().setValue(form.ctnVaccineDetails().qmbBatchNumber().getValue().getManufacturer() == null ? null : form.ctnVaccineDetails().qmbBatchNumber().getValue().getManufacturer().getText());
		form.ctnVaccineDetails().txtExpiryDate().setValue(form.ctnVaccineDetails().qmbBatchNumber().getValue().getExpiryDate() == null ? null : form.ctnVaccineDetails().qmbBatchNumber().getValue().getExpiryDate().toString());
	}


	private void setPaymentValues(PaymentType value, ClientScheduleStageVaccineVo vaccine)
	{
		// Clear the two queries
		form.ctnVaccineDetails().qmbDeliveredBy().clear();
		
		form.getLocalContext().setDeliveredByGp(null);
		form.ctnVaccineDetails().txtDeliveredBy().setValue(null);
		form.getLocalContext().setPaymentGP(null);
		form.ctnVaccineDetails().txtPaymentGP().setValue(null);

		if (vaccine == null || value == null)
			return;

		if (PaymentType.AMO.equals(value))
		{
			HcpLiteVo hcp = vaccine.getDeliveredByMedic();

			if (hcp != null)
			{
				form.ctnVaccineDetails().qmbDeliveredBy().newRow(hcp, hcp.getName() == null ? null : hcp.getName().toString());		// WDEV-11129
				form.ctnVaccineDetails().qmbDeliveredBy().setValue(hcp);
			}

			return;
		}

		if (PaymentType.NONPAYGP.equals(value))
		{
			GpShortVo gp = vaccine.getDeliveredByGp();

			if (gp != null)
			{
				form.getLocalContext().setDeliveredByGp(gp);
				form.ctnVaccineDetails().txtDeliveredBy().setValue(displayGP(gp));
				
				form.getLocalContext().setDeliveredByGp(gp);
			}

			return;
		}

		if (PaymentType.GP.equals(value))
		{
			GpShortVo deliveredByGp = vaccine.getDeliveredByGp();
			GpShortVo paymentGp = vaccine.getPaymentGp();

			if (deliveredByGp != null)
			{
				form.getLocalContext().setDeliveredByGp(deliveredByGp);
				form.ctnVaccineDetails().txtDeliveredBy().setValue(displayGP(deliveredByGp));
			}

			if (paymentGp != null)
			{
				form.getLocalContext().setPaymentGP(paymentGp);
				form.ctnVaccineDetails().txtPaymentGP().setValue(displayGP(paymentGp));
			}
		}
	}

	
	private String displayGP(GpShortVo gp)
	{
		if (gp == null)
			return null;
		
		if (gp.getName() == null)
			return null;
		
		String value = gp.getName().toString();
		
		if (gp.getPracticesIsNotNull())
		{
			GpToPracticesVoCollection practices = gp.getPractices();
			
			for (int i = 0; i < practices.size(); i++)
			{
				if (practices.get(i) == null)
					continue;
				
				if (!Boolean.TRUE.equals(practices.get(i).getIsPrimaryPractice()))
					continue;
				
				OrganisationWithSitesVo practice = practices.get(i).getPractice();
				
				if (practice == null)
					continue;
				
				if (practice.getName() == null)
					continue;
				
				value += ", " + practice.getName();
				
				PersonAddress address = practice.getAddress();
				if (address == null)
					continue;
				
				String addressString = ((address.getLine1() == null || PersonAddress.getLine1MaxLength() == 0)? "" : (address.getLine1()))
									 + ((address.getLine2() == null || PersonAddress.getLine2MaxLength() == 0)? "" : (" " + address.getLine2()))
									 + ((address.getLine3() == null || PersonAddress.getLine3MaxLength() == 0)? "" : (" " + address.getLine3()))
									 + ((address.getLine4() == null || PersonAddress.getLine4MaxLength() == 0)? "" : (" " + address.getLine4()))
									 + ((address.getLine5() == null || PersonAddress.getLine5MaxLength() == 0)? "" : (" " + address.getLine5()))
									 + ((address.getCounty() == null)? "" : (", " + address.getCounty().toString())); 
				
				value += ", " + addressString;
			}
		}
				
		return value;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	ALGORITHM FUNCTIONS
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private void terminateVaccine(TerminatedBy terminatedBy)
	{
		// Pass termination details to dialog
		TerminationDetailsVo terminationDetails = new TerminationDetailsVo();
		terminationDetails.setTerminatedBy(terminatedBy);
		form.getGlobalContext().PCI.setTerminationDetails(terminationDetails);

		// Call termination dialog
		engine.open(form.getForms().PCI.TerminationDetailsDialog);
	}

	private void terminateShot() throws PresentationLogicException
	{
		if (!(form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo))
			throw new CodingRuntimeException("Major Logical Error - TERMINATE Options are available only for a ClientScheduleStageVaccineVo");

		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		if (clientImmunisationSchedule == null)
			throw new CodingRuntimeException("Major Logical Error - A schedule must be defined for TERMINATE Options to be available");

		ClientScheduleStageVaccineVo vaccine = (ClientScheduleStageVaccineVo) form.dyngrdStages().getValue();
		TerminationDetailsVo terminationDetails = form.getGlobalContext().PCI.getTerminationDetails();
		if (terminationDetails == null)
			return;

		clientImmunisationSchedule.terminateVaccine(vaccine.getVaccine(), terminationDetails);

		if (save())
			open();
	}

	private void restartVaccine() throws PresentationLogicException
	{
		// This should not occur
		if (!(form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo))
			throw new CodingRuntimeException("Major Logical Error - RESTART Option is available only for a ClientScheduleStageVaccineVo");

		// This should not occur
		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		if (clientImmunisationSchedule == null)
			throw new CodingRuntimeException("Major Logical Error - A schedule must be defined for RESTART Option to be availabe");

		ClientScheduleStageVaccineVo vaccine = (ClientScheduleStageVaccineVo) form.dyngrdStages().getValue();
		clientImmunisationSchedule.restartVaccine(vaccine.getVaccine());

		if (save())
			open();
	}

	private void deleteVaccine() throws PresentationLogicException
	{
		// This should not occur
		if (!(form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo))
			throw new CodingRuntimeException("Major Logical Error - DELETE Option is available only for a ClientScheduleStageVaccineVo");

		// This should not occur
		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		if (clientImmunisationSchedule == null)
			throw new CodingRuntimeException("Major Logical Error - A schedule must be defined for DELETE Option to be available");

		ClientScheduleStageVaccineVo vaccine = (ClientScheduleStageVaccineVo) form.dyngrdStages().getValue();
		
		//WDEV-18853 - start
		clientImmunisationSchedule.deleteVaccine(vaccine.getVaccine(), (ClientScheduleStageVo) form.dyngrdStages().getSelectedRow().getParent().getValue());
		//clientImmunisationSchedule.deleteVaccine(vaccine.getVaccine());
		//WDEV-18853 - end
		
		if (save())
			open();
	}

	private void populateBatchVaccine(VaccineManufacturerBatchVoCollection vaccineBatchList)
	{
		form.ctnVaccineDetails().qmbBatchNumber().clear();

		if (vaccineBatchList == null)
			return;


		for (int i = 0; i < vaccineBatchList.size(); i++)
		{
			if (vaccineBatchList.get(i) != null)
			{
				form.ctnVaccineDetails().qmbBatchNumber().newRow(vaccineBatchList.get(i), vaccineBatchList.get(i).getBatchNumber());
			}
		}

		form.ctnVaccineDetails().qmbBatchNumber().showOpened();
	}

	private void updatePaymentValues(PaymentType value)
	{
		// Clear the two queries
		form.ctnVaccineDetails().qmbDeliveredBy().clear();
		
		form.getLocalContext().setDeliveredByGp(null);
		form.ctnVaccineDetails().txtDeliveredBy().setValue(null);
		form.getLocalContext().setPaymentGP(null);
		form.ctnVaccineDetails().txtPaymentGP().setValue(null);

		if (value == null)
			return;

//		if (PaymentType.AMO.equals(value))
//		{
//			try
//			{
//				HcpLiteVoCollection hcpList = domain.listMembersOfStaff(null);
//
//				if (hcpList == null)
//					return;
//
//				for (int i = 0; i < hcpList.size(); i++)
//				{
//					HcpLiteVo hcp = hcpList.get(i);
//					if (hcp != null)
//					{
//						form.ctnVaccineDetails().qmbDeliveredBy().newRow(hcp, hcp.getName() == null ? null : hcp.getName().toShortForm());
//					}
//				}
//			}
//			catch (DomainInterfaceException e)
//			{
//				engine.showMessage(e.getMessage());
//				return;
//			}
//		}

		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		if (PaymentType.NONPAYGP.equals(value))
		{
			// This should not occur
			if (clientImmunisationSchedule == null || clientImmunisationSchedule.getClient() == null)
				throw new CodingRuntimeException("Major Logical Error - A valid schedule must exist and a valid vaccine must be selected for edit");

			try
			{
				// Retrieve registered GP from the database
				GpShortVo registeredGp = domain.getRegisteredGp(clientImmunisationSchedule.getClient());

				// Check for null GP
				if (registeredGp == null)
					return;

				form.getLocalContext().setDeliveredByGp(registeredGp);
				form.ctnVaccineDetails().txtDeliveredBy().setValue(displayGP(registeredGp));
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
		}

		if (PaymentType.GP.equals(value))
		{
			// This should not occur
			if (clientImmunisationSchedule == null || clientImmunisationSchedule.getClient() == null)
				throw new CodingRuntimeException("Major Logical Error - A valid schedule must exist and a valid vaccine must be selected for edit");

			try
			{
				// Retrieve registered GP from the database
				GpShortVo registeredGp = domain.getRegisteredGp(clientImmunisationSchedule.getClient());

				// Check for null GP
				if (registeredGp == null)
					return;

				form.getLocalContext().setDeliveredByGp(registeredGp);
				form.ctnVaccineDetails().txtDeliveredBy().setValue(displayGP(registeredGp));
				form.getLocalContext().setPaymentGP(registeredGp);
				form.ctnVaccineDetails().txtPaymentGP().setValue(displayGP(registeredGp));
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
		}
	}

	private void fillDeliveredByMedic(HcpLiteVoCollection listMembersOfStaff)
	{
		form.ctnVaccineDetails().qmbDeliveredBy().clear();

		if (listMembersOfStaff == null)
			return;

		for (int i = 0; i < listMembersOfStaff.size(); i++)
		{
			HcpLiteVo medic = listMembersOfStaff.get(i);

			if (medic == null)
				continue;

			form.ctnVaccineDetails().qmbDeliveredBy().newRow(medic, medic.getName() == null ? null : medic.getName().toString());  // WDEV-11129
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	FORM LOGIC METHODS
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public String[] validateWarnings()
	{
		ArrayList<String> listOfWarnings = new ArrayList<String>();

		if (form.ctnVaccineDetails().dteActualDate().getValue() != null)
		{
			if (form.ctnVaccineDetails().dteActualDate().getValue().isGreaterThan(new Date()))
			{
				listOfWarnings.add("Vaccine delivery date is set in the future.");
			}
			
			ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
			if (clientImmunisationSchedule != null && clientImmunisationSchedule.getClient() != null)
			{
				if (form.ctnVaccineDetails().dteActualDate().getValue().isLessOrEqualThan(clientImmunisationSchedule.getClient().getDob())
						&& form.ctnVaccineDetails().dteActualDate().getValue().isGreaterOrEqualThan(clientImmunisationSchedule.getClient().getDob()))
				{
					listOfWarnings.add("Vaccine delivery date is set on the same date as the client Date of Birth.");
				}
			}

			if (clientImmunisationSchedule != null)
			{
				ClientScheduleStageVo stage = form.ctnVaccineDetails().cmbStage().getValue();
				ClientScheduleStageVaccineVo vaccine = form.ctnVaccineDetails().cmbVaccine().getValue();
				if (stage != null && vaccine != null)
				{
					ClientScheduleStageVaccineVo vaccineDetails = clientImmunisationSchedule.getVaccineDetails(stage, vaccine);
					if (vaccineDetails != null && form.ctnVaccineDetails().dteActualDate().getValue().isGreaterOrEqualThan(vaccineDetails.getExpiryDate()))
					{
						listOfWarnings.add("Vaccine delivery date is set after the expiry date of the vaccine.");
					}
				}
				
				if (form.ctnVaccineDetails().dteActualDate().getValue().isLessThan(vaccine.getScheduledDate()))
				{
					listOfWarnings.add("Vaccine Delivery Date is set before Scheduled Date.");
				}
			}
		}

		int errorCount = listOfWarnings.size();
		if (errorCount == 0)
			return null;

		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfWarnings.get(x);

		return result;
	}

	public String[] validateUIRules()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		// Test ACTUAL DELIVERED DATE
		if (form.ctnVaccineDetails().dteActualDate().getValue() == null)
		{
			listOfErrors.add("Actual delivery date is not filled");
		}
		else
		{
			if (form.getGlobalContext().PCI.getClientImmunisationScheduleIsNotNull() && form.getGlobalContext().PCI.getClientImmunisationSchedule().getClientIsNotNull())
			{
				ClientLiteVo client = form.getGlobalContext().PCI.getClientImmunisationSchedule().getClient();
				if (form.ctnVaccineDetails().dteActualDate().getValue().isLessThan(client.getDob()))
				{
					listOfErrors.add("Actual delivery date can not be set before Date of Birth");
				}
			}
		}

		if (form.ctnVaccineDetails().qmbBatchNumber().getValue() == null)
		{
			listOfErrors.add("Batch number was not selected");
		}

		if (form.ctnVaccineDetails().cmbPaymentType().getValue() == null)
		{
			listOfErrors.add("Payment type was not selected.");
		}
		else
		{
			if(PaymentType.AMO.equals(form.ctnVaccineDetails().cmbPaymentType().getValue()))
			{
				if (form.ctnVaccineDetails().qmbDeliveredBy().getValue() == null)
				{
					listOfErrors.add("Delivered By was not selected");
				}
			}
			else
			{
				if(!form.getLocalContext().getDeliveredByGpIsNotNull())
				{
					listOfErrors.add("Delivered By was not selected");
				}
			}
//			else if (form.ctnVaccineDetails().qmbDeliveredBy().getValue() instanceof GpLiteWithNameVo)
//			{
//				GpLiteWithNameVo gp = (GpLiteWithNameVo) form.ctnVaccineDetails().qmbDeliveredBy().getValue();
//
//				if (form.ctnVaccineDetails().dteActualDate().getValue() != null)
//				{
//					if (domain.getGpContract(gp, form.ctnVaccineDetails().dteActualDate().getValue()) == null)
//					{
//						listOfErrors.add("Selected Delivered By GP doesn't have a valid contract at selected actual delivered date");
//					}
//				}
//			}

			if (PaymentType.GP.equals(form.ctnVaccineDetails().cmbPaymentType().getValue()))
			{
				if (!form.getLocalContext().getPaymentGPIsNotNull())//form.ctnVaccineDetails().qmbPaymentGP().getValue() == null)
				{
					listOfErrors.add("Payment GP was not selected");
				}
				else if (form.ctnVaccineDetails().dteActualDate().getValue() != null)
				{
					if (domain.getGpContract(form.getLocalContext().getPaymentGP(), form.ctnVaccineDetails().dteActualDate().getValue()) == null)
					{
						listOfErrors.add("Selected Payment GP doesn't have a valid contract at selected actual delivered date");
					}
				}
			}
		}


		int errorCount = listOfErrors.size();
		if (errorCount == 0)
			return null;

		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);

		return result;
	}

	@Override
	protected DeliverShotDetailsVo populateDataFromScreen(DeliverShotDetailsVo value)
	{
		if(value == null)
			value = new ims.pci.vo.DeliverShotDetailsVo();

		value.setDeliveredDate(form.ctnVaccineDetails().dteActualDate().getValue());

		if (form.ctnVaccineDetails().qmbBatchNumber().getValue() != null)
		{
			value.setBatchNumber(form.ctnVaccineDetails().qmbBatchNumber().getValue().getBatchNumber());
			value.setVaccineManufacturer(form.ctnVaccineDetails().qmbBatchNumber().getValue().getManufacturer());
			value.setExpiryDate(form.ctnVaccineDetails().qmbBatchNumber().getValue().getExpiryDate());
		}

		value.setPaymentType(form.ctnVaccineDetails().cmbPaymentType().getValue());

		if(form.ctnVaccineDetails().cmbPaymentType().getValue() != null)
		{
			if(PaymentType.AMO.equals(form.ctnVaccineDetails().cmbPaymentType().getValue()) && form.ctnVaccineDetails().qmbDeliveredBy().getValue() instanceof HcpLiteVo)
			{
				value.setDeliveredBy((HcpLiteVo) form.ctnVaccineDetails().qmbDeliveredBy().getValue());
			}
			else if(PaymentType.GP.equals(form.ctnVaccineDetails().cmbPaymentType().getValue()) || PaymentType.NONPAYGP.equals(form.ctnVaccineDetails().cmbPaymentType().getValue()))
			{
				value.setDeliveredByGp(form.getLocalContext().getDeliveredByGp());
			}
		}
		
		/*if (form.ctnVaccineDetails().qmbDeliveredBy().getValue() instanceof GpLiteWithNameVo)
		{
			value.setDeliveredByGp((GpLiteWithNameVo) form.ctnVaccineDetails().qmbDeliveredBy().getValue());
		}
		else if (form.ctnVaccineDetails().qmbDeliveredBy().getValue() instanceof HcpLiteVo)
		{
			value.setDeliveredBy((HcpLiteVo) form.ctnVaccineDetails().qmbDeliveredBy().getValue());
		}
		else
		{
			value.setDeliveredBy(null);
			value.setDeliveredByGp(null);
		}*/

		value.setPaymentGp(form.getLocalContext().getPaymentGP());//form.ctnVaccineDetails().qmbPaymentGP().getValue());

		return value;
	}
	
	private void cancelDose() 
	{
		engine.open(form.getForms().PCI.CancelDetailsDialog);
	}
	
	private void undoDoseCancellation() throws PresentationLogicException
	{
		if (!(form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo))
			throw new CodingRuntimeException("Major Logical Error - Undo Shot Cancellation Options is available only for a ClientScheduleStageVaccineVo");
		
		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		if (clientImmunisationSchedule == null)
			throw new CodingRuntimeException("Major Logical Error - A schedule must be defined for Undo Shot Cancellation to be available");
		
		ClientScheduleStageVaccineVo dose = resetCancelationDetails((ClientScheduleStageVaccineVo) form.dyngrdStages().getValue());

		if (dose != null && form.dyngrdStages().getSelectedRow() != null && form.dyngrdStages().getSelectedRow().getParent() != null && form.dyngrdStages().getSelectedRow().getParent().getValue() != null)
		{
			ClientScheduleStageVaccineVo vaccineDetails = clientImmunisationSchedule.getVaccineDetails((ClientScheduleStageVo) form.dyngrdStages().getSelectedRow().getParent().getValue(), dose.getVaccine());
			
			vaccineDetails = dose;
			
			if (save())
				open();
		}
	}

	
	private ClientScheduleStageVaccineVo resetCancelationDetails(ClientScheduleStageVaccineVo dose)
	{
		if (dose == null)
			return null;
		
		dose.setCancelledBy(null);
		dose.setCancellationReason(null);
		dose.setCancellationDateTime(null);
		dose.setIsCancelled(false);

		return dose;
	}

	private void saveCancelDose() throws PresentationLogicException
	{
		if (!(form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo))
			throw new CodingRuntimeException("Major Logical Error - Cancel Dose Options are available only for a ClientScheduleStageVaccineVo");

		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		if (clientImmunisationSchedule == null)
			throw new CodingRuntimeException("Major Logical Error - A schedule must be defined for Cancel Dose Options to be available");
		
		CancelDetailsVo cancelDetails = form.getGlobalContext().PCI.getCancelDetails();
		if (cancelDetails == null)
			return;
		
		ClientScheduleStageVaccineVo dose = populateWithCancelDetails((ClientScheduleStageVaccineVo) form.dyngrdStages().getValue(), cancelDetails);
		
		if(dose != null && form.dyngrdStages().getSelectedRow() != null && form.dyngrdStages().getSelectedRow().getParent() != null && form.dyngrdStages().getSelectedRow().getParent().getValue() != null)
		{
			ClientScheduleStageVaccineVo vaccineDetails = clientImmunisationSchedule.getVaccineDetails((ClientScheduleStageVo) form.dyngrdStages().getSelectedRow().getParent().getValue(), dose.getVaccine());
			vaccineDetails = dose;
			
			if(save())
				open();
		}
	}

	private ClientScheduleStageVaccineVo populateWithCancelDetails(ClientScheduleStageVaccineVo dose, CancelDetailsVo cancelDetails) 
	{
		if(dose == null || cancelDetails == null)
			return null;
		
		dose.setCancelledBy(cancelDetails.getCancelledBy());
		dose.setCancellationReason(cancelDetails.getCancellationReason());
		dose.setCancellationDateTime(cancelDetails.getCancellationDateTime());
		dose.setIsCancelled(true);
		
		return dose;
	}
	
	private void clearVaccinationDetails() throws PresentationLogicException 
	{
		if (form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo)
		{
			form.getLocalContext().setClearVaccinationDetailsBoxId(engine.showMessage("Do you wish to clear the details for this vaccine?", "Please Confirm", MessageButtons.YESNO));
		}
	}

	private void saveVaccineWithoutDetails() throws PresentationLogicException 
	{
		if (!(form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo))
			throw new CodingRuntimeException("Major Logical Error - Clear Vaccination Details Options are available only for a ClientScheduleStageVaccineVo");

		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		if (clientImmunisationSchedule == null)
			throw new CodingRuntimeException("Major Logical Error - A schedule must be defined for Clear Vaccination Details Options to be available");
		
		ClientScheduleStageVaccineVo clearDose = clearDetailsForSelectedVaccine((ClientScheduleStageVaccineVo) form.dyngrdStages().getValue());
		
		if(clearDose != null && form.dyngrdStages().getSelectedRow() != null && form.dyngrdStages().getSelectedRow().getParent() != null && form.dyngrdStages().getSelectedRow().getParent().getValue() != null)
		{
			ClientScheduleStageVaccineVo vaccineDetails = clientImmunisationSchedule.getVaccineDetails((ClientScheduleStageVo) form.dyngrdStages().getSelectedRow().getParent().getValue(), clearDose.getVaccine());
			vaccineDetails = clearDose;
			
			if (!clientImmunisationSchedule.doesOneVaccineFromTheScheduleHasDeliveryDate(clearDose.getVaccine(), (ClientScheduleStageVo) form.dyngrdStages().getSelectedRow().getParent().getValue()))
				setVaccineStatus(clientImmunisationSchedule, vaccineDetails, VaccineStatus.SCHEDULED);
			
			if(save())
				open();
		}
	}
	
	private void setVaccineStatus(ClientImmunisationScheduleVo clientImmunisationSchedule, ClientScheduleStageVaccineVo vaccineDetails, VaccineStatus status) 
	{
		if(clientImmunisationSchedule == null || vaccineDetails == null || status == null)
			return;
		
		ClientVaccineSummaryVo vaccineSummary = clientImmunisationSchedule.getVaccineSummary(vaccineDetails.getVaccine());
		
		for (int i = 0; i < clientImmunisationSchedule.getStages().size(); i++)
		{
			ClientScheduleStageVo stageVo = clientImmunisationSchedule.getStages().get(i);
			if (stageVo.getVaccines() == null)
				continue;
	
			for (int k = 0; k < stageVo.getVaccines().size(); k++)
			{
				ClientScheduleStageVaccineVo vaccineVo = stageVo.getVaccines().get(k);
				if (vaccineVo == null)
					continue;
	
				if (vaccineDetails.getVaccine().equals(vaccineVo.getVaccine()))
				{
					if (Boolean.TRUE.equals(vaccineVo.getIsDeleted()))
						continue;
	
					VaccineStatusLiteVo vaccStatus = new VaccineStatusLiteVo();
					vaccStatus.setStatus(status);
					vaccStatus.setTerminatedBy(null);
					vaccStatus.setTerminationReason(null);
					vaccineSummary.setNewStatusTo(vaccStatus);
				}
			}
		}
	}

	private ClientScheduleStageVaccineVo clearDetailsForSelectedVaccine(ClientScheduleStageVaccineVo dose) 
	{
		if(dose == null)
			return null;
		
		dose.setDeliveredDate(null);
		dose.setBatchNumber(null);
		dose.setVaccineManufacturer(null);
		dose.setExpiryDate(null);
		dose.setPaymentType(null);
		dose.setDeliveredByGp(null);
		dose.setDeliveredByMedic(null);
		dose.setPaymentGp(null);
		dose.setIsExtracted(false);
		dose.setTerminatedBy(null);
		dose.setTerminatedDate(null);
		dose.setTerminationReason(null);
		dose.setCancellationDateTime(null);
		dose.setCancellationReason(null);
		dose.setCancelledBy(null);
		dose.setIsCancelled(null);
		
		return dose;
	}
	
	private void displayClientAddress() 
	{
		if(form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getAddressIsNotNull())
		{
			String address = "<b> <p style='text-align:right'>" + form.getGlobalContext().Core.getPatientShort().getAddress().toDisplayString() + "</p> </b>";
			form.htmAddress().setHTML(address);
		}
	}

	private void updateScheduleDate() 
	{
		if (!(form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo))
			throw new CodingRuntimeException("Major Logical Error - Cancel Dose Options are available only for a ClientScheduleStageVaccineVo");
		
		ClientScheduleStageVaccineVo shot = (ClientScheduleStageVaccineVo) form.dyngrdStages().getValue();
		form.getGlobalContext().PCI.setScheduleDate(shot.getScheduledDate());
		engine.open(form.getForms().PCI.ScheduleDateDialog);
	}
	
	private void saveNewScheduleDate() throws PresentationLogicException 
	{
		if (!(form.dyngrdStages().getValue() instanceof ClientScheduleStageVaccineVo))
			throw new CodingRuntimeException("Major Logical Error - Cancel Dose Options are available only for a ClientScheduleStageVaccineVo");

		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		if (clientImmunisationSchedule == null)
			throw new CodingRuntimeException("Major Logical Error - A schedule must be defined for Cancel Dose Options to be available");
		
		Date newScheduledate = form.getGlobalContext().PCI.getScheduleDate();
		
		if (newScheduledate == null)
			return;
		
		if(((ClientScheduleStageVaccineVo) form.dyngrdStages().getValue()).getScheduledDateIsNotNull() && ((ClientScheduleStageVaccineVo) form.dyngrdStages().getValue()).getScheduledDate().equals(newScheduledate))
			return;
		
		ClientScheduleStageVaccineVo dose = populateWithNewScheduleDate((ClientScheduleStageVaccineVo) form.dyngrdStages().getValue(), newScheduledate);
		
		if(dose != null && form.dyngrdStages().getSelectedRow() != null && form.dyngrdStages().getSelectedRow().getParent() != null && form.dyngrdStages().getSelectedRow().getParent().getValue() != null)
		{
			ClientScheduleStageVaccineVo vaccineDetails = clientImmunisationSchedule.getVaccineDetails((ClientScheduleStageVo) form.dyngrdStages().getSelectedRow().getParent().getValue(), dose.getVaccine());
			vaccineDetails = dose;
			
			if(save())
				open();
		}
	}

	private ClientScheduleStageVaccineVo populateWithNewScheduleDate(ClientScheduleStageVaccineVo dose, Date newScheduledate) 
	{
		if(dose == null || newScheduledate == null)
			return null;
		
		dose.setScheduledDate(newScheduledate);
		
		return dose;
	}
	
	private void alertToTerminate() 
	{
		ClientScheduleStageVaccineVo vaccine = form.ctnVaccineDetails().cmbVaccine().getValue();
		ClientScheduleStageVo stage = form.ctnVaccineDetails().cmbStage().getValue();
		
		if(vaccine == null 
				|| vaccine.getStageVaccine() == null 
					|| vaccine.getStageVaccine().getVaccine() == null 
						|| vaccine.getStageVaccine().getVaccine().getTaxonomyMap() == null)
			return;
		
		PartialDate dob = (PartialDate) form.getGlobalContext().Core.getPatientShort().getDob().clone();
		
		if(dob == null || form.ctnVaccineDetails().dteActualDate().getValue() == null || getDiff(dob.toDate().getDate(), form.ctnVaccineDetails().dteActualDate().getValue().getDate()) < 1)
			return;
		
		for(int i=0; i<vaccine.getStageVaccine().getVaccine().getTaxonomyMap().size(); i++)
		{
			TaxonomyMap taxMap = vaccine.getStageVaccine().getVaccine().getTaxonomyMap().get(i);
			
			if(taxMap == null)
				continue;
			
			if(taxMap.getTaxonomyNameIsNotNull() && taxMap.getTaxonomyName().getID() == MAXIMS_INTERNAL)
			{
				if(taxMap.getTaxonomyCodeIsNotNull()
						&& (taxMap.getTaxonomyCode().equals(TAX_MENC) || taxMap.getTaxonomyCode().equals(TAX_PCV)))
				{
					if(isLastVaccine(stage, vaccine))
						continue;
					
					engine.showMessage("Warning! Terminate outstanding dose(s) of " + vaccine.getVaccineName() + " as this vaccine dose has been administered to child > 12 months old.", "Warning", MessageButtons.OK);
				}
				
				if(taxMap.getTaxonomyCodeIsNotNull()
						&& (taxMap.getTaxonomyCode().equals(TAX_5IN1) || taxMap.getTaxonomyCode().equals(TAX_6IN1)))
				{
					engine.showMessage("Warning! Terminate Hib Booster as this vaccine dose has been administered to child > 12 months old.", "Warning", MessageButtons.OK);
				}
			}
		}
	}
	
	private boolean isLastVaccine(ClientScheduleStageVo stage, ClientScheduleStageVaccineVo vaccine) 
	{
		if(stage == null)
			return true;
			
		if(vaccine == null 
				|| vaccine.getStageVaccine() == null 
					|| vaccine.getStageVaccine().getVaccine() == null)
			return true;
		
		if(vaccine.getStageVaccine().getIsLastShotForVaccineIsNotNull() && vaccine.getStageVaccine().getIsLastShotForVaccine())
			return true;
		
		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		
		for (int i = 0; i < clientImmunisationSchedule.getStages().size(); i++)
		{
			ClientScheduleStageVo stageVo = clientImmunisationSchedule.getStages().get(i);
			if (stageVo.getVaccines() == null)
				continue;

			for (int k = 0; k < stageVo.getVaccines().size(); k++)
			{
				ClientScheduleStageVaccineVo vaccineVo = stageVo.getVaccines().get(k);
				if (vaccineVo == null)
					continue;
				
				if (vaccine.getVaccine().equals(vaccineVo.getVaccine()) && !stage.equals(stageVo) && !vaccineVo.getDeliveredDateIsNotNull())
				{
					return false;
				}
			}
		}
		
		return true;
	}

	private int getDiff( java.util.Date pFrom, java.util.Date pTo )
    {
        int lMultiplier = 1;
        if ( pFrom.after( pTo ) )
        {
            lMultiplier = -1;
            java.util.Date pTemp = pTo;
            pTo = pFrom;
            pFrom = pTemp;
        }
 
        Calendar lFrom = new GregorianCalendar();
        lFrom.setTime( pFrom );
        Calendar lTo = new GregorianCalendar();
        lTo.setTime( pTo );
 
        int lFromYear = lFrom.get( Calendar.YEAR );
        int lFromMonth = lFrom.get( Calendar.MONTH );
        int lFromDay = lFrom.get( Calendar.DAY_OF_MONTH );
 
        int lToYear = lTo.get( Calendar.YEAR );
        int lToMonth = lTo.get( Calendar.MONTH );
        int lToDay = lTo.get( Calendar.DAY_OF_MONTH );
 
        int lYearDiff = lToYear - lFromYear;
        int lMonthDiff = lToMonth - lFromMonth;
        int lDayDiff = lToDay - lFromDay;
 
        if ( lDayDiff < 0 )
        {
            lMonthDiff--;
            Calendar lTemp = new GregorianCalendar();
            lTemp.setTime( pTo );
            lTemp.add( lTemp.MONTH, -1 );
            lDayDiff = lTemp.getActualMaximum( lTemp.DAY_OF_MONTH ) + lDayDiff;
        }
 
        if ( lMonthDiff < 0 )
        {
            lYearDiff--;
            lMonthDiff = 12 + lMonthDiff;
        }
 
        return lMultiplier *lYearDiff ;
    }

	
	private void terminateFullVaccinationSchedule() 
	{
		// Pass termination details to dialog
		TerminationDetailsVo terminationDetails = new TerminationDetailsVo();
		terminationDetails.setTerminatedBy(TerminatedBy.GP);
		form.getGlobalContext().PCI.setTerminationDetails(terminationDetails);

		// Call termination dialog
		engine.open(form.getForms().PCI.TerminateAllDialog);
	}
	
	private void terminateAll() throws PresentationLogicException 
	{
		ClientImmunisationScheduleVo clientImmunisationSchedule = form.getGlobalContext().PCI.getClientImmunisationSchedule();
		if (clientImmunisationSchedule == null)
			throw new CodingRuntimeException("Major Logical Error - A schedule must be defined for TERMINATE Options to be available");

		for(int i=0; i<clientImmunisationSchedule.getStages().size(); i++)
		{
			ClientScheduleStageVo stageVo = clientImmunisationSchedule.getStages().get(i);
			if (stageVo.getVaccines() == null)
				continue;
	
			for (int k = 0; k < stageVo.getVaccines().size(); k++)
			{
				ClientScheduleStageVaccineVo vaccine = stageVo.getVaccines().get(k);
				
				if (vaccine == null)
					continue;
	
				TerminationDetailsVo terminationDetails = form.getGlobalContext().PCI.getTerminationDetails();
				
				if (terminationDetails == null)
					return;
				
				ClientVaccineSummaryVo vaccSummary = clientImmunisationSchedule.getVaccineSummary(vaccine.getVaccine());
				if(vaccSummary != null && vaccSummary.getCurrentStatusIsNotNull() && vaccSummary.getCurrentStatus().getStatusIsNotNull() && (vaccSummary.getCurrentStatus().getStatus().equals(VaccineStatus.TERMINATEDBYGP) || vaccSummary.getCurrentStatus().getStatus().equals(VaccineStatus.TERMINATEDBYPARENTGUARDIAN) || vaccSummary.getCurrentStatus().getStatus().equals(VaccineStatus.COMPLETED)))
					continue;
				
				clientImmunisationSchedule.terminateVaccine(vaccine.getVaccine(), terminationDetails);
			}
		}
		
		if (save())
			open();
	}
}
