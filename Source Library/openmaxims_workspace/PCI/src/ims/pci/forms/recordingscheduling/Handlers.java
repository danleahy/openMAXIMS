//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pci.forms.recordingscheduling;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbPaymentTypeLookup();
	abstract protected void defaultcmbPaymentTypeLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdStagesRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdStagesRowSelectionCleared() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditShotDetailsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnRecordShotDetailsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbPaymentGPClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbDeliveredByClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbVaccineValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbStageValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPaymentTypeValueSet(Object value);
	abstract protected void onCmbPaymentTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbBatchNumberValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbBatchNumberTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbDeliveredByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setMessageBoxClosedEvent(new MessageBoxClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onMessageBoxClosed(messageBoxId, result);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.dyngrdStages().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdStagesRowSelectionChanged(row);
			}
		});
		this.form.dyngrdStages().setDynamicGridRowSelectionClearedEvent(new DynamicGridRowSelectionCleared()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdStagesRowSelectionCleared();
			}
		});
		this.form.btnEditShotDetails().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditShotDetailsClick();
			}
		});
		this.form.btnRecordShotDetails().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnRecordShotDetailsClick();
			}
		});
		this.form.ctnVaccineDetails().imbPaymentGP().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbPaymentGPClick();
			}
		});
		this.form.ctnVaccineDetails().imbDeliveredBy().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbDeliveredByClick();
			}
		});
		this.form.ctnVaccineDetails().cmbVaccine().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbVaccineValueChanged();
			}
		});
		this.form.ctnVaccineDetails().cmbStage().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbStageValueChanged();
			}
		});
		this.form.ctnVaccineDetails().cmbPaymentType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPaymentTypeValueSet(value);
			}
		});
		this.form.ctnVaccineDetails().cmbPaymentType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbPaymentTypeValueChanged();
			}
		});
		this.form.ctnVaccineDetails().qmbBatchNumber().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbBatchNumberValueChanged();
			}
		});
		this.form.ctnVaccineDetails().qmbBatchNumber().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbBatchNumberTextSubmited(value);
			}
		});
		this.form.ctnVaccineDetails().qmbDeliveredBy().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbDeliveredByTextSubmited(value);
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingADHOCItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.ADHOC, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingRECORDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.RECORD, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.EDIT, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingRESTARTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.RESTART, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingDELETEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.DELETE, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingTERMINATEDBYGPItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.TERMINATEDBYGP, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingTERMINATEDBYPATIENTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.TERMINATEDBYPATIENT, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingTERMINATEALLItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.TERMINATEALL, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.ADD, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingCANCELDOSEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.CANCELDOSE, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingCLEARVACCINATIONDETAILSItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.CLEARVACCINATIONDETAILS, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingUPDATESCHEDULEDATEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.UPDATESCHEDULEDATE, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingREMOVEVACCINEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.REMOVEVACCINE, sender);
			}
		});
		this.form.getContextMenus().PCI.getRecordingSchedulingUNDOCANCELDOSEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.PCINamespace.RecordingScheduling.UNDOCANCELDOSE, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbPaymentTypeLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbPaymentTypeLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbPaymentTypeLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
