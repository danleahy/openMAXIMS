//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pci.forms.recordingscheduling;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnVaccineDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbVaccineComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.pci.vo.ClientScheduleStageVaccineVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.pci.vo.ClientScheduleStageVaccineVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.pci.vo.ClientScheduleStageVaccineVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.pci.vo.ClientScheduleStageVaccineVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.pci.vo.ClientScheduleStageVaccineVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.pci.vo.ClientScheduleStageVaccineVo getValue()
			{
				return (ims.pci.vo.ClientScheduleStageVaccineVo)super.control.getValue();
			}
			public void setValue(ims.pci.vo.ClientScheduleStageVaccineVo value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbStageComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.pci.vo.ClientScheduleStageVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.pci.vo.ClientScheduleStageVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.pci.vo.ClientScheduleStageVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.pci.vo.ClientScheduleStageVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.pci.vo.ClientScheduleStageVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.pci.vo.ClientScheduleStageVo getValue()
			{
				return (ims.pci.vo.ClientScheduleStageVo)super.control.getValue();
			}
			public void setValue(ims.pci.vo.ClientScheduleStageVo value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbPaymentTypeComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.pci.vo.lookups.PaymentType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.pci.vo.lookups.PaymentType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.pci.vo.lookups.PaymentType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.pci.vo.lookups.PaymentType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.pci.vo.lookups.PaymentType value)
			{
				return super.control.removeRow(value);
			}
			public ims.pci.vo.lookups.PaymentType getValue()
			{
				return (ims.pci.vo.lookups.PaymentType)super.control.getValue();
			}
			public void setValue(ims.pci.vo.lookups.PaymentType value)
			{
				super.control.setValue(value);
			}
		}
		public static class qmbBatchNumberComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.VaccineManufacturerBatchVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.VaccineManufacturerBatchVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.VaccineManufacturerBatchVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.VaccineManufacturerBatchVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.VaccineManufacturerBatchVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.VaccineManufacturerBatchVo getValue()
			{
				return (ims.core.vo.VaccineManufacturerBatchVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.VaccineManufacturerBatchVo value)
			{
				super.control.setValue(value);
			}
			public void setEditedText(String text)
			{
				super.control.setEditedText(text);
			}
			public String getEditedText()
			{
				return super.control.getEditedText();
			}
		}
		public static class qmbDeliveredByComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(java.lang.Object value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(java.lang.Object value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(java.lang.Object value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(java.lang.Object value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(java.lang.Object value)
			{
				return super.control.removeRow(value);
			}
			public java.lang.Object getValue()
			{
				return super.control.getValue();
			}
			public void setValue(java.lang.Object value)
			{
				super.control.setValue(value);
			}
			public void setEditedText(String text)
			{
				super.control.setEditedText(text);
			}
			public String getEditedText()
			{
				return super.control.getEditedText();
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 624, 88, 74, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Expiry Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 41, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Stage:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 88, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Batch number:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 87, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Payment type:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 129, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Actual date delivered:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 343, 88, 85, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Manufacturer:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 137, 79, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Delivered by:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 164, 78, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Payment GP:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 52, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Vaccine:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 812, 135, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 812, 162, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 152, 162, 624, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 152, 135, 624, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 700, 86, 112, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 432, 86, 175, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 152, 62, 176, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 152, 38, 288, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_cmbVaccineTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbVaccineTemp);
			cmbVaccineComboBox cmbVaccine = (cmbVaccineComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbVaccineComboBox.class, m_cmbVaccineTemp);
			super.addComboBox(cmbVaccine);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 152, 14, 288, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_cmbStageTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbStageTemp);
			cmbStageComboBox cmbStage = (cmbStageComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStageComboBox.class, m_cmbStageTemp);
			super.addComboBox(cmbStage);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 152, 110, 660, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_cmbPaymentTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbPaymentTypeTemp);
			cmbPaymentTypeComboBox cmbPaymentType = (cmbPaymentTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPaymentTypeComboBox.class, m_cmbPaymentTypeTemp);
			super.addComboBox(cmbPaymentType);
	
			// Query ComboBox Controls
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 152, 86, 176, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			ComboBox m_qmbBatchNumberTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
			addControl(m_qmbBatchNumberTemp);
			qmbBatchNumberComboBox qmbBatchNumber = (qmbBatchNumberComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbBatchNumberComboBox.class, m_qmbBatchNumberTemp);
			super.addComboBox(qmbBatchNumber);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 152, 135, 660, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_qmbDeliveredByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
			addControl(m_qmbDeliveredByTemp);
			qmbDeliveredByComboBox qmbDeliveredBy = (qmbDeliveredByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbDeliveredByComboBox.class, m_qmbDeliveredByTemp);
			super.addComboBox(qmbDeliveredBy);
	
			// Image Buttons Controls
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 784, 158, 28, 28, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, form_images_local.Core.ZoomInfoEnabled24, form_images_local.Core.ZoomInfoDisabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 784, 131, 28, 28, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, form_images_local.Core.ZoomInfoEnabled24, form_images_local.Core.ZoomInfoDisabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public TextBox txtDeliveredRequired()
		{
			return (TextBox)super.getControl(9);
		}
		public TextBox txtPaymentGPRequired()
		{
			return (TextBox)super.getControl(10);
		}
		public TextBox txtPaymentGP()
		{
			return (TextBox)super.getControl(11);
		}
		public TextBox txtDeliveredBy()
		{
			return (TextBox)super.getControl(12);
		}
		public TextBox txtExpiryDate()
		{
			return (TextBox)super.getControl(13);
		}
		public TextBox txtManufacturer()
		{
			return (TextBox)super.getControl(14);
		}
		public DateControl dteActualDate()
		{
			return (DateControl)super.getControl(15);
		}
		public cmbVaccineComboBox cmbVaccine()
		{
			return (cmbVaccineComboBox)super.getComboBox(0);
		}
		public cmbStageComboBox cmbStage()
		{
			return (cmbStageComboBox)super.getComboBox(1);
		}
		public cmbPaymentTypeComboBox cmbPaymentType()
		{
			return (cmbPaymentTypeComboBox)super.getComboBox(2);
		}
		public qmbBatchNumberComboBox qmbBatchNumber()
		{
			return (qmbBatchNumberComboBox)super.getComboBox(3);
		}
		public qmbDeliveredByComboBox qmbDeliveredBy()
		{
			return (qmbDeliveredByComboBox)super.getComboBox(4);
		}
		public ImageButton imbPaymentGP()
		{
			return (ImageButton)super.getControl(21);
		}
		public ImageButton imbDeliveredBy()
		{
			return (ImageButton)super.getControl(22);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.PCI.contextMenuRecordingScheduling = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.PCI.contextMenuRecordingSchedulingADHOCItem = factory.createMenuItem(startControlID.intValue() + 1, "Ad-Hoc Schedule", true, false, new Integer(103137), true, false);
		contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingADHOCItem);
		contextMenus.PCI.contextMenuRecordingSchedulingRECORDItem = factory.createMenuItem(startControlID.intValue() + 2, "Record Shot Details", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2120001)))
			contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingRECORDItem);
		contextMenus.PCI.contextMenuRecordingSchedulingEDITItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit Shot Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2120002)))
			contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingEDITItem);
		contextMenus.PCI.contextMenuRecordingSchedulingRESTARTItem = factory.createMenuItem(startControlID.intValue() + 4, "Restart Schedule", true, false, new Integer(102169), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2120004)))
			contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingRESTARTItem);
		contextMenus.PCI.contextMenuRecordingSchedulingDELETEItem = factory.createMenuItem(startControlID.intValue() + 5, "Delete Vaccination Schedule", true, false, new Integer(102300), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2120003)))
			contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingDELETEItem);
		contextMenus.PCI.contextMenuRecordingSchedulingTERMINATEDBYGPItem = factory.createMenuItem(startControlID.intValue() + 6, "Terminated By GP", true, false, new Integer(102320), true, true);
		contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingTERMINATEDBYGPItem);
		contextMenus.PCI.contextMenuRecordingSchedulingTERMINATEDBYPATIENTItem = factory.createMenuItem(startControlID.intValue() + 7, "Terminated By Patient", true, false, new Integer(102321), true, false);
		contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingTERMINATEDBYPATIENTItem);
		contextMenus.PCI.contextMenuRecordingSchedulingTERMINATEALLItem = factory.createMenuItem(startControlID.intValue() + 8, "Terminate Vaccination Schedule", true, false, new Integer(102487), true, false);
		contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingTERMINATEALLItem);
		contextMenus.PCI.contextMenuRecordingSchedulingADDItem = factory.createMenuItem(startControlID.intValue() + 9, "Add Schedule", true, false, new Integer(102179), true, true);
		contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingADDItem);
		contextMenus.PCI.contextMenuRecordingSchedulingCANCELDOSEItem = factory.createMenuItem(startControlID.intValue() + 10, "Cancel Shot", true, false, new Integer(102148), true, false);
		contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingCANCELDOSEItem);
		contextMenus.PCI.contextMenuRecordingSchedulingCLEARVACCINATIONDETAILSItem = factory.createMenuItem(startControlID.intValue() + 11, "Clear Vaccination Details", true, false, new Integer(102168), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2120005)))
			contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingCLEARVACCINATIONDETAILSItem);
		contextMenus.PCI.contextMenuRecordingSchedulingUPDATESCHEDULEDATEItem = factory.createMenuItem(startControlID.intValue() + 12, "Update Schedule Date", true, false, new Integer(102306), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2120006)))
			contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingUPDATESCHEDULEDATEItem);
		contextMenus.PCI.contextMenuRecordingSchedulingREMOVEVACCINEItem = factory.createMenuItem(startControlID.intValue() + 13, "Remove Vaccine", true, false, new Integer(102300), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2120007)))
			contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingREMOVEVACCINEItem);
		contextMenus.PCI.contextMenuRecordingSchedulingUNDOCANCELDOSEItem = factory.createMenuItem(startControlID.intValue() + 14, "Undo Shot Cancellation", true, false, new Integer(102558), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2120008)))
			contextMenus.PCI.contextMenuRecordingScheduling.add(contextMenus.PCI.contextMenuRecordingSchedulingUNDOCANCELDOSEItem);
		form.registerMenu(contextMenus.PCI.contextMenuRecordingScheduling);


		// Container Clasess
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 384, 832, 208, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnVaccineDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Vaccines Details", new Boolean(true)});
		addControl(m_ctnVaccineDetails);
		ctnVaccineDetailsContainer ctnVaccineDetails = (ctnVaccineDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnVaccineDetailsContainer.class, m_ctnVaccineDetails, factory);
		ims.framework.utils.SizeInfo m_ctnVaccineDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 208);
		ims.framework.utils.SizeInfo m_ctnVaccineDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper24.getWidth(), anchoringHelper24.getHeight());
		ctnVaccineDetails.setContext(form, appForm, m_ctnVaccineDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnVaccineDetailsDesignSize, m_ctnVaccineDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnVaccineDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 144, 600, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Shot Details", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Record Shot Details", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 768, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 352, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.PCI.contextMenuRecordingScheduling, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// HTML Viewer Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnVaccineDetailsContainer ctnVaccineDetails()
	{
		return (ctnVaccineDetailsContainer)super.getContainer(0);
	}
	public Button btnEditShotDetails()
	{
		return (Button)super.getControl(1);
	}
	public Button btnRecordShotDetails()
	{
		return (Button)super.getControl(2);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(3);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(4);
	}
	public DynamicGrid dyngrdStages()
	{
		return (DynamicGrid)super.getControl(5);
	}
	public HTMLViewer htmAddress()
	{
		return (HTMLViewer)super.getControl(6);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			PCI = new PCIForms();
			Core = new CoreForms();
		}
		public final class PCIForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private PCIForms()
			{
				AdHocScheduleDialog = new LocalFormName(133109);
				AddScheduleConfigurationDialog = new LocalFormName(133120);
				TerminationDetailsDialog = new LocalFormName(133121);
				CancelDetailsDialog = new LocalFormName(133127);
				ScheduleDateDialog = new LocalFormName(133128);
				TerminateAllDialog = new LocalFormName(133129);
			}
			public final FormName AdHocScheduleDialog;
			public final FormName AddScheduleConfigurationDialog;
			public final FormName TerminationDetailsDialog;
			public final FormName CancelDetailsDialog;
			public final FormName ScheduleDateDialog;
			public final FormName TerminateAllDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				GpSelectionOnly = new LocalFormName(102251);
				GPSelection = new LocalFormName(102137);
			}
			public final FormName GpSelectionOnly;
			public final FormName GPSelection;
		}

		public PCIForms PCI;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ZoomInfoDisabled24 = new ImageHelper(102514, "Images/Core/zoom_info_disabled_24.png", new Integer(24), new Integer(24));
				ZoomInfoEnabled24 = new ImageHelper(102513, "Images/Core/zoom_info_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ZoomInfoDisabled24;
			public final ims.framework.utils.Image ZoomInfoEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_WarningMessageBoxID = new ims.framework.ContextVariable("WarningMessageBoxID", prefix + "_lv_PCI.RecordingScheduling.__internal_x_context__WarningMessageBoxID_" + componentIdentifier + "");
			cxl_ConfirmationType = new ims.framework.ContextVariable("ConfirmationType", prefix + "_lv_PCI.RecordingScheduling.__internal_x_context__ConfirmationType_" + componentIdentifier + "");
			cxl_DeliveredByGp = new ims.framework.ContextVariable("DeliveredByGp", prefix + "_lv_PCI.RecordingScheduling.__internal_x_context__DeliveredByGp_" + componentIdentifier + "");
			cxl_PaymentGP = new ims.framework.ContextVariable("PaymentGP", prefix + "_lv_PCI.RecordingScheduling.__internal_x_context__PaymentGP_" + componentIdentifier + "");
			cxl_OpenDialogForDeliveredBy = new ims.framework.ContextVariable("OpenDialogForDeliveredBy", prefix + "_lv_PCI.RecordingScheduling.__internal_x_context__OpenDialogForDeliveredBy_" + componentIdentifier + "");
			cxl_OpenDialogForPaymentGP = new ims.framework.ContextVariable("OpenDialogForPaymentGP", prefix + "_lv_PCI.RecordingScheduling.__internal_x_context__OpenDialogForPaymentGP_" + componentIdentifier + "");
			cxl_ClearVaccinationDetailsBoxId = new ims.framework.ContextVariable("ClearVaccinationDetailsBoxId", prefix + "_lv_PCI.RecordingScheduling.__internal_x_context__ClearVaccinationDetailsBoxId_" + componentIdentifier + "");
		}
		
		public boolean getWarningMessageBoxIDIsNotNull()
		{
			return !cxl_WarningMessageBoxID.getValueIsNull(context);
		}
		public Integer getWarningMessageBoxID()
		{
			return (Integer)cxl_WarningMessageBoxID.getValue(context);
		}
		public void setWarningMessageBoxID(Integer value)
		{
			cxl_WarningMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WarningMessageBoxID = null;
		public boolean getConfirmationTypeIsNotNull()
		{
			return !cxl_ConfirmationType.getValueIsNull(context);
		}
		public Integer getConfirmationType()
		{
			return (Integer)cxl_ConfirmationType.getValue(context);
		}
		public void setConfirmationType(Integer value)
		{
			cxl_ConfirmationType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfirmationType = null;
		public boolean getDeliveredByGpIsNotNull()
		{
			return !cxl_DeliveredByGp.getValueIsNull(context);
		}
		public ims.core.vo.GpShortVo getDeliveredByGp()
		{
			return (ims.core.vo.GpShortVo)cxl_DeliveredByGp.getValue(context);
		}
		public void setDeliveredByGp(ims.core.vo.GpShortVo value)
		{
			cxl_DeliveredByGp.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DeliveredByGp = null;
		public boolean getPaymentGPIsNotNull()
		{
			return !cxl_PaymentGP.getValueIsNull(context);
		}
		public ims.core.vo.GpShortVo getPaymentGP()
		{
			return (ims.core.vo.GpShortVo)cxl_PaymentGP.getValue(context);
		}
		public void setPaymentGP(ims.core.vo.GpShortVo value)
		{
			cxl_PaymentGP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PaymentGP = null;
		public boolean getOpenDialogForDeliveredByIsNotNull()
		{
			return !cxl_OpenDialogForDeliveredBy.getValueIsNull(context);
		}
		public Boolean getOpenDialogForDeliveredBy()
		{
			return (Boolean)cxl_OpenDialogForDeliveredBy.getValue(context);
		}
		public void setOpenDialogForDeliveredBy(Boolean value)
		{
			cxl_OpenDialogForDeliveredBy.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OpenDialogForDeliveredBy = null;
		public boolean getOpenDialogForPaymentGPIsNotNull()
		{
			return !cxl_OpenDialogForPaymentGP.getValueIsNull(context);
		}
		public Boolean getOpenDialogForPaymentGP()
		{
			return (Boolean)cxl_OpenDialogForPaymentGP.getValue(context);
		}
		public void setOpenDialogForPaymentGP(Boolean value)
		{
			cxl_OpenDialogForPaymentGP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OpenDialogForPaymentGP = null;
		public boolean getClearVaccinationDetailsBoxIdIsNotNull()
		{
			return !cxl_ClearVaccinationDetailsBoxId.getValueIsNull(context);
		}
		public Integer getClearVaccinationDetailsBoxId()
		{
			return (Integer)cxl_ClearVaccinationDetailsBoxId.getValue(context);
		}
		public void setClearVaccinationDetailsBoxId(Integer value)
		{
			cxl_ClearVaccinationDetailsBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClearVaccinationDetailsBoxId = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public PCINamespace PCI = new PCINamespace();
		public final class PCINamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class RecordingScheduling implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADHOC = 1;
				public static final int RECORD = 2;
				public static final int EDIT = 3;
				public static final int RESTART = 4;
				public static final int DELETE = 5;
				public static final int TERMINATEDBYGP = 6;
				public static final int TERMINATEDBYPATIENT = 7;
				public static final int TERMINATEALL = 8;
				public static final int ADD = 9;
				public static final int CANCELDOSE = 10;
				public static final int CLEARVACCINATIONDETAILS = 11;
				public static final int UPDATESCHEDULEDATE = 12;
				public static final int REMOVEVACCINE = 13;
				public static final int UNDOCANCELDOSE = 14;
			}
			public void disableAllRecordingSchedulingMenuItems()
			{
				this.contextMenuRecordingSchedulingADHOCItem.setEnabled(false);
				this.contextMenuRecordingSchedulingRECORDItem.setEnabled(false);
				this.contextMenuRecordingSchedulingEDITItem.setEnabled(false);
				this.contextMenuRecordingSchedulingRESTARTItem.setEnabled(false);
				this.contextMenuRecordingSchedulingDELETEItem.setEnabled(false);
				this.contextMenuRecordingSchedulingTERMINATEDBYGPItem.setEnabled(false);
				this.contextMenuRecordingSchedulingTERMINATEDBYPATIENTItem.setEnabled(false);
				this.contextMenuRecordingSchedulingTERMINATEALLItem.setEnabled(false);
				this.contextMenuRecordingSchedulingADDItem.setEnabled(false);
				this.contextMenuRecordingSchedulingCANCELDOSEItem.setEnabled(false);
				this.contextMenuRecordingSchedulingCLEARVACCINATIONDETAILSItem.setEnabled(false);
				this.contextMenuRecordingSchedulingUPDATESCHEDULEDATEItem.setEnabled(false);
				this.contextMenuRecordingSchedulingREMOVEVACCINEItem.setEnabled(false);
				this.contextMenuRecordingSchedulingUNDOCANCELDOSEItem.setEnabled(false);
			}
			public void hideAllRecordingSchedulingMenuItems()
			{
				this.contextMenuRecordingSchedulingADHOCItem.setVisible(false);
				this.contextMenuRecordingSchedulingRECORDItem.setVisible(false);
				this.contextMenuRecordingSchedulingEDITItem.setVisible(false);
				this.contextMenuRecordingSchedulingRESTARTItem.setVisible(false);
				this.contextMenuRecordingSchedulingDELETEItem.setVisible(false);
				this.contextMenuRecordingSchedulingTERMINATEDBYGPItem.setVisible(false);
				this.contextMenuRecordingSchedulingTERMINATEDBYPATIENTItem.setVisible(false);
				this.contextMenuRecordingSchedulingTERMINATEALLItem.setVisible(false);
				this.contextMenuRecordingSchedulingADDItem.setVisible(false);
				this.contextMenuRecordingSchedulingCANCELDOSEItem.setVisible(false);
				this.contextMenuRecordingSchedulingCLEARVACCINATIONDETAILSItem.setVisible(false);
				this.contextMenuRecordingSchedulingUPDATESCHEDULEDATEItem.setVisible(false);
				this.contextMenuRecordingSchedulingREMOVEVACCINEItem.setVisible(false);
				this.contextMenuRecordingSchedulingUNDOCANCELDOSEItem.setVisible(false);
			}
			private Menu contextMenuRecordingScheduling;
			public ReadOnlyMenuItem getRecordingSchedulingADHOCItem()
			{
				return this.contextMenuRecordingSchedulingADHOCItem;
			}
			private MenuItem contextMenuRecordingSchedulingADHOCItem;
			public ReadOnlyMenuItem getRecordingSchedulingRECORDItem()
			{
				return this.contextMenuRecordingSchedulingRECORDItem;
			}
			private MenuItem contextMenuRecordingSchedulingRECORDItem;
			public ReadOnlyMenuItem getRecordingSchedulingEDITItem()
			{
				return this.contextMenuRecordingSchedulingEDITItem;
			}
			private MenuItem contextMenuRecordingSchedulingEDITItem;
			public ReadOnlyMenuItem getRecordingSchedulingRESTARTItem()
			{
				return this.contextMenuRecordingSchedulingRESTARTItem;
			}
			private MenuItem contextMenuRecordingSchedulingRESTARTItem;
			public ReadOnlyMenuItem getRecordingSchedulingDELETEItem()
			{
				return this.contextMenuRecordingSchedulingDELETEItem;
			}
			private MenuItem contextMenuRecordingSchedulingDELETEItem;
			public ReadOnlyMenuItem getRecordingSchedulingTERMINATEDBYGPItem()
			{
				return this.contextMenuRecordingSchedulingTERMINATEDBYGPItem;
			}
			private MenuItem contextMenuRecordingSchedulingTERMINATEDBYGPItem;
			public ReadOnlyMenuItem getRecordingSchedulingTERMINATEDBYPATIENTItem()
			{
				return this.contextMenuRecordingSchedulingTERMINATEDBYPATIENTItem;
			}
			private MenuItem contextMenuRecordingSchedulingTERMINATEDBYPATIENTItem;
			public ReadOnlyMenuItem getRecordingSchedulingTERMINATEALLItem()
			{
				return this.contextMenuRecordingSchedulingTERMINATEALLItem;
			}
			private MenuItem contextMenuRecordingSchedulingTERMINATEALLItem;
			public ReadOnlyMenuItem getRecordingSchedulingADDItem()
			{
				return this.contextMenuRecordingSchedulingADDItem;
			}
			private MenuItem contextMenuRecordingSchedulingADDItem;
			public ReadOnlyMenuItem getRecordingSchedulingCANCELDOSEItem()
			{
				return this.contextMenuRecordingSchedulingCANCELDOSEItem;
			}
			private MenuItem contextMenuRecordingSchedulingCANCELDOSEItem;
			public ReadOnlyMenuItem getRecordingSchedulingCLEARVACCINATIONDETAILSItem()
			{
				return this.contextMenuRecordingSchedulingCLEARVACCINATIONDETAILSItem;
			}
			private MenuItem contextMenuRecordingSchedulingCLEARVACCINATIONDETAILSItem;
			public ReadOnlyMenuItem getRecordingSchedulingUPDATESCHEDULEDATEItem()
			{
				return this.contextMenuRecordingSchedulingUPDATESCHEDULEDATEItem;
			}
			private MenuItem contextMenuRecordingSchedulingUPDATESCHEDULEDATEItem;
			public ReadOnlyMenuItem getRecordingSchedulingREMOVEVACCINEItem()
			{
				return this.contextMenuRecordingSchedulingREMOVEVACCINEItem;
			}
			private MenuItem contextMenuRecordingSchedulingREMOVEVACCINEItem;
			public ReadOnlyMenuItem getRecordingSchedulingUNDOCANCELDOSEItem()
			{
				return this.contextMenuRecordingSchedulingUNDOCANCELDOSEItem;
			}
			private MenuItem contextMenuRecordingSchedulingUNDOCANCELDOSEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[159];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_PCI.ClientImmunisationSchedule", "BO-1091100006-ID", "ID_ClientImmunisationSchedule");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-ID", "ID_Gp");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-STATUS", "Status");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_PCI.ClientAddSchedule", "BO-1091100002-ID", "ID_ScheduleConfiguration");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_PCI.ClientAddSchedule", "BO-1091100002-SCHEDULENAME", "ScheduleName");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_PCI.ClientAddSchedule", "BO-1091100002-STATUS", "Status");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_PCI.ClientAddSchedule", "BO-1091100002-STARTDOB", "StartDob");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_PCI.ClientAddSchedule", "BO-1091100002-ENDDOB", "EndDob");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_PCI.ClientAddSchedule", "BO-1091100002-ISDEFAULTSCHEDULE", "IsDefaultSchedule");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_PCI.ClientAddSchedule", "BO-1091100002-SCHEDULETYPE", "ScheduleType");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_PCI.ClientAddSchedule", "BO-1091100002-CAMPAIGNSTARTDATE", "CampaignStartDate");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_PCI.RecordingScheduling.__internal_x_context__DeliveredByGp_" + componentIdentifier, "BO-1006100001-ID", "ID_Gp");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_PCI.RecordingScheduling.__internal_x_context__DeliveredByGp_" + componentIdentifier, "BO-1006100001-STATUS", "Status");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_PCI.RecordingScheduling.__internal_x_context__PaymentGP_" + componentIdentifier, "BO-1006100001-ID", "ID_Gp");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_PCI.RecordingScheduling.__internal_x_context__PaymentGP_" + componentIdentifier, "BO-1006100001-STATUS", "Status");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
