//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.62 build 3040.26452)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.forms.townlandadmin;

import java.util.ArrayList;

import ims.core.vo.DEDLiteVo;
import ims.core.vo.DEDLiteVoCollection;
import ims.core.vo.TownlandShortVo;
import ims.core.vo.TownlandShortVoCollection;
import ims.core.vo.TownlandVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
		super.initialize();
		clearSearch();
		form.getLocalContext().setcanSearch(false);
		form.ctnTownland().customControlMap().initialize();
	}
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		cancelInstance();
	}
	private void cancelInstance() throws PresentationLogicException 
	{
		if(form.getLocalContext().getlastRecord() != null && form.getLocalContext().getlastRecord().countFieldsWithValue() == 0)
		{
			form.getLocalContext().setlastRecord(null);
		}
		open();
	}
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearch();
		// WDEV-12543 - Also clear the instance controls
		clearScreen();

		// WDEV-12543 - update controls state
		updateControlsState();
	}
	private void clearSearch() 
	{
		form.txtTownlandSearch().setValue(null);
		form.cmbCountySearch().setValue(null);
		form.qmbDEDSearch().setValue(null);
		form.chkActiveSearch().setValue(true);
		form.grdTownland().getRows().clear();
		form.getLocalContext().setlastRecord(null);
		form.getLocalContext().setcanSearch(false);
	}
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setcanSearch(true);
		form.getLocalContext().setlastRecord(null);
		search();
	}

	public void search()
	{
		form.grdTownland().getRows().clear();
		populateScreenFromData(null);

		if(form.getLocalContext().getcanSearchIsNotNull() && form.getLocalContext().getcanSearch())
		{
			if(canSearch())
			{
				TownlandShortVoCollection listTownlands = domain.list(form.txtTownlandSearch().getValue(), form.qmbDEDSearch().getValue(), form.cmbCountySearch().getValue(), form.chkActiveSearch().getValue());

				// WDEV-12543 - Display a message if no results are found
				if (listTownlands == null || listTownlands.size() == 0)
				{
					engine.showMessage("No results found to match search criteria.", "No results found");
					updateControlsState();
					return;
				}

				populateGrid(listTownlands);

				if(form.grdTownland().getValue() != null)
				{
					populateScreenFromData(domain.get(form.grdTownland().getValue()));
				}
			}
		}
		updateControlsState();
	}

	private boolean canSearch() 
	{
		if(form.txtTownlandSearch().getValue() == null && form.cmbCountySearch().getValue() == null && form.qmbDEDSearch().getValue() == null)
		{
			engine.showMessage("Please enter at least one search criteria.");
			form.getLocalContext().setcanSearch(false);
			return false;
		}
		return true;
	}

	private void populateGrid(TownlandShortVoCollection listTownlands) 
	{
		for(int i=0; i<listTownlands.size(); i++)
		{
			if(listTownlands.get(i) != null)
			{
				GenForm.grdTownlandRow row = form.grdTownland().getRows().newRow(form.getLocalContext().getlastRecordIsNotNull() && listTownlands.get(i).equals(form.getLocalContext().getlastRecord()));

				row.setColumnTownland(listTownlands.get(i).getName());
				row.setColumnDED(listTownlands.get(i).getDED() != null ? listTownlands.get(i).getDED().getName() : null);
				row.setColumnCounty(listTownlands.get(i).getCountyIsNotNull() ? listTownlands.get(i).getCounty().getText() : null);
				row.setColumnActive(listTownlands.get(i).getIsActive() ? form.getImages().Core.GreenSquare : form.getImages().Core.RedSqaure);
				row.setValue(listTownlands.get(i));
			}
		}
	}

	@Override
	protected void onGrdTownlandSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		getSelectedInstance();
	}

	private void getSelectedInstance() 
	{
		if(form.grdTownland().getValue() instanceof TownlandShortVo)
		{
			TownlandVo selectedTownland = domain.get(form.grdTownland().getValue());
			form.getLocalContext().setlastRecord(selectedTownland);
			populateScreenFromData(selectedTownland);
		}
		updateControlsState();
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		populateScreenFromData(null);
		search();
		form.setMode(FormMode.VIEW);
	}

	public void clearInstanceControls()
	{
		// TODO: Add you code here.
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setlastRecord(new TownlandVo());
		form.grdTownland().setValue(null);
		form.setMode(FormMode.EDIT);
		populateScreenFromData(null);
		form.ctnTownland().chkActive().setValue(true);
	}

	protected void populateScreenFromData(ims.core.vo.TownlandVo townland)
	{
		clearScreen();
		super.populateScreenFromData(townland);

		if(townland == null)
			return;

		if(townland.getDEDIsNotNull())
		{
			form.ctnTownland().qmbDED().newRow(townland.getDED(), townland.getDED().getName());
			form.ctnTownland().qmbDED().setValue(townland.getDED());
		}
		form.ctnTownland().customControlMap().setValue(townland.getCodeMappingsIsNotNull() ? townland.getCodeMappings() : null);	
	}

	protected void clearScreen()
	{
		super.clearScreen();
		form.ctnTownland().qmbDED().setValue(null);
		form.ctnTownland().customControlMap().clear();
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		TownlandVo townlandToSave = populateDataFromScreen(form.getLocalContext().getlastRecord());

		if (!validateUI(townlandToSave))
		{	
			return false;
		}
		String[] errors = townlandToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;

		}
		try 
		{
			townlandToSave = domain.save(townlandToSave);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			e.printStackTrace();
		}

		form.getLocalContext().setlastRecord(townlandToSave);

		return true;
	}
	private boolean validateUI(TownlandVo townlandToSave) 
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if(townlandToSave.getName() == null || 0 == townlandToSave.getName().length())
			listOfErrors.add("Name is mandatory");
		if(townlandToSave.getDED() == null)
			listOfErrors.add("DED is mandatory");
		if(townlandToSave.getCounty() == null)
			listOfErrors.add("County is mandatory");

		if(form.ctnTownland().customControlMap().validate() != null)
		{
			String[] listOfOtherErrors = form.ctnTownland().customControlMap().validate();

			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(listOfErrors != null && listOfErrors.size() > 0)
		{
			engine.showErrors(listOfErrors.toArray(new String[listOfErrors.size()]));
			return false;
		}

		return true;
	}

	protected ims.core.vo.TownlandVo populateDataFromScreen(ims.core.vo.TownlandVo townland)
	{
		townland = super.populateDataFromScreen(townland);
		if(form.ctnTownland().txtTownland().getValue() != null && form.ctnTownland().txtTownland().getValue().trim().length() > 0)
		{
			townland.setUpperName(form.ctnTownland().txtTownland().getValue().toUpperCase());
		}
		townland.setDED(form.ctnTownland().qmbDED().getValue());
		townland.setCodeMappings(form.ctnTownland().customControlMap().getValueNoWarnings());
		return townland;
	}

	public void updateControlsState()
	{
		form.ctnTownland().setCollapsed(!((form.grdTownland().getValue() != null && form.getMode().equals(FormMode.VIEW)) || form.getMode().equals(FormMode.EDIT)));
		if(form.getMode() == FormMode.VIEW)
		{
			form.btnEdit().setVisible(form.grdTownland().getValue() != null);
			form.btnEdit().setEnabled(form.grdTownland().getValue() != null);
		}
		form.ctnTownland().customControlMap().setComponentMode(form.getMode());
		form.getContextMenus().PCI.getTownlandsNEWItem().setVisible(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().PCI.getTownlandsEDITItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdTownland().getValue() instanceof TownlandShortVo);
	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onQmbDEDTextSubmited(String value) throws PresentationLogicException 
	{
		listDED(value);
	}

	private void listDED(String value) 
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter at least 3 characters for search criteria");
			return;
		}

		DEDLiteVoCollection coll = null;

		// WDEV-12657 - updated DomainInterface 'listDEDs' method to control listing of inactive DED records.
		coll = domain.listDEDs(value, false); 

		form.ctnTownland().qmbDED().setValue(null);
		form.ctnTownland().qmbDED().clear();
		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				DEDLiteVo vo = coll.get(i);
				form.ctnTownland().qmbDED().newRow(vo, vo.getName());
			}
		}

		if (coll.size() > 0)
		{
			form.ctnTownland().qmbDED().showOpened();
		}
	}

	@Override
	protected void onQmbDEDSearchTextSubmited(String value) throws PresentationLogicException 
	{
		// WDEV-12657 - updated DomainInterface 'listDEDs' method to control listing of inactive DED records.
		listDEDSearch(value, true);
	}

	// WDEV-12657 - updated DomainInterface 'listDEDs' method to control listing of inactive DED records.
	private void listDEDSearch(String value, boolean listInactive) 
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter at least 3 characters for search criteria");
			return;
		}

		DEDLiteVoCollection coll = null;

		// WDEV-12657 - updated DomainInterface 'listDEDs' method to control listing of inactive DED records.
		coll = domain.listDEDs(value, listInactive); 

		form.qmbDEDSearch().setValue(null);
		form.qmbDEDSearch().clear();
		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				DEDLiteVo vo = coll.get(i);
				form.qmbDEDSearch().newRow(vo, vo.getName());
			}
		}

		if (coll.size() > 0)
		{
			form.qmbDEDSearch().showOpened();
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
		case GenForm.ContextMenus.PCINamespace.Townlands.NEW:
			newInstance();
			break;
		case GenForm.ContextMenus.PCINamespace.Townlands.EDIT:
			updateInstance();
			break;
		}
	}
}
