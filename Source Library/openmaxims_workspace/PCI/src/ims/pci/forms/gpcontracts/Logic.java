//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.62 build 3012.31808)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.forms.gpcontracts;

import ims.core.vo.GpLiteWithNameVo;
import ims.core.vo.GpLiteWithNameVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.pci.vo.GpContractVo;
import ims.pci.vo.GpContractVoCollection;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
		form.ctnContractDetails().setCollapsed(true);
	}
	
	@Override
	protected void onImbSearchGPClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}
	
	private void clearSearch() 
	{
		form.qmbGPSearch().setValue(null);
		form.qmbGPSearch().clear();
		form.txtContractIDSearch().setValue(null);
		form.grdResultGrid().getRows().clear();
		form.getLocalContext().setlastRecord(null);
		
		clearScreen();
	}
	
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			open();
		}
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.qmbGPSearch().getValue() instanceof GpLiteWithNameVo || (form.txtContractIDSearch().getValue() != null && form.txtContractIDSearch().getValue().length() > 0))
		{
			search();
		}
		else
		{
			populateScreenFromData(null);
			form.getLocalContext().setlastRecord(null);
		}
		form.setMode(FormMode.VIEW);
	}
	
	public void clearInstanceControls()
	{
		// TODO: Add you code here.
	}
	
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setlastRecord(new GpContractVo());
		form.grdResultGrid().setValue(null);
		populateScreenFromData(null);
		if(form.qmbGPSearch().getValue() instanceof GpLiteWithNameVo)
		{
			form.ctnContractDetails().qmbGPSelected().newRow(form.qmbGPSearch().getValue(), form.qmbGPSearch().getValue().getName() == null ? null : form.qmbGPSearch().getValue().getName().toShortForm());
			form.ctnContractDetails().qmbGPSelected().setValue(form.qmbGPSearch().getValue());
		}
		form.setMode(FormMode.EDIT);
	}
	
	protected void populateScreenFromData(ims.pci.vo.GpContractVo value)
	{
		clearScreen();
		super.populateScreenFromData(value);
		if(value != null)
		{
			if(value.getGP() != null && value.getGP().getName() != null)
			{
				form.ctnContractDetails().qmbGPSelected().newRow(value.getGP(), value.getGP().getName() == null ? null : value.getGP().getName().toShortForm());
				form.ctnContractDetails().qmbGPSelected().setValue(value.getGP());
			}
		}
	}
	
	protected void clearScreen()
	{
		super.clearScreen();
		
		form.ctnContractDetails().qmbGPSelected().setValue(null);
		form.ctnContractDetails().qmbGPSelected().clear();
	}
	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		GpContractVo newGpContract = populateDataFromScreen(form.getLocalContext().getlastRecord());
		
		String [] errors = newGpContract.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			newGpContract = domain.saveGpContract(newGpContract);
		} 
		catch (DomainInterfaceException e) 
		{
			//WDEV-5042
			engine.showMessage("The GP Contract Details entered contains a date between the start and end date of a previous contract.");
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage("Data has been modified by another user - screen will be refreshed");
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A GP Contract already exists with the inputted Contract ID.");
			form.ctnContractDetails().txtContractID().setFocus();
			return false;
		}

		form.getLocalContext().setlastRecord(newGpContract);
		
		return true;
	}
	
	public String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.ctnContractDetails().dteStartDate().getValue() != null && form.ctnContractDetails().dteEndDate().getValue() != null && form.ctnContractDetails().dteStartDate().getValue().isGreaterThan(form.ctnContractDetails().dteEndDate().getValue()))
		{
			uiErrors.add("Contract End Date can not be set before Contract Start Date.");					
		}
		
		String[] result = new String[uiErrors.size()];
		uiErrors.toArray(result);
		return result;
	}
	
	protected ims.pci.vo.GpContractVo populateDataFromScreen(ims.pci.vo.GpContractVo gpContract)
	{
		gpContract = super.populateDataFromScreen(gpContract);
		if(form.ctnContractDetails().qmbGPSelected().getValue() instanceof GpLiteWithNameVo)//form.getLocalContext().getgpSelectedIsNotNull())
		{
			gpContract.setGP(form.ctnContractDetails().qmbGPSelected().getValue());
		}
		return gpContract;
	}
	
	public void updateControlsState()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(form.grdResultGrid().getValue() != null);
			form.btnEdit().setEnabled(form.grdResultGrid().getValue() != null);
		}
		
		form.ctnContractDetails().setCollapsed(!((form.grdResultGrid().getValue() != null && form.getMode().equals(FormMode.VIEW)) || form.getMode().equals(FormMode.EDIT)));
		form.getContextMenus().PCI.getGPContractsNEWItem().setVisible(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().PCI.getGPContractsEDITItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdResultGrid().getValue() != null);
	}
	
	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}
	
	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();		
	}
	
	public void search()
	{
		GpContractVoCollection listGpContracts = null;
		
		form.grdResultGrid().getRows().clear();
		populateScreenFromData(null);
		
		//search by contractID
		if(form.txtContractIDSearch().getValue() != null && form.txtContractIDSearch().getValue().length() > 0)
		{
			form.qmbGPSearch().setValue(null);
			
			try 
			{
				listGpContracts = domain.listGPContractsById(form.txtContractIDSearch().getValue());
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return;
			}
			
		}
		//search by GP name
		else if(form.qmbGPSearch().getValue() instanceof GpLiteWithNameVo)
		{
			listGpContracts = domain.listGpContract(form.qmbGPSearch().getValue());	
		}
		
		if(listGpContracts !=null && listGpContracts.size() > 0)
		{
			listGpContracts = sortGPContracts(listGpContracts);
			populateGrid(listGpContracts);
			if(form.grdResultGrid().getValue() != null)
			{
				populateScreenFromData(domain.getGpContract(form.grdResultGrid().getValue()));
			}
		}
		
		if(form.qmbGPSearch().getValue() instanceof GpLiteWithNameVo && form.ctnContractDetails().qmbGPSelected().getValue() instanceof GpLiteWithNameVo && !form.qmbGPSearch().getValue().equals(form.ctnContractDetails().qmbGPSelected().getValue()))
		{
			populateScreenFromData(null);
			form.getLocalContext().setlastRecord(null);
		}
		
		updateControlsState();
	}
	
	private GpContractVoCollection sortGPContracts(GpContractVoCollection listGpContracts) 
	{
		boolean shouldStop = false;
		while(!shouldStop)
		{
			shouldStop = true;
			for(int i=0; i<listGpContracts.size()-1; i++)
			{
				if(listGpContracts.get(i).getContractStartDate().compareTo(listGpContracts.get(i+1).getContractStartDate()) > 0)
				{
					GpContractVo gpcTemp = listGpContracts.get(i);
					listGpContracts.set(i, listGpContracts.get(i+1));
					listGpContracts.set(i+1, gpcTemp);
					shouldStop = false;
				}
			}
		}
		return listGpContracts;
	}

	private void populateGrid(GpContractVoCollection listGpContracts) 
	{
		for(int i=0; i < listGpContracts.size(); i++)
		{
			GenForm.grdResultGridRow row = form.grdResultGrid().getRows().newRow(form.getLocalContext().getlastRecordIsNotNull() && listGpContracts.get(i).equals(form.getLocalContext().getlastRecord()));
			
			if(listGpContracts.get(i).getGPIsNotNull())
			{
				row.setColGP(listGpContracts.get(i).getGP().getName() == null ? null : listGpContracts.get(i).getGP().getName().toString());
			}
			if(listGpContracts.get(i).getContractIdIsNotNull())
			{
				row.setColContractID(listGpContracts.get(i).getContractId());
			}
			if(listGpContracts.get(i).getContractStartDateIsNotNull())
			{
				row.setColStartDate(listGpContracts.get(i).getContractStartDate().toString());
			}
			if(listGpContracts.get(i).getContractEndDateIsNotNull())
			{
				row.setColEndDate(listGpContracts.get(i).getContractEndDate().toString());
			}
			row.setValue(listGpContracts.get(i));
		}
	}
	
	@Override
	protected void onGrdResultGridSelectionChanged() throws PresentationLogicException 
	{
		getSelectedInstance();
	}

	private void getSelectedInstance() 
	{
		if(form.grdResultGrid().getValue() != null)
		{
			form.getLocalContext().setlastRecord(form.grdResultGrid().getValue());
			populateScreenFromData(domain.getGpContract(form.grdResultGrid().getValue()));
		}
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.PCINamespace.GPContracts.NEW:
				newInstance();
				break;
			case GenForm.ContextMenus.PCINamespace.GPContracts.EDIT:
				updateInstance();
				break;
		}
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException 
	{
		clearSearch();
		updateControlsState();
	}

	@Override
	protected void onQmbGPSearchTextSubmited(String value) throws PresentationLogicException 
	{
		fillGPSearch(value);
	}

	private void fillGPSearch(String value) 
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter at least 3 characters for search criteria");
			return;
		}
		
		GpLiteWithNameVoCollection coll = null;
		try 
		{
			coll = domain.listGP(value);
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
		}
		
		form.qmbGPSearch().setValue(null);
		form.qmbGPSearch().clear();
		
		if(coll != null)
		{
			for(int i=0; i<coll.size(); i++)
			{
				GpLiteWithNameVo gp = coll.get(i);
				if(gp == null)
					continue;
				
				form.qmbGPSearch().newRow(gp, gp.getName() == null ? null : gp.getName().toString());
			}
		}
		
		if (coll.size() == 1)
		{
			form.qmbGPSearch().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.qmbGPSearch().showOpened();
		}
	}

	@Override
	protected void onQmbGPSelectedTextSubmited(String value) throws PresentationLogicException 
	{
		fillGPSelected(value);
	}

	private void fillGPSelected(String value) 
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter at least 3 characters for search criteria");
			return;
		}
		
		GpLiteWithNameVoCollection coll = null;
		try 
		{
			coll = domain.listGP(value);
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
		}
		
		form.ctnContractDetails().qmbGPSelected().setValue(null);
		form.ctnContractDetails().qmbGPSelected().clear();
		
		if(coll != null)
		{
			for(int i=0; i<coll.size(); i++)
			{
				GpLiteWithNameVo gp = coll.get(i);
				if(gp == null)
					continue;
				
				form.ctnContractDetails().qmbGPSelected().newRow(gp, gp.getName() == null ? null : gp.getName().toString());
			}
		}
		
		if (coll.size() == 1)
		{
			form.ctnContractDetails().qmbGPSelected().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.ctnContractDetails().qmbGPSelected().showOpened();
		}
	}
}
