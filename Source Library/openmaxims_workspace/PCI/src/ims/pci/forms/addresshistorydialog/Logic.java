//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.62 build 3040.26452)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.forms.addresshistorydialog;

import java.awt.Dialog;

import ims.core.vo.PersonAddress;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.pci.vo.ClientAddressVo;
import ims.pci.vo.CommunityCareVo;
import ims.pci.vo.PciAddressHistoryVo;
import ims.pci.vo.PciAddressHistoryVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	private void open() 
	{
		if(form.getGlobalContext().PCI.getClientAddressesIsNotNull())
		{
			form.customControlAddresses().setValue(form.getGlobalContext().PCI.getClientAddresses());
			populateRecordBrowser(form.getGlobalContext().PCI.getClientAddresses());
			
			populateScreenFromDate(form.getGlobalContext().PCI.getClientAddresses());
		}
		
		form.setMode(FormMode.VIEW);
	}
	
	private void populateScreenFromDate(ClientAddressVo clientAddress) 
	{
		clearDate();
		
		if(clientAddress == null || (clientAddress != null && clientAddress.getCommunityCare() == null) || (clientAddress != null && clientAddress.getCommunityCare() != null && clientAddress.getCommunityCare().getAddressHistory() == null))
			return;
		
		if(clientAddress.getCommunityCare().getAddressHistory().get(0) != null && clientAddress.getCommunityCare().getAddressHistory().get(0).getUpdateDate() != null)
		{
			form.lblSisUpdateDate().setValue(clientAddress.getCommunityCare().getAddressHistory().get(0).getUpdateDate().toString());
		}
		if(clientAddress.getCommunityCare().getAddressHistory().get(0) != null && clientAddress.getCommunityCare().getAddressHistory().get(0).getNotificationDate() != null)
		{
			form.dteDateNotified().setValue(clientAddress.getCommunityCare().getAddressHistory().get(0).getNotificationDate());
		}
	}

	private void clearDate() 
	{
		form.lblSisUpdateDate().setValue(null);
		form.dteDateNotified().setValue(null);
	}

	private void populateRecordBrowser(ClientAddressVo clientAddressVo) 
	{
		if(clientAddressVo == null || (clientAddressVo != null && clientAddressVo.getCommunityCare() == null) || (clientAddressVo != null && clientAddressVo.getCommunityCare() != null && clientAddressVo.getCommunityCare().getAddressHistory() == null))
			return;
		
		form.recbrAddress().clear();
		for(int i=0; i<clientAddressVo.getCommunityCare().getAddressHistory().size(); i++)
		{
			if(clientAddressVo.getCommunityCare().getAddressHistory().get(i) != null)
			{
				form.recbrAddress().newRow(i, clientAddressVo.getCommunityCare().getAddressHistory().get(i), i==0 ? "Current Address" : "Address set on " + (clientAddressVo.getCommunityCare().getAddressHistory().get(i).getUpdateDate() != null ? clientAddressVo.getCommunityCare().getAddressHistory().get(i).getUpdateDate() : "History " + i));
			}
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState() 
	{
		form.btnCancel().setText(form.getMode().equals(FormMode.VIEW) ? "Close" : "Cancel");
		form.recbrAddress().setEnabled(form.getMode().equals(FormMode.VIEW));
		if(form.getGlobalContext().PCI.AddressHistory.getAllowSaveIsNotNull())
		{
			form.btnOk().setText(form.getGlobalContext().PCI.AddressHistory.getAllowSave() ? "Save" : "OK");
		}
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.btnChangeAddress().setVisible(form.recbrAddress().getValue() instanceof PciAddressHistoryVo && form.recbrAddress().getSelectedIndex() == 0);
		}
	}
	
	@Override
	protected void onBtnChangeAddressClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (domain.isParent(form.getGlobalContext().Core.getPatientShort()) || domain.isChild(form.getGlobalContext().Core.getPatientShort()))
		{
			form.getLocalContext().setmessageBoxType(engine.showMessage("Warning! This client has linked family records. Use Family Records form to change Family Address.\nDo you wish to continue to change this client address only?", "", MessageButtons.YESNO, MessageIcon.WARNING));
		}
		else
		{
			DateTime currentDate = new DateTime();
			form.lblSisUpdateDate().setValue(currentDate.toString());
			form.dteDateNotified().setValue(currentDate.getDate());
			form.setMode(FormMode.EDIT);
			form.customControlAddresses().setMode(FormMode.EDIT);
		}
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.btnCancel().getText().equals("Close"))
		{
			engine.close(DialogResult.CANCEL);
		}
		else if(form.btnCancel().getText().equals("Cancel"))
		{
			open();
		}
	}
	
	@Override
	protected void onBtnOkClick() throws PresentationLogicException 
	{
		ClientAddressVo clientAddress = form.customControlAddresses().getValue();
		
		populateDateFromScreen(clientAddress);
		
		String[] errorsVo = clientAddress.validate();
		if(errorsVo != null && errorsVo.length > 0)
		{
			engine.showErrors(errorsVo);
			return;
		}
		
		String[] errorsControl = form.customControlAddresses().validate();
		if(errorsControl != null && errorsControl.length > 0)
		{
			engine.showErrors(errorsControl);
			return;
		}
		
		form.getGlobalContext().PCI.setClientAddresses(clientAddress);
		form.getGlobalContext().PCI.setIsChildAddressUpdated(true);
		populateRecordBrowser(form.getGlobalContext().PCI.getClientAddresses());
		populateScreenFromDate(form.getGlobalContext().PCI.getClientAddresses());
		form.setMode(FormMode.VIEW);
	}

	private void populateDateFromScreen(ClientAddressVo clientAddress) 
	{
		if(clientAddress == null || (clientAddress != null && clientAddress.getCommunityCare() == null) || (clientAddress != null && clientAddress.getCommunityCare() != null && clientAddress.getCommunityCare().getAddressHistory() == null))
			return;
		
		if(clientAddress.getCommunityCare().getAddressHistory().get(0) != null)
		{
			clientAddress.getCommunityCare().getAddressHistory().get(0).setUpdateDate(new DateTime());
			clientAddress.getCommunityCare().getAddressHistory().get(0).setNotificationDate(form.dteDateNotified().getValue() != null ? form.dteDateNotified().getValue() : null);
		}
	}

	@Override
	protected void onRecbrAddressValueChanged() throws PresentationLogicException 
	{
		if(form.recbrAddress().getValue() instanceof PciAddressHistoryVo)
		{
			ClientAddressVo nextAddress = new ClientAddressVo();
			
			PersonAddress personAddTemp;
			CommunityCareVo personCommCare;
			
			if(form.recbrAddress().getSelectedIndex() == 0)
			{
				personAddTemp = form.getGlobalContext().PCI.getClientAddresses().getPersonAddress();
				personCommCare = form.getGlobalContext().PCI.getClientAddresses().getCommunityCare();
			}
			else
			{
				personAddTemp = populateAddressFromHistory(form.recbrAddress().getValue());
				personCommCare = populateCommCareFromHistory(form.recbrAddress().getValue());
			}
			
			nextAddress.setPersonAddress(personAddTemp);
			nextAddress.setCommunityCare(personCommCare);
			
			form.customControlAddresses().setValue(nextAddress);
			populateScreenFromDate(nextAddress);
		}
		updateControlsState();
	}

	private CommunityCareVo populateCommCareFromHistory(PciAddressHistoryVo value) 
	{
		CommunityCareVo commCare = new CommunityCareVo();
		
		commCare.setLho(value.getLho());
		commCare.setCca(value.getCca());
		commCare.setSector(value.getSector());
		commCare.setPhnDistrict(value.getPhnDistrict());
		commCare.setDED(value.getDED());
		
		PciAddressHistoryVoCollection historyColl = new PciAddressHistoryVoCollection();
		PciAddressHistoryVo history = new PciAddressHistoryVo();
		
		history.setUpdateDate(value.getUpdateDate());
		history.setNotificationDate(value.getNotificationDate());
		historyColl.add(history);
		
		commCare.setAddressHistory(historyColl);
		
		return commCare;
	}

	private PersonAddress populateAddressFromHistory(PciAddressHistoryVo value) 
	{
		PersonAddress address = new PersonAddress();
		
		address.setLine1(value.getLine1());
		address.setLine2(value.getLine2());
		address.setLine3(value.getLine3());
		address.setLine4(value.getLine4());
		address.setLine5(value.getLine5());
		address.setCounty(value.getCounty());
		address.setPostCode(value.getPostCode());
		address.setUpdateDate(value.getUpdateDate());
		address.setNotificationDate(value.getNotificationDate());
		
		return address;
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getmessageBoxTypeIsNotNull())
		{
			if (form.getLocalContext().getmessageBoxType().equals(messageBoxId) && DialogResult.YES.equals(result))
			{
				DateTime currentDate = new DateTime();
				form.lblSisUpdateDate().setValue(currentDate.toString());
				form.dteDateNotified().setValue(currentDate.getDate());
				form.setMode(FormMode.EDIT);
				form.customControlAddresses().setMode(FormMode.EDIT);
			}
		}
	}
}
