//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.62 build 3012.31808)
//Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.pci.forms.scheduleconfiguration;

import ims.core.vo.VaccineLiteVo;
import ims.core.vo.VaccineLiteVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.pci.forms.scheduleconfiguration.GenForm.GroupStatusOptionEnumeration;
import ims.pci.forms.scheduleconfiguration.GenForm.grdSchedulesNamesRow;
import ims.pci.vo.ScheduleConfigurationLiteVo;
import ims.pci.vo.ScheduleConfigurationLiteVoCollection;
import ims.pci.vo.ScheduleConfigurationVo;
import ims.pci.vo.StageConfigurationVo;
import ims.pci.vo.StageConfigurationVoCollection;
import ims.pci.vo.StageVaccineVo;
import ims.pci.vo.StageVaccineVoCollection;
import ims.pci.vo.lookups.ScheduleType;
import ims.pci.vo.lookups.Stage;
import ims.pci.vo.lookups.StageCollection;



public class Logic extends BaseLogic
{
	private static final int CELL_SMALL_WIDTH = 50;
	private static final String DATA_MIGRATION = "DATA MIGRATION";


	private static final long serialVersionUID = 1L;


	///////////////////////////////////////////////
	// DYNAMIC GRID (STAGE CONFIGURATION) COLUMN IDENTIFIERS
	///////////////////////////////////////////////
	private static int COL_STAGE_VACCINENAME = 1;
	private static int COL_AGE_SHOTNO = 2;
	private static int COL_BUTTON_ADD = 3;
	private static int COL_VACCINES_PCRSCODE = 4;
	private static int COL_DRIVER = 5;
	private static int COL_RESCHEDULE = 6;
	private static int COL_LAST_SHOT = 7;


	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	EVENT HANDLERS region
	////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (result == DialogResult.OK && formName.equals(form.getForms().Core.DiagnosisProcedureProblemSearch))
		{
			updateVaccinesToSelectedStageConfiguration();
		}

		updateControlsState();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getMessageBoxIDIsNotNull())
		{
			if (DialogResult.YES.equals(result) && form.getLocalContext().getMessageBoxID().equals(messageBoxId))
			{
				ScheduleConfigurationVo scheduleConfiguration = form.getLocalContext().getContextSchedule();
				
				// We don't really need to catch the exception here because this function is called after the exception would have been treated
				// in the saveSchedule() function, and the only place this code is called is from that function after the exception is treated
				try
				{
					scheduleConfiguration = populateDataFromScreen(scheduleConfiguration);
				}
				catch (NumberFormatException e)
				{
					engine.showMessage(e.getMessage(), "PCI Error");
					return;
				}
				
				if (scheduleConfiguration == null)
					return;

				if (PreActiveActiveInactiveStatus.INACTIVE.equals(scheduleConfiguration.getStatus()))
				{
					scheduleConfiguration.setIsDefaultSchedule(false);
				}

					if (save())
					{
						if (form.getLocalContext().getContextScheduleIsNotNull() && PreActiveActiveInactiveStatus.ACTIVE.equals(form.getLocalContext().getContextSchedule().getStatus()))
						{
							form.GroupStatusOption().setValue(GroupStatusOptionEnumeration.rdoActive);
						}
						else
						{
							form.GroupStatusOption().setValue(GroupStatusOptionEnumeration.rdoAll);
						}

						open();
					}
			}
		}
	}


	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (saveSchedule())
		{
			if (form.getLocalContext().getContextScheduleIsNotNull() && PreActiveActiveInactiveStatus.ACTIVE.equals(form.getLocalContext().getContextSchedule().getStatus()))
			{
				form.GroupStatusOption().setValue(GroupStatusOptionEnumeration.rdoActive);
			}
			else
			{
				form.GroupStatusOption().setValue(GroupStatusOptionEnumeration.rdoAll);
			}

			open();
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}


	@Override
	protected void onRadioButtonGroupStatusOptionValueChanged() throws PresentationLogicException
	{
		open();
	}


	@Override
	protected void onCmbScheduleTypeValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onDteStartCampaignValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onGrdSchedulesNamesSelectionChanged() throws PresentationLogicException
	{
		ScheduleConfigurationVo selectedSchedule = domain.getScheduleConfigurationDetails(form.grdSchedulesNames().getValue());
		populateScreenFromData(selectedSchedule);
		form.getLocalContext().setContextSchedule(selectedSchedule);

		updateControlsState();
	}

	@Override
	protected void onGrdSchedulesNamesSelectionCleared() throws PresentationLogicException
	{
		populateScreenFromData(null);
		form.getLocalContext().setContextSchedule(null);

		updateControlsState();
	}


	@Override
	protected void onDyngrdStageConfigurationRowSelectionChanged(DynamicGridRow row)
	{
		updateControlsState();
	}

	@Override
	protected void onDyngrdStageConfigurationRowSelectionCleared() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onDyngrdStageConfigurationCellButtonClicked(DynamicGridCell cell)
	{
		if (FormMode.VIEW.equals(form.getMode()))
			return;

		ScheduleConfigurationVo contextSchedule = form.getLocalContext().getContextSchedule();
		if (contextSchedule != null && contextSchedule.getStatus() != null && !PreActiveActiveInactiveStatus.PREACTIVE.equals(contextSchedule.getStatus()))
			return;

		if (cell == null)
			throw new CodingRuntimeException("Major Logical Error - This event can not be called from a null cell");

		// Select the cell row
		form.ctnScheduleConfiguration().dyngrdStageConfiguration().setSelectedRow(cell.getRow());
		addVaccineToStageConfigurationRow(cell.getRow());
	}


	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PCINamespace.ScheduleConfiguration.ADD:
			{
				addNewStageConfigurationRow();
				break;
			}

			case GenForm.ContextMenus.PCINamespace.ScheduleConfiguration.REMOVE:
			{
				removeStageConfigurationRow();
				break;
			}

			case GenForm.ContextMenus.PCINamespace.ScheduleConfiguration.ADD_VACCINE:
			{
				addVaccineToStageConfigurationRow(form.ctnScheduleConfiguration().dyngrdStageConfiguration().getSelectedRow());
				break;
			}

			case GenForm.ContextMenus.PCINamespace.ScheduleListContextMenu.NEW:
			{
				newInstance();
				break;
			}

			case GenForm.ContextMenus.PCINamespace.ScheduleListContextMenu.EDIT:
			{
				updateInstance();
				break;
			}
		}

		updateControlsState();
	}

	@Override
	protected void onDyngrdStageConfigurationCellValueChanged(DynamicGridCell cell) 
	{
		if(cell.getColumn().getIdentifier().equals(COL_DRIVER) && cell.getType().equals(DynamicCellType.BOOL))
		{
			validateDriver(cell);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	FORM UI FUNTIONS region
	////////////////////////////////////////////////////////////////////////////////////////////////////

	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
		super.initialize();

		initializeDynamicGrid();

		// Set the local context to a null schedule
		form.getLocalContext().setContextSchedule(null);

		// Set "Active Only" option - as default
		form.GroupStatusOption().setValue(GroupStatusOptionEnumeration.rdoActive);
	}

	private void initializeDynamicGrid()
	{
		form.ctnScheduleConfiguration().dyngrdStageConfiguration().setHeaderHeight(30);
		
		// Initialize the dynamic grid
		DynamicGridColumn column;
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().newColumn("Stage / Vaccine Name", COL_STAGE_VACCINENAME);
		column.setWidth(175);
		column.setCanGrow(true);

		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().newColumn("Age* / Shot", COL_AGE_SHOTNO);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setAlignment(Alignment.CENTER);
		column.setWidth(70);
		column.setCanGrow(false);

		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().newColumn("", COL_BUTTON_ADD);
		column.setWidth(25);
		column.setCanGrow(false);

		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().newColumn("Vaccines / PCRS Code", COL_VACCINES_PCRSCODE);
		column.setWidth(260);
		column.setCanGrow(true);

		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().newColumn("Interval(Months)* \n/ Driver*", COL_DRIVER);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setAlignment(Alignment.CENTER);
		column.setWidth(110);
		column.setCanGrow(false);
		
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().newColumn("Reschedule", COL_RESCHEDULE);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setWidth(70);
		column.setCanGrow(false);

		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().newColumn("LastShot", COL_LAST_SHOT);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setWidth(55);
		column.setCanGrow(false);
	}

	public void open() throws PresentationLogicException
	{
		// List all the record from data base matching the criteria
		setScheduleGridList(domain.listScheduleConfiguration(form.GroupStatusOption().getValue()));

		// If there is a selection (after an save or cancel) - show it in the grid (will remove the selection if it is not in the current records)
		if (form.getLocalContext().getContextSchedule() != null)
		{
			form.grdSchedulesNames().setValue(form.getLocalContext().getContextSchedule());
			form.grdSchedulesNames().resetScrollPosition();
			form.getLocalContext().setContextSchedule(domain.getScheduleConfigurationDetails(form.grdSchedulesNames().getValue()));
			populateScreenFromData(form.getLocalContext().getContextSchedule());
		}

		// Set the form in view mode (calls the update controls also)
		form.setMode(FormMode.VIEW);
	}

	public void clearInstanceControls()
	{
		super.clearScreen();
	}

	public void updateControlsState()
	{
		// Collapse or expand the container
		form.ctnScheduleConfiguration().setCollapsed(form.getMode() == FormMode.VIEW && form.grdSchedulesNames().getSelectedRow() == null);
		
		// Show the edit button enabled or disabled
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(form.getMode() == FormMode.VIEW && form.grdSchedulesNames().getSelectedRow() != null);
			
			ScheduleConfigurationLiteVo selection = form.grdSchedulesNames().getValue();
			form.ctnScheduleConfiguration().dteStartCampaign().setVisible(selection == null ? false : ScheduleType.OUTBREAKSCHEDULE.equals(selection.getScheduleType()));
			form.ctnScheduleConfiguration().lblCampStartDate().setVisible(selection == null ? false : ScheduleType.OUTBREAKSCHEDULE.equals(selection.getScheduleType()));
			form.ctnScheduleConfiguration().dteStartDOB().setVisible(selection == null ? true : !ScheduleType.OUTBREAKSCHEDULE.equals(selection.getScheduleType()));
			form.ctnScheduleConfiguration().lblStartDOB().setVisible(selection == null ? true : !ScheduleType.OUTBREAKSCHEDULE.equals(selection.getScheduleType()));
			form.ctnScheduleConfiguration().dteEndDOB().setVisible(selection == null ? true : !ScheduleType.OUTBREAKSCHEDULE.equals(selection.getScheduleType()));
			form.ctnScheduleConfiguration().lblEndDOB().setVisible(selection == null ? true : !ScheduleType.OUTBREAKSCHEDULE.equals(selection.getScheduleType()));

			form.ctnScheduleConfiguration().dteStartCampaign().setEnabled(false);
			form.ctnScheduleConfiguration().dteStartDOB().setEnabled(false);
			form.ctnScheduleConfiguration().dteEndDOB().setEnabled(false);
		}

		if (FormMode.EDIT.equals(form.getMode()))
		{
			ScheduleConfigurationVo scheduleConfiguration = form.getLocalContext().getContextSchedule();
			
			form.ctnScheduleConfiguration().cmbScheduleType().setEnabled(scheduleConfiguration == null ? true : scheduleConfiguration.getStatus() == null ? true : PreActiveActiveInactiveStatus.PREACTIVE.equals(scheduleConfiguration.getStatus()));
			
			// SHOW / HIDE  label StartDOB
			form.ctnScheduleConfiguration().lblStartDOB().setVisible(!ScheduleType.OUTBREAKSCHEDULE.equals(form.ctnScheduleConfiguration().cmbScheduleType().getValue()));
			// SHOW / HIDE  date StartDOB
			form.ctnScheduleConfiguration().dteStartDOB().setVisible(!ScheduleType.OUTBREAKSCHEDULE.equals(form.ctnScheduleConfiguration().cmbScheduleType().getValue()));
			form.ctnScheduleConfiguration().dteStartDOB().setEnabled(scheduleConfiguration == null ? true : scheduleConfiguration.getStatus() == null ? true : PreActiveActiveInactiveStatus.PREACTIVE.equals(scheduleConfiguration.getStatus()));
			
			// SHOW / HIDE  label EndDOB
			form.ctnScheduleConfiguration().lblEndDOB().setVisible(!ScheduleType.OUTBREAKSCHEDULE.equals(form.ctnScheduleConfiguration().cmbScheduleType().getValue()));
			// SHOW / HIDE  date EndDOB
			form.ctnScheduleConfiguration().dteEndDOB().setVisible(!ScheduleType.OUTBREAKSCHEDULE.equals(form.ctnScheduleConfiguration().cmbScheduleType().getValue()));
			form.ctnScheduleConfiguration().dteEndDOB().setEnabled(scheduleConfiguration == null ? true : scheduleConfiguration.getStatus() == null ? true : !PreActiveActiveInactiveStatus.INACTIVE.equals(scheduleConfiguration.getStatus()));
			
			// SHOW / HIDE  label StartCampaign
			form.ctnScheduleConfiguration().lblCampStartDate().setVisible(ScheduleType.OUTBREAKSCHEDULE.equals(form.ctnScheduleConfiguration().cmbScheduleType().getValue()));
			// SHOW / HIDE  date StartCampaign
			form.ctnScheduleConfiguration().dteStartCampaign().setVisible(ScheduleType.OUTBREAKSCHEDULE.equals(form.ctnScheduleConfiguration().cmbScheduleType().getValue()));
			form.ctnScheduleConfiguration().dteStartCampaign().setEnabled(scheduleConfiguration == null ? true : scheduleConfiguration.getStatus() == null ? true : PreActiveActiveInactiveStatus.PREACTIVE.equals(scheduleConfiguration.getStatus()));

			// ENABLE / DISABLE  checkbox Default Schedule
			form.ctnScheduleConfiguration().chkDefaultSchedule().setEnabled(!ScheduleType.OUTBREAKSCHEDULE.equals(form.ctnScheduleConfiguration().cmbScheduleType().getValue()) &&
					(scheduleConfiguration == null ? true : !PreActiveActiveInactiveStatus.INACTIVE.equals(scheduleConfiguration.getStatus())));

			if (scheduleConfiguration == null || scheduleConfiguration.getStatus() == null || PreActiveActiveInactiveStatus.PREACTIVE.equals(scheduleConfiguration.getStatus()))
			{
				form.ctnScheduleConfiguration().dyngrdStageConfiguration().setEnabled(true);
				form.ctnScheduleConfiguration().dyngrdStageConfiguration().setReadOnly(false);
			}
			else
			{
				form.ctnScheduleConfiguration().dyngrdStageConfiguration().setEnabled(true);

				// Function to enable editing the PCRS codes and Driver
				enableCells(true, !DATA_MIGRATION.equals(scheduleConfiguration.getScheduleName()), true, true);
			}
		}

		// Enable or disable radio buttons
		form.GroupStatusOption().setEnabled(form.getMode() == FormMode.VIEW);

		// Update the context menus
		updateContextMenusState();
	}

	private void enableCells(boolean enableEditingCodesPCRS, boolean enableEditingDriverAndInterval, boolean enableEditingLastShot, boolean enableEditingReschedule)
	{
		form.ctnScheduleConfiguration().dyngrdStageConfiguration().setReadOnly(false);
		DynamicGridRowCollection rows = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getRows();
		
		DynamicGridColumn column;
		DynamicGridCell cell;
		
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridRow row = rows.get(i);
			
			if (row.getValue() instanceof StageConfigurationVo)
			{
				row.setReadOnly(false);
				
				column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_STAGE_VACCINENAME);
				cell = row.getCells().get(column);
				cell.setReadOnly(true);
				
				column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_AGE_SHOTNO);
				cell = row.getCells().get(column);
				cell.setReadOnly(true);
				
				column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_VACCINES_PCRSCODE);
				cell = row.getCells().get(column);
				cell.setReadOnly(true);
				
				column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_DRIVER);
				cell = row.getCells().get(column);
				cell.setReadOnly(!enableEditingDriverAndInterval);
				
				for (int k = 0; k < row.getRows().size(); k++)
				{
					DynamicGridRow vaccineRow = row.getRows().get(k);
					
					if (vaccineRow.getValue() instanceof StageVaccineVo)
					{
						vaccineRow.setReadOnly(false);
						
						column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_STAGE_VACCINENAME);
						cell = vaccineRow.getCells().get(column);
						cell.setReadOnly(true);
						
						column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_AGE_SHOTNO);
						cell = vaccineRow.getCells().get(column);
						cell.setReadOnly(true);
						
						column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_VACCINES_PCRSCODE);
						cell = vaccineRow.getCells().get(column);
						cell.setReadOnly(!enableEditingCodesPCRS);
						
						column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_DRIVER);
						cell = vaccineRow.getCells().get(column);
						cell.setReadOnly(!enableEditingDriverAndInterval);
						
						column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_RESCHEDULE);
						cell = vaccineRow.getCells().get(column);
						cell.setReadOnly(!enableEditingReschedule);
						
						column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_LAST_SHOT);
						cell = vaccineRow.getCells().get(column);
						cell.setReadOnly(!enableEditingLastShot);
					}
				}
			}
		}
	}

	public void updateContextMenusState()
	{
		// Context menu for schedule list
		form.getContextMenus().PCI.getScheduleListContextMenuEDITItem().setVisible(form.getMode() == FormMode.VIEW && form.grdSchedulesNames().getSelectedRow() != null);
		form.getContextMenus().PCI.getScheduleListContextMenuNEWItem().setVisible(form.getMode() == FormMode.VIEW);

		ScheduleConfigurationVo contextSchedule = form.getLocalContext().getContextSchedule();

		if (contextSchedule == null || contextSchedule.getStatus() == null || PreActiveActiveInactiveStatus.PREACTIVE.equals(contextSchedule.getStatus()))
		{
			// Context menu for schedule configuration
			form.getContextMenus().PCI.getScheduleConfigurationADDItem().setVisible(form.getMode() == FormMode.EDIT);
			form.getContextMenus().PCI.getScheduleConfigurationREMOVEItem().setVisible(form.getMode() == FormMode.EDIT && form.ctnScheduleConfiguration().dyngrdStageConfiguration().getSelectedRow() != null);

			form.getContextMenus().PCI.getScheduleConfigurationADD_VACCINEItem().setVisible(form.getMode() == FormMode.EDIT && form.ctnScheduleConfiguration().dyngrdStageConfiguration().getValue() instanceof StageConfigurationVo);


			// Set the text for the Remove option from context menu
			if (form.ctnScheduleConfiguration().dyngrdStageConfiguration().getValue() instanceof StageVaccineVo)
			{
				form.getContextMenus().PCI.getScheduleConfigurationREMOVEItem().setText("Remove Stage Vaccine");
			}
			else if (form.ctnScheduleConfiguration().dyngrdStageConfiguration().getValue() instanceof StageConfigurationVo)
			{
				form.getContextMenus().PCI.getScheduleConfigurationREMOVEItem().setText("Remove Stage Configuration");
			}
		}
		else
		{
			form.getContextMenus().PCI.hideAllScheduleConfigurationMenuItems();
		}
	}



	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	FORM LOGIC FUNTIONS region
	////////////////////////////////////////////////////////////////////////////////////////////////////

	public void newInstance() throws PresentationLogicException
	{
		// Clear the selection in schedule
		form.grdSchedulesNames().setValue(null);

		// Create a new record in local context
		form.getLocalContext().setContextSchedule(new ScheduleConfigurationVo());

		// Populate the data (blank) to controls (details)
		populateScreenFromData(form.getLocalContext().getContextSchedule());

		form.setMode(FormMode.EDIT);
	}

	public void updateInstance()
	{
		// Get the details from domain
		ScheduleConfigurationVo selectedSchedule = domain.getScheduleConfigurationDetails(form.grdSchedulesNames().getValue());

		// Set the selected record in local context	
		form.getLocalContext().setContextSchedule(selectedSchedule);

		// Populate the date to controls (details)
		populateScreenFromData(selectedSchedule);

		form.setMode(FormMode.EDIT);
	}

	public boolean saveSchedule() throws PresentationLogicException
	{
		ScheduleConfigurationVo scheduleConfiguration = form.getLocalContext().getContextSchedule();

		form.getLocalContext().setScheduleStatus(null);
		if (scheduleConfiguration != null)
			form.getLocalContext().setScheduleStatus(scheduleConfiguration.getStatus());

		try
		{
			scheduleConfiguration = populateDataFromScreen(scheduleConfiguration);
		}
		catch (NumberFormatException e)
		{
			engine.showMessage(e.getMessage(), "PCI Error");
			scheduleConfiguration.setStatus(form.getLocalContext().getScheduleStatus());
			return false;
		}

		String[] errors = null; // validateUIRules();
		errors = scheduleConfiguration.validateCustomRules(errors);

		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			scheduleConfiguration.setStatus(form.getLocalContext().getScheduleStatus());
			return false;
		}
		
		if (PreActiveActiveInactiveStatus.INACTIVE.equals(scheduleConfiguration.getStatus()) && !PreActiveActiveInactiveStatus.INACTIVE.equals(form.getLocalContext().getScheduleStatus()))
		{
			int id = engine.showMessage("You have set the schedule to inactive status. That means that the schedule will not be available to clients. Do you want to continue?", "PCI - Confirmation", MessageButtons.YESNO);
			form.getLocalContext().setContextSchedule(scheduleConfiguration);
			form.getLocalContext().setMessageBoxID(id);
			scheduleConfiguration.setStatus(form.getLocalContext().getScheduleStatus());
			return false;
		}
		
		form.getLocalContext().setContextSchedule(scheduleConfiguration);
		
		return save();
	}

	public boolean save() throws PresentationLogicException
	{
		ScheduleConfigurationVo scheduleConfiguration = form.getLocalContext().getContextSchedule();
		
		String[] errors = null; // validateUIRules();
		errors = scheduleConfiguration.validateCustomRules(errors);

		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			scheduleConfiguration = domain.saveScheduleConfigurationDetails(scheduleConfiguration);
			form.getLocalContext().setContextSchedule(scheduleConfiguration);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			scheduleConfiguration.setStatus(form.getLocalContext().getScheduleStatus());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			scheduleConfiguration.setStatus(form.getLocalContext().getScheduleStatus());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			scheduleConfiguration.setStatus(form.getLocalContext().getScheduleStatus());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			scheduleConfiguration.setStatus(form.getLocalContext().getScheduleStatus());
			return false;
		}

		return true;
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	SCHEDULE LIST FUNTIONS region
	////////////////////////////////////////////////////////////////////////////////////////////////////

	private void setScheduleGridList(ScheduleConfigurationLiteVoCollection listScheduleConfiguration)
	{
		// Clear the schedule list
		form.grdSchedulesNames().getRows().clear();


		// If the collection is null - do not continue with the rest of the function
		if (listScheduleConfiguration == null)
			return;


		// Iterate through collection
		for (int i = 0; i < listScheduleConfiguration.size(); i++)
		{
			ScheduleConfigurationLiteVo scheduleConfiguration = listScheduleConfiguration.get(i);

			// Add non nulls elements to grid
			if (scheduleConfiguration != null)
			{
				setScheduleGridRow(form.grdSchedulesNames().getRows().newRow(), scheduleConfiguration);
			}
		}
	}

	private void setScheduleGridRow(grdSchedulesNamesRow row, ScheduleConfigurationLiteVo value)
	{
		if (value == null)
			return;

		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not populate a null row with value");

		// Set cells value
		row.setColScheduleNames(value.getScheduleName());
		row.setColStatus(value.getStatus() != null ? value.getStatus().getImage() : null );
		row.setColIsDefault(value.getIsDefaultSchedule());

		// Set the row value
		row.setValue(value);
	}



	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	SCHEDULE DETAILS - DATA BINDING region
	////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override
	protected void populateScreenFromData(ScheduleConfigurationVo value)
	{
		super.populateScreenFromData(value);

		populateStatusComboBox(value == null ? null : value.getStatus());

		setDynamicGridStageConfigurationCollection(value != null ? value.getStages() : null);
	}

	@Override
	protected ScheduleConfigurationVo populateDataFromScreen(ScheduleConfigurationVo value)
	{
		try
		{
			if (value == null)
				value = new ScheduleConfigurationVo();

			if (PreActiveActiveInactiveStatus.INACTIVE.equals(value.getStatus()))
			{
				value = super.populateDataFromScreen(value);
				return value;
			}
			else if (PreActiveActiveInactiveStatus.ACTIVE.equals(value.getStatus()))
			{
				value = super.populateDataFromScreen(value);
				try
				{
					value.updateVaccinesCodesAndDriver(getDynamicGridStageConfigurationCollection(null));
				}
				catch (DomainInterfaceException exception)
				{
					engine.showMessage(exception.getMessage());
				}
				return value;
			}
			else if (PreActiveActiveInactiveStatus.PREACTIVE.equals(value.getStatus()))
			{
				value = super.populateDataFromScreen(value);
				value.setStages(getDynamicGridStageConfigurationCollection(null));

				return value;
			}

			value = super.populateDataFromScreen(value);
			value.setStages(getDynamicGridStageConfigurationCollection(null));

			return value;
		}
		catch (NumberFormatException e)
		{
			throw new NumberFormatException(e.getMessage());
		}
	}

	@Override
	protected ScheduleConfigurationVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ScheduleConfigurationVo());
	}

	private void populateStatusComboBox(PreActiveActiveInactiveStatus value)
	{
		form.ctnScheduleConfiguration().cmbScheduleStatus().clear();

		PreActiveActiveInactiveStatusCollection statusValues = LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());

		for (int i = 0; i < statusValues.size(); i++)
		{
			if (statusValues.get(i) == null)
				continue;

			form.ctnScheduleConfiguration().cmbScheduleStatus().newRow(statusValues.get(i), statusValues.get(i).getText(), statusValues.get(i).getImage(), statusValues.get(i).getTextColor());
		}

		if (PreActiveActiveInactiveStatus.ACTIVE.equals(value))
		{
			form.ctnScheduleConfiguration().cmbScheduleStatus().removeRow(PreActiveActiveInactiveStatus.PREACTIVE);
		}
		else if (PreActiveActiveInactiveStatus.INACTIVE.equals(value))
		{
			form.ctnScheduleConfiguration().cmbScheduleStatus().removeRow(PreActiveActiveInactiveStatus.PREACTIVE);
			form.ctnScheduleConfiguration().cmbScheduleStatus().removeRow(PreActiveActiveInactiveStatus.ACTIVE);
		}

		form.ctnScheduleConfiguration().cmbScheduleStatus().setValue(value);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	STAGE CONFIGURATION DYNAMIC GRID region
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private void setDynamicGridStageConfigurationCollection(StageConfigurationVoCollection stages)
	{
		// Clear the stages grid rows
		form.ctnScheduleConfiguration().dyngrdStageConfiguration().getRows().clear();

		// If the collection is null - do not continue with the rest of the function 
		if (stages == null)
			return;

		stages.sort();

		// Iterate through the collection
		for (int i = 0; i < stages.size(); i++)
		{
			StageConfigurationVo stageConfiguration = stages.get(i);

			// If the record is null - move to the next element
			if (stageConfiguration != null)
				setDynamicGridRowStageConfiguration(form.ctnScheduleConfiguration().dyngrdStageConfiguration().getRows().newRow(), stageConfiguration);
		}
	}

	private void setDynamicGridRowStageConfiguration(DynamicGridRow row, StageConfigurationVo value)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not populate a null row with value");

		if (value == null)
			value = new StageConfigurationVo();

		// Set the row (setup the cells and cells values)

		// Column and cell identifier
		DynamicGridColumn column;
		DynamicGridCell	cell;


		// Create the first cell (stage)
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_STAGE_VACCINENAME);
		cell = row.getCells().newCell(column, DynamicCellType.ENUMERATION);
		StageCollection stages = ims.pci.vo.lookups.LookupHelper.getStage(this.domain.getLookupService());
		engine.populate(cell, stages);
		cell.setValue(value.getStage());
		if (cell.getValue() == null && value.getStage() != null)
		{
			cell.getItems().newItem(value.getStage());
			cell.setValue(value.getStage());
		}

		// Create the second cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_AGE_SHOTNO);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		// WDEV-10959 - Remove age 2 digit limitation
		cell.setStringMaxLength(3);//WDEV-14203
		
		cell.setValue(value.getAgeInMonths() == null ? null : value.getAgeInMonths().toString());

		// Create the third cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_BUTTON_ADD);
		cell = row.getCells().newCell(column, DynamicCellType.BUTTON);
		cell.setWidth(CELL_SMALL_WIDTH);

		// Create the fourth cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_VACCINES_PCRSCODE);
		cell = row.getCells().newCell(column, DynamicCellType.WRAPTEXT);
		cell.setValue(value.getStageVaccines() != null ? value.getStageVaccines().toStringVaccineNames() : null);
		cell.setReadOnly(true);
		
		// Create the fifth cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_DRIVER);
		cell = row.getCells().newCell(column, DynamicCellType.INT);
		cell.setStringMaxLength(2); 
		cell.setValue(null);

		// Set the vaccine rows
		setDynamicGridRowsStageVaccineCollection(row, value.getStageVaccines());

		// Set the row value
		row.setValue(value);

		row.setReadOnly(false);
	}

	private void setDynamicGridRowsStageVaccineCollection(DynamicGridRow row, StageVaccineVoCollection stageVaccines)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add vaccines to a null parent row");

		StageVaccineVoCollection oldStageVaccines = getDynamicGridRowsStageVaccineCollection(row, null);

		// Clear the old rows
		row.getRows().clear();
		row.setExpanded(true);

		if (stageVaccines == null)
		{
			// Update the third cell
			DynamicGridColumn column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_VACCINES_PCRSCODE);
			DynamicGridCell cell = row.getCells().get(column);
			cell.setValue(null);
			cell.setReadOnly(true);

			return;
		}

		stageVaccines.sort();

		for (int i = 0; i < stageVaccines.size(); i++)
		{
			StageVaccineVo stageVaccine = stageVaccines.get(i);

			if (stageVaccine == null)
				continue;

			for (int j = 0; j < oldStageVaccines.size(); j++)
			{
				if (stageVaccine.equals(oldStageVaccines.get(j)))
				{
					// Copy the shot number information
					stageVaccine.setShotNo(oldStageVaccines.get(j).getShotNo());

					// Copy the OCRS Code
					stageVaccine.setPcrsCode(oldStageVaccines.get(j).getPcrsCode());

					// Copy the reschedule information
					stageVaccine.setCanBeRescheduled(oldStageVaccines.get(j).getCanBeRescheduled());

					// Copy the last shot information
					stageVaccine.setIsLastShotForVaccine(oldStageVaccines.get(j).getIsLastShotForVaccine());
				}
			}

			setDynamicGridRowStageVaccine(row.getRows().newRow(), stageVaccine);
		}

		// Update the third cell
		DynamicGridColumn column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_VACCINES_PCRSCODE);
		DynamicGridCell cell = row.getCells().get(column);
		cell.setValue(stageVaccines.toStringVaccineNames());
		cell.setReadOnly(true);
	}

	private void setDynamicGridRowStageVaccine(DynamicGridRow row, StageVaccineVo stageVaccineVo)
	{
		if (row == null)
			throw new CodingRuntimeException("Can not set a stage vaccine on a null row");

		if (stageVaccineVo == null)
			return;


		// Set up the row
		DynamicGridColumn column;
		DynamicGridCell cell;

		// The first cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_STAGE_VACCINENAME);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setIdentifier(stageVaccineVo.getVaccine());
		cell.setValue(stageVaccineVo.getVaccine().toString());
		cell.setReadOnly(true);

		// The second cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_AGE_SHOTNO);
		cell = row.getCells().newCell(column, DynamicCellType.INT);
		cell.setIdentifier(stageVaccineVo.getVaccine());
		cell.setValue(stageVaccineVo.getShotNo());
		cell.setReadOnly(false);

		// The third cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_VACCINES_PCRSCODE);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(stageVaccineVo.getPcrsCode());
		cell.setStringMaxLength(25);
		cell.setReadOnly(false);
		
		// The fourth cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_DRIVER);
		cell = row.getCells().newCell(column, DynamicCellType.BOOL);
		cell.setAutoPostBack(true);
		cell.setValue(stageVaccineVo.getDriver());
		
		if(stageVaccineVo.getDriver() != null && stageVaccineVo.getDriver())
			populateIntervalMonths(cell, stageVaccineVo);
		
		cell.setWidth(CELL_SMALL_WIDTH);
		cell.setReadOnly(false);

		// The fifth cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_RESCHEDULE);
		cell = row.getCells().newCell(column, DynamicCellType.BOOL);
		cell.setValue(stageVaccineVo.getCanBeRescheduled());
		cell.setWidth(CELL_SMALL_WIDTH);
		cell.setReadOnly(false);

		// The six cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_LAST_SHOT);
		cell = row.getCells().newCell(column, DynamicCellType.BOOL);
		cell.setValue(stageVaccineVo.getIsLastShotForVaccine());
		cell.setWidth(CELL_SMALL_WIDTH);
		cell.setReadOnly(false);

		// Set the row value
		row.setValue(stageVaccineVo);
	}

	private StageConfigurationVoCollection getDynamicGridStageConfigurationCollection(StageConfigurationVoCollection stages)
	{
		if (stages == null)
			stages = new StageConfigurationVoCollection();


		// Iterate through the stage configuration rows
		for (int i = 0; i < form.ctnScheduleConfiguration().dyngrdStageConfiguration().getRows().size(); i++)
		{
			DynamicGridRow row = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getRows().get(i);

			if (!(isEmptyStageConfigurationRow(row)))
			{
				try
				{
					stages.add(getDynamicGridRowStageConfiguration(row, null));
				}
				catch (NumberFormatException e)
				{
					throw new NumberFormatException(e.getMessage());
				}
			}
		}

		stages.sort();

		return stages;
	}

	private StageConfigurationVo getDynamicGridRowStageConfiguration(DynamicGridRow row, StageConfigurationVo stageConfiguration)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not retrieve data from a null row");

		if (row.getValue() != null && !(row.getValue() instanceof StageConfigurationVo))
			throw new CodingRuntimeException("Major Logical Error - Can not retrieve data from a non stage configuration row");

		if (stageConfiguration == null)
			stageConfiguration = new StageConfigurationVo();


		// Column and cell identifier
		DynamicGridColumn column;
		DynamicGridCell cell;


		// First cell (stage)
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_STAGE_VACCINENAME);
		cell = row.getCells().get(column);
		// WDEV-12583 - Fixed null pointer
		if (cell.getValue() == null)
			stageConfiguration.setStage(null);
		else
			stageConfiguration.setStage((Stage)((Stage) cell.getValue()).clone());

		if (!ScheduleType.OUTBREAKSCHEDULE.equals(form.ctnScheduleConfiguration().cmbScheduleType().getValue()))
		{
			// Second cell (age in month)
			column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_AGE_SHOTNO);
			cell = row.getCells().get(column);
			try
			{
				stageConfiguration.setAgeInMonths(Integer.parseInt((String) cell.getValue()));
			}
			catch (NumberFormatException e)
			{
				// WDEV-12583 - Changed message so when Stage is null not to display "null" in message
				throw new NumberFormatException("Please enter a valid number for stage age on stage " + (stageConfiguration.getStage() == null ? "..." : stageConfiguration.getStage().getText()));
			}
		}
		
		// Third cell (Vaccines)
		stageConfiguration.setStageVaccines(getDynamicGridRowsStageVaccineCollection(row, null));

		return stageConfiguration;
	}

	private StageVaccineVoCollection getDynamicGridRowsStageVaccineCollection(DynamicGridRow row, StageVaccineVoCollection stageVaccineCollection)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not retrieve the vaccines for a null row");

		if (stageVaccineCollection == null)
			stageVaccineCollection = new StageVaccineVoCollection();


		// Iterate through the stage vaccines rows
		for (int i = 0; i < row.getRows().size(); i++)
		{
			DynamicGridRow stageVaccineRow = row.getRows().get(i);

			if (!(isEmptyVaccineRow(stageVaccineRow)))
				stageVaccineCollection.add(getDynamicGridRowStageVaccine(stageVaccineRow, null));
		}

		stageVaccineCollection.sort();

		return stageVaccineCollection;
	}

	private StageVaccineVo getDynamicGridRowStageVaccine(DynamicGridRow row, StageVaccineVo stageVaccine)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not retrieve a vaccine from a null row");

		if (row.getValue() != null && !(row.getValue() instanceof StageVaccineVo))
			throw new CodingRuntimeException("Major Logical Error - Can not retrieve data from a non stage vaccine row");

		if (stageVaccine == null)
			stageVaccine = new StageVaccineVo();


		// Column and cell identifier
		DynamicGridColumn column;
		DynamicGridCell cell;


		// First cell (Vaccine)
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_STAGE_VACCINENAME);
		cell = row.getCells().get(column);
		stageVaccine.setVaccine((VaccineLiteVo) cell.getIdentifier());

		// Second cell (Shot number)
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_AGE_SHOTNO);
		cell = row.getCells().get(column);
		stageVaccine.setShotNo((Integer) cell.getValue());

		// Third cell (PCRS Code)
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_VACCINES_PCRSCODE);
		cell = row.getCells().get(column);
		stageVaccine.setPcrsCode((String) cell.getValue());

		// Fourth cell (Driver)
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_DRIVER);
		cell = row.getCells().get(column);
		stageVaccine.setDriver(DATA_MIGRATION.equals(form.ctnScheduleConfiguration().txtScheduleName().getValue()) ? null : (((Boolean) cell.getValue()) == null ? false : ((Boolean) cell.getValue())));
		stageVaccine.setIntervalMonths(DATA_MIGRATION.equals(form.ctnScheduleConfiguration().txtScheduleName().getValue()) ? null : getIntervalMonths(cell));
		
		// Fifth cell (Can be rescheduled)
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_RESCHEDULE);
		cell = row.getCells().get(column);
		stageVaccine.setCanBeRescheduled(((Boolean) cell.getValue()) == null ? false : ((Boolean) cell.getValue()));

		// Six cell (Last shot)
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_LAST_SHOT);
		cell = row.getCells().get(column);
		stageVaccine.setIsLastShotForVaccine(((Boolean) cell.getValue()) == null ? false : ((Boolean) cell.getValue()));

		return stageVaccine;
	}

	private void addNewStageConfigurationRow()
	{

		DynamicGridRow row = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getRows().newRow(true);
		// Set the stage configuration row
		setDynamicGridRowStageConfiguration(row, new StageConfigurationVo());

		form.ctnScheduleConfiguration().dyngrdStageConfiguration().setSelectedRow(row);
		form.ctnScheduleConfiguration().dyngrdStageConfiguration().resetScrollPosition();
	}

	private void removeStageConfigurationRow()
	{
		DynamicGridRow row = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getSelectedRow();

		DynamicGridRow parent = row.getParent();
		row.getRows().clear();

		form.ctnScheduleConfiguration().dyngrdStageConfiguration().getRows().remove(row);

		if (parent != null)
			setDynamicGridRowsStageVaccineCollection(parent, getDynamicGridRowsStageVaccineCollection(parent, null));
	}


	private void addVaccineToStageConfigurationRow(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add vaccine collection to a null row");

		// Build the vaccine collection 
		VaccineLiteVoCollection vaccines = new VaccineLiteVoCollection();

		if (row.getValue() != null && row.getValue() instanceof StageConfigurationVo)
		{
			StageVaccineVoCollection stageVaccines = getDynamicGridRowsStageVaccineCollection(row, null);

			for (int i = 0; i < stageVaccines.size(); i++)
			{
				StageVaccineVo stageVacine = stageVaccines.get(i);

				if (stageVacine != null && stageVacine.getVaccineIsNotNull())
				{
					vaccines.add(stageVacine.getVaccine());
				}
			}
		}

		// Set up the global context
		form.getGlobalContext().Clinical.setPMHConfigSearchType("VACCINE");
		form.getGlobalContext().Clinical.CCISearch.setSelectedVaccines(vaccines);

		engine.open(form.getForms().Core.DiagnosisProcedureProblemSearch);
	}


	private void updateVaccinesToSelectedStageConfiguration()
	{
		VaccineLiteVoCollection vaccineVoCollection = form.getGlobalContext().Clinical.CCISearch.getSelectedVaccines();

		// If the collection is null or empty - set the current vaccines to null
		if (vaccineVoCollection == null || vaccineVoCollection.size() == 0)
		{
			if (form.ctnScheduleConfiguration().dyngrdStageConfiguration().getValue() instanceof StageConfigurationVo)
				if (form.ctnScheduleConfiguration().dyngrdStageConfiguration().getSelectedRow() != null)
					setDynamicGridRowsStageVaccineCollection(form.ctnScheduleConfiguration().dyngrdStageConfiguration().getSelectedRow(), null);

			return;
		}


		StageVaccineVoCollection stageVaccineVoCollection = new StageVaccineVoCollection();

		for (int i = 0; i < vaccineVoCollection.size(); i++)
		{
			VaccineLiteVo vaccineVo = vaccineVoCollection.get(i);

			if (vaccineVo != null)
			{
				StageVaccineVo stageVaccineVo = new StageVaccineVo();
				stageVaccineVo.setVaccine(vaccineVo);
				stageVaccineVoCollection.add(stageVaccineVo);
			}
		}


		if (form.ctnScheduleConfiguration().dyngrdStageConfiguration().getValue() != null)
		{
			if (form.ctnScheduleConfiguration().dyngrdStageConfiguration().getValue() instanceof StageConfigurationVo)
			{
				((StageConfigurationVo) form.ctnScheduleConfiguration().dyngrdStageConfiguration().getValue()).setStageVaccines(stageVaccineVoCollection);
				setDynamicGridRowsStageVaccineCollection(form.ctnScheduleConfiguration().dyngrdStageConfiguration().getSelectedRow(), stageVaccineVoCollection);
			}
		}
	}


	private boolean isEmptyStageConfigurationRow(DynamicGridRow row)
	{
		if (row == null)
			return true;

		if (row.getValue() == null)
			row.setValue(new StageConfigurationVo());

		if (!(row.getValue() instanceof StageConfigurationVo))
			throw new CodingRuntimeException("Major Logical Error - Can not test for empty stage configuration row on non stage configuration row");


		// Column and cell identifier
		DynamicGridColumn column;
		DynamicGridCell cell;

		// Check the first cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_STAGE_VACCINENAME);
		cell = row.getCells().get(column);
		if (cell.getValue() != null)
			return false;

		// Check the second cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_AGE_SHOTNO);
		cell = row.getCells().get(column);
		if (cell.getValue() != null)
			return false;

		// Check the vaccines rows
		if (row.getRows().size() != 0)
		{
			for (int i = 0; i < row.getRows().size(); i++)
			{
				if (!isEmptyVaccineRow(row.getRows().get(i)))
					return false;
			}
		}

		return true;
	}

	private boolean isEmptyVaccineRow(DynamicGridRow row)
	{
		if (row == null)
			return true;

		if (row.getValue() == null)
			row.setValue(new StageVaccineVo());

		if (!(row.getValue() instanceof StageVaccineVo))
			throw new CodingRuntimeException("Major Logical Error - Can not test for empty stage vaccine row on non stage vaccine row");

		// Column and cell identifier
		DynamicGridColumn column;
		DynamicGridCell cell;

		// Check the fist cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_STAGE_VACCINENAME);
		cell = row.getCells().get(column);
		if (cell.getValue() != null)
			return false;

		// Check the second cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_VACCINES_PCRSCODE);
		cell = row.getCells().get(column);
		if (cell.getValue() != null)
			return false;

		// Check the third cell
		column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_RESCHEDULE);
		cell = row.getCells().get(column);
		if (cell.getValue() != null)
			return false;

		return true;
	}
	
	private void validateDriver(DynamicGridCell cell) 
	{
		if(cell.getRow().getParent() != null && Boolean.TRUE.equals(cell.getValue()))
		{
			for(int i=0; i<cell.getRow().getParent().getRows().size(); i++)
			{
				DynamicGridRow row = cell.getRow().getParent().getRows().get(i);
				DynamicGridColumn column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_DRIVER);;
				DynamicGridCell cellNew = row.getCells().get(column);
				
				if(!cellNew.equals(cell))
					cellNew.setValue(Boolean.FALSE);
			}
		}
	}
	
	private void populateIntervalMonths(DynamicGridCell cell, StageVaccineVo stageVaccineVo) 
	{
		if(cell == null || cell.getRow() == null || cell.getRow().getParent() == null || stageVaccineVo == null)
			return;
		
		DynamicGridColumn column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_DRIVER);
		DynamicGridCell parentCell = cell.getRow().getParent().getCells().get(column);
		
		parentCell.setValue(stageVaccineVo.getIntervalMonthsIsNotNull() ? stageVaccineVo.getIntervalMonths() : null);
	}
	
	private Integer getIntervalMonths(DynamicGridCell cell) 
	{
		if(cell.getValue() == null || Boolean.FALSE.equals(cell.getValue()))
			return null;
		
		if(cell == null || cell.getRow() == null || cell.getRow().getParent() == null)
			return null;
		
		DynamicGridColumn column = form.ctnScheduleConfiguration().dyngrdStageConfiguration().getColumns().getByIdentifier(COL_DRIVER);
		DynamicGridCell parentCell = cell.getRow().getParent().getCells().get(column);
		
		return (Integer) parentCell.getValue();
	}
}
