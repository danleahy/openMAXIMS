//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pci.forms.scheduleconfiguration;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.pci.domain.ScheduleConfiguration.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.pci.domain.ScheduleConfiguration domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	public void clearContextInformation()
	{
		engine.clearPatientContextInformation();
	}
	protected final void oncmbScheduleTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnScheduleConfiguration().cmbScheduleType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.pci.vo.lookups.ScheduleType existingInstance = (ims.pci.vo.lookups.ScheduleType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbScheduleTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.pci.vo.lookups.ScheduleType)
		{
			ims.pci.vo.lookups.ScheduleType instance = (ims.pci.vo.lookups.ScheduleType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbScheduleTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.pci.vo.lookups.ScheduleType existingInstance = (ims.pci.vo.lookups.ScheduleType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnScheduleConfiguration().cmbScheduleType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbScheduleTypeLookup()
	{
		this.form.ctnScheduleConfiguration().cmbScheduleType().clear();
		ims.pci.vo.lookups.ScheduleTypeCollection lookupCollection = ims.pci.vo.lookups.LookupHelper.getScheduleType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnScheduleConfiguration().cmbScheduleType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbScheduleTypeLookupValue(int id)
	{
		ims.pci.vo.lookups.ScheduleType instance = ims.pci.vo.lookups.LookupHelper.getScheduleTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnScheduleConfiguration().cmbScheduleType().setValue(instance);
	}
	protected final void defaultcmbScheduleTypeLookupValue()
	{
		this.form.ctnScheduleConfiguration().cmbScheduleType().setValue((ims.pci.vo.lookups.ScheduleType)domain.getLookupService().getDefaultInstance(ims.pci.vo.lookups.ScheduleType.class, engine.getFormName().getID(), ims.pci.vo.lookups.ScheduleType.TYPE_ID));
	}
	protected final void oncmbScheduleStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnScheduleConfiguration().cmbScheduleStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbScheduleStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PreActiveActiveInactiveStatus)
		{
			ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbScheduleStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnScheduleConfiguration().cmbScheduleStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbScheduleStatusLookup()
	{
		this.form.ctnScheduleConfiguration().cmbScheduleStatus().clear();
		ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnScheduleConfiguration().cmbScheduleStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbScheduleStatusLookupValue(int id)
	{
		ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnScheduleConfiguration().cmbScheduleStatus().setValue(instance);
	}
	protected final void defaultcmbScheduleStatusLookupValue()
	{
		this.form.ctnScheduleConfiguration().cmbScheduleStatus().setValue((ims.core.vo.lookups.PreActiveActiveInactiveStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PreActiveActiveInactiveStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PreActiveActiveInactiveStatus.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.ctnScheduleConfiguration().dteStartCampaign().setValue(null);
		this.form.ctnScheduleConfiguration().cmbScheduleType().setValue(null);
		this.form.ctnScheduleConfiguration().chkDefaultSchedule().setValue(false);
		this.form.ctnScheduleConfiguration().cmbScheduleStatus().setValue(null);
		this.form.ctnScheduleConfiguration().dteStartDOB().setValue(null);
		this.form.ctnScheduleConfiguration().txtScheduleName().setValue("");
		this.form.ctnScheduleConfiguration().dteEndDOB().setValue(null);
	}
	protected void populateScreenFromData(ims.pci.vo.ScheduleConfigurationVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.ctnScheduleConfiguration().dteStartCampaign().setValue(value.getCampaignStartDateIsNotNull() ? value.getCampaignStartDate() : null);
		this.form.ctnScheduleConfiguration().cmbScheduleType().setValue(value.getScheduleTypeIsNotNull() ? value.getScheduleType() : null);
		if(value.getIsDefaultScheduleIsNotNull())
			this.form.ctnScheduleConfiguration().chkDefaultSchedule().setValue(value.getIsDefaultSchedule().booleanValue());
		this.form.ctnScheduleConfiguration().cmbScheduleStatus().setValue(value.getStatusIsNotNull() ? value.getStatus() : null);
		this.form.ctnScheduleConfiguration().dteStartDOB().setValue(value.getStartDobIsNotNull() ? value.getStartDob() : null);
		this.form.ctnScheduleConfiguration().txtScheduleName().setValue(value.getScheduleNameIsNotNull() ? value.getScheduleName(): null);
		this.form.ctnScheduleConfiguration().dteEndDOB().setValue(value.getEndDobIsNotNull() ? value.getEndDob() : null);
	}
	protected ims.pci.vo.ScheduleConfigurationVo populateDataFromScreen(ims.pci.vo.ScheduleConfigurationVo value)
	{
		if(value == null)
			value = new ims.pci.vo.ScheduleConfigurationVo();

		value.setCampaignStartDate(this.form.ctnScheduleConfiguration().dteStartCampaign().getValue());
		value.setScheduleType(this.form.ctnScheduleConfiguration().cmbScheduleType().getValue());
		value.setIsDefaultSchedule(new Boolean(this.form.ctnScheduleConfiguration().chkDefaultSchedule().getValue()));
		value.setStatus(this.form.ctnScheduleConfiguration().cmbScheduleStatus().getValue());
		value.setStartDob(this.form.ctnScheduleConfiguration().dteStartDOB().getValue());
		value.setScheduleName(this.form.ctnScheduleConfiguration().txtScheduleName().getValue());
		value.setEndDob(this.form.ctnScheduleConfiguration().dteEndDOB().getValue());

		return value;
	}
	protected ims.pci.vo.ScheduleConfigurationVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.pci.vo.ScheduleConfigurationVo());
	}
	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
	}
	public boolean allowNew()
	{
		return form.getMode() == ims.framework.enumerations.FormMode.VIEW && !form.isReadOnly();
	}
	public boolean allowUpdate()
	{
		return form.getMode() == ims.framework.enumerations.FormMode.VIEW && !form.isReadOnly();
	}
	public String[] validateUIRules()
	{
		return null;
	}
	public void clear()
	{
	}
	public void search()
	{
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.pci.domain.ScheduleConfiguration domain;
}
