//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.forms.patientelectronicactionsheet;

import ims.ccosched.vo.lookups.AttendingAs;
import ims.ccosched.vo.lookups.LookupHelper;
import ims.ccosched.vo.lookups.Priority;
import ims.ccosched.vo.lookups.SeenAt;
import ims.ccosched.vo.lookups.Status;
import ims.ccosched.vo.lookups.Transport;
import ims.ccosched.vo.lookups.TreatmentIntent;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.lookups.YesNo;
import ims.eas.vo.EASStatusRecordVo;
import ims.eas.vo.EASStatusRecordVoCollection;
import ims.eas.vo.ElectronicActionSheetVo;
import ims.eas.vo.enums.EasAction;
import ims.eas.vo.lookups.EASStatus;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.vo.LookupInstVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int EAS_SUMMARY_IMSID = 339;
	private static final String EAS_SUMMARY_SEED = "ElectronicActionSheet_id";
	
	private enum Tab
	{
		OVERVIEW,
		TREATMENT_OPTIONS,
		REQUEST_IMAGE_TRANSFER,
		PLANNING_OPTIONS,
		MISCELLANEOUS,
		SUMMARY
	}

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		
		if (args != null && args.length > 0)
		{
			if (args[0] instanceof EasAction)
				form.getLocalContext().setEasAction((EasAction) args[0]);
		}
		
		open();
		setCurrentAndPreviousTabs();
	}

	private void setCurrentAndPreviousTabs()
	{
		if (form.lyrEAS().tabOverview().isVisible())
		{
			form.getLocalContext().setCurrentTab(Tab.OVERVIEW);
			form.getLocalContext().setPreviousTab(Tab.OVERVIEW);
		}
		else if (form.lyrEAS().tabTreatmentOptions().isVisible())
		{
			form.getLocalContext().setCurrentTab(Tab.TREATMENT_OPTIONS);
			form.getLocalContext().setPreviousTab(Tab.TREATMENT_OPTIONS);
		}
		else if (form.lyrEAS().tabImageTransfer().isVisible())
		{
			form.getLocalContext().setCurrentTab(Tab.REQUEST_IMAGE_TRANSFER);
			form.getLocalContext().setPreviousTab(Tab.REQUEST_IMAGE_TRANSFER);
		}
		else if (form.lyrEAS().tabPlanningOptions().isVisible())
		{
			form.getLocalContext().setCurrentTab(Tab.PLANNING_OPTIONS);
			form.getLocalContext().setPreviousTab(Tab.PLANNING_OPTIONS);
		}
		else if (form.lyrEAS().tabMiscellaneous().isVisible())
		{
			form.getLocalContext().setCurrentTab(Tab.MISCELLANEOUS);
			form.getLocalContext().setPreviousTab(Tab.MISCELLANEOUS);
		}
		else if (form.lyrEAS().tabSummary().isVisible())
		{
			form.getLocalContext().setCurrentTab(Tab.SUMMARY);
			form.getLocalContext().setPreviousTab(Tab.SUMMARY);
		}
	}

	private void open()
	{
		form.getLocalContext().setpatientEAS(form.getGlobalContext().EAS.getElectronicActionSheet());
		
		if (EasAction.NEW.equals(form.getLocalContext().getEasAction()))
		{
			form.setMode(FormMode.EDIT);
			
			LookupInstVo defaultSeenAt = domain.getLookupService().getDefaultInstance(form.getForms().EAS.PatientElectronicActionSheet.getID(), domain.getLookupService().getLookupType(SeenAt.TYPE_ID));
			LookupInstVo defaultTreatmentIntent = domain.getLookupService().getDefaultInstance(form.getForms().EAS.PatientElectronicActionSheet.getID(), domain.getLookupService().getLookupType(TreatmentIntent.TYPE_ID));
			LookupInstVo defaultPriority = domain.getLookupService().getDefaultInstance(form.getForms().EAS.PatientElectronicActionSheet.getID(), domain.getLookupService().getLookupType(Priority.TYPE_ID));
			
			form.lyrEAS().tabOverview().ccOverview().setDefaultLookups(defaultSeenAt != null ? LookupHelper.getSeenAtInstance(domain.getLookupService(), defaultSeenAt.getID()) : null,
																		defaultTreatmentIntent != null ? LookupHelper.getTreatmentIntentInstance(domain.getLookupService(), defaultTreatmentIntent.getID()) : null,
																		defaultPriority != null ? LookupHelper.getPriorityInstance(domain.getLookupService(), defaultPriority.getID()) : null);

			form.lyrEAS().tabMiscellaneous().setccMiscellaneousEnabled(FormMode.EDIT.equals(form.getMode()));
			form.getLocalContext().setpatientEAS(form.lyrEAS().tabOverview().ccOverview().getValue());
			updateControlsState(); 
			return;
		}
		
		if (EasAction.VIEW.equals(form.getLocalContext().getEasAction()))
		{
			form.setMode(FormMode.VIEW);
			setComponentsInViewMode();
			updateControlsState();
			setComponentValues(form.getGlobalContext().EAS.getElectronicActionSheet());
			return;
		}
		
		if (EasAction.VIEW_SUMMARY.equals(form.getLocalContext().getEasAction()))
		{
			form.setMode(FormMode.VIEW);
			setComponentsInViewMode();
			updateControlsState(); 
			form.lyrEAS().showtabSummary();
			setComponentValues(form.getGlobalContext().EAS.getElectronicActionSheet());
			return;
		}
		
		if (EasAction.EDIT.equals(form.getLocalContext().getEasAction()))
		{
			form.setMode(FormMode.EDIT);
			updateControlsState(); 
			setComponentValues(form.getGlobalContext().EAS.getElectronicActionSheet());
			return;
		}
		
		if (EasAction.PRINT.equals(form.getLocalContext().getEasAction()))
		{
			form.setMode(FormMode.VIEW);
			setComponentsInViewMode();
			updateControlsState(); 
			form.lyrEAS().showtabSummary();
			setComponentValues(form.getGlobalContext().EAS.getElectronicActionSheet());
			return;
		}
		
		if (EasAction.AUTHORISE.equals(form.getLocalContext().getEasAction()))
		{
			form.setMode(FormMode.EDIT);
			updateControlsState();
			setComponentValues(form.getGlobalContext().EAS.getElectronicActionSheet());
			return;
		}
		
		if (EasAction.ANNOTATE.equals(form.getLocalContext().getEasAction()))
		{
			form.setMode(FormMode.EDIT);
			setComponentsInViewMode();
			updateControlsState(); 
			setComponentValues(form.getGlobalContext().EAS.getElectronicActionSheet());
			return;
		}
	}

	private void setComponentsInViewMode()
	{
		if (! EasAction.ANNOTATE.equals(form.getLocalContext().getEasAction()))
		{
			form.lyrEAS().tabOverview().ccOverview().setMode(FormMode.VIEW);
		}
		
		form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().setMode(FormMode.VIEW);
		form.lyrEAS().tabImageTransfer().ccImageTransfer().setMode(FormMode.VIEW);
		form.lyrEAS().tabPlanningOptions().ccPlanOpts().setMode(FormMode.VIEW);
	}

	private void setComponentValues(ElectronicActionSheetVo electronicActionSheet)
	{
		if (form.lyrEAS().tabOverview().isHeaderVisible())
		{
			form.lyrEAS().tabOverview().ccOverview().setValue(electronicActionSheet);
		}
		
		if (form.lyrEAS().tabTreatmentOptions().isHeaderVisible())
		{
			form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().setValue(electronicActionSheet);
		}
		
		if (form.lyrEAS().tabImageTransfer().isHeaderVisible())
		{
			form.lyrEAS().tabImageTransfer().ccImageTransfer().setValue(electronicActionSheet);
		}
		
		if (form.lyrEAS().tabPlanningOptions().isHeaderVisible())
		{
			form.lyrEAS().tabPlanningOptions().ccPlanOpts().setValue(electronicActionSheet);
		}
		
		if (form.lyrEAS().tabMiscellaneous().isHeaderVisible())
		{
			form.lyrEAS().tabMiscellaneous().ccMiscellaneous().setValue(electronicActionSheet);
		}
		
		if (form.lyrEAS().tabSummary().isVisible())
		{
			form.lyrEAS().tabSummary().ccSummary().setValue(electronicActionSheet);
		}
	}

	private void initialise()
	{
		form.getLocalContext().setMostRecentlyEAS(null);
		form.getLocalContext().setWasTransportQuestionsAndPatientStatusAllreadySaved(null);
		
		form.lyrEAS().tabOverview().ccOverview().initialise();
		form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().initialise();
		form.lyrEAS().tabImageTransfer().ccImageTransfer().initialise();
		form.lyrEAS().tabPlanningOptions().ccPlanOpts().initialise();
		form.lyrEAS().tabSummary().ccSummary().initialise();
	}

	protected void onBtnCompleteClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.lyrEAS().tabSummary().isVisible())
		{
			if (form.lyrEAS().tabSummary().ccSummary().save())
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabSummary().ccSummary().getValue());
				form.lyrEAS().tabSummary().ccSummary().hideHTML();
				engine.open(form.getForms().EAS.AdditionalActionSheets);
			}
			//WDEV-17536 check for SOE if status was changed
			else if (EASStatus.AUTHORISED.equals(form.lyrEAS().tabSummary().ccSummary().getValue().getEasStatus().getStatus()) || EASStatus.AWAITING_AUTHORISATION.equals(form.lyrEAS().tabSummary().ccSummary().getValue().getEasStatus().getStatus()))
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabSummary().ccSummary().getValue());
				form.setMode(FormMode.VIEW);
				setComponentsInViewMode();
				setComponentValues(form.getLocalContext().getpatientEAS());
			}
		}
	}

	protected void onBtnExitClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSave();
	}

	private void doSave()
	{
		if (form.lyrEAS().tabOverview().isVisible())
		{
			//WDEV-17557
			if ((form.getLocalContext().getpatientEAS() == null || form.getLocalContext().getpatientEAS().getID_ElectronicActionSheet() == null) && form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().hasErrors())
			{
				form.lyrEAS().showtabTreatmentOptions();
				form.getLocalContext().setCurrentTab(Tab.TREATMENT_OPTIONS);
				form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().setValue(form.lyrEAS().tabOverview().ccOverview().getValue());
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().getValue());
				updateControlsState();
				return;
			}

			if (form.lyrEAS().tabOverview().ccOverview().save())
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabOverview().ccOverview().getValue());
				engine.close(DialogResult.OK);
			}
		}
		else if (form.lyrEAS().tabTreatmentOptions().isVisible())
		{
			if (form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().save())
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().getValue());
				engine.close(DialogResult.OK);
			}
		}
		else if (form.lyrEAS().tabImageTransfer().isVisible())
		{
			if (form.lyrEAS().tabImageTransfer().ccImageTransfer().save())
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabImageTransfer().ccImageTransfer().getValue());
				engine.close(DialogResult.OK);
			}
		}
		else if (form.lyrEAS().tabPlanningOptions().isVisible())
		{
			if (form.lyrEAS().tabPlanningOptions().ccPlanOpts().save())
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabPlanningOptions().ccPlanOpts().getValue());
				engine.close(DialogResult.OK);
			}
		}
		else if (form.lyrEAS().tabMiscellaneous().isVisible())
		{
			if (form.lyrEAS().tabMiscellaneous().ccMiscellaneous().save())
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabMiscellaneous().ccMiscellaneous().getValue());
				engine.close(DialogResult.OK);
			}
		}
		
		updateControlsState();		
	}

	protected void onBtnBackClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.lyrEAS().tabTreatmentOptions().isVisible())
		{
			form.lyrEAS().showtabOverview();
			onlyrEASTabChanged(form.lyrEAS().tabOverview());
		}
		else if (form.lyrEAS().tabImageTransfer().isVisible())
		{
			form.lyrEAS().showtabTreatmentOptions();
			onlyrEASTabChanged(form.lyrEAS().tabTreatmentOptions());
		}
		else if (form.lyrEAS().tabPlanningOptions().isVisible())
		{
			if (form.lyrEAS().tabImageTransfer().isHeaderVisible())
			{
				form.lyrEAS().showtabImageTransfer();
				onlyrEASTabChanged(form.lyrEAS().tabImageTransfer());
			}
			else
			{
				form.lyrEAS().showtabTreatmentOptions();
				onlyrEASTabChanged(form.lyrEAS().tabTreatmentOptions());
			}
		}
		else if (form.lyrEAS().tabMiscellaneous().isVisible())
		{
			form.lyrEAS().showtabPlanningOptions();
			onlyrEASTabChanged(form.lyrEAS().tabPlanningOptions());
		}
		else if (form.lyrEAS().tabSummary().isVisible())
		{
			form.lyrEAS().showtabMiscellaneous();
			onlyrEASTabChanged(form.lyrEAS().tabMiscellaneous());
		}
	}

	protected void onBtnNextClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.lyrEAS().tabOverview().isVisible())
		{
			form.lyrEAS().showtabTreatmentOptions();
			onlyrEASTabChanged(form.lyrEAS().tabTreatmentOptions());
		}
		else if (form.lyrEAS().tabTreatmentOptions().isVisible())
		{
			if (form.lyrEAS().tabImageTransfer().isHeaderVisible())
			{
				form.lyrEAS().showtabImageTransfer();
				onlyrEASTabChanged(form.lyrEAS().tabImageTransfer());
			}
			else
			{
				form.lyrEAS().showtabPlanningOptions();
				onlyrEASTabChanged(form.lyrEAS().tabPlanningOptions());
			}
		}
		else if (form.lyrEAS().tabImageTransfer().isVisible())
		{
			form.lyrEAS().showtabPlanningOptions();
			onlyrEASTabChanged(form.lyrEAS().tabPlanningOptions());
		}
		else if (form.lyrEAS().tabPlanningOptions().isVisible())
		{
			form.lyrEAS().showtabMiscellaneous();
			onlyrEASTabChanged(form.lyrEAS().tabMiscellaneous());
		}
		else if (form.lyrEAS().tabMiscellaneous().isVisible())
		{
			form.lyrEAS().showtabSummary();
			onlyrEASTabChanged(form.lyrEAS().tabSummary());
		}
	}

	protected void onBtnDrawClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-17559
		form.getLocalContext().setpatientEAS(form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().getValue());
		
		if (form.getLocalContext().getpatientEAS() != null && form.getLocalContext().getpatientEAS().getTreatmentSite() != null && form.getLocalContext().getpatientEAS().getTreatmentSite().getAssessment() == null)
		{
			engine.showMessage("The selected Treatment Site doesn't have a configured Graphical Assessment.");
			return;
		}
	
		if (form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().hasErrors())
		{
			//engine.showMessage("Please complete all mandatory fields before continuing."); WDEV-17568
			updateControlsState();
			return;
		}
		
		form.getGlobalContext().EAS.setEasPatientAssessment(form.getLocalContext().getpatientEAS().getGraphicAssessment());
		engine.open(form.getForms().Assessment.DynamicAssessmentsDialog, new Object[]{(form.getLocalContext().getpatientEAS().getTreatmentSite().getAssessment())});
	}

	protected void onBtnViewCccResultsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.lyrEAS().tabSummary().isVisible())
		{
			form.lyrEAS().tabSummary().ccSummary().hideHTML();
		}
		
		engine.open(form.getForms().OCRR.PatientResultsAndOrders);
	}

	protected void onlyrEASTabChanged(ims.framework.LayerBridge tab)
	{
		
		//the first two tabs need to be completed so a save can be made. Only after a successful save the other tabs can be accessed 
		if (form.lyrEAS().tabTreatmentOptions().isVisible() && (form.getLocalContext().getpatientEAS() == null || form.getLocalContext().getpatientEAS().getID_ElectronicActionSheet() == null))
		{
			form.getLocalContext().setPreviousTab(form.getLocalContext().getCurrentTab());
			form.getLocalContext().setCurrentTab(Tab.TREATMENT_OPTIONS);
			
			if (form.getLocalContext().getPreviousTab() != form.getLocalContext().getCurrentTab()) 
				form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().setValue(form.lyrEAS().tabOverview().ccOverview().getValue());
			
			form.getLocalContext().setpatientEAS(form.lyrEAS().tabOverview().ccOverview().getValue());
		}
		else if (form.lyrEAS().tabTreatmentOptions().isVisible() && form.getLocalContext().getpatientEAS() != null && form.getLocalContext().getpatientEAS().getID_ElectronicActionSheet() != null)
		{
			form.getLocalContext().setPreviousTab(form.getLocalContext().getCurrentTab());
			form.getLocalContext().setCurrentTab(Tab.TREATMENT_OPTIONS);
			
			if (savePreviousTab())
				form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().setValue(form.getLocalContext().getpatientEAS());
		}

		if (form.lyrEAS().tabOverview().isVisible() && (form.getLocalContext().getpatientEAS() == null || form.getLocalContext().getpatientEAS().getID_ElectronicActionSheet() == null))
		{
			form.getLocalContext().setPreviousTab(form.getLocalContext().getCurrentTab());
			form.getLocalContext().setCurrentTab(Tab.OVERVIEW);
			
			if (form.getLocalContext().getPreviousTab() != form.getLocalContext().getCurrentTab())
				form.lyrEAS().tabOverview().ccOverview().setValue(form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().getValue());
			
			form.getLocalContext().setpatientEAS(form.lyrEAS().tabOverview().ccOverview().getValue());
		}
		else if (form.lyrEAS().tabOverview().isVisible() && form.getLocalContext().getpatientEAS() != null && form.getLocalContext().getpatientEAS().getID_ElectronicActionSheet() != null)
		{
			form.getLocalContext().setPreviousTab(form.getLocalContext().getCurrentTab());
			form.getLocalContext().setCurrentTab(Tab.OVERVIEW);
			
			if (savePreviousTab())
				form.lyrEAS().tabOverview().ccOverview().setValue(form.getLocalContext().getpatientEAS());
		}

		//WDEV-17539
		if (!(form.getLocalContext().getPreviousTab().equals(Tab.OVERVIEW) && form.lyrEAS().tabOverview().isVisible()) && form.lyrEAS().tabOverview().ccOverview().errorsPresent())
		{
			form.lyrEAS().showtabOverview();
			form.getLocalContext().setCurrentTab(Tab.OVERVIEW);
			return;
		}
		else if (errorsPresent())
		{
			form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().setValue(form.lyrEAS().tabOverview().ccOverview().getValue());
			return;
		}
		
		if (form.lyrEAS().tabImageTransfer().isVisible())
		{
			form.getLocalContext().setPreviousTab(form.getLocalContext().getCurrentTab());
			form.getLocalContext().setCurrentTab(Tab.REQUEST_IMAGE_TRANSFER);
			
			if (savePreviousTab())
				form.lyrEAS().tabImageTransfer().ccImageTransfer().setValue(form.getLocalContext().getpatientEAS());
		}

		if (form.lyrEAS().tabPlanningOptions().isVisible())
		{
			form.getLocalContext().setPreviousTab(form.getLocalContext().getCurrentTab());
			form.getLocalContext().setCurrentTab(Tab.PLANNING_OPTIONS);
			
			if (savePreviousTab())
				form.lyrEAS().tabPlanningOptions().ccPlanOpts().setValue(form.getLocalContext().getpatientEAS());
		}
		
		if (form.lyrEAS().tabMiscellaneous().isVisible())
		{
			form.getLocalContext().setPreviousTab(form.getLocalContext().getCurrentTab());
			form.getLocalContext().setCurrentTab(Tab.MISCELLANEOUS);
			
			if (savePreviousTab())
			{
				if(form.getLocalContext().getMostRecentlyEAS() != null && form.getLocalContext().getpatientEAS() != null && !Boolean.TRUE.equals(form.getLocalContext().getWasTransportQuestionsAndPatientStatusAllreadySaved()))
				{
					form.getLocalContext().setWasTransportQuestionsAndPatientStatusAllreadySaved(Boolean.TRUE);
					
					form.getLocalContext().getpatientEAS().setPlanningTransport(form.getLocalContext().getMostRecentlyEAS().getPlanningTransport());
					form.getLocalContext().getpatientEAS().setTreatmentTransport(form.getLocalContext().getMostRecentlyEAS().getTreatmentTransport());
					form.getLocalContext().getpatientEAS().setPatientStatus(form.getLocalContext().getMostRecentlyEAS().getPatientStatus());
				}
				
				form.lyrEAS().tabMiscellaneous().ccMiscellaneous().setValue(form.getLocalContext().getpatientEAS());

				LookupInstVo defaultTransport = domain.getLookupService().getDefaultInstance(form.getForms().EAS.PatientElectronicActionSheet.getID(), domain.getLookupService().getLookupType(Transport.TYPE_ID));
				LookupInstVo defaultAttendingAs = domain.getLookupService().getDefaultInstance(form.getForms().EAS.PatientElectronicActionSheet.getID(), domain.getLookupService().getLookupType(AttendingAs.TYPE_ID));
				LookupInstVo defaultStatus = domain.getLookupService().getDefaultInstance(form.getForms().EAS.PatientElectronicActionSheet.getID(), domain.getLookupService().getLookupType(Status.TYPE_ID));

				form.lyrEAS().tabMiscellaneous().ccMiscellaneous().setDefaultLookups(defaultTransport != null ? LookupHelper.getTransportInstance(domain.getLookupService(), defaultTransport.getID()) : null,
						defaultAttendingAs != null ? LookupHelper.getAttendingAsInstance(domain.getLookupService(), defaultAttendingAs.getID()) : null,
						defaultStatus != null ? LookupHelper.getStatusInstance(domain.getLookupService(), defaultStatus.getID()) : null);

			}
		}
		
		if(form.lyrEAS().tabSummary().isVisible())
		{
			form.getLocalContext().setPreviousTab(form.getLocalContext().getCurrentTab());
			form.getLocalContext().setCurrentTab(Tab.SUMMARY);
			
			if (FormMode.VIEW.equals(form.getMode()))
				form.lyrEAS().tabSummary().ccSummary().setValue(form.getLocalContext().getpatientEAS());
			else if (savePreviousTab() || EasAction.ANNOTATE.equals(form.getLocalContext().getEasAction()))
				form.lyrEAS().tabSummary().ccSummary().setValue(form.getLocalContext().getpatientEAS());
		}
		
		updateControlsState();
	}

	private boolean errorsPresent()
	{
		String errors[] = null;
		
		if ((form.getLocalContext().getpatientEAS() == null || form.getLocalContext().getpatientEAS().getID_ElectronicActionSheet() == null) && form.getLocalContext().getCurrentTab().equals(Tab.OVERVIEW))
		{
		   errors = form.lyrEAS().tabOverview().ccOverview().getValue().validate();
		}
		else if ((form.getLocalContext().getpatientEAS() == null || form.getLocalContext().getpatientEAS().getID_ElectronicActionSheet() == null) && form.getLocalContext().getCurrentTab().equals(Tab.TREATMENT_OPTIONS))
		{
			errors = form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().getValue().validate();
		}
		
		if (errors != null && (form.getLocalContext().getpatientEAS() == null || form.getLocalContext().getpatientEAS().getID_ElectronicActionSheet() == null) && (!form.lyrEAS().tabTreatmentOptions().isVisible()) && (!form.lyrEAS().tabOverview().isVisible()))
		{
			engine.showErrors(errors);
			form.lyrEAS().showtabTreatmentOptions();
			form.getLocalContext().setCurrentTab(Tab.TREATMENT_OPTIONS);
			updateControlsState();
			return true;
		}
		
		return false;
	}

	private Boolean savePreviousTab()
	{
		Boolean annotateAction = EasAction.ANNOTATE.equals(form.getLocalContext().getEasAction());
		
		if (form.getLocalContext().getPreviousTab().equals(form.getLocalContext().getCurrentTab()) || FormMode.VIEW.equals(form.getMode()) || annotateAction)
		{
			return false;
		}
		
		if (Tab.OVERVIEW.equals(form.getLocalContext().getPreviousTab()))
		{
			if (form.lyrEAS().tabOverview().ccOverview().save())
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabOverview().ccOverview().getValue());
				return true;
			}
			else
			{
				form.getLocalContext().setCurrentTab(Tab.OVERVIEW);
				form.lyrEAS().showtabOverview();
				return false;
			}
		}
		else if (Tab.TREATMENT_OPTIONS.equals(form.getLocalContext().getPreviousTab()))
		{
			if (form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().save())
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().getValue());
				return true;
			}
			else
			{
				form.getLocalContext().setCurrentTab(Tab.TREATMENT_OPTIONS);
				form.lyrEAS().showtabTreatmentOptions();
				return false;
			}
		}
		else if (Tab.REQUEST_IMAGE_TRANSFER.equals(form.getLocalContext().getPreviousTab()))
		{
			if (form.lyrEAS().tabImageTransfer().ccImageTransfer().save())
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabImageTransfer().ccImageTransfer().getValue());
				return true;
			}
			else
			{
				form.getLocalContext().setCurrentTab(Tab.REQUEST_IMAGE_TRANSFER);
				form.lyrEAS().showtabImageTransfer();
				return false;
			}
		}
		else if (Tab.PLANNING_OPTIONS.equals(form.getLocalContext().getPreviousTab()))
		{
			if (form.lyrEAS().tabPlanningOptions().ccPlanOpts().save())
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabPlanningOptions().ccPlanOpts().getValue());
				return true;
			}
			else
			{
				form.getLocalContext().setCurrentTab(Tab.PLANNING_OPTIONS);
				form.lyrEAS().showtabPlanningOptions();
				return false;
			}
		}
		else if (Tab.MISCELLANEOUS.equals(form.getLocalContext().getPreviousTab()))
		{
			if (form.lyrEAS().tabMiscellaneous().ccMiscellaneous().save())
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabMiscellaneous().ccMiscellaneous().getValue());
				return true;
			}
			else
			{
				form.getLocalContext().setCurrentTab(Tab.MISCELLANEOUS);
				form.lyrEAS().showtabMiscellaneous();
				return false;
			}
		}
		else if (Tab.SUMMARY.equals(form.getLocalContext().getPreviousTab()))
		{
			//no save needed as this tab displays a report 
			return true;
		}
		
		return false;
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.btnNext().setVisible(! ( EasAction.VIEW_SUMMARY.equals(form.getLocalContext().getEasAction()) || EasAction.PRINT.equals(form.getLocalContext().getEasAction()) ) );
		form.btnNext().setEnabled(! form.lyrEAS().tabSummary().isVisible());
		
		form.btnBack().setVisible(! (EasAction.VIEW_SUMMARY.equals(form.getLocalContext().getEasAction()) || EasAction.PRINT.equals(form.getLocalContext().getEasAction()) ) );
		form.btnBack().setEnabled(! form.lyrEAS().tabOverview().isVisible());
		
		form.btnDraw().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrEAS().tabTreatmentOptions().isVisible());
		form.btnComplete().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrEAS().tabSummary().isVisible() && form.getLocalContext().getpatientEAS() != null && EASStatus.DRAFT.equals(form.getLocalContext().getpatientEAS().getEasStatus().getStatus()));
		form.btnPrint().setVisible(EasAction.PRINT.equals(form.getLocalContext().getEasAction()) && form.lyrEAS().tabSummary().isVisible());
		form.btnAuthorise().setVisible(EasAction.AUTHORISE.equals(form.getLocalContext().getEasAction()) && form.lyrEAS().tabSummary().isVisible() && form.getLocalContext().getpatientEAS() != null && EASStatus.AWAITING_AUTHORISATION.equals(form.getLocalContext().getpatientEAS().getEasStatus().getStatus()));
		form.btnSave().setVisible(FormMode.EDIT.equals(form.getMode()) && (! form.lyrEAS().tabSummary().isVisible()) && (! EasAction.ANNOTATE.equals(form.getLocalContext().getEasAction()) || (EasAction.ANNOTATE.equals(form.getLocalContext().getEasAction()) && form.lyrEAS().tabOverview().isVisible())));
		form.lyrEAS().tabMiscellaneous().ccMiscellaneous().setMode(!EasAction.ANNOTATE.equals(form.getLocalContext().getEasAction()) ? form.getMode(): FormMode.VIEW );
		updateTabsState();
	}

	private void updateTabsState()
	{
		form.lyrEAS().tabOverview().setHeaderVisible(! (EasAction.VIEW_SUMMARY.equals(form.getLocalContext().getEasAction()) || EasAction.PRINT.equals(form.getLocalContext().getEasAction())));
		form.lyrEAS().tabOverview().ccOverview().setFormMode(form.getMode());
		form.lyrEAS().tabTreatmentOptions().setHeaderVisible(! (EasAction.VIEW_SUMMARY.equals(form.getLocalContext().getEasAction()) || EasAction.PRINT.equals(form.getLocalContext().getEasAction())));
		form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().setMode(form.getMode());
		form.lyrEAS().tabImageTransfer().setHeaderVisible(! (EasAction.VIEW_SUMMARY.equals(form.getLocalContext().getEasAction()) || EasAction.PRINT.equals(form.getLocalContext().getEasAction())) && (form.getLocalContext().getpatientEAS() != null && YesNo.YES.equals(form.getLocalContext().getpatientEAS().getImageTransfer())) );
		form.lyrEAS().tabPlanningOptions().setHeaderVisible(! (EasAction.VIEW_SUMMARY.equals(form.getLocalContext().getEasAction()) || EasAction.PRINT.equals(form.getLocalContext().getEasAction())));
		form.lyrEAS().tabMiscellaneous().setHeaderVisible(! (EasAction.VIEW_SUMMARY.equals(form.getLocalContext().getEasAction()) || EasAction.PRINT.equals(form.getLocalContext().getEasAction())));
		form.lyrEAS().tabSummary().setHeaderVisible(Boolean.TRUE);
	}

	protected void onBtnPrintClick() throws PresentationLogicException
	{
		printReport();
	}

	private void printReport() 
	{
		if(form.getLocalContext().getpatientEAS() != null)
		{
			form.getGlobalContext().Core.setImsReportId(EAS_SUMMARY_IMSID);
			
			if(form.lyrEAS().tabSummary().isVisible())
			{
				form.lyrEAS().tabSummary().ccSummary().hideHTML();
			}
			
			engine.open(form.getForms().Core.PrintReportByIMSId, new Object[] {EAS_SUMMARY_SEED, form.getLocalContext().getpatientEAS().getID_ElectronicActionSheet()});
		}
	}

	protected void onBtnAuthoriseClick() throws PresentationLogicException
	{
		if (form.lyrEAS().tabSummary().isVisible())
		{
			//WDEV-17536
			if (form.lyrEAS().tabSummary().ccSummary().authorise() || (EASStatus.AUTHORISED.equals(form.lyrEAS().tabSummary().ccSummary().getValue().getEasStatus().getStatus())))
			{
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabSummary().ccSummary().getValue());
				form.setMode(FormMode.VIEW);
				setComponentsInViewMode();
				setComponentValues(form.getLocalContext().getpatientEAS());
			}
			else
				form.getLocalContext().setpatientEAS(form.lyrEAS().tabSummary().ccSummary().getValue());
		}
		
		updateControlsState();
	}

	private void clearAndDefaultWithMostRecentlyEAS() 
	{
		form.getLocalContext().setEasAction(EasAction.NEW);
		
		ElectronicActionSheetVo newEAS = createNewEAS();
		form.getGlobalContext().EAS.setElectronicActionSheet(newEAS);
		form.getLocalContext().setpatientEAS(newEAS);
		
		form.lyrEAS().tabOverview().ccOverview().setValue(newEAS);
		form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().setValue(null);
		form.lyrEAS().tabImageTransfer().ccImageTransfer().setValue(null);
		form.lyrEAS().tabPlanningOptions().ccPlanOpts().setValue(null);
		form.lyrEAS().tabMiscellaneous().ccMiscellaneous().setValue(null);
		form.lyrEAS().tabSummary().ccSummary().setValue(null);
	}

	private ElectronicActionSheetVo createNewEAS() 
	{
		if(form.getLocalContext().getpatientEAS() == null)
			return null;
		
		ElectronicActionSheetVo mostRecently = form.getLocalContext().getpatientEAS();//domain.getMostRecentlyRecordedEAS(form.getLocalContext().getpatientEAS().getPatient());
		
		form.getLocalContext().setMostRecentlyEAS(mostRecently);
		
		ElectronicActionSheetVo newEAS = new ElectronicActionSheetVo();	
		
		RecordingUserInformationVo voRecUser = new RecordingUserInformationVo();
		voRecUser.setRecordingUser((MemberOfStaffShortVo)domain.getMosUser());
		voRecUser.setRecordingDateTime(new DateTime());
		newEAS.setRecordingInfo(voRecUser);
		
		EASStatusRecordVo voStatus = new EASStatusRecordVo();
		voStatus.setStatus(EASStatus.DRAFT);							
		voStatus.setRecordingMos((MemberOfStaffShortVo)domain.getMosUser());
		voStatus.setRecordingDateTime(new DateTime());
		
		newEAS.setEasStatus(voStatus);
		
		EASStatusRecordVoCollection vocoll = new EASStatusRecordVoCollection();
		vocoll.add(voStatus);
		newEAS.setStatusHistory(vocoll);
		
		newEAS.setResponsibleHcp(mostRecently.getResponsibleHcp());
		newEAS.setSeenBy(mostRecently.getSeenBy());
		newEAS.setDateSeen(mostRecently.getDateSeen());
		newEAS.setDateDecisionToTreat(mostRecently.getDateDecisionToTreat());
		newEAS.setSeenAt(mostRecently.getSeenAt());
		newEAS.setIntent(mostRecently.getIntent());
		newEAS.setPriority(mostRecently.getPriority());
		newEAS.setDelayed(mostRecently.getDelayed());		
		newEAS.setDelayedReason(mostRecently.getDelayedReason());
		newEAS.setReadyToTreatDate(mostRecently.getReadyToTreatDate());
		newEAS.setDelayedComment(mostRecently.getDelayedComment());
		
		if(form.getGlobalContext().EAS.getAdditionalActionSheet() != null)
		{
			if(Boolean.TRUE.equals(form.getGlobalContext().EAS.getAdditionalActionSheet().getMultipleSites()))
			{
				newEAS.setPrimaryTumour(mostRecently.getPrimaryTumour());
			}
		}
		
		return newEAS;
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(form.getForms().EAS.AdditionalActionSheets.equals(formName))
		{
			if(DialogResult.YES.equals(result))
			{
				clearAndDefaultWithMostRecentlyEAS();
				
				form.setMode(FormMode.EDIT);
				form.lyrEAS().showtabOverview();
				form.getLocalContext().setCurrentTab(Tab.OVERVIEW);
				form.getLocalContext().setPreviousTab(Tab.OVERVIEW);
			}
			else
			{
				form.setMode(FormMode.VIEW);
				setComponentsInViewMode();
				setComponentValues(form.getLocalContext().getpatientEAS());
			}
		}
		
		if(form.getForms().Assessment.DynamicAssessmentsDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			form.getLocalContext().getpatientEAS().setGraphicAssessment(form.getGlobalContext().EAS.getEasPatientAssessment());
			
			//save the EAS record after an assessment has been recorded
			form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().setValue(form.getLocalContext().getpatientEAS());
			form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().save();
			
			form.getLocalContext().setpatientEAS(form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().getValue());
		}
		
		if(form.lyrEAS().tabSummary().isVisible())
		{
			form.lyrEAS().tabSummary().ccSummary().showHTML();
		}
		
		updateControlsState();
	}

	@Override
	protected void onCcTreatmentOptionsValueChanged() throws PresentationLogicException
	{
		if (! form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().wasImageTransferModified()) //WDEV-17568
			return;
		
		if (Boolean.FALSE.equals(form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().getRequestImageTransfer()))
		{
			if (form.getLocalContext().getpatientEAS() == null || form.getLocalContext().getpatientEAS().getID_ElectronicActionSheet() == null)
			{
				form.lyrEAS().tabImageTransfer().setHeaderVisible(Boolean.FALSE);
			}
			else
			{
				form.lyrEAS().tabImageTransfer().ccImageTransfer().setValue(form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().getValue());
				form.lyrEAS().tabImageTransfer().ccImageTransfer().setValue(null);
				form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().setValue(form.lyrEAS().tabImageTransfer().ccImageTransfer().getValue());
				form.lyrEAS().tabImageTransfer().setHeaderVisible(Boolean.FALSE);
			}
		}
		else
		{
			if (form.getLocalContext().getpatientEAS() == null || form.getLocalContext().getpatientEAS().getID_ElectronicActionSheet() == null)
			{
				form.lyrEAS().tabImageTransfer().setHeaderVisible(Boolean.TRUE);
			}
			else
			{
				form.lyrEAS().tabImageTransfer().setHeaderVisible(Boolean.TRUE);
				form.lyrEAS().tabImageTransfer().ccImageTransfer().setValue(form.lyrEAS().tabTreatmentOptions().ccTreatmentOptions().getValue());
			}
		}
	}
}
