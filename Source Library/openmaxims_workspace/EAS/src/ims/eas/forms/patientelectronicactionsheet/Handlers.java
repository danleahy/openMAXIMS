//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.eas.forms.patientelectronicactionsheet;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAuthoriseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCompleteClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnExitClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnBackClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNextClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnDrawClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnViewCccResultsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrEASTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onCcTreatmentOptionsValueChanged() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnAuthorise().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAuthoriseClick();
			}
		});
		this.form.btnPrint().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPrintClick();
			}
		});
		this.form.btnComplete().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCompleteClick();
			}
		});
		this.form.btnExit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnExitClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.btnBack().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnBackClick();
			}
		});
		this.form.btnNext().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNextClick();
			}
		});
		this.form.btnDraw().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnDrawClick();
			}
		});
		this.form.btnViewCccResults().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnViewCccResultsClick();
			}
		});
		this.form.lyrEAS().tabOverview().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrEAStabOverviewActivated();
			}
		});
		this.form.lyrEAS().tabTreatmentOptions().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrEAStabTreatmentOptionsActivated();
			}
		});
		this.form.lyrEAS().tabImageTransfer().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrEAStabImageTransferActivated();
			}
		});
		this.form.lyrEAS().tabPlanningOptions().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrEAStabPlanningOptionsActivated();
			}
		});
		this.form.lyrEAS().tabMiscellaneous().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrEAStabMiscellaneousActivated();
			}
		});
		this.form.lyrEAS().tabSummary().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrEAStabSummaryActivated();
			}
		});
		this.form.lyrEAS().tabTreatmentOptions().setccTreatmentOptionsValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCcTreatmentOptionsValueChanged();
			}
		});
	}
	private void onlyrEAStabOverviewActivated()
	{
		this.form.lyrEAS().showtabOverview();
		onlyrEASTabChanged(this.form.lyrEAS().tabOverview());
	}
	private void onlyrEAStabTreatmentOptionsActivated()
	{
		this.form.lyrEAS().showtabTreatmentOptions();
		onlyrEASTabChanged(this.form.lyrEAS().tabTreatmentOptions());
	}
	private void onlyrEAStabImageTransferActivated()
	{
		this.form.lyrEAS().showtabImageTransfer();
		onlyrEASTabChanged(this.form.lyrEAS().tabImageTransfer());
	}
	private void onlyrEAStabPlanningOptionsActivated()
	{
		this.form.lyrEAS().showtabPlanningOptions();
		onlyrEASTabChanged(this.form.lyrEAS().tabPlanningOptions());
	}
	private void onlyrEAStabMiscellaneousActivated()
	{
		this.form.lyrEAS().showtabMiscellaneous();
		onlyrEASTabChanged(this.form.lyrEAS().tabMiscellaneous());
	}
	private void onlyrEAStabSummaryActivated()
	{
		this.form.lyrEAS().showtabSummary();
		onlyrEASTabChanged(this.form.lyrEAS().tabSummary());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
