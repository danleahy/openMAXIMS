//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.eas.forms.patientelectronicactionsheet;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrEASLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabOverviewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 528, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccOverviewForm = loader.loadComponent(145106, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccOverviewControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(8), new Integer(808), new Integer(528), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccOverviewForm, instance1 } );
				ims.framework.Control m_ccOverviewControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccOverviewForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccOverviewControl);
				Menu[] menus1 = m_ccOverviewForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.eas.forms.easoverviewcomponent.IComponent ccOverview()
			{
				return (ims.eas.forms.easoverviewcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccOverviewValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccOverviewVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccOverviewVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccOverviewEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccOverviewEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabTreatmentOptionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 528, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccTreatmentOptionsForm = loader.loadComponent(145107, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccTreatmentOptionsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(8), new Integer(8), new Integer(808), new Integer(528), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccTreatmentOptionsForm, instance1 } );
				ims.framework.Control m_ccTreatmentOptionsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccTreatmentOptionsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccTreatmentOptionsControl);
				Menu[] menus1 = m_ccTreatmentOptionsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.eas.forms.eastreatmentoptionscomponent.IComponent ccTreatmentOptions()
			{
				return (ims.eas.forms.eastreatmentoptionscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccTreatmentOptionsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccTreatmentOptionsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccTreatmentOptionsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccTreatmentOptionsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccTreatmentOptionsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabImageTransferContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 528, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccImageTransferForm = loader.loadComponent(145109, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccImageTransferControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(8), new Integer(8), new Integer(808), new Integer(528), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccImageTransferForm, instance1 } );
				ims.framework.Control m_ccImageTransferControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccImageTransferForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccImageTransferControl);
				Menu[] menus1 = m_ccImageTransferForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.eas.forms.easrequestimagetransfer.IComponent ccImageTransfer()
			{
				return (ims.eas.forms.easrequestimagetransfer.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccImageTransferValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccImageTransferVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccImageTransferVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccImageTransferEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccImageTransferEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPlanningOptionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 536, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccPlanOptsForm = loader.loadComponent(145112, appForm, startControlID * 10 + 4000, anchoringHelper4.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccPlanOptsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(0), new Integer(0), new Integer(824), new Integer(536), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccPlanOptsForm, instance1 } );
				ims.framework.Control m_ccPlanOptsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccPlanOptsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPlanOptsControl);
				Menu[] menus1 = m_ccPlanOptsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.eas.forms.easplanningoptionscomponent.IComponent ccPlanOpts()
			{
				return (ims.eas.forms.easplanningoptionscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPlanOptsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPlanOptsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPlanOptsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPlanOptsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPlanOptsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabMiscellaneousContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 528, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccMiscellaneousForm = loader.loadComponent(145119, appForm, startControlID * 10 + 5000, anchoringHelper5.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccMiscellaneousControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(8), new Integer(8), new Integer(808), new Integer(528), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccMiscellaneousForm, instance1 } );
				ims.framework.Control m_ccMiscellaneousControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccMiscellaneousForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccMiscellaneousControl);
				Menu[] menus1 = m_ccMiscellaneousForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.eas.forms.easmiscellaneous.IComponent ccMiscellaneous()
			{
				return (ims.eas.forms.easmiscellaneous.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccMiscellaneousValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccMiscellaneousVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccMiscellaneousVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccMiscellaneousEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccMiscellaneousEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabSummaryContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 544, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSummaryForm = loader.loadComponent(145113, appForm, startControlID * 10 + 6000, anchoringHelper6.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccSummaryControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(0), new Integer(0), new Integer(824), new Integer(544), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccSummaryForm, instance1 } );
				ims.framework.Control m_ccSummaryControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccSummaryForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccSummaryControl);
				Menu[] menus1 = m_ccSummaryForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.eas.forms.eassummary.IComponent ccSummary()
			{
				return (ims.eas.forms.eassummary.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSummaryValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSummaryVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSummaryVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSummaryEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSummaryEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 568, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOverview = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Overview", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOverviewContainer m_tabOverviewContainer = (tabOverviewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOverviewContainer.class, m_tabOverview, factory);
			super.addContainer(m_tabOverview, m_tabOverviewContainer);
			ims.framework.utils.SizeInfo m_tabOverviewDesignSize = new ims.framework.utils.SizeInfo(832, 568);
			ims.framework.utils.SizeInfo m_tabOverviewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper7.getWidth(), anchoringHelper7.getHeight());
			m_tabOverviewContainer.setContext(form, appForm, m_tabOverview, loader, startControlID, m_tabOverviewDesignSize, m_tabOverviewRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 568, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTreatmentOptions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Treatment Options", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTreatmentOptionsContainer m_tabTreatmentOptionsContainer = (tabTreatmentOptionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTreatmentOptionsContainer.class, m_tabTreatmentOptions, factory);
			super.addContainer(m_tabTreatmentOptions, m_tabTreatmentOptionsContainer);
			ims.framework.utils.SizeInfo m_tabTreatmentOptionsDesignSize = new ims.framework.utils.SizeInfo(832, 568);
			ims.framework.utils.SizeInfo m_tabTreatmentOptionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper8.getWidth(), anchoringHelper8.getHeight());
			m_tabTreatmentOptionsContainer.setContext(form, appForm, m_tabTreatmentOptions, loader, startControlID, m_tabTreatmentOptionsDesignSize, m_tabTreatmentOptionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 568, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabImageTransfer = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Request Image Transfer", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabImageTransferContainer m_tabImageTransferContainer = (tabImageTransferContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabImageTransferContainer.class, m_tabImageTransfer, factory);
			super.addContainer(m_tabImageTransfer, m_tabImageTransferContainer);
			ims.framework.utils.SizeInfo m_tabImageTransferDesignSize = new ims.framework.utils.SizeInfo(832, 568);
			ims.framework.utils.SizeInfo m_tabImageTransferRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper9.getWidth(), anchoringHelper9.getHeight());
			m_tabImageTransferContainer.setContext(form, appForm, m_tabImageTransfer, loader, startControlID, m_tabImageTransferDesignSize, m_tabImageTransferRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 568, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPlanningOptions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Planning Options", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPlanningOptionsContainer m_tabPlanningOptionsContainer = (tabPlanningOptionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPlanningOptionsContainer.class, m_tabPlanningOptions, factory);
			super.addContainer(m_tabPlanningOptions, m_tabPlanningOptionsContainer);
			ims.framework.utils.SizeInfo m_tabPlanningOptionsDesignSize = new ims.framework.utils.SizeInfo(832, 568);
			ims.framework.utils.SizeInfo m_tabPlanningOptionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper10.getWidth(), anchoringHelper10.getHeight());
			m_tabPlanningOptionsContainer.setContext(form, appForm, m_tabPlanningOptions, loader, startControlID, m_tabPlanningOptionsDesignSize, m_tabPlanningOptionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 568, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabMiscellaneous = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Miscellaneous", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabMiscellaneousContainer m_tabMiscellaneousContainer = (tabMiscellaneousContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMiscellaneousContainer.class, m_tabMiscellaneous, factory);
			super.addContainer(m_tabMiscellaneous, m_tabMiscellaneousContainer);
			ims.framework.utils.SizeInfo m_tabMiscellaneousDesignSize = new ims.framework.utils.SizeInfo(832, 568);
			ims.framework.utils.SizeInfo m_tabMiscellaneousRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper11.getWidth(), anchoringHelper11.getHeight());
			m_tabMiscellaneousContainer.setContext(form, appForm, m_tabMiscellaneous, loader, startControlID, m_tabMiscellaneousDesignSize, m_tabMiscellaneousRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 568, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSummary = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Summary", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSummaryContainer m_tabSummaryContainer = (tabSummaryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSummaryContainer.class, m_tabSummary, factory);
			super.addContainer(m_tabSummary, m_tabSummaryContainer);
			ims.framework.utils.SizeInfo m_tabSummaryDesignSize = new ims.framework.utils.SizeInfo(832, 568);
			ims.framework.utils.SizeInfo m_tabSummaryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
			m_tabSummaryContainer.setContext(form, appForm, m_tabSummary, loader, startControlID, m_tabSummaryDesignSize, m_tabSummaryRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabOverview().setVisible(false);
			tabTreatmentOptions().setVisible(false);
			tabImageTransfer().setVisible(false);
			tabPlanningOptions().setVisible(false);
			tabMiscellaneous().setVisible(false);
			tabSummary().setVisible(false);
		}
		public void settabOverviewEnabled(boolean value)
		{
			tabOverview().setEnabled(value);
		}
		public void settabTreatmentOptionsEnabled(boolean value)
		{
			tabTreatmentOptions().setEnabled(value);
		}
		public void settabImageTransferEnabled(boolean value)
		{
			tabImageTransfer().setEnabled(value);
		}
		public void settabPlanningOptionsEnabled(boolean value)
		{
			tabPlanningOptions().setEnabled(value);
		}
		public void settabMiscellaneousEnabled(boolean value)
		{
			tabMiscellaneous().setEnabled(value);
		}
		public void settabSummaryEnabled(boolean value)
		{
			tabSummary().setEnabled(value);
		}
		public void showtabOverview()
		{
			tabTreatmentOptions().setVisible(false);
			tabImageTransfer().setVisible(false);
			tabPlanningOptions().setVisible(false);
			tabMiscellaneous().setVisible(false);
			tabSummary().setVisible(false);
			tabOverview().setVisible(true);
		}
		public void showtabTreatmentOptions()
		{
			tabOverview().setVisible(false);
			tabImageTransfer().setVisible(false);
			tabPlanningOptions().setVisible(false);
			tabMiscellaneous().setVisible(false);
			tabSummary().setVisible(false);
			tabTreatmentOptions().setVisible(true);
		}
		public void showtabImageTransfer()
		{
			tabOverview().setVisible(false);
			tabTreatmentOptions().setVisible(false);
			tabPlanningOptions().setVisible(false);
			tabMiscellaneous().setVisible(false);
			tabSummary().setVisible(false);
			tabImageTransfer().setVisible(true);
		}
		public void showtabPlanningOptions()
		{
			tabOverview().setVisible(false);
			tabTreatmentOptions().setVisible(false);
			tabImageTransfer().setVisible(false);
			tabMiscellaneous().setVisible(false);
			tabSummary().setVisible(false);
			tabPlanningOptions().setVisible(true);
		}
		public void showtabMiscellaneous()
		{
			tabOverview().setVisible(false);
			tabTreatmentOptions().setVisible(false);
			tabImageTransfer().setVisible(false);
			tabPlanningOptions().setVisible(false);
			tabSummary().setVisible(false);
			tabMiscellaneous().setVisible(true);
		}
		public void showtabSummary()
		{
			tabOverview().setVisible(false);
			tabTreatmentOptions().setVisible(false);
			tabImageTransfer().setVisible(false);
			tabPlanningOptions().setVisible(false);
			tabMiscellaneous().setVisible(false);
			tabSummary().setVisible(true);
		}

		public tabOverviewContainer tabOverview()
		{
			return (tabOverviewContainer)super.layers.get(0);
		}
		public tabTreatmentOptionsContainer tabTreatmentOptions()
		{
			return (tabTreatmentOptionsContainer)super.layers.get(1);
		}
		public tabImageTransferContainer tabImageTransfer()
		{
			return (tabImageTransferContainer)super.layers.get(2);
		}
		public tabPlanningOptionsContainer tabPlanningOptions()
		{
			return (tabPlanningOptionsContainer)super.layers.get(3);
		}
		public tabMiscellaneousContainer tabMiscellaneous()
		{
			return (tabMiscellaneousContainer)super.layers.get(4);
		}
		public tabSummaryContainer tabSummary()
		{
			return (tabSummaryContainer)super.layers.get(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrEASLayer m_lyrEASLayer = (lyrEASLayer)LayerFlyweightFactory.getInstance().createLayer(lyrEASLayer.class, this, factory);
		super.addLayer(m_lyrEASLayer);
		m_lyrEASLayer.setContext(form, appForm, control, loader, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 344, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authorise", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 424, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Print", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 344, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Complete", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 764, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Exit", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 675, 592, 85, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Save & Exit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 504, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Back", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 584, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Next", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 264, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Draw", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 120, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View CCC Results", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public lyrEASLayer lyrEAS()
	{
		return (lyrEASLayer)super.getLayer(0);
	}
	public Button btnAuthorise()
	{
		return (Button)super.getControl(6);
	}
	public Button btnPrint()
	{
		return (Button)super.getControl(7);
	}
	public Button btnComplete()
	{
		return (Button)super.getControl(8);
	}
	public Button btnExit()
	{
		return (Button)super.getControl(9);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(10);
	}
	public Button btnBack()
	{
		return (Button)super.getControl(11);
	}
	public Button btnNext()
	{
		return (Button)super.getControl(12);
	}
	public Button btnDraw()
	{
		return (Button)super.getControl(13);
	}
	public Button btnViewCccResults()
	{
		return (Button)super.getControl(14);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
			Core = new CoreForms();
			EAS = new EASForms();
			Assessment = new AssessmentForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				PatientResultsAndOrders = new LocalFormName(116183);
			}
			public final FormName PatientResultsAndOrders;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				PrintReportByIMSId = new LocalFormName(102403);
			}
			public final FormName PrintReportByIMSId;
		}
		public final class EASForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EASForms()
			{
				AdditionalActionSheets = new LocalFormName(145118);
				PatientElectronicActionSheet = new LocalFormName(145108);
			}
			public final FormName AdditionalActionSheets;
			public final FormName PatientElectronicActionSheet;
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				DynamicAssessmentsDialog = new LocalFormName(127116);
			}
			public final FormName DynamicAssessmentsDialog;
		}

		public OCRRForms OCRR;
		public CoreForms Core;
		public EASForms EAS;
		public AssessmentForms Assessment;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_EasAction = new ims.framework.ContextVariable("EasAction", prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__EasAction_" + componentIdentifier + "");
			cxl_patientEAS = new ims.framework.ContextVariable("patientEAS", prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier + "");
			cxl_PreviousTab = new ims.framework.ContextVariable("PreviousTab", prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__PreviousTab_" + componentIdentifier + "");
			cxl_CurrentTab = new ims.framework.ContextVariable("CurrentTab", prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__CurrentTab_" + componentIdentifier + "");
			cxl_MostRecentlyEAS = new ims.framework.ContextVariable("MostRecentlyEAS", prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier + "");
			cxl_WasTransportQuestionsAndPatientStatusAllreadySaved = new ims.framework.ContextVariable("WasTransportQuestionsAndPatientStatusAllreadySaved", prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__WasTransportQuestionsAndPatientStatusAllreadySaved_" + componentIdentifier + "");
		}
		
		public boolean getEasActionIsNotNull()
		{
			return !cxl_EasAction.getValueIsNull(context);
		}
		public ims.eas.vo.enums.EasAction getEasAction()
		{
			return (ims.eas.vo.enums.EasAction)cxl_EasAction.getValue(context);
		}
		public void setEasAction(ims.eas.vo.enums.EasAction value)
		{
			cxl_EasAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EasAction = null;
		public boolean getpatientEASIsNotNull()
		{
			return !cxl_patientEAS.getValueIsNull(context);
		}
		public ims.eas.vo.ElectronicActionSheetVo getpatientEAS()
		{
			return (ims.eas.vo.ElectronicActionSheetVo)cxl_patientEAS.getValue(context);
		}
		public void setpatientEAS(ims.eas.vo.ElectronicActionSheetVo value)
		{
			cxl_patientEAS.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_patientEAS = null;
		public boolean getPreviousTabIsNotNull()
		{
			return !cxl_PreviousTab.getValueIsNull(context);
		}
		public Object getPreviousTab()
		{
			return cxl_PreviousTab.getValue(context);
		}
		public void setPreviousTab(Object value)
		{
			cxl_PreviousTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousTab = null;
		public boolean getCurrentTabIsNotNull()
		{
			return !cxl_CurrentTab.getValueIsNull(context);
		}
		public Object getCurrentTab()
		{
			return cxl_CurrentTab.getValue(context);
		}
		public void setCurrentTab(Object value)
		{
			cxl_CurrentTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentTab = null;
		public boolean getMostRecentlyEASIsNotNull()
		{
			return !cxl_MostRecentlyEAS.getValueIsNull(context);
		}
		public ims.eas.vo.ElectronicActionSheetVo getMostRecentlyEAS()
		{
			return (ims.eas.vo.ElectronicActionSheetVo)cxl_MostRecentlyEAS.getValue(context);
		}
		public void setMostRecentlyEAS(ims.eas.vo.ElectronicActionSheetVo value)
		{
			cxl_MostRecentlyEAS.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MostRecentlyEAS = null;
		public boolean getWasTransportQuestionsAndPatientStatusAllreadySavedIsNotNull()
		{
			return !cxl_WasTransportQuestionsAndPatientStatusAllreadySaved.getValueIsNull(context);
		}
		public Boolean getWasTransportQuestionsAndPatientStatusAllreadySaved()
		{
			return (Boolean)cxl_WasTransportQuestionsAndPatientStatusAllreadySaved.getValue(context);
		}
		public void setWasTransportQuestionsAndPatientStatusAllreadySaved(Boolean value)
		{
			cxl_WasTransportQuestionsAndPatientStatusAllreadySaved.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WasTransportQuestionsAndPatientStatusAllreadySaved = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[304];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-ID", "ID_ElectronicActionSheet");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PATIENT", "Patient");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-AUTHORISEDDATETIME", "AuthorisedDateTime");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-TPCREATED", "TPCreated");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-ACTIONREQUIRED", "ActionRequired");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-REMOVEDSTAT", "RemovedStat");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-REMOVALREASON", "RemovalReason");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-DATESEEN", "DateSeen");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-DATEDECISIONTOTREAT", "DateDecisionToTreat");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-FIRSTTHERAPEUTICINTERVENTION", "FirstTherapeuticIntervention");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-CLINICALTRIALPATIENT", "ClinicalTrialPatient");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PROTOCOLUSED", "ProtocolUsed");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PATIENTCONSENT", "PatientConsent");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PLANCONSSESSION", "PlanConsSession");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-APPROPCCCL", "AppropCCCL");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-IMAGETRANSFER", "ImageTransfer");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-CONCURRENTSYSTEMICTREATMENT", "ConcurrentSystemicTreatment");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-SEENAT", "SeenAt");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-INTENT", "Intent");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PRIORITY", "Priority");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-DELAYED", "Delayed");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-DELAYEDCOMMENT", "DelayedComment");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-READYTOTREATDATE", "ReadyToTreatDate");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-DELAYEDREASON", "DelayedReason");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-TREATSITELATERALITY", "TreatSiteLaterality");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-ANATOMICALSITE", "AnatomicalSite");
			fields[170] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-CLINICALTRIAL", "ClinicalTrial");
			fields[171] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-OFFPROTOCOLREASON", "OffProtocolReason");
			fields[172] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-EASCOMMENT", "EasComment");
			fields[173] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PLANNINGCT", "PlanningCT");
			fields[174] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PLANNINGCTTEXT", "PlanningCTText");
			fields[175] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-MRIFORCOREG", "MRIforCoReg");
			fields[176] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-DENTISTREQUIRED", "DentistRequired");
			fields[177] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PEGREQUIRED", "PegRequired");
			fields[178] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-SIMULATIONREQUIRED", "SimulationRequired");
			fields[179] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-IVCONTRAST", "IVContrast");
			fields[180] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-INVESTIGATIONDATE", "InvestigationDate");
			fields[181] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-CREATININELEVEL", "CreatinineLevel");
			fields[182] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-GATINGOPTIONS", "GatingOptions");
			fields[183] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-IMRT", "IMRT");
			fields[184] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PETCT", "PetCT");
			fields[185] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-IMMOBTYPE", "ImmobType");
			fields[186] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-MOULDROOMACTIVITY", "MouldRoomActivity");
			fields[187] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-AGENT", "Agent");
			fields[188] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PLANNINGAPPTDATE", "PlanningApptDate");
			fields[189] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PLANNINGTRANSPORT", "PlanningTransport");
			fields[190] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-TREATMENTTRANSPORT", "TreatmentTransport");
			fields[191] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-IP_OP_PLANNING", "IP_OP_Planning");
			fields[192] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-IP_OP_TREATMENT", "IP_OP_Treatment");
			fields[193] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PATIENTSTATUS", "PatientStatus");
			fields[194] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-GRAPHICASSESSMENT", "GraphicAssessment");
			fields[195] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-RECENTCREATININE", "RecentCreatinine");
			fields[196] = new ims.framework.ReportField(this.context, "_cv_EAS.ElectronicActionSheet", "BO-1113100000-PLANNINGCTREQUIRED", "PlanningCTRequired");
			fields[197] = new ims.framework.ReportField(this.context, "_cv_EAS.EasPatientAssessment", "BO-1003100048-ID", "ID_PatientAssessment");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-ID", "ID_ElectronicActionSheet");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PATIENT", "Patient");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-AUTHORISEDDATETIME", "AuthorisedDateTime");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-TPCREATED", "TPCreated");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-ACTIONREQUIRED", "ActionRequired");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-REMOVEDSTAT", "RemovedStat");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-REMOVALREASON", "RemovalReason");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-DATESEEN", "DateSeen");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-DATEDECISIONTOTREAT", "DateDecisionToTreat");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-FIRSTTHERAPEUTICINTERVENTION", "FirstTherapeuticIntervention");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-CLINICALTRIALPATIENT", "ClinicalTrialPatient");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PROTOCOLUSED", "ProtocolUsed");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PATIENTCONSENT", "PatientConsent");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PLANCONSSESSION", "PlanConsSession");
			fields[212] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-APPROPCCCL", "AppropCCCL");
			fields[213] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-IMAGETRANSFER", "ImageTransfer");
			fields[214] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-CONCURRENTSYSTEMICTREATMENT", "ConcurrentSystemicTreatment");
			fields[215] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-SEENAT", "SeenAt");
			fields[216] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-INTENT", "Intent");
			fields[217] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PRIORITY", "Priority");
			fields[218] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-DELAYED", "Delayed");
			fields[219] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-DELAYEDCOMMENT", "DelayedComment");
			fields[220] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-READYTOTREATDATE", "ReadyToTreatDate");
			fields[221] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-DELAYEDREASON", "DelayedReason");
			fields[222] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-TREATSITELATERALITY", "TreatSiteLaterality");
			fields[223] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-ANATOMICALSITE", "AnatomicalSite");
			fields[224] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-CLINICALTRIAL", "ClinicalTrial");
			fields[225] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-OFFPROTOCOLREASON", "OffProtocolReason");
			fields[226] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-EASCOMMENT", "EasComment");
			fields[227] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PLANNINGCT", "PlanningCT");
			fields[228] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PLANNINGCTTEXT", "PlanningCTText");
			fields[229] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-MRIFORCOREG", "MRIforCoReg");
			fields[230] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-DENTISTREQUIRED", "DentistRequired");
			fields[231] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PEGREQUIRED", "PegRequired");
			fields[232] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-SIMULATIONREQUIRED", "SimulationRequired");
			fields[233] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-IVCONTRAST", "IVContrast");
			fields[234] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-INVESTIGATIONDATE", "InvestigationDate");
			fields[235] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-CREATININELEVEL", "CreatinineLevel");
			fields[236] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-GATINGOPTIONS", "GatingOptions");
			fields[237] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-IMRT", "IMRT");
			fields[238] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PETCT", "PetCT");
			fields[239] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-IMMOBTYPE", "ImmobType");
			fields[240] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-MOULDROOMACTIVITY", "MouldRoomActivity");
			fields[241] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-AGENT", "Agent");
			fields[242] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PLANNINGAPPTDATE", "PlanningApptDate");
			fields[243] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PLANNINGTRANSPORT", "PlanningTransport");
			fields[244] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-TREATMENTTRANSPORT", "TreatmentTransport");
			fields[245] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-IP_OP_PLANNING", "IP_OP_Planning");
			fields[246] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-IP_OP_TREATMENT", "IP_OP_Treatment");
			fields[247] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PATIENTSTATUS", "PatientStatus");
			fields[248] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-GRAPHICASSESSMENT", "GraphicAssessment");
			fields[249] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-RECENTCREATININE", "RecentCreatinine");
			fields[250] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__patientEAS_" + componentIdentifier, "BO-1113100000-PLANNINGCTREQUIRED", "PlanningCTRequired");
			fields[251] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-ID", "ID_ElectronicActionSheet");
			fields[252] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PATIENT", "Patient");
			fields[253] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-AUTHORISEDDATETIME", "AuthorisedDateTime");
			fields[254] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-TPCREATED", "TPCreated");
			fields[255] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-ACTIONREQUIRED", "ActionRequired");
			fields[256] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-REMOVEDSTAT", "RemovedStat");
			fields[257] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-REMOVALREASON", "RemovalReason");
			fields[258] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-DATESEEN", "DateSeen");
			fields[259] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-DATEDECISIONTOTREAT", "DateDecisionToTreat");
			fields[260] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-FIRSTTHERAPEUTICINTERVENTION", "FirstTherapeuticIntervention");
			fields[261] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-CLINICALTRIALPATIENT", "ClinicalTrialPatient");
			fields[262] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PROTOCOLUSED", "ProtocolUsed");
			fields[263] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PATIENTCONSENT", "PatientConsent");
			fields[264] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PLANCONSSESSION", "PlanConsSession");
			fields[265] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-APPROPCCCL", "AppropCCCL");
			fields[266] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-IMAGETRANSFER", "ImageTransfer");
			fields[267] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-CONCURRENTSYSTEMICTREATMENT", "ConcurrentSystemicTreatment");
			fields[268] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-SEENAT", "SeenAt");
			fields[269] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-INTENT", "Intent");
			fields[270] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PRIORITY", "Priority");
			fields[271] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-DELAYED", "Delayed");
			fields[272] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-DELAYEDCOMMENT", "DelayedComment");
			fields[273] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-READYTOTREATDATE", "ReadyToTreatDate");
			fields[274] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-DELAYEDREASON", "DelayedReason");
			fields[275] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-TREATSITELATERALITY", "TreatSiteLaterality");
			fields[276] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-ANATOMICALSITE", "AnatomicalSite");
			fields[277] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-CLINICALTRIAL", "ClinicalTrial");
			fields[278] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-OFFPROTOCOLREASON", "OffProtocolReason");
			fields[279] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-EASCOMMENT", "EasComment");
			fields[280] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PLANNINGCT", "PlanningCT");
			fields[281] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PLANNINGCTTEXT", "PlanningCTText");
			fields[282] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-MRIFORCOREG", "MRIforCoReg");
			fields[283] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-DENTISTREQUIRED", "DentistRequired");
			fields[284] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PEGREQUIRED", "PegRequired");
			fields[285] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-SIMULATIONREQUIRED", "SimulationRequired");
			fields[286] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-IVCONTRAST", "IVContrast");
			fields[287] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-INVESTIGATIONDATE", "InvestigationDate");
			fields[288] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-CREATININELEVEL", "CreatinineLevel");
			fields[289] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-GATINGOPTIONS", "GatingOptions");
			fields[290] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-IMRT", "IMRT");
			fields[291] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PETCT", "PetCT");
			fields[292] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-IMMOBTYPE", "ImmobType");
			fields[293] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-MOULDROOMACTIVITY", "MouldRoomActivity");
			fields[294] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-AGENT", "Agent");
			fields[295] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PLANNINGAPPTDATE", "PlanningApptDate");
			fields[296] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PLANNINGTRANSPORT", "PlanningTransport");
			fields[297] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-TREATMENTTRANSPORT", "TreatmentTransport");
			fields[298] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-IP_OP_PLANNING", "IP_OP_Planning");
			fields[299] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-IP_OP_TREATMENT", "IP_OP_Treatment");
			fields[300] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PATIENTSTATUS", "PatientStatus");
			fields[301] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-GRAPHICASSESSMENT", "GraphicAssessment");
			fields[302] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-RECENTCREATININE", "RecentCreatinine");
			fields[303] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.PatientElectronicActionSheet.__internal_x_context__MostRecentlyEAS_" + componentIdentifier, "BO-1113100000-PLANNINGCTREQUIRED", "PlanningCTRequired");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
