//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.forms.protocolconfiguration;


import ims.configuration.gen.ConfigFlag;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.TaxonomyType;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.eas.forms.protocolconfiguration.GenForm.lyrProtocolLayer.tabConfigContainer.GroupYesNoEnumeration;
import ims.eas.forms.protocolconfiguration.GenForm.lyrProtocolLayer.tabConfigContainer.ctnContainer.grdGatingOptionsRow;
import ims.eas.forms.protocolconfiguration.GenForm.lyrProtocolLayer.tabConfigContainer.ctnContainer.grdIMRTRow;
import ims.eas.forms.protocolconfiguration.GenForm.lyrProtocolLayer.tabConfigContainer.ctnContainer.grdIVContrastRow;
import ims.eas.forms.protocolconfiguration.GenForm.lyrProtocolLayer.tabConfigContainer.ctnContainer.grdImmobTypeRow;
import ims.eas.forms.protocolconfiguration.GenForm.lyrProtocolLayer.tabConfigContainer.ctnContainer.grdMouldRoomRow;
import ims.eas.forms.protocolconfiguration.GenForm.lyrProtocolLayer.tabConfigContainer.ctnContainer.grdOralContrastRow;
import ims.eas.forms.protocolconfiguration.GenForm.lyrProtocolLayer.tabPhaseContainer.grdPhasesRow;
import ims.eas.forms.protocolconfiguration.GenForm.lyrProtocolLayer.tabSearchContainer.grdProtocolsRow;
import ims.eas.vo.PrimaryTumourNameVo;
import ims.eas.vo.PrimaryTumourNameVoCollection;
import ims.eas.vo.ProtocolListVo;
import ims.eas.vo.ProtocolListVoCollection;
import ims.eas.vo.ProtocolPhaseVo;
import ims.eas.vo.ProtocolPhaseVoCollection;
import ims.eas.vo.ProtocolVo;
import ims.eas.vo.TreatmentSiteNameVo;
import ims.eas.vo.TreatmentSiteNameVoCollection;
import ims.eas.vo.lookups.GatingOptions;
import ims.eas.vo.lookups.GatingOptionsCollection;
import ims.eas.vo.lookups.IMRT;
import ims.eas.vo.lookups.IMRTCollection;
import ims.eas.vo.lookups.IVContrast;
import ims.eas.vo.lookups.IVContrastCollection;
import ims.eas.vo.lookups.ImmobilisationType;
import ims.eas.vo.lookups.ImmobilisationTypeCollection;
import ims.eas.vo.lookups.LookupHelper;
import ims.eas.vo.lookups.MouldRoomActivity;
import ims.eas.vo.lookups.MouldRoomActivityCollection;
import ims.eas.vo.lookups.OptionsRequired;
import ims.eas.vo.lookups.OralContrast;
import ims.eas.vo.lookups.OralContrastCollection;
import ims.eas.vo.lookups.ProtocolActions;
import ims.framework.LayerBridge;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;
import ims.vo.LookupMappingVo;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		form.lyrProtocol().tabSearch().cmbStatus().setValue(PreActiveActiveInactiveStatus.ACTIVE);

	}
	
	private void open()
	{
		initialize();
		clear(true);
		
		populateLabelsForProtocolActions();
		
		form.setMode(FormMode.VIEW);
	}
	

	protected void onlyrProtocolTabChanged(LayerBridge tab)   
	{
		if (tab.equals(form.lyrProtocol().tabPhase())) 
			form.btnPhases().setText("Config");
		else if (tab.equals(form.lyrProtocol().tabConfig()))
			form.btnPhases().setText("Phases");
		else if (tab.equals(form.lyrProtocol().tabSearch()))
		{
			clearConfigTab();
			clearPhaseTab();
			form.lyrProtocol().tabConfig().setHeaderEnabled(false);
			form.lyrProtocol().tabPhase().setHeaderEnabled(false);
			setMenuOptions();
		}
	}

	private void initialize() 
	{
		// Initialise the form by loading the configured primary tumour and treatment site records
		listPrimaryTumours();
		
		TreatmentSiteNameVoCollection treatmentSites = domain.listConfiguredTreatmentSites();
		if (treatmentSites != null)
		{
			form.getLocalContext().setTreatmentSiteConfigs(treatmentSites);
			for (int i=0; i<treatmentSites.size(); i++)
			{
				form.lyrProtocol().tabSearch().cmbTreatmentSite().newRow(treatmentSites.get(i), treatmentSites.get(i).getTreatmentSite().getText());
			}
		}
		
		
		// Need to populate the lookup instance subselect grids
		IVContrastCollection ivContrastColl = LookupHelper.getIVContrast(domain.getLookupService());
		form.lyrProtocol().tabConfig().ctn().grdIVContrast().getRows().clear();
		if (ivContrastColl != null && ivContrastColl.size() > 0)
		{
			for (int i=0; i<ivContrastColl.size(); i++)
			{
				LookupInstVo iv = (LookupInstVo) ivContrastColl.getIndex(i);
				grdIVContrastRow row = form.lyrProtocol().tabConfig().ctn().grdIVContrast().getRows().newRow();
				row.setcolName(iv.getText());
				row.setTooltip(iv.getText());
				row.setValue((IVContrast) iv);
			}
		}
		
		OralContrastCollection oralContrastColl = LookupHelper.getOralContrast(domain.getLookupService());
		form.lyrProtocol().tabConfig().ctn().grdOralContrast().getRows().clear();
		if (oralContrastColl != null && oralContrastColl.size() > 0)
		{
			for (int i=0; i<oralContrastColl.size(); i++)
			{
				OralContrast oral = (OralContrast) oralContrastColl.getIndex(i);
				grdOralContrastRow row = form.lyrProtocol().tabConfig().ctn().grdOralContrast().getRows().newRow();
				row.setcolName(oral.getText());
				row.setTooltip(oral.getText());
				row.setValue(oral);
			}
		}

		GatingOptionsCollection gatingColl = LookupHelper.getGatingOptions(domain.getLookupService());
		form.lyrProtocol().tabConfig().ctn().grdGatingOptions().getRows().clear();
		if (gatingColl != null && gatingColl.size() > 0)
		{
			for (int i=0; i<gatingColl.size(); i++)
			{
				GatingOptions gopt = (GatingOptions) gatingColl.getIndex(i);
				grdGatingOptionsRow row = form.lyrProtocol().tabConfig().ctn().grdGatingOptions().getRows().newRow();
				row.setcolName(gopt.getText());
				row.setTooltip(gopt.getText());
				row.setValue(gopt);
			}
		}
		
		IMRTCollection IMRTColl = LookupHelper.getIMRT(domain.getLookupService());
		form.lyrProtocol().tabConfig().ctn().grdIMRT().getRows().clear();
		if (IMRTColl != null && IMRTColl.size() > 0)
		{
			for (int i=0; i<IMRTColl.size(); i++)
			{
				LookupInstVo imrt = IMRTColl.getIndex(i);
				grdIMRTRow row = form.lyrProtocol().tabConfig().ctn().grdIMRT().getRows().newRow();
				row.setcolName(imrt.getText());
				row.setTooltip(imrt.getText());
				row.setValue((IMRT) imrt);
			}
		}
		
		ImmobilisationTypeCollection ImmobColl = LookupHelper.getImmobilisationType(domain.getLookupService());
		form.lyrProtocol().tabConfig().ctn().grdImmobType().getRows().clear();
		if (ImmobColl != null && ImmobColl.size() > 0)
		{
			for (int i=0; i<ImmobColl.size(); i++)
			{
				ImmobilisationType immob = (ImmobilisationType) ImmobColl.getIndex(i);
				grdImmobTypeRow row = form.lyrProtocol().tabConfig().ctn().grdImmobType().getRows().newRow();
				row.setcolName(immob.getText());
				row.setTooltip(immob.getText());
				row.setValue(immob);
			}
		}
		
		MouldRoomActivityCollection mouldColl = LookupHelper.getMouldRoomActivity(domain.getLookupService());
		form.lyrProtocol().tabConfig().ctn().grdMouldRoom().getRows().clear();
		if (mouldColl != null && mouldColl.size() > 0)
		{
			for (int i=0; i<mouldColl.size(); i++)
			{
				MouldRoomActivity mra = (MouldRoomActivity) mouldColl.getIndex(i);
				grdMouldRoomRow row = form.lyrProtocol().tabConfig().ctn().grdMouldRoom().getRows().newRow();
				row.setcolName(mra.getText());
				row.setTooltip(mra.getText());
				row.setValue(mra);
			}
		}
		
	
	}

	//WDEV-16996
	private void listPrimaryTumours()
	{
		form.lyrProtocol().tabSearch().cmbPrimaryTumour().clear();
		form.lyrProtocol().tabConfig().cmbPrimTumour().clear();
		
		PrimaryTumourNameVoCollection primaryTumours = domain.listConfiguredPrimaryTumours();
		
		if (primaryTumours != null)
		{
			form.getLocalContext().setPrimaryTumourConfigs(primaryTumours);
			for (int i=0; i<primaryTumours.size(); i++)
			{
				form.lyrProtocol().tabSearch().cmbPrimaryTumour().newRow(primaryTumours.get(i), primaryTumours.get(i).getPrimaryTumour().getText());
				form.lyrProtocol().tabConfig().cmbPrimTumour().newRow(primaryTumours.get(i), primaryTumours.get(i).getPrimaryTumour().getText());
			}
		}
	}
	
	
	private void clearSearchTab(boolean gridOnly)
	{
		if (!gridOnly)
		{
			form.lyrProtocol().tabSearch().cmbPrimaryTumour().setValue(null);
			form.lyrProtocol().tabSearch().cmbStatus().setValue(null);
			form.lyrProtocol().tabSearch().cmbTreatmentSite().setValue(null);
			form.lyrProtocol().tabSearch().txtProtocolName().setValue(null);
		}
		
		form.lyrProtocol().tabSearch().grdProtocols().getRows().clear();
	}
	
	private void clear(boolean gridOnly)
	{
		form.getLocalContext().setProtocol(null);
		clearSearchTab(gridOnly);
		clearConfigTab();
		clearPhaseTab();
		
	}

	private void clearPhaseTab() 
	{
		form.lyrProtocol().tabPhase().grdPhases().getRows().clear();
	}

	private void clearConfigTab()
	{
		form.lyrProtocol().tabConfig().ccRecording().setValue(null);
		form.lyrProtocol().tabConfig().cmbPrimTumour().setValue(null);
		form.lyrProtocol().tabConfig().cmbTreatSite().setValue(null);
		form.lyrProtocol().tabConfig().txtProtName().setValue(null);
		form.lyrProtocol().tabConfig().dtimRecording().setValue(new DateTime());
		form.lyrProtocol().tabConfig().GroupYesNo().setValue(null);
		form.lyrProtocol().tabConfig().cmbClinicalTrial().setValue(null);
		
		form.lyrProtocol().tabConfig().ctn().cmbSessDefault().setValue(null);
		form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().setValue(null);
		
		form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().setValue(null);
		form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().setValue(null);
		
		form.lyrProtocol().tabConfig().ctn().cmbMRIReq().setValue(null);
		form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().setValue(null);
		
		form.lyrProtocol().tabConfig().ctn().cmbDentistReq().setValue(null);
		form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().setValue(null);
		
		form.lyrProtocol().tabConfig().ctn().cmbPegReq().setValue(null);
		form.lyrProtocol().tabConfig().ctn().cmbPegDefault().setValue(null);
		
		form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().setValue(null);
		form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().setValue(null);
		
		form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().setValue(null);
		form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().setValue(null);
		
		form.lyrProtocol().tabConfig().ctn().cmbCCCL().setValue(null);
		
		form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().setValue(null);
		clearIVContrastGrid();
		
		form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().setValue(null);
		clearOralContrastGrid();
		
		
		form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().setValue(null);
		clearGatingOptionsGrid();
		
		form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().setValue(null);
		clearIMRTGrid();
		
		form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().setValue(null);
		clearImmobTypeGrid();
		
		form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().setValue(null);
		clearMouldRoomGrid();
		
	}

	private void clearMouldRoomGrid() {
		if (form.lyrProtocol().tabConfig().ctn().grdMouldRoom().getRows() != null)
		{
			int i=0;
			while (i < form.lyrProtocol().tabConfig().ctn().grdMouldRoom().getRows().size())
			{
				grdMouldRoomRow row = form.lyrProtocol().tabConfig().ctn().grdMouldRoom().getRows().get(i);
				row.setcolDefault(false);
				row.setcolSelect(false);
				i++;
			}
		}
	}

	private void clearImmobTypeGrid() {
		if (form.lyrProtocol().tabConfig().ctn().grdImmobType().getRows() != null)
		{
			int i=0;
			while (i < form.lyrProtocol().tabConfig().ctn().grdImmobType().getRows().size())
			{
				grdImmobTypeRow row = form.lyrProtocol().tabConfig().ctn().grdImmobType().getRows().get(i);
				row.setcolDefault(false);
				row.setcolSelect(false);
				i++;
			}
		}
	}

	private void clearIMRTGrid() {
		if (form.lyrProtocol().tabConfig().ctn().grdIMRT().getRows() != null)
		{
			int i=0;
			while (i < form.lyrProtocol().tabConfig().ctn().grdIMRT().getRows().size())
			{
				grdIMRTRow row = form.lyrProtocol().tabConfig().ctn().grdIMRT().getRows().get(i);
				row.setcolDefault(false);
				row.setcolSelect(false);
				i++;
			}
		}
	}

	private void clearGatingOptionsGrid() {
		if (form.lyrProtocol().tabConfig().ctn().grdGatingOptions().getRows() != null)
		{
			int i=0;
			while (i < form.lyrProtocol().tabConfig().ctn().grdGatingOptions().getRows().size())
			{
				grdGatingOptionsRow row = form.lyrProtocol().tabConfig().ctn().grdGatingOptions().getRows().get(i);
				row.setcolDefault(false);
				row.setcolSelect(false);
				i++;
			}
		}
	}

	private void clearOralContrastGrid() {
		if (form.lyrProtocol().tabConfig().ctn().grdOralContrast().getRows() != null)
		{
			int i=0;
			while (i < form.lyrProtocol().tabConfig().ctn().grdOralContrast().getRows().size())
			{
				grdOralContrastRow row = form.lyrProtocol().tabConfig().ctn().grdOralContrast().getRows().get(i);
				row.setcolDefault(false);
				row.setcolSelect(false);
				i++;
			}
		}
	}

	private void clearIVContrastGrid() {
		if (form.lyrProtocol().tabConfig().ctn().grdIVContrast().getRows() != null)
		{
			int i=0;
			while (i < form.lyrProtocol().tabConfig().ctn().grdIVContrast().getRows().size())
			{
				grdIVContrastRow row = form.lyrProtocol().tabConfig().ctn().grdIVContrast().getRows().get(i);
				row.setcolDefault(false);
				row.setcolSelect(false);
				i++;
			}
		}
	}


	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ProtocolListVo currentVo =form.lyrProtocol().tabSearch().grdProtocols().getValue(); 

		if (currentVo == null)
		{
			engine.showMessage("Please select a record to update");
			return;
		}
		 
		ProtocolVo protocol = domain.getProtocol(form.lyrProtocol().tabSearch().grdProtocols().getValue());
		listPrimaryTumours();//WDEV-16996
		populateConfigTab(protocol);
		populatePhaseTab(protocol.getPhases());
		form.getLocalContext().setProtocol(protocol);
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnViewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.lyrProtocol().tabSearch().grdProtocols().getValue() == null)
		{
			engine.showMessage("Please select a record to view");
			return;
		}
		
		ProtocolVo protocol = domain.getProtocol(form.lyrProtocol().tabSearch().grdProtocols().getValue());
		populateConfigTab(protocol);
		populatePhaseTab(protocol.getPhases());
		form.getLocalContext().setProtocol(protocol);
		form.lyrProtocol().tabConfig().setHeaderEnabled(true);
		form.lyrProtocol().tabPhase().setHeaderEnabled(true);
		form.lyrProtocol().showtabConfig();
		form.setMode(FormMode.VIEW);

	}

	private void populatePhaseTab(ProtocolPhaseVoCollection phases) 
	{
		if (phases == null || phases.size() == 0)
			return;
		
		form.lyrProtocol().tabPhase().grdPhases().getRows().clear();
		for (int i=0; i<phases.size(); i++)
		{
			ProtocolPhaseVo phase = phases.get(i);
			grdPhasesRow row = form.lyrProtocol().tabPhase().grdPhases().getRows().newRow();
			row.setValue(phase);
			row.setcolActive(phase.getActive());
			row.setcolDays(phase.getDays());
			row.setcolDose(phase.getDose());
			row.setcolEnergy(phase.getEnergy());
			row.setcolFractions(phase.getFractions());
			row.setcolModality(phase.getModality());
			row.setcolPhaseName(phase.getPhaseName());
			row.setcolPreferred(phase.getPreferred());
			row.setcolUnit(phase.getUnits());
		}
		
	}

	private void populateConfigTab(ProtocolVo protocol) throws PresentationLogicException
	{
		if (!form.lyrProtocol().tabConfig().cmbPrimTumour().getValues().contains(protocol.getPrimaryTumour()))
			form.lyrProtocol().tabConfig().cmbPrimTumour().newRow(protocol.getPrimaryTumour(), protocol.getPrimaryTumour().getPrimaryTumour().getText());

		form.lyrProtocol().tabConfig().cmbPrimTumour().setValue(protocol.getPrimaryTumour());
		
		listTreatmentSites();//WDEV-17068
		
		if (!form.lyrProtocol().tabConfig().cmbTreatSite().getValues().contains(protocol.getTreatmentSite()))
			form.lyrProtocol().tabConfig().cmbTreatSite().newRow(protocol.getTreatmentSite(), protocol.getTreatmentSite().getTreatmentSite().getText());
		form.lyrProtocol().tabConfig().cmbTreatSite().setValue(protocol.getTreatmentSite());
		
		if (protocol.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
		{
			form.lyrProtocol().tabConfig().cmbStat().removeRow(PreActiveActiveInactiveStatus.PREACTIVE);
		}
		
		Boolean preactiveStatus = protocol.getStatus().equals(PreActiveActiveInactiveStatus.PREACTIVE);
		
		form.lyrProtocol().tabConfig().cmbTreatSite().setEnabled(preactiveStatus);
		form.lyrProtocol().tabConfig().cmbPrimTumour().setEnabled(preactiveStatus);

		
		form.lyrProtocol().tabConfig().txtProtName().setValue(protocol.getProtocolName());
		form.lyrProtocol().tabConfig().cmbStat().setValue(protocol.getStatus());
		
		form.lyrProtocol().tabConfig().ccRecording().setValue(protocol.getRecordingMOS());
		form.lyrProtocol().tabConfig().dtimRecording().setValue(protocol.getRecordingDateTime());
		
		if (protocol.getClinTrialProtocolIsNotNull() && protocol.getClinTrialProtocol())
		{
			form.lyrProtocol().tabConfig().GroupYesNo().setValue(GroupYesNoEnumeration.rdoYes);
			form.lyrProtocol().tabConfig().cmbClinicalTrial().setValue(protocol.getClinicalTrial());
			form.lyrProtocol().tabConfig().cmbClinicalTrial().setEnabled(preactiveStatus);
		}
		else
		{
			form.lyrProtocol().tabConfig().GroupYesNo().setValue(GroupYesNoEnumeration.rdoNo);
			form.lyrProtocol().tabConfig().cmbClinicalTrial().setEnabled(false);
		}
		
		form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().setValue(protocol.getConsSessRequired());
		form.lyrProtocol().tabConfig().ctn().cmbSessDefault().setValue(protocol.getConsSessDefault());

		form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().setValue(protocol.getPlanCTRequired());
		form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().setValue(protocol.getPlanCTDefault());
		
		form.lyrProtocol().tabConfig().ctn().cmbMRIReq().setValue(protocol.getMRICoRegRequired());
		form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().setValue(protocol.getMRIDefault());
		
		form.lyrProtocol().tabConfig().ctn().cmbDentistReq().setValue(protocol.getDentistRequired());
		form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().setValue(protocol.getDentistDefault());

		form.lyrProtocol().tabConfig().ctn().cmbPegReq().setValue(protocol.getPegRequired());
		form.lyrProtocol().tabConfig().ctn().cmbPegDefault().setValue(protocol.getPEGDefault());
		
		form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().setValue(protocol.getSimlRequired());
		form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().setValue(protocol.getSimulationDefault());
		
		form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().setValue(protocol.getPetCTRequired());
		form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().setValue(protocol.getPetCTDefault());
		
		form.lyrProtocol().tabConfig().ctn().cmbCCCL().setValue(protocol.getAppropCCCL());
		
		form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().setValue(protocol.getIVContrastRequired());
		form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().setValue(protocol.getOralContrastRequired());
		form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().setValue(protocol.getGatingOptsRequired());
		form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().setValue(protocol.getIMRTRequired());
		form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().setValue(protocol.getImmobTypeRequired());
		form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().setValue(protocol.getMouldRoomRequired());
		
		if (protocol.getIVContrastListIsNotNull())
		{
			for (int i=0; i<protocol.getIVContrastList().size(); i++)
			{
				IVContrast vo = protocol.getIVContrastList().get(i);
				grdIVContrastRow row = form.lyrProtocol().tabConfig().ctn().grdIVContrast().getRowByValue(vo);
				row.setcolSelect(true);
			}
		}
		if (protocol.getIVContrastDefaultIsNotNull())
		{
			grdIVContrastRow row = form.lyrProtocol().tabConfig().ctn().grdIVContrast().getRowByValue(protocol.getIVContrastDefault());
			row.setcolDefault(true);
		}
	
		if (protocol.getOralContrastListIsNotNull())
		{
			for (int i=0; i<protocol.getOralContrastList().size(); i++)
			{
				OralContrast vo = protocol.getOralContrastList().get(i);
				grdOralContrastRow row = form.lyrProtocol().tabConfig().ctn().grdOralContrast().getRowByValue(vo);
				row.setcolSelect(true);
			}
		}
		if (protocol.getOralContrastDefaultIsNotNull())
		{
			grdOralContrastRow row = form.lyrProtocol().tabConfig().ctn().grdOralContrast().getRowByValue(protocol.getOralContrastDefault());
			row.setcolDefault(true);
		}
		
		if (protocol.getGatingOptsListIsNotNull())
		{
			for (int i=0; i<protocol.getGatingOptsList().size(); i++)
			{
				GatingOptions vo = protocol.getGatingOptsList().get(i);
				grdGatingOptionsRow row = form.lyrProtocol().tabConfig().ctn().grdGatingOptions().getRowByValue(vo);
				row.setcolSelect(true);
			}
		}
		if (protocol.getGatingOptsDefaultIsNotNull())
		{
			grdGatingOptionsRow row = form.lyrProtocol().tabConfig().ctn().grdGatingOptions().getRowByValue(protocol.getGatingOptsDefault());
			row.setcolDefault(true);
		}
		
		
		if (protocol.getIMRTListIsNotNull())
		{
			for (int i=0; i<protocol.getIMRTList().size(); i++)
			{
				IMRT vo = protocol.getIMRTList().get(i);
				grdIMRTRow row = form.lyrProtocol().tabConfig().ctn().grdIMRT().getRowByValue(vo);
				row.setcolSelect(true);
			}
		}
		if (protocol.getIMRTDefaultIsNotNull())
		{
			grdIMRTRow row = form.lyrProtocol().tabConfig().ctn().grdIMRT().getRowByValue(protocol.getIMRTDefault());
			row.setcolDefault(true);
		}
		
		if (protocol.getImmobTypeListIsNotNull())
		{
			for (int i=0; i<protocol.getImmobTypeList().size(); i++)
			{
				ImmobilisationType vo = protocol.getImmobTypeList().get(i);
				grdImmobTypeRow row = form.lyrProtocol().tabConfig().ctn().grdImmobType().getRowByValue(vo);
				row.setcolSelect(true);
			}
		}
		if (protocol.getImmobTypeDefaultIsNotNull())
		{
			grdImmobTypeRow row = form.lyrProtocol().tabConfig().ctn().grdImmobType().getRowByValue(protocol.getImmobTypeDefault());
			row.setcolDefault(true);
		}
		
		if (protocol.getMouldRoomListIsNotNull())
		{
			for (int i=0; i<protocol.getMouldRoomList().size(); i++)
			{
				MouldRoomActivity vo = protocol.getMouldRoomList().get(i);
				grdMouldRoomRow row = form.lyrProtocol().tabConfig().ctn().grdMouldRoom().getRowByValue(vo);
				row.setcolSelect(true);
			}
		}
		if (protocol.getMouldRoomDefaultIsNotNull())
		{
			grdMouldRoomRow row = form.lyrProtocol().tabConfig().ctn().grdMouldRoom().getRowByValue(protocol.getMouldRoomDefault());
			row.setcolDefault(true);
		}
		
		updateControlState();
	}

	private ProtocolVo populateDataFromScreen()
	{
		ProtocolVo vo = form.getLocalContext().getProtocol();
		if (vo == null)
			vo = new ProtocolVo();
		
		//WDEV-17068
		PrimaryTumourNameVo primaryTumour = form.lyrProtocol().tabConfig().cmbPrimTumour().getValue();
		TreatmentSiteNameVo treatmentSite = form.lyrProtocol().tabConfig().cmbTreatSite().getValue();
		
		if (primaryTumour != null && form.lyrProtocol().tabConfig().cmbPrimTumour().isEnabled() && domain.isInactivePrimaryTumour(primaryTumour))
		{
			engine.showMessage("Associated Primary Tumour: " +primaryTumour.getPrimaryTumour().getText() + " is inactive.\nThis Protocol cannot be saved until an active Primary Tumour is selected.");
			return null;
		}
		
		if (treatmentSite != null && form.lyrProtocol().tabConfig().cmbTreatSite().isEnabled() && domain.isInactiveTreatmentSite(treatmentSite))
		{
			engine.showMessage("Associated Treatment Site: " +treatmentSite.getTreatmentSite().getText() + " is inactive.\nThis Protocol cannot be saved until an active Treatment Site is selected.");
			return null;
		}
			
		vo.setProtocolName(form.lyrProtocol().tabConfig().txtProtName().getValue());
		vo.setStatus(form.lyrProtocol().tabConfig().cmbStat().getValue());
		vo.setPrimaryTumour(form.lyrProtocol().tabConfig().cmbPrimTumour().getValue());
		vo.setTreatmentSite(form.lyrProtocol().tabConfig().cmbTreatSite().getValue());
		vo.setRecordingMOS((MemberOfStaffLiteVo)form.lyrProtocol().tabConfig().ccRecording().getValue());
		vo.setRecordingDateTime(form.lyrProtocol().tabConfig().dtimRecording().getValue());
		
		if (form.lyrProtocol().tabConfig().GroupYesNo().getValue().equals(GroupYesNoEnumeration.rdoYes))
			vo.setClinTrialProtocol(true);
		else
			vo.setClinTrialProtocol(false);
		vo.setClinicalTrial(form.lyrProtocol().tabConfig().cmbClinicalTrial().getValue());
		if (vo.getClinTrialProtocol() && !vo.getClinicalTrialIsNotNull())
		{
			engine.showMessage("A Clinical trial must be selected as this Protocol is marked as a Clinical Trial Protocol");
			return null;
		}
			
		
		
		vo.setConsSessRequired(form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().getValue());
		vo.setConsSessDefault(form.lyrProtocol().tabConfig().ctn().cmbSessDefault().getValue());
		
		vo.setPlanCTRequired(form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().getValue());
		vo.setPlanCTDefault(form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().getValue());
		
		vo.setAppropCCCL(form.lyrProtocol().tabConfig().ctn().cmbCCCL().getValue());
		
		vo.setMRICoRegRequired(form.lyrProtocol().tabConfig().ctn().cmbMRIReq().getValue());
		vo.setMRIDefault(form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().getValue());
		
		vo.setDentistRequired(form.lyrProtocol().tabConfig().ctn().cmbDentistReq().getValue());
		vo.setDentistDefault(form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().getValue());
		
		vo.setPegRequired(form.lyrProtocol().tabConfig().ctn().cmbPegReq().getValue());
		vo.setPEGDefault(form.lyrProtocol().tabConfig().ctn().cmbPegDefault().getValue());
		
		vo.setSimlRequired(form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().getValue());
		vo.setSimulationDefault(form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().getValue());
		
		vo.setPetCTRequired(form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().getValue());
		vo.setPetCTDefault(form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().getValue());
		
		vo.setIVContrastRequired(form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().getValue());
		vo.setIVContrastList(new IVContrastCollection());
		int defaultCount=0;
		int selectCount=0;
		
		//WDEV-17491
		vo.setIVContrastDefault(null);
		//WDEV-17491
		
		for (int i=0; i<form.lyrProtocol().tabConfig().ctn().grdIVContrast().getRows().size(); i++)
		{
			grdIVContrastRow row = form.lyrProtocol().tabConfig().ctn().grdIVContrast().getRows().get(i);
			if (row.getcolDefault())
			{
				defaultCount++;
				vo.setIVContrastDefault(row.getValue());
			}
			if (row.getcolSelect())
			{
				vo.getIVContrastList().add(row.getValue());
				selectCount++;
			}
		}
		if (defaultCount > 1)
		{
			engine.showMessage("More than one IV Contrast is marked as default, please rectify data!");
			return null;
		}
		if (selectCount == 0 && vo.getIVContrastRequiredIsNotNull() && (vo.getIVContrastRequired().equals(OptionsRequired.MANDATORY) || vo.getIVContrastRequired().equals(OptionsRequired.OPTIONAL)))
		{
			engine.showMessage("Please select at least one item for IV Contrast");
			return null;
		}
		
		vo.setOralContrastRequired(form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().getValue());
		vo.setOralContrastList(new OralContrastCollection());
		defaultCount=0;
		selectCount=0;
		//WDEV-17491
		vo.setOralContrastDefault(null);
		//WDEV-17491

		for (int i=0; i<form.lyrProtocol().tabConfig().ctn().grdOralContrast().getRows().size(); i++)
		{
			grdOralContrastRow row = form.lyrProtocol().tabConfig().ctn().grdOralContrast().getRows().get(i);
			if (row.getcolDefault())
			{
				defaultCount++;
				vo.setOralContrastDefault(row.getValue());
			}
			if (row.getcolSelect())
			{
				vo.getOralContrastList().add(row.getValue());
				selectCount++;
			}
		}
		if (defaultCount > 1)
		{
			engine.showMessage("More than one Oral Contrast is marked as default, please rectify data!");
			return null;
		}
		if (selectCount == 0 && vo.getOralContrastRequiredIsNotNull() && (vo.getOralContrastRequired().equals(OptionsRequired.MANDATORY) || vo.getOralContrastRequired().equals(OptionsRequired.OPTIONAL)))
		{
			engine.showMessage("Please select at least one item for Oral Contrast");
			return null;
		}

		
		vo.setGatingOptsRequired((form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().getValue()));
		vo.setGatingOptsList(new GatingOptionsCollection());
		defaultCount=0;
		selectCount=0;
		//WDEV-17491
		vo.setGatingOptsDefault(null);
		//WDEV-17491		
		for (int i=0; i<form.lyrProtocol().tabConfig().ctn().grdGatingOptions().getRows().size(); i++)
		{
			grdGatingOptionsRow row = form.lyrProtocol().tabConfig().ctn().grdGatingOptions().getRows().get(i);
			if (row.getcolDefault())
			{
				defaultCount++;
				vo.setGatingOptsDefault(row.getValue());
			}
			if (row.getcolSelect())
			{
				vo.getGatingOptsList().add(row.getValue());
				selectCount++;
			}
		}
		if (defaultCount > 1)
		{
			engine.showMessage("More than one Gating Option is marked as default, please rectify data!");
			return null;
		}
		if (selectCount == 0 && vo.getGatingOptsRequiredIsNotNull() && (vo.getGatingOptsRequired().equals(OptionsRequired.MANDATORY) || vo.getGatingOptsRequired().equals(OptionsRequired.OPTIONAL)))
		{
			engine.showMessage("Please select at least one item for Gating Options");
			return null;
		}
		
		
		vo.setIMRTRequired((form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().getValue()));
		vo.setIMRTList(new IMRTCollection());
		defaultCount=0;
		selectCount=0;
		//WDEV-17491
		vo.setIMRTDefault(null);
		//WDEV-17491				
		for (int i=0; i<form.lyrProtocol().tabConfig().ctn().grdIMRT().getRows().size(); i++)
		{
			grdIMRTRow row = form.lyrProtocol().tabConfig().ctn().grdIMRT().getRows().get(i);
			if (row.getcolDefault())
			{
				defaultCount++;
				vo.setIMRTDefault(row.getValue());
			}
			if (row.getcolSelect())
			{
				vo.getIMRTList().add(row.getValue());
				selectCount++;
			}
		}
		if (defaultCount > 1)
		{
			engine.showMessage("More than one IMRT is marked as default, please rectify data!");
			return null;
		}
		if (selectCount == 0 && vo.getIMRTRequiredIsNotNull() && (vo.getIMRTRequired().equals(OptionsRequired.MANDATORY) || vo.getIMRTRequired().equals(OptionsRequired.OPTIONAL)))
		{
			engine.showMessage("Please select at least one item for IMRT");
			return null;
		}
		
		vo.setImmobTypeRequired((form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().getValue()));
		vo.setImmobTypeList(new ImmobilisationTypeCollection());
		defaultCount=0;
		selectCount=0;
		//WDEV-17491
		vo.setImmobTypeDefault(null);
		//WDEV-17491						
		for (int i=0; i<form.lyrProtocol().tabConfig().ctn().grdImmobType().getRows().size(); i++)
		{
			grdImmobTypeRow row = form.lyrProtocol().tabConfig().ctn().grdImmobType().getRows().get(i);
			if (row.getcolDefault())
			{
				defaultCount++;
				vo.setImmobTypeDefault(row.getValue());
			}
			if (row.getcolSelect())
			{
				vo.getImmobTypeList().add(row.getValue());
				selectCount++;
			}
		}
		if (defaultCount > 1)
		{
			engine.showMessage("More than one Immobilisation Type is marked as default, please rectify data!");
			return null;
		}
		if (selectCount == 0 && vo.getImmobTypeRequiredIsNotNull() && (vo.getImmobTypeRequired().equals(OptionsRequired.MANDATORY) || vo.getImmobTypeRequired().equals(OptionsRequired.OPTIONAL)))
		{
			engine.showMessage("Please select at least one item for Immobilisation Type");
			return null;
		}
		
		
		vo.setMouldRoomRequired(form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().getValue());
		vo.setMouldRoomList(new MouldRoomActivityCollection());
		defaultCount=0;
		selectCount=0;
		//WDEV-17491
		vo.setMouldRoomDefault(null);
		//WDEV-17491								
		for (int i=0; i<form.lyrProtocol().tabConfig().ctn().grdMouldRoom().getRows().size(); i++)
		{
			grdMouldRoomRow row = form.lyrProtocol().tabConfig().ctn().grdMouldRoom().getRows().get(i);
			if (row.getcolDefault())
			{
				defaultCount++;
				vo.setMouldRoomDefault(row.getValue());
			}
			if (row.getcolSelect())
			{
				vo.getMouldRoomList().add(row.getValue());
				selectCount++;
			}
		}
		if (defaultCount > 1)
		{
			engine.showMessage("More than one Mould Room Activity is marked as default, please rectify data!");
			return null;
		}
		if (selectCount == 0 && vo.getMouldRoomRequiredIsNotNull() && (vo.getMouldRoomRequired().equals(OptionsRequired.MANDATORY) || vo.getMouldRoomRequired().equals(OptionsRequired.OPTIONAL)))
		{
			engine.showMessage("Please select at least one item for Mould Room Activity");
			return null;
		}
		
		// Populate the Phase Data
		ProtocolPhaseVoCollection phaseVoColl = new ProtocolPhaseVoCollection();
		
		ArrayList<String> preferredPhases = new ArrayList<String>();
		
		for (int i=0; i<form.lyrProtocol().tabPhase().grdPhases().getRows().size(); i++)
		{
			grdPhasesRow row = form.lyrProtocol().tabPhase().grdPhases().getRows().get(i);
			ProtocolPhaseVo phase = row.getValue();
			if (phase == null)
				phase = new ProtocolPhaseVo();
			
			phase.setPhaseName(row.getcolPhaseName());
			phase.setActive(row.getcolActive());
			phase.setDays(row.getcolDays());
			phase.setDose(row.getcolDose());
			phase.setEnergy(row.getcolEnergy());
			phase.setFractions(row.getcolFractions());
			phase.setModality(row.getcolModality());
			phase.setPreferred(row.getcolPreferred());
			phase.setUnits(row.getcolUnit());
			
			// Unit value is mandatory if Energy supplied
			if (!phase.getUnitsIsNotNull() && phase.getEnergyIsNotNull() && !(phase.getEnergy() == 0))
			{
				engine.showMessage("Phase units must be specified when energy is specified");
				return null;
			}
			
			if (!phase.getPhaseNameIsNotNull())
			{
				engine.showMessage("Please select a phase name");
				return null;
			}
			if (phase.getPreferredIsNotNull() && phase.getPreferred() == true && phase.getActiveIsNotNull() && phase.getActive() == true)
			{
				if (phase.getPhaseNameIsNotNull() && preferredPhases.contains(phase.getPhaseName().getText()))
				{
					engine.showMessage("Only one phase of each type can be marked as preferred, please rectify data for phase " + phase.getPhaseName().getText());
					return null;
				}
				if (phase.getActiveIsNotNull() && phase.getActive() == true)
					preferredPhases.add(phase.getPhaseName().getText());
			}

			phaseVoColl.add(phase);
		}
		
		vo.setPhases(phaseVoColl);
		return vo;
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setProtocol(null);
		clearConfigTab();
		clearPhaseTab();
		listPrimaryTumours();//WDEV-16996
		form.lyrProtocol().tabConfig().ctn().setEnabled(true);
		form.lyrProtocol().showtabConfig();
		form.lyrProtocol().tabConfig().ccRecording().setValue((IMos) domain.getMosUser());
		form.lyrProtocol().tabConfig().GroupYesNo().setValue(GroupYesNoEnumeration.rdoNo);
		form.lyrProtocol().tabConfig().cmbStat().setValue(PreActiveActiveInactiveStatus.PREACTIVE);
		form.lyrProtocol().tabConfig().txtProtName().setFocus();
		form.setMode(FormMode.EDIT);
	}
	
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EASNamespace.ProtocolPhaseConfigMenu.ADD:
				grdPhasesRow row =  form.lyrProtocol().tabPhase().grdPhases().getRows().newRow(true);
				row.setcolActive(true);
				form.getContextMenus().EAS.getProtocolPhaseConfigMenuREMOVEItem().setVisible(true);
				break;
			case GenForm.ContextMenus.EASNamespace.ProtocolPhaseConfigMenu.REMOVE:
				form.lyrProtocol().tabPhase().grdPhases().removeSelectedRow();
				if (form.lyrProtocol().tabPhase().grdPhases().getRows() == null || form.lyrProtocol().tabPhase().grdPhases().getRows().size() == 0 ||
						form.lyrProtocol().tabPhase().grdPhases().getSelectedRow() == null)
					form.getContextMenus().EAS.getProtocolPhaseConfigMenuREMOVEItem().setVisible(false);
				break;
			case GenForm.ContextMenus.EASNamespace.ProtocolSearchMenu.NEW:
				onBtnNewClick();
				break;
			case GenForm.ContextMenus.EASNamespace.ProtocolSearchMenu.EDIT:
				onBtnEditClick();
				break;
			case GenForm.ContextMenus.EASNamespace.ProtocolSearchMenu.VIEW:
				onBtnViewClick();
				break;
			case GenForm.ContextMenus.EASNamespace.ProtocolSearchMenu.CLONE:
				cloneRecord();
				break;
			
		}
	}
	
	private void cloneRecord() throws PresentationLogicException 
	{
		if (form.lyrProtocol().tabSearch().grdProtocols().getSelectedRow() == null)
		{
			engine.showMessage("Please select a record to clone");
			return;
		}
		
		ProtocolListVo currentVo =form.lyrProtocol().tabSearch().grdProtocols().getSelectedRow().getValue(); 
		if (currentVo == null)
		{
			engine.showMessage("Please select a record to clone");
			return;
		}
		
		ProtocolVo protocol = domain.getProtocol(currentVo);
		protocol.clearIDAndVersion();
		protocol.setStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		
		//WDEV-17828
		protocol.setRecordingMOS((MemberOfStaffLiteVo) domain.getMosUser());
		protocol.setRecordingDateTime(new DateTime());
		
		populateConfigTab(protocol);
		populatePhaseTab(protocol.getPhases());
		form.getLocalContext().setProtocol(protocol);
		form.lyrProtocol().tabConfig().txtProtName().setFocus();
		form.setMode(FormMode.EDIT); //WDEV-17889
		
	}

	protected void onBtnPhasesClick()  
	{
		if (form.lyrProtocol().tabPhase().isVisible())
		{
			form.lyrProtocol().showtabConfig();
			form.btnPhases().setText("Phases");
		}
		else
		{
			form.lyrProtocol().showtabPhase();
			form.btnPhases().setText("Config");
		}
	}

	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		form.getLocalContext().setProtocol(null);
		form.lyrProtocol().tabSearch().grdProtocols().setValue(null);  // Clear grid value so edit buttons etc.. won't appear
		clearConfigTab();
		clearPhaseTab();
		form.setMode(FormMode.VIEW);
		form.lyrProtocol().showtabSearch();
		onGrdProtocolsSelectionChanged();  // To set the buttons etc..
		onImbSearchClick();
	}

	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		ProtocolVo protocol = populateDataFromScreen();
		if (protocol == null)
			return;
		
		String[] errors = protocol.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		errors = domain.validateProtocolPhases(protocol.getPhases());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{
			//setup for auto selection of new record
			if (!protocol.getID_ProtocolIsNotNull())
			{
				form.lyrProtocol().tabSearch().txtProtocolName().setValue(protocol.getProtocolName());
				form.lyrProtocol().tabSearch().cmbStatus().setValue(protocol.getStatus());
			}
			else
				form.lyrProtocol().tabSearch().cmbStatus().setValue(protocol.getStatus());
			
			protocol = domain.saveProtocol(protocol);
			form.getLocalContext().setProtocol(protocol);
			open();
			onImbSearchClick();		
			ims.eas.vo.ProtocolListVo vo = new ProtocolListVo(protocol.getID_Protocol(),0);
			form.lyrProtocol().tabSearch().grdProtocols().setValue(vo);
			onGrdProtocolsSelectionChanged();
			
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());//WDEV-16996
			form.getLocalContext().setProtocol(null);
			open();
			onImbSearchClick();
		} catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
	}

	protected void onFormModeChanged()
	{
		updateControlState();
	}

	private void updateControlState() 
	{
		Boolean isNewOrPreactive = form.getLocalContext().getProtocol() == null || (form.getLocalContext().getProtocol() != null && PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getLocalContext().getProtocol().getStatus()));
		Boolean isActive = form.getLocalContext().getProtocol() != null && PreActiveActiveInactiveStatus.ACTIVE.equals(form.getLocalContext().getProtocol().getStatus());
		Boolean isEditMode = form.getMode().equals(FormMode.EDIT);
		
		form.lyrProtocol().tabPhase().grdPhases().setReadOnly(form.getMode().equals(FormMode.VIEW));
		form.lyrProtocol().tabPhase().grdPhases().setEnabled(form.getMode().equals(FormMode.EDIT) && (form.getLocalContext().getProtocol() == null || isNewOrPreactive));
		
		// View mode and still in search tab
		if (form.getMode().equals(FormMode.VIEW) && !form.getLocalContext().getProtocolIsNotNull())
		{
			form.lyrProtocol().tabConfig().setHeaderEnabled(false);
			form.lyrProtocol().tabPhase().setHeaderEnabled(false);
			form.lyrProtocol().tabSearch().setHeaderEnabled(true);
			form.lyrProtocol().tabSearch().setEnabled(true);
			form.lyrProtocol().tabSearch().setVisible(true);
			form.lyrProtocol().tabConfig().setEnabled(false);
			form.lyrProtocol().tabConfig().setVisible(false);
			form.lyrProtocol().tabPhase().setEnabled(false);
			form.lyrProtocol().tabPhase().setVisible(false);
			form.btnPhases().setVisible(false);
			form.btnSave().setVisible(false);
			form.btnCancel().setVisible(false);
			form.btnEdit().setVisible(false);
			form.btnView().setVisible(false);
			form.btnNew().setVisible(true);
			form.getContextMenus().EAS.getProtocolPhaseConfigMenuADDItem().setVisible(false);
			form.getContextMenus().EAS.getProtocolPhaseConfigMenuREMOVEItem().setVisible(false);
			form.getContextMenus().EAS.getProtocolSearchMenuEDITItem().setVisible(false);
			form.getContextMenus().EAS.getProtocolSearchMenuNEWItem().setVisible(true);
			form.getContextMenus().EAS.getProtocolSearchMenuVIEWItem().setVisible(false);
			form.getContextMenus().EAS.getProtocolSearchMenuCLONEItem().setVisible(false);
			
		}
		// View mode and has a protocol to view
		else if (form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getProtocolIsNotNull())
		{
			form.btnCancel().setVisible(false);
			form.btnView().setVisible(false);
			form.getContextMenus().EAS.getProtocolSearchMenuNEWItem().setVisible(false);
			form.btnEdit().setVisible(true);
			form.lyrProtocol().showtabConfig();
		}
		else
		{
			form.lyrProtocol().tabConfig().setHeaderEnabled(true);
			form.lyrProtocol().tabPhase().setHeaderEnabled(true);
			form.lyrProtocol().tabSearch().setHeaderEnabled(false);
			form.lyrProtocol().tabSearch().setEnabled(false);
			form.lyrProtocol().tabSearch().setVisible(false);
			form.lyrProtocol().tabConfig().setEnabled(true);
			form.lyrProtocol().tabConfig().setVisible(true);
			form.lyrProtocol().tabPhase().setEnabled(true);
			form.lyrProtocol().tabPhase().setVisible(true);

			form.btnCancel().setVisible(true);
			form.btnPhases().setVisible(true);
			form.btnSave().setVisible(true);
			form.btnEdit().setVisible(false);
			form.btnNew().setVisible(false);
			form.getContextMenus().EAS.getProtocolPhaseConfigMenuADDItem().setEnabled(true);
			if (form.lyrProtocol().tabPhase().grdPhases().getRows() != null && form.lyrProtocol().tabPhase().grdPhases().getSelectedRow() != null)
				form.getContextMenus().EAS.getProtocolPhaseConfigMenuREMOVEItem().setVisible(true);
			else
				form.getContextMenus().EAS.getProtocolPhaseConfigMenuREMOVEItem().setVisible(false);
			
			form.getContextMenus().EAS.getProtocolPhaseConfigMenuADDItem().setVisible(true);
			
			form.lyrProtocol().showtabConfig();
			form.btnPhases().setText("Phases");
		}
		
		//WDEV-17565
		form.lyrProtocol().tabConfig().txtProtName().setEnabled(isEditMode);
		form.lyrProtocol().tabConfig().cmbTreatSite().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().cmbPrimTumour().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().GroupYesNo().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().cmbClinicalTrial().setEnabled(isEditMode && isNewOrPreactive && GroupYesNoEnumeration.rdoYes.equals(form.lyrProtocol().tabConfig().GroupYesNo().getValue()));
		form.lyrProtocol().tabConfig().ccRecording().setEnabled(form.lyrProtocol().tabConfig().ccRecording().getValue() == null && isEditMode);
		form.lyrProtocol().tabConfig().cmbStat().setEnabled(isEditMode && (isNewOrPreactive || isActive));
		form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().cmbSessDefault().setEnabled(isEditMode && isNewOrPreactive && OptionsRequired.OPTIONAL.equals(form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().setEnabled(isEditMode && isNewOrPreactive && OptionsRequired.OPTIONAL.equals(form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().cmbMRIReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().setEnabled(isEditMode && isNewOrPreactive && OptionsRequired.OPTIONAL.equals(form.lyrProtocol().tabConfig().ctn().cmbMRIReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().cmbDentistReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().setEnabled(isEditMode && isNewOrPreactive && OptionsRequired.OPTIONAL.equals(form.lyrProtocol().tabConfig().ctn().cmbDentistReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().cmbPegReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().cmbPegDefault().setEnabled(isEditMode && isNewOrPreactive && OptionsRequired.OPTIONAL.equals(form.lyrProtocol().tabConfig().ctn().cmbPegReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().setEnabled(isEditMode && isNewOrPreactive && OptionsRequired.OPTIONAL.equals(form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().setEnabled(isEditMode && isNewOrPreactive && OptionsRequired.OPTIONAL.equals(form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().cmbCCCL().setEnabled(isEditMode && isNewOrPreactive);
		
		form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().grdIVContrast().setEnabled(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().grdIVContrast().setReadOnly(!(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().getValue())));
		
		form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().grdOralContrast().setEnabled(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().grdOralContrast().setReadOnly(!(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().getValue())));
		
		form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().grdGatingOptions().setEnabled(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().grdGatingOptions().setReadOnly(!(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().getValue())));
		
		form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().grdIMRT().setEnabled(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().grdIMRT().setReadOnly(!(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().getValue())));
		
		form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().grdImmobType().setEnabled(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().grdImmobType().setReadOnly(!(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().getValue())));
		
		form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().setEnabled(isEditMode && isNewOrPreactive);
		form.lyrProtocol().tabConfig().ctn().grdMouldRoom().setEnabled(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().getValue()));
		form.lyrProtocol().tabConfig().ctn().grdMouldRoom().setReadOnly(!(isEditMode && isNewOrPreactive && !OptionsRequired.NOT_REQUIRED.equals(form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().getValue())));
	}


	protected void onImbClearClick() throws PresentationLogicException 
	{
		clear(false);
		updateControlState();
		form.lyrProtocol().showtabSearch();
	}


	protected void onImbSearchClick() throws PresentationLogicException 
	{
		if (form.lyrProtocol().tabSearch().cmbPrimaryTumour().getValue() == null &&
			form.lyrProtocol().tabSearch().cmbTreatmentSite().getValue() == null &&
			form.lyrProtocol().tabSearch().cmbStatus().getValue() == null &&
			form.lyrProtocol().tabSearch().txtProtocolName().getValue() == null)
		{
			engine.showMessage("At least one item must be specified for search");
			return;
		}
			
		
		try 
		{
			ProtocolListVoCollection ptColl = domain.listProtocols(form.lyrProtocol().tabSearch().txtProtocolName().getValue(), form.lyrProtocol().tabSearch().cmbStatus().getValue(), form.lyrProtocol().tabSearch().cmbPrimaryTumour().getValue(), form.lyrProtocol().tabSearch().cmbTreatmentSite().getValue());
			
			form.lyrProtocol().tabSearch().grdProtocols().getRows().clear();
			form.getLocalContext().setProtocol(null);//WDEV-17889
			
			if (ptColl != null && ptColl.size() > 0)
			{
				for (int i=0; i<ptColl.size(); i++)
				{
					ProtocolListVo pt = ptColl.get(i);
					grdProtocolsRow row = form.lyrProtocol().tabSearch().grdProtocols().getRows().newRow();
					row.setValue(pt);
					row.setcolDate(pt.getRecordingDateTime().getDate());
					row.setcolPrimaryTumour(pt.getPrimaryTumour().getPrimaryTumour().getText());
					row.setcolProtocolName(pt.getProtocolName());
					row.setcolStatus(pt.getStatus().getText());
					row.setcolTreatmentSite(pt.getTreatmentSite().getTreatmentSite().getText());
					row.setcolMos(pt.getRecordingMOS().getName().toString());
					
				}
			}
			else //WDEV-16996
			{
				engine.showMessage("No results found.");
				form.getLocalContext().setProtocol(null);
				updateControlState();
			}
					
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage("At least one item must be specified for search");
			return;
		}
		
		updateControlState(); //WDEV-17889
	}
	
	private void populateLabelsForProtocolActions()
	{
		// Retrieve the Protocol Actions lookup instances
		// If any have external mapping of type 'DISPLAY_TEXT' - this is the value to be output in the label
		// for each.
//		ProtocolActionsCollection coll=
//		((ProtocolActionsCollection) domain.getLookupService().getLookupCollection(ProtocolActions.TYPE_ID, ProtocolActionsCollection.class, ProtocolActions.class, false, true));
//		
		
		LookupInstanceCollection coll = domain.getProtocolActions(); 
		if (coll != null && coll.size() > 0)
		{
			for (int i=0; i<coll.size(); i++)
			{
				LookupInstVo act = coll.getIndex(i);
				LookupMappingVo map = act.getLookupMappingForExtSystem(TaxonomyType.DISPLAY_TEXT.getText());
				if (map != null && map.getExtCode() != null)
				{
					if (act.equals(ProtocolActions.CCCL))
					{
						form.lyrProtocol().tabConfig().ctn().lblCCCLLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblCCCLLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.CONSULTATION_SESSION))
					{
						form.lyrProtocol().tabConfig().ctn().lblSessLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblSessLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.DENTIST))
					{
						form.lyrProtocol().tabConfig().ctn().lblDentistLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblDentistLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.GATING_OPTIONS))
					{
						form.lyrProtocol().tabConfig().ctn().lblGatingOptionsLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblGatingOptionsLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.IMMOBILISATION_TYPE))
					{
						form.lyrProtocol().tabConfig().ctn().lblImmobTypeLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblImmobTypeLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.IMRT))
					{
						form.lyrProtocol().tabConfig().ctn().lblIMRTLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblIMRTLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.IV_CONTRAST))
					{
						form.lyrProtocol().tabConfig().ctn().lblIVContrastLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblIVContrastLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.MOULD_ROOM_PREP))
					{
						form.lyrProtocol().tabConfig().ctn().lblMouldRoomLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblMouldRoomLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.MRI_FOR_COREG))
					{
						form.lyrProtocol().tabConfig().ctn().lblMRICoRegLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblMRICoRegLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.ORAL_CONTRAST))
					{
						form.lyrProtocol().tabConfig().ctn().lblOralContrastLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblOralContrastLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.PEG))
					{
						form.lyrProtocol().tabConfig().ctn().lblPEGLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblPEGLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.PET_CT_COREG))
					{
						form.lyrProtocol().tabConfig().ctn().lblPetCTLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblPetCTLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.PLANNING_CT))
					{
						form.lyrProtocol().tabConfig().ctn().lblPlanningCTLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblPlanningCTLabel().setTooltip(map.getExtCode());
					}
					else if (act.equals(ProtocolActions.SIMULATION))
					{
						form.lyrProtocol().tabConfig().ctn().lblSimulationLabel().setValue(map.getExtCode());
						form.lyrProtocol().tabConfig().ctn().lblSimulationLabel().setTooltip(map.getExtCode());
					}
				}
			}
		}
	}

	protected void onCmbPETCTReqValueChanged() throws PresentationLogicException 
	{
		checkPETCTRequired();
	}
	
	protected void checkPETCTRequired()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{

			if (form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().getValue().equals(OptionsRequired.MANDATORY))
			{
				form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().setValue(YesNo.YES);
				form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().setEnabled(false);
			}
			else if (form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
			{
				form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().setValue(null);
				form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().setEnabled(false);
			}
			else
				form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().setEnabled(true);
		}
	}

	protected void onCmbSimulationReqValueChanged()	throws PresentationLogicException 
	{
		checkSimulationRequired();
	}
	
	protected void checkSimulationRequired()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{

			if (form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().getValue().equals(OptionsRequired.MANDATORY))
			{
				form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().setValue(YesNo.YES);
				form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().setEnabled(false);
			}
			else if (form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
			{
				form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().setValue(null);
				form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().setEnabled(false);
			}
			else
				form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().setEnabled(true);
		}
	}

	protected void onCmbPegReqValueChanged() throws PresentationLogicException 
	{
		checkPegRequired();
	}
	
	protected void checkPegRequired()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{

			if (form.lyrProtocol().tabConfig().ctn().cmbPegReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbPegReq().getValue().equals(OptionsRequired.MANDATORY))
			{
				form.lyrProtocol().tabConfig().ctn().cmbPegDefault().setValue(YesNo.YES);
				form.lyrProtocol().tabConfig().ctn().cmbPegDefault().setEnabled(false);
			}
			else if (form.lyrProtocol().tabConfig().ctn().cmbPegReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbPegReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
			{
				form.lyrProtocol().tabConfig().ctn().cmbPegDefault().setValue(null);
				form.lyrProtocol().tabConfig().ctn().cmbPegDefault().setEnabled(false);
			}
			else
				form.lyrProtocol().tabConfig().ctn().cmbPegDefault().setEnabled(true);
		}
	}

	protected void onCmbDentistReqValueChanged() throws PresentationLogicException 
	{
		checkDentistRequired();	
	}
	
	protected void checkDentistRequired()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{

			if (form.lyrProtocol().tabConfig().ctn().cmbDentistReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbDentistReq().getValue().equals(OptionsRequired.MANDATORY))
			{
				form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().setValue(YesNo.YES);
				form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().setEnabled(false);
			}
			else if (form.lyrProtocol().tabConfig().ctn().cmbDentistReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbDentistReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
			{
				form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().setValue(null);
				form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().setEnabled(false);
			}
			else
				form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().setEnabled(true);
		}
	}

	protected void onCmbMRIReqValueChanged() throws PresentationLogicException 
	{
		checkMRIRequired();
	}
	
	protected void checkMRIRequired()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{

			if (form.lyrProtocol().tabConfig().ctn().cmbMRIReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbMRIReq().getValue().equals(OptionsRequired.MANDATORY))
			{
				form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().setValue(YesNo.YES);
				form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().setEnabled(false);
			}
			else if (form.lyrProtocol().tabConfig().ctn().cmbMRIReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbMRIReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
			{
				form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().setValue(null);
				form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().setEnabled(false);
			}
			else
				form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().setEnabled(true);
		}
		
	}

	protected void onCmbPlanningCTReqValueChanged()	throws PresentationLogicException 
	{
		checkPlanningCTRequired();
	}
	
	protected void checkPlanningCTRequired()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{

			if (form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().getValue().equals(OptionsRequired.MANDATORY))
			{
				form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().setValue(YesNo.YES);
				form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().setEnabled(false);
			}
			else if (form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
			{
				form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().setValue(null);
				form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().setEnabled(false);
			}
			else
				form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().setEnabled(true);
		}
	}

	protected void onCmbPlanSessReqValueChanged() throws PresentationLogicException 
	{
		checkPlanSessRequired();
	}
	
	protected void checkPlanSessRequired()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().getValue().equals(OptionsRequired.MANDATORY))
			{
				form.lyrProtocol().tabConfig().ctn().cmbSessDefault().setValue(YesNo.YES);
				form.lyrProtocol().tabConfig().ctn().cmbSessDefault().setEnabled(false);
			}
			else if (form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
			{
				form.lyrProtocol().tabConfig().ctn().cmbSessDefault().setValue(null);
				form.lyrProtocol().tabConfig().ctn().cmbSessDefault().setEnabled(false);
			}
			else
				form.lyrProtocol().tabConfig().ctn().cmbSessDefault().setEnabled(true);
		}
	}


	protected void onGrdImmobTypeGridCheckBoxClicked(int column, grdImmobTypeRow row, boolean isChecked) throws PresentationLogicException 
	{
		if (column == 1 && isChecked)
		{
			row.setcolSelect(Boolean.TRUE);
		}
		else if (column == 2 && (!isChecked) && Boolean.TRUE.equals(row.getcolDefault()))
		{
			row.setcolDefault(Boolean.FALSE);
		}
	}

	protected void onGrdIMRTGridCheckBoxClicked(int column, grdIMRTRow row,	boolean isChecked) throws PresentationLogicException 
	{
		if (column == 1 && isChecked)
		{
			row.setcolSelect(Boolean.TRUE);
		}
		else if (column == 2 && (!isChecked) && Boolean.TRUE.equals(row.getcolDefault()))
		{
			row.setcolDefault(Boolean.FALSE);
		}
	}

	protected void onGrdGatingOptionsGridCheckBoxClicked(int column, grdGatingOptionsRow row, boolean isChecked) throws PresentationLogicException 
	{
		if (column == 1 && isChecked)
		{
			row.setcolSelect(Boolean.TRUE);
		}
		else if (column == 2 && (!isChecked) && Boolean.TRUE.equals(row.getcolDefault()))
		{
			row.setcolDefault(Boolean.FALSE);
		}
	}

	protected void onGrdOralContrastGridCheckBoxClicked(int column,	grdOralContrastRow row, boolean isChecked) throws PresentationLogicException 
	{
		if (column == 1 && isChecked)
		{
			row.setcolSelect(Boolean.TRUE);
		}
		else if (column == 2 && (!isChecked) && Boolean.TRUE.equals(row.getcolDefault()))
		{
			row.setcolDefault(Boolean.FALSE);
		}
	}

	protected void onGrdIVContrastGridCheckBoxClicked(int column, grdIVContrastRow row, boolean isChecked) throws PresentationLogicException 
	{
		if (column == 1 && isChecked)
		{
			row.setcolSelect(Boolean.TRUE);
		}
		else if (column == 2 && (!isChecked) && Boolean.TRUE.equals(row.getcolDefault()))
		{
			row.setcolDefault(Boolean.FALSE);
		}
	}

	protected void onGrdMouldRoomGridCheckBoxClicked(int column, grdMouldRoomRow row, boolean isChecked) throws PresentationLogicException 
	{
		if (column == 1 && isChecked)
		{
			row.setcolSelect(Boolean.TRUE);
		}
		else if (column == 2 && (!isChecked) && Boolean.TRUE.equals(row.getcolDefault()))
		{
			row.setcolDefault(Boolean.FALSE);
		}
	}

	protected void onCmbImmobTypeReqValueChanged()	throws PresentationLogicException 
	{
		
		if (form.getMode().equals(FormMode.EDIT) && form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
		{
			clearImmobTypeGrid();
		}
		
		updateControlState();
	}

	protected void onCmbIMRTReqValueChanged() throws PresentationLogicException 
	{
		if (form.getMode().equals(FormMode.EDIT) && form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
		{
			clearIMRTGrid();
		}
		
		updateControlState();
	}

	protected void onCmbGatingOptionsReqValueChanged()throws PresentationLogicException 
	{
		
		if (form.getMode().equals(FormMode.EDIT) && form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
		{
			clearGatingOptionsGrid();
		}
		
		updateControlState();
	}

	protected void onCmbOralContrastReqValueChanged() throws PresentationLogicException 
	{
		
		if (form.getMode().equals(FormMode.EDIT) && form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
		{
			clearOralContrastGrid();
		}
		
		updateControlState();
	}

	protected void onCmbIVContrastReqValueChanged() throws PresentationLogicException 
	{
		
		if (form.getMode().equals(FormMode.EDIT) && form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
		{
			clearIVContrastGrid();
		}
		
		updateControlState();
	}

	protected void onCmbMouldRoomReqValueChanged() throws PresentationLogicException 
	{

		if (form.getMode().equals(FormMode.EDIT) && form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().getValue() != null && form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().getValue().equals(OptionsRequired.NOT_REQUIRED))
		{
			clearMouldRoomGrid();
		}
		
		updateControlState();
	}

	protected void onRadioButtonGroupYesNoValueChanged() throws PresentationLogicException 
	{
		if (form.lyrProtocol().tabConfig().GroupYesNo().getValue().equals(GroupYesNoEnumeration.rdoYes))
		{
			form.lyrProtocol().tabConfig().cmbClinicalTrial().setRequired(true);
			form.lyrProtocol().tabConfig().cmbClinicalTrial().setEnabled(true);
		}
		else
		{
			// Not required so disable the combo
			form.lyrProtocol().tabConfig().cmbClinicalTrial().setRequired(false);
			form.lyrProtocol().tabConfig().cmbClinicalTrial().setValue(null);
			form.lyrProtocol().tabConfig().cmbClinicalTrial().setEnabled(false);
		}
		
	}

	protected void onGrdProtocolsSelectionChanged() throws PresentationLogicException 
	{
		if (form.lyrProtocol().tabSearch().grdProtocols().getSelectedRow() == null)
		{
			form.btnEdit().setVisible(false);
			form.btnView().setVisible(false);
			form.btnNew().setVisible(true);
			form.getContextMenus().EAS.getProtocolSearchMenuEDITItem().setVisible(false);
			form.getContextMenus().EAS.getProtocolSearchMenuNEWItem().setVisible(true);
			form.getContextMenus().EAS.getProtocolSearchMenuVIEWItem().setVisible(false);
			form.getContextMenus().EAS.getProtocolSearchMenuCLONEItem().setVisible(false);

		}
		else
		{
			setMenuOptions();
		}
		
	}

	private void setMenuOptions() 
	{
		
		if (form.lyrProtocol().tabSearch().grdProtocols().getSelectedRow() == null)
			return;
		
		form.btnEdit().setVisible(true);
		form.btnView().setVisible(true);
		form.btnNew().setVisible(true);
			
		form.getContextMenus().EAS.getProtocolSearchMenuNEWItem().setVisible(true);
		form.getContextMenus().EAS.getProtocolSearchMenuEDITItem().setVisible(true);
		form.getContextMenus().EAS.getProtocolSearchMenuVIEWItem().setVisible(true);
		form.getContextMenus().EAS.getProtocolSearchMenuCLONEItem().setVisible(true);
	}

	protected void onCmbPrimTumourValueChanged() throws PresentationLogicException 
	{
		// Load the list of Treatment sites for this Primary tumour
		listTreatmentSites();
	}

	private void listTreatmentSites()
	{
		form.lyrProtocol().tabConfig().cmbTreatSite().clear();
		
		if (form.lyrProtocol().tabConfig().cmbPrimTumour().getValue() != null)
		{
			TreatmentSiteNameVoCollection ts = domain.listConfiguredTreatmentSitesForPT(form.lyrProtocol().tabConfig().cmbPrimTumour().getValue());
			if (ts != null && ts.size() > 0)
			{
				for (int i=0; i<ts.size(); i++)
				{
					form.lyrProtocol().tabConfig().cmbTreatSite().newRow(ts.get(i), ts.get(i).getTreatmentSite().getText());
				}
			}
		}
	}

	protected void onGrdPhasesSelectionChanged() throws PresentationLogicException 
	{
		if (form.lyrProtocol().tabPhase().grdPhases().getSelectedRow() == null)
		{
			form.getContextMenus().EAS.getProtocolPhaseConfigMenuADDItem().setVisible(true);
			form.getContextMenus().EAS.getProtocolPhaseConfigMenuREMOVEItem().setVisible(false);
		}
		else
		{
			form.getContextMenus().EAS.getProtocolPhaseConfigMenuADDItem().setVisible(true);
			form.getContextMenus().EAS.getProtocolPhaseConfigMenuREMOVEItem().setVisible(true);
		}
		
	}
}


