//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.eas.forms.protocolconfiguration;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.eas.domain.ProtocolConfiguration.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.eas.domain.ProtocolConfiguration domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabSearch().cmbStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PreActiveActiveInactiveStatus)
		{
			ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabSearch().cmbStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbStatusLookup()
	{
		this.form.lyrProtocol().tabSearch().cmbStatus().clear();
		ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabSearch().cmbStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbStatusLookupValue(int id)
	{
		ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabSearch().cmbStatus().setValue(instance);
	}
	protected final void defaultcmbStatusLookupValue()
	{
		this.form.lyrProtocol().tabSearch().cmbStatus().setValue((ims.core.vo.lookups.PreActiveActiveInactiveStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PreActiveActiveInactiveStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PreActiveActiveInactiveStatus.TYPE_ID));
	}
	protected final void oncmbMouldRoomReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbMouldRoomReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbMouldRoomReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbMouldRoomReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbMouldRoomReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().setValue(instance);
	}
	protected final void defaultcmbMouldRoomReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbMouldRoomReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbImmobTypeReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbImmobTypeReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbImmobTypeReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbImmobTypeReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbImmobTypeReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().setValue(instance);
	}
	protected final void defaultcmbImmobTypeReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbImmobTypeReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbIMRTReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIMRTReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIMRTReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIMRTReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIMRTReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().setValue(instance);
	}
	protected final void defaultcmbIMRTReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbIMRTReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbGatingOptionsReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbGatingOptionsReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbGatingOptionsReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbGatingOptionsReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbGatingOptionsReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().setValue(instance);
	}
	protected final void defaultcmbGatingOptionsReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbGatingOptionsReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbOralContrastReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOralContrastReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOralContrastReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOralContrastReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOralContrastReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().setValue(instance);
	}
	protected final void defaultcmbOralContrastReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbOralContrastReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbCCCLValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbCCCL().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCCCLLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCCCLLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbCCCL().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCCCLLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbCCCL().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbCCCL().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCCCLLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbCCCL().setValue(instance);
	}
	protected final void defaultcmbCCCLLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbCCCL().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbIVContrastReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIVContrastReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIVContrastReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIVContrastReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIVContrastReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().setValue(instance);
	}
	protected final void defaultcmbIVContrastReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbIVContrastReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbPetCTDefaultValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPetCTDefaultLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPetCTDefaultLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPetCTDefaultLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPetCTDefaultLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().setValue(instance);
	}
	protected final void defaultcmbPetCTDefaultLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPetCTDefault().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbPETCTReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPETCTReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPETCTReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPETCTReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPETCTReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().setValue(instance);
	}
	protected final void defaultcmbPETCTReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPETCTReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbSimulationDefaultValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSimulationDefaultLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSimulationDefaultLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSimulationDefaultLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSimulationDefaultLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().setValue(instance);
	}
	protected final void defaultcmbSimulationDefaultLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbSimulationDefault().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbSimulationReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSimulationReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSimulationReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSimulationReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSimulationReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().setValue(instance);
	}
	protected final void defaultcmbSimulationReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbSimulationReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbPegDefaultValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbPegDefault().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPegDefaultLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPegDefaultLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbPegDefault().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPegDefaultLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPegDefault().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbPegDefault().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPegDefaultLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbPegDefault().setValue(instance);
	}
	protected final void defaultcmbPegDefaultLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPegDefault().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbPegReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbPegReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPegReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPegReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbPegReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPegReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPegReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbPegReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPegReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbPegReq().setValue(instance);
	}
	protected final void defaultcmbPegReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPegReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbDentistDefaultValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDentistDefaultLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDentistDefaultLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDentistDefaultLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDentistDefaultLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().setValue(instance);
	}
	protected final void defaultcmbDentistDefaultLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbDentistDefault().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbDentistReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbDentistReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDentistReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDentistReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbDentistReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDentistReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbDentistReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbDentistReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDentistReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbDentistReq().setValue(instance);
	}
	protected final void defaultcmbDentistReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbDentistReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbMRIDefaultValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbMRIDefaultLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbMRIDefaultLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbMRIDefaultLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbMRIDefaultLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().setValue(instance);
	}
	protected final void defaultcmbMRIDefaultLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbMRIDefault().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbMRIReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbMRIReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbMRIReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbMRIReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbMRIReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbMRIReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbMRIReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbMRIReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbMRIReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbMRIReq().setValue(instance);
	}
	protected final void defaultcmbMRIReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbMRIReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbPlanningDefaultValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPlanningDefaultLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPlanningDefaultLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPlanningDefaultLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPlanningDefaultLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().setValue(instance);
	}
	protected final void defaultcmbPlanningDefaultLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPlanningDefault().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbPlanningCTReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPlanningCTReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPlanningCTReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPlanningCTReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPlanningCTReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().setValue(instance);
	}
	protected final void defaultcmbPlanningCTReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPlanningCTReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbSessDefaultValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbSessDefault().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSessDefaultLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSessDefaultLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbSessDefault().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSessDefaultLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbSessDefault().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbSessDefault().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSessDefaultLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbSessDefault().setValue(instance);
	}
	protected final void defaultcmbSessDefaultLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbSessDefault().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbPlanSessReqValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPlanSessReqLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.eas.vo.lookups.OptionsRequired)
		{
			ims.eas.vo.lookups.OptionsRequired instance = (ims.eas.vo.lookups.OptionsRequired)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPlanSessReqLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.eas.vo.lookups.OptionsRequired existingInstance = (ims.eas.vo.lookups.OptionsRequired)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPlanSessReqLookup()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().clear();
		ims.eas.vo.lookups.OptionsRequiredCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getOptionsRequired(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPlanSessReqLookupValue(int id)
	{
		ims.eas.vo.lookups.OptionsRequired instance = ims.eas.vo.lookups.LookupHelper.getOptionsRequiredInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().setValue(instance);
	}
	protected final void defaultcmbPlanSessReqLookupValue()
	{
		this.form.lyrProtocol().tabConfig().ctn().cmbPlanSessReq().setValue((ims.eas.vo.lookups.OptionsRequired)domain.getLookupService().getDefaultInstance(ims.eas.vo.lookups.OptionsRequired.class, engine.getFormName().getID(), ims.eas.vo.lookups.OptionsRequired.TYPE_ID));
	}
	protected final void oncmbClinicalTrialValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().cmbClinicalTrial().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.ClinicalTrialName existingInstance = (ims.oncology.vo.lookups.ClinicalTrialName)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbClinicalTrialLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.ClinicalTrialName)
		{
			ims.oncology.vo.lookups.ClinicalTrialName instance = (ims.oncology.vo.lookups.ClinicalTrialName)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbClinicalTrialLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.ClinicalTrialName existingInstance = (ims.oncology.vo.lookups.ClinicalTrialName)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().cmbClinicalTrial().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbClinicalTrialLookup()
	{
		this.form.lyrProtocol().tabConfig().cmbClinicalTrial().clear();
		ims.oncology.vo.lookups.ClinicalTrialNameCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getClinicalTrialName(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().cmbClinicalTrial().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbClinicalTrialLookupValue(int id)
	{
		ims.oncology.vo.lookups.ClinicalTrialName instance = ims.oncology.vo.lookups.LookupHelper.getClinicalTrialNameInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().cmbClinicalTrial().setValue(instance);
	}
	protected final void defaultcmbClinicalTrialLookupValue()
	{
		this.form.lyrProtocol().tabConfig().cmbClinicalTrial().setValue((ims.oncology.vo.lookups.ClinicalTrialName)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.ClinicalTrialName.class, engine.getFormName().getID(), ims.oncology.vo.lookups.ClinicalTrialName.TYPE_ID));
	}
	protected final void oncmbStatValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrProtocol().tabConfig().cmbStat().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbStatLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PreActiveActiveInactiveStatus)
		{
			ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbStatLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrProtocol().tabConfig().cmbStat().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbStatLookup()
	{
		this.form.lyrProtocol().tabConfig().cmbStat().clear();
		ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabConfig().cmbStat().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbStatLookupValue(int id)
	{
		ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrProtocol().tabConfig().cmbStat().setValue(instance);
	}
	protected final void defaultcmbStatLookupValue()
	{
		this.form.lyrProtocol().tabConfig().cmbStat().setValue((ims.core.vo.lookups.PreActiveActiveInactiveStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PreActiveActiveInactiveStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PreActiveActiveInactiveStatus.TYPE_ID));
	}
	protected final void bindgrdPhasescolPhaseNameLookup()
	{
		this.form.lyrProtocol().tabPhase().grdPhases().colPhaseNameComboBox().clear();
		ims.eas.vo.lookups.PhaseNamesCollection lookupCollection = ims.eas.vo.lookups.LookupHelper.getPhaseNames(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabPhase().grdPhases().colPhaseNameComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdPhasescolModalityLookup()
	{
		this.form.lyrProtocol().tabPhase().grdPhases().colModalityComboBox().clear();
		ims.ccosched.vo.lookups.ModalityCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getModality(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabPhase().grdPhases().colModalityComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdPhasescolUnitLookup()
	{
		this.form.lyrProtocol().tabPhase().grdPhases().colUnitComboBox().clear();
		ims.ccosched.vo.lookups.UnitCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getUnit(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrProtocol().tabPhase().grdPhases().colUnitComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.eas.domain.ProtocolConfiguration domain;
}
