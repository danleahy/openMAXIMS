//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.eas.forms.protocolconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrProtocolLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabSearchContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPrimaryTumourComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.eas.vo.PrimaryTumourNameVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.eas.vo.PrimaryTumourNameVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.eas.vo.PrimaryTumourNameVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.eas.vo.PrimaryTumourNameVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.eas.vo.PrimaryTumourNameVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.eas.vo.PrimaryTumourNameVo getValue()
				{
					return (ims.eas.vo.PrimaryTumourNameVo)super.control.getValue();
				}
				public void setValue(ims.eas.vo.PrimaryTumourNameVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTreatmentSiteComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.eas.vo.TreatmentSiteNameVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.eas.vo.TreatmentSiteNameVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.eas.vo.TreatmentSiteNameVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.eas.vo.TreatmentSiteNameVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.eas.vo.TreatmentSiteNameVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.eas.vo.TreatmentSiteNameVo getValue()
				{
					return (ims.eas.vo.TreatmentSiteNameVo)super.control.getValue();
				}
				public void setValue(ims.eas.vo.TreatmentSiteNameVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdProtocolsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdProtocolsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolProtocolNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolProtocolNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolProtocolNameOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolProtocolName()
				{
					return (String)super.row.get(0);
				}
				public void setcolProtocolName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolProtocolNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolPrimaryTumourReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolPrimaryTumourReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolPrimaryTumourOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolPrimaryTumour()
				{
					return (String)super.row.get(1);
				}
				public void setcolPrimaryTumour(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolPrimaryTumourTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolTreatmentSiteReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolTreatmentSiteReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolTreatmentSiteOpened()
				{
					super.row.showOpened(2);
				}
				public String getcolTreatmentSite()
				{
					return (String)super.row.get(2);
				}
				public void setcolTreatmentSite(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolTreatmentSiteTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(3);
				}
				public String getcolStatus()
				{
					return (String)super.row.get(3);
				}
				public void setcolStatus(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolDateReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolDateReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolDateOpened()
				{
					super.row.showOpened(4);
				}
				public ims.framework.utils.Date getcolDate()
				{
					return (ims.framework.utils.Date)super.row.get(4);
				}
				public void setcolDate(ims.framework.utils.Date value)
				{
					super.row.set(4, value);
				}
				public void setCellcolDateTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolMosReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolMosReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolMosOpened()
				{
					super.row.showOpened(5);
				}
				public String getcolMos()
				{
					return (String)super.row.get(5);
				}
				public void setcolMos(String value)
				{
					super.row.set(5, value);
				}
				public void setCellcolMosTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.eas.vo.ProtocolListVo getValue()
				{
					return (ims.eas.vo.ProtocolListVo)super.row.getValue();
				}
				public void setValue(ims.eas.vo.ProtocolListVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdProtocolsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdProtocolsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdProtocolsRow get(int index)
				{
					return new grdProtocolsRow(super.collection.get(index));
				}
				public grdProtocolsRow newRow()
				{
					return new grdProtocolsRow(super.collection.newRow());
				}
				public grdProtocolsRow newRow(boolean autoSelect)
				{
					return new grdProtocolsRow(super.collection.newRow(autoSelect));
				}
				public grdProtocolsRow newRowAt(int index)
				{
					return new grdProtocolsRow(super.collection.newRowAt(index));
				}
				public grdProtocolsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdProtocolsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdProtocolsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public ims.eas.vo.ProtocolListVoCollection getValues()
				{
					ims.eas.vo.ProtocolListVoCollection listOfValues = new ims.eas.vo.ProtocolListVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.eas.vo.ProtocolListVo getValue()
				{
					return (ims.eas.vo.ProtocolListVo)super.grid.getValue();
				}
				public void setValue(ims.eas.vo.ProtocolListVo value)
				{
					super.grid.setValue(value);
				}
				public grdProtocolsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdProtocolsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdProtocolsRowCollection getRows()
				{
					return new grdProtocolsRowCollection(super.grid.getRows());
				}
				public grdProtocolsRow getRowByValue(ims.eas.vo.ProtocolListVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdProtocolsRow(row);
				}
				public void setcolProtocolNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolProtocolNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolPrimaryTumourHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolPrimaryTumourHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolTreatmentSiteHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolTreatmentSiteHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setcolMosHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolMosHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 384, 18, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TreatmentSite:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 50, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Tumour:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 384, 50, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Protocol Name:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 104, 16, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 104, 48, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPrimaryTumourTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPrimaryTumourTemp);
				cmbPrimaryTumourComboBox cmbPrimaryTumour = (cmbPrimaryTumourComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPrimaryTumourComboBox.class, m_cmbPrimaryTumourTemp);
				super.addComboBox(cmbPrimaryTumour);
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 474, 16, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbTreatmentSiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTreatmentSiteTemp);
				cmbTreatmentSiteComboBox cmbTreatmentSite = (cmbTreatmentSiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatmentSiteComboBox.class, m_cmbTreatmentSiteTemp);
				super.addComboBox(cmbTreatmentSite);
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 474, 48, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbStatusTemp);
				cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
				super.addComboBox(cmbStatus);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 808, 440, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdProtocolsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.EAS.contextMenuProtocolSearchMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdProtocolsTemp);
				grdProtocolsGrid grdProtocols = (grdProtocolsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProtocolsGrid.class, m_grdProtocolsTemp);
				grdProtocols.addStringColumn("ProtocolName", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProtocols.addStringColumn("Primary Tumour", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProtocols.addStringColumn("Treatment Site", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProtocols.addStringColumn("Status", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProtocols.addDateColumn("Date Created", 0, 0, 100, true, true, null, false, 1, true);
				grdProtocols.addStringColumn("Created By", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdProtocols);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 786, 16, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 752, 16, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public TextBox txtProtocolName()
			{
				return (TextBox)super.getControl(4);
			}
			public cmbPrimaryTumourComboBox cmbPrimaryTumour()
			{
				return (cmbPrimaryTumourComboBox)super.getComboBox(0);
			}
			public cmbTreatmentSiteComboBox cmbTreatmentSite()
			{
				return (cmbTreatmentSiteComboBox)super.getComboBox(1);
			}
			public cmbStatusComboBox cmbStatus()
			{
				return (cmbStatusComboBox)super.getComboBox(2);
			}
			public grdProtocolsGrid grdProtocols()
			{
				return (grdProtocolsGrid)super.getGrid(0);
			}
			public ImageButton imbClear()
			{
				return (ImageButton)super.getControl(9);
			}
			public ImageButton imbSearch()
			{
				return (ImageButton)super.getControl(10);
			}
		}
		public static class tabConfigContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class ctnContainer extends ContainerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbMouldRoomReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbImmobTypeReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbIMRTReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbGatingOptionsReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbOralContrastReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbCCCLComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.YesNo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.YesNo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.YesNo getValue()
					{
						return (ims.core.vo.lookups.YesNo)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.YesNo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbIVContrastReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbPetCTDefaultComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.YesNo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.YesNo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.YesNo getValue()
					{
						return (ims.core.vo.lookups.YesNo)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.YesNo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbPETCTReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbSimulationDefaultComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.YesNo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.YesNo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.YesNo getValue()
					{
						return (ims.core.vo.lookups.YesNo)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.YesNo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbSimulationReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbPegDefaultComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.YesNo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.YesNo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.YesNo getValue()
					{
						return (ims.core.vo.lookups.YesNo)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.YesNo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbPegReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbDentistDefaultComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.YesNo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.YesNo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.YesNo getValue()
					{
						return (ims.core.vo.lookups.YesNo)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.YesNo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbDentistReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbMRIDefaultComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.YesNo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.YesNo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.YesNo getValue()
					{
						return (ims.core.vo.lookups.YesNo)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.YesNo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbMRIReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbPlanningDefaultComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.YesNo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.YesNo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.YesNo getValue()
					{
						return (ims.core.vo.lookups.YesNo)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.YesNo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbPlanningCTReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbSessDefaultComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.YesNo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.YesNo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.YesNo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.YesNo getValue()
					{
						return (ims.core.vo.lookups.YesNo)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.YesNo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbPlanSessReqComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.eas.vo.lookups.OptionsRequired value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.eas.vo.lookups.OptionsRequired value)
					{
						return super.control.removeRow(value);
					}
					public ims.eas.vo.lookups.OptionsRequired getValue()
					{
						return (ims.eas.vo.lookups.OptionsRequired)super.control.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OptionsRequired value)
					{
						super.control.setValue(value);
					}
				}
				public static class grdMouldRoomRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdMouldRoomRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolNameReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolNameReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolNameOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolName()
					{
						return (String)super.row.get(0);
					}
					public void setcolName(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolNameTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolDefaultReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolDefaultReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolDefaultOpened()
					{
						super.row.showOpened(1);
					}
					public boolean getcolDefault()
					{
						return ((Boolean)super.row.get(1)).booleanValue();
					}
					public void setcolDefault(boolean value)
					{
						super.row.set(1, new Boolean(value));
					}
					public void setCellcolDefaultTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setcolSelectReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean iscolSelectReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showcolSelectOpened()
					{
						super.row.showOpened(2);
					}
					public boolean getcolSelect()
					{
						return ((Boolean)super.row.get(2)).booleanValue();
					}
					public void setcolSelect(boolean value)
					{
						super.row.set(2, new Boolean(value));
					}
					public void setCellcolSelectTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public ims.eas.vo.lookups.MouldRoomActivity getValue()
					{
						return (ims.eas.vo.lookups.MouldRoomActivity)super.row.getValue();
					}
					public void setValue(ims.eas.vo.lookups.MouldRoomActivity value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdMouldRoomRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdMouldRoomRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdMouldRoomRow get(int index)
					{
						return new grdMouldRoomRow(super.collection.get(index));
					}
					public grdMouldRoomRow newRow()
					{
						return new grdMouldRoomRow(super.collection.newRow());
					}
					public grdMouldRoomRow newRow(boolean autoSelect)
					{
						return new grdMouldRoomRow(super.collection.newRow(autoSelect));
					}
					public grdMouldRoomRow newRowAt(int index)
					{
						return new grdMouldRoomRow(super.collection.newRowAt(index));
					}
					public grdMouldRoomRow newRowAt(int index, boolean autoSelect)
					{
						return new grdMouldRoomRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdMouldRoomGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.eas.vo.lookups.MouldRoomActivity[] getValues()
					{
						ims.eas.vo.lookups.MouldRoomActivity[] listOfValues = new ims.eas.vo.lookups.MouldRoomActivity[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.eas.vo.lookups.MouldRoomActivity getValue()
					{
						return (ims.eas.vo.lookups.MouldRoomActivity)super.grid.getValue();
					}
					public void setValue(ims.eas.vo.lookups.MouldRoomActivity value)
					{
						super.grid.setValue(value);
					}
					public grdMouldRoomRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdMouldRoomRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdMouldRoomRowCollection getRows()
					{
						return new grdMouldRoomRowCollection(super.grid.getRows());
					}
					public grdMouldRoomRow getRowByValue(ims.eas.vo.lookups.MouldRoomActivity value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdMouldRoomRow(row);
					}
					public void setcolNameHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolNameHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolDefaultHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolDefaultHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setcolSelectHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getcolSelectHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
				}
				public static class grdImmobTypeRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdImmobTypeRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolNameReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolNameReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolNameOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolName()
					{
						return (String)super.row.get(0);
					}
					public void setcolName(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolNameTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolDefaultReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolDefaultReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolDefaultOpened()
					{
						super.row.showOpened(1);
					}
					public boolean getcolDefault()
					{
						return ((Boolean)super.row.get(1)).booleanValue();
					}
					public void setcolDefault(boolean value)
					{
						super.row.set(1, new Boolean(value));
					}
					public void setCellcolDefaultTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setcolSelectReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean iscolSelectReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showcolSelectOpened()
					{
						super.row.showOpened(2);
					}
					public boolean getcolSelect()
					{
						return ((Boolean)super.row.get(2)).booleanValue();
					}
					public void setcolSelect(boolean value)
					{
						super.row.set(2, new Boolean(value));
					}
					public void setCellcolSelectTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public ims.eas.vo.lookups.ImmobilisationType getValue()
					{
						return (ims.eas.vo.lookups.ImmobilisationType)super.row.getValue();
					}
					public void setValue(ims.eas.vo.lookups.ImmobilisationType value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdImmobTypeRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdImmobTypeRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdImmobTypeRow get(int index)
					{
						return new grdImmobTypeRow(super.collection.get(index));
					}
					public grdImmobTypeRow newRow()
					{
						return new grdImmobTypeRow(super.collection.newRow());
					}
					public grdImmobTypeRow newRow(boolean autoSelect)
					{
						return new grdImmobTypeRow(super.collection.newRow(autoSelect));
					}
					public grdImmobTypeRow newRowAt(int index)
					{
						return new grdImmobTypeRow(super.collection.newRowAt(index));
					}
					public grdImmobTypeRow newRowAt(int index, boolean autoSelect)
					{
						return new grdImmobTypeRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdImmobTypeGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.eas.vo.lookups.ImmobilisationType[] getValues()
					{
						ims.eas.vo.lookups.ImmobilisationType[] listOfValues = new ims.eas.vo.lookups.ImmobilisationType[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.eas.vo.lookups.ImmobilisationType getValue()
					{
						return (ims.eas.vo.lookups.ImmobilisationType)super.grid.getValue();
					}
					public void setValue(ims.eas.vo.lookups.ImmobilisationType value)
					{
						super.grid.setValue(value);
					}
					public grdImmobTypeRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdImmobTypeRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdImmobTypeRowCollection getRows()
					{
						return new grdImmobTypeRowCollection(super.grid.getRows());
					}
					public grdImmobTypeRow getRowByValue(ims.eas.vo.lookups.ImmobilisationType value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdImmobTypeRow(row);
					}
					public void setcolNameHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolNameHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolDefaultHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolDefaultHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setcolSelectHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getcolSelectHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
				}
				public static class grdIMRTRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdIMRTRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolNameReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolNameReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolNameOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolName()
					{
						return (String)super.row.get(0);
					}
					public void setcolName(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolNameTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolDefaultReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolDefaultReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolDefaultOpened()
					{
						super.row.showOpened(1);
					}
					public boolean getcolDefault()
					{
						return ((Boolean)super.row.get(1)).booleanValue();
					}
					public void setcolDefault(boolean value)
					{
						super.row.set(1, new Boolean(value));
					}
					public void setCellcolDefaultTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setcolSelectReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean iscolSelectReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showcolSelectOpened()
					{
						super.row.showOpened(2);
					}
					public boolean getcolSelect()
					{
						return ((Boolean)super.row.get(2)).booleanValue();
					}
					public void setcolSelect(boolean value)
					{
						super.row.set(2, new Boolean(value));
					}
					public void setCellcolSelectTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public ims.eas.vo.lookups.IMRT getValue()
					{
						return (ims.eas.vo.lookups.IMRT)super.row.getValue();
					}
					public void setValue(ims.eas.vo.lookups.IMRT value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdIMRTRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdIMRTRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdIMRTRow get(int index)
					{
						return new grdIMRTRow(super.collection.get(index));
					}
					public grdIMRTRow newRow()
					{
						return new grdIMRTRow(super.collection.newRow());
					}
					public grdIMRTRow newRow(boolean autoSelect)
					{
						return new grdIMRTRow(super.collection.newRow(autoSelect));
					}
					public grdIMRTRow newRowAt(int index)
					{
						return new grdIMRTRow(super.collection.newRowAt(index));
					}
					public grdIMRTRow newRowAt(int index, boolean autoSelect)
					{
						return new grdIMRTRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdIMRTGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.eas.vo.lookups.IMRT[] getValues()
					{
						ims.eas.vo.lookups.IMRT[] listOfValues = new ims.eas.vo.lookups.IMRT[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.eas.vo.lookups.IMRT getValue()
					{
						return (ims.eas.vo.lookups.IMRT)super.grid.getValue();
					}
					public void setValue(ims.eas.vo.lookups.IMRT value)
					{
						super.grid.setValue(value);
					}
					public grdIMRTRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdIMRTRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdIMRTRowCollection getRows()
					{
						return new grdIMRTRowCollection(super.grid.getRows());
					}
					public grdIMRTRow getRowByValue(ims.eas.vo.lookups.IMRT value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdIMRTRow(row);
					}
					public void setcolNameHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolNameHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolDefaultHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolDefaultHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setcolSelectHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getcolSelectHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
				}
				public static class grdGatingOptionsRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdGatingOptionsRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolNameReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolNameReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolNameOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolName()
					{
						return (String)super.row.get(0);
					}
					public void setcolName(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolNameTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolDefaultReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolDefaultReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolDefaultOpened()
					{
						super.row.showOpened(1);
					}
					public boolean getcolDefault()
					{
						return ((Boolean)super.row.get(1)).booleanValue();
					}
					public void setcolDefault(boolean value)
					{
						super.row.set(1, new Boolean(value));
					}
					public void setCellcolDefaultTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setcolSelectReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean iscolSelectReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showcolSelectOpened()
					{
						super.row.showOpened(2);
					}
					public boolean getcolSelect()
					{
						return ((Boolean)super.row.get(2)).booleanValue();
					}
					public void setcolSelect(boolean value)
					{
						super.row.set(2, new Boolean(value));
					}
					public void setCellcolSelectTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public ims.eas.vo.lookups.GatingOptions getValue()
					{
						return (ims.eas.vo.lookups.GatingOptions)super.row.getValue();
					}
					public void setValue(ims.eas.vo.lookups.GatingOptions value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdGatingOptionsRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdGatingOptionsRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdGatingOptionsRow get(int index)
					{
						return new grdGatingOptionsRow(super.collection.get(index));
					}
					public grdGatingOptionsRow newRow()
					{
						return new grdGatingOptionsRow(super.collection.newRow());
					}
					public grdGatingOptionsRow newRow(boolean autoSelect)
					{
						return new grdGatingOptionsRow(super.collection.newRow(autoSelect));
					}
					public grdGatingOptionsRow newRowAt(int index)
					{
						return new grdGatingOptionsRow(super.collection.newRowAt(index));
					}
					public grdGatingOptionsRow newRowAt(int index, boolean autoSelect)
					{
						return new grdGatingOptionsRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdGatingOptionsGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.eas.vo.lookups.GatingOptions[] getValues()
					{
						ims.eas.vo.lookups.GatingOptions[] listOfValues = new ims.eas.vo.lookups.GatingOptions[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.eas.vo.lookups.GatingOptions getValue()
					{
						return (ims.eas.vo.lookups.GatingOptions)super.grid.getValue();
					}
					public void setValue(ims.eas.vo.lookups.GatingOptions value)
					{
						super.grid.setValue(value);
					}
					public grdGatingOptionsRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdGatingOptionsRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdGatingOptionsRowCollection getRows()
					{
						return new grdGatingOptionsRowCollection(super.grid.getRows());
					}
					public grdGatingOptionsRow getRowByValue(ims.eas.vo.lookups.GatingOptions value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdGatingOptionsRow(row);
					}
					public void setcolNameHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolNameHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolDefaultHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolDefaultHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setcolSelectHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getcolSelectHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
				}
				public static class grdOralContrastRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdOralContrastRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolNameReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolNameReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolNameOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolName()
					{
						return (String)super.row.get(0);
					}
					public void setcolName(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolNameTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolDefaultReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolDefaultReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolDefaultOpened()
					{
						super.row.showOpened(1);
					}
					public boolean getcolDefault()
					{
						return ((Boolean)super.row.get(1)).booleanValue();
					}
					public void setcolDefault(boolean value)
					{
						super.row.set(1, new Boolean(value));
					}
					public void setCellcolDefaultTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setcolSelectReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean iscolSelectReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showcolSelectOpened()
					{
						super.row.showOpened(2);
					}
					public boolean getcolSelect()
					{
						return ((Boolean)super.row.get(2)).booleanValue();
					}
					public void setcolSelect(boolean value)
					{
						super.row.set(2, new Boolean(value));
					}
					public void setCellcolSelectTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public ims.eas.vo.lookups.OralContrast getValue()
					{
						return (ims.eas.vo.lookups.OralContrast)super.row.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OralContrast value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdOralContrastRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdOralContrastRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdOralContrastRow get(int index)
					{
						return new grdOralContrastRow(super.collection.get(index));
					}
					public grdOralContrastRow newRow()
					{
						return new grdOralContrastRow(super.collection.newRow());
					}
					public grdOralContrastRow newRow(boolean autoSelect)
					{
						return new grdOralContrastRow(super.collection.newRow(autoSelect));
					}
					public grdOralContrastRow newRowAt(int index)
					{
						return new grdOralContrastRow(super.collection.newRowAt(index));
					}
					public grdOralContrastRow newRowAt(int index, boolean autoSelect)
					{
						return new grdOralContrastRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdOralContrastGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.eas.vo.lookups.OralContrast[] getValues()
					{
						ims.eas.vo.lookups.OralContrast[] listOfValues = new ims.eas.vo.lookups.OralContrast[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.eas.vo.lookups.OralContrast getValue()
					{
						return (ims.eas.vo.lookups.OralContrast)super.grid.getValue();
					}
					public void setValue(ims.eas.vo.lookups.OralContrast value)
					{
						super.grid.setValue(value);
					}
					public grdOralContrastRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdOralContrastRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdOralContrastRowCollection getRows()
					{
						return new grdOralContrastRowCollection(super.grid.getRows());
					}
					public grdOralContrastRow getRowByValue(ims.eas.vo.lookups.OralContrast value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdOralContrastRow(row);
					}
					public void setcolNameHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolNameHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolDefaultHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolDefaultHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setcolSelectHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getcolSelectHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
				}
				public static class grdIVContrastRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdIVContrastRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolNameReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolNameReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolNameOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolName()
					{
						return (String)super.row.get(0);
					}
					public void setcolName(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolNameTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolDefaultReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolDefaultReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolDefaultOpened()
					{
						super.row.showOpened(1);
					}
					public boolean getcolDefault()
					{
						return ((Boolean)super.row.get(1)).booleanValue();
					}
					public void setcolDefault(boolean value)
					{
						super.row.set(1, new Boolean(value));
					}
					public void setCellcolDefaultTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setcolSelectReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean iscolSelectReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showcolSelectOpened()
					{
						super.row.showOpened(2);
					}
					public boolean getcolSelect()
					{
						return ((Boolean)super.row.get(2)).booleanValue();
					}
					public void setcolSelect(boolean value)
					{
						super.row.set(2, new Boolean(value));
					}
					public void setCellcolSelectTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public ims.eas.vo.lookups.IVContrast getValue()
					{
						return (ims.eas.vo.lookups.IVContrast)super.row.getValue();
					}
					public void setValue(ims.eas.vo.lookups.IVContrast value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdIVContrastRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdIVContrastRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdIVContrastRow get(int index)
					{
						return new grdIVContrastRow(super.collection.get(index));
					}
					public grdIVContrastRow newRow()
					{
						return new grdIVContrastRow(super.collection.newRow());
					}
					public grdIVContrastRow newRow(boolean autoSelect)
					{
						return new grdIVContrastRow(super.collection.newRow(autoSelect));
					}
					public grdIVContrastRow newRowAt(int index)
					{
						return new grdIVContrastRow(super.collection.newRowAt(index));
					}
					public grdIVContrastRow newRowAt(int index, boolean autoSelect)
					{
						return new grdIVContrastRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdIVContrastGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.eas.vo.lookups.IVContrast[] getValues()
					{
						ims.eas.vo.lookups.IVContrast[] listOfValues = new ims.eas.vo.lookups.IVContrast[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.eas.vo.lookups.IVContrast getValue()
					{
						return (ims.eas.vo.lookups.IVContrast)super.grid.getValue();
					}
					public void setValue(ims.eas.vo.lookups.IVContrast value)
					{
						super.grid.setValue(value);
					}
					public grdIVContrastRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdIVContrastRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdIVContrastRowCollection getRows()
					{
						return new grdIVContrastRowCollection(super.grid.getRows());
					}
					public grdIVContrastRow getRowByValue(ims.eas.vo.lookups.IVContrast value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdIVContrastRow(row);
					}
					public void setcolNameHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolNameHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolDefaultHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolDefaultHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setcolSelectHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getcolSelectHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 6, 1032, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mould Room", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 6, 1048, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Preparation", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 600, 1032, 176, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mould Room Preparation Required", new Integer(0), "Mould Room Preparation Required", new Integer(0)}));
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 600, 904, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Immobilisation Type", new Integer(0), "Immobilisation Type", new Integer(0)}));
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 6, 906, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Immobilisation", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 600, 776, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "IMRT", new Integer(0), "IMRT", new Integer(0)}));
					RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 6, 776, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "IMRT", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 600, 648, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Gating Options", new Integer(0), "Gating Options", new Integer(0)}));
					RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 6, 650, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Gating Options", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 600, 512, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Oral Contrast", new Integer(0), "Oral Contrast", new Integer(0)}));
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 6, 514, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Oral Contrast", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 600, 330, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appropriate for CCC-L", new Integer(0), "Appropriate for CCC-L", new Integer(0)}));
					RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 328, 330, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appropriate for CCC-L", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 600, 376, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "IV Contrast", new Integer(0), "IV Contrast", new Integer(0)}));
					RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 378, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "IV Contrast", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 600, 290, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "PET CT for co-reg", new Integer(0), "PET CT for co-reg", new Integer(0)}));
					RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 408, 290, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 290, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "PET CT for co-reg", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 600, 242, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Simulation", new Integer(0), "Simulation", new Integer(0)}));
					RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 408, 242, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 242, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Simulation", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 600, 202, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "PEG Required", new Integer(0), "PEG Required", new Integer(0)}));
					RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 408, 202, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 8, 202, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "PEG Required", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 600, 154, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Dentist Required", new Integer(0), "Dentist Required", new Integer(0)}));
					RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 408, 154, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 154, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Dentist Required", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 600, 114, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "MRI for co-reg", new Integer(0), "MRI for co-reg", new Integer(0)}));
					RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 408, 114, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 114, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "MRI for co-reg", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 600, 74, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planning CT", new Integer(0), "Planning CT", new Integer(0)}));
					RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 408, 72, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 74, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planning CT", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 600, 26, 171, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Must Plan in Consultation Session", new Integer(0), "Must Plan in Consultation Session", new Integer(0)}));
					RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 408, 26, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 8, 26, 196, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Must plan in Consultation Session", new Integer(1), null, new Integer(0)}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 96, 1032, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbMouldRoomReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 49), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbMouldRoomReqTemp);
					cmbMouldRoomReqComboBox cmbMouldRoomReq = (cmbMouldRoomReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMouldRoomReqComboBox.class, m_cmbMouldRoomReqTemp);
					super.addComboBox(cmbMouldRoomReq);
					RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 96, 904, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbImmobTypeReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbImmobTypeReqTemp);
					cmbImmobTypeReqComboBox cmbImmobTypeReq = (cmbImmobTypeReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbImmobTypeReqComboBox.class, m_cmbImmobTypeReqTemp);
					super.addComboBox(cmbImmobTypeReq);
					RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 96, 776, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbIMRTReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbIMRTReqTemp);
					cmbIMRTReqComboBox cmbIMRTReq = (cmbIMRTReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIMRTReqComboBox.class, m_cmbIMRTReqTemp);
					super.addComboBox(cmbIMRTReq);
					RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 96, 648, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbGatingOptionsReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbGatingOptionsReqTemp);
					cmbGatingOptionsReqComboBox cmbGatingOptionsReq = (cmbGatingOptionsReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbGatingOptionsReqComboBox.class, m_cmbGatingOptionsReqTemp);
					super.addComboBox(cmbGatingOptionsReq);
					RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 96, 512, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbOralContrastReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbOralContrastReqTemp);
					cmbOralContrastReqComboBox cmbOralContrastReq = (cmbOralContrastReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOralContrastReqComboBox.class, m_cmbOralContrastReqTemp);
					super.addComboBox(cmbOralContrastReq);
					RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 464, 328, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbCCCLTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbCCCLTemp);
					cmbCCCLComboBox cmbCCCL = (cmbCCCLComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCCCLComboBox.class, m_cmbCCCLTemp);
					super.addComboBox(cmbCCCL);
					RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 96, 376, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbIVContrastReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbIVContrastReqTemp);
					cmbIVContrastReqComboBox cmbIVContrastReq = (cmbIVContrastReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIVContrastReqComboBox.class, m_cmbIVContrastReqTemp);
					super.addComboBox(cmbIVContrastReq);
					RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 464, 288, 121, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbPetCTDefaultTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbPetCTDefaultTemp);
					cmbPetCTDefaultComboBox cmbPetCTDefault = (cmbPetCTDefaultComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPetCTDefaultComboBox.class, m_cmbPetCTDefaultTemp);
					super.addComboBox(cmbPetCTDefault);
					RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 200, 288, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbPETCTReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbPETCTReqTemp);
					cmbPETCTReqComboBox cmbPETCTReq = (cmbPETCTReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPETCTReqComboBox.class, m_cmbPETCTReqTemp);
					super.addComboBox(cmbPETCTReq);
					RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 464, 240, 121, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbSimulationDefaultTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbSimulationDefaultTemp);
					cmbSimulationDefaultComboBox cmbSimulationDefault = (cmbSimulationDefaultComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSimulationDefaultComboBox.class, m_cmbSimulationDefaultTemp);
					super.addComboBox(cmbSimulationDefault);
					RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 200, 240, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbSimulationReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbSimulationReqTemp);
					cmbSimulationReqComboBox cmbSimulationReq = (cmbSimulationReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSimulationReqComboBox.class, m_cmbSimulationReqTemp);
					super.addComboBox(cmbSimulationReq);
					RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 464, 200, 121, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbPegDefaultTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbPegDefaultTemp);
					cmbPegDefaultComboBox cmbPegDefault = (cmbPegDefaultComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPegDefaultComboBox.class, m_cmbPegDefaultTemp);
					super.addComboBox(cmbPegDefault);
					RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 200, 200, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbPegReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbPegReqTemp);
					cmbPegReqComboBox cmbPegReq = (cmbPegReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPegReqComboBox.class, m_cmbPegReqTemp);
					super.addComboBox(cmbPegReq);
					RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 464, 152, 121, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbDentistDefaultTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbDentistDefaultTemp);
					cmbDentistDefaultComboBox cmbDentistDefault = (cmbDentistDefaultComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDentistDefaultComboBox.class, m_cmbDentistDefaultTemp);
					super.addComboBox(cmbDentistDefault);
					RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 200, 152, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbDentistReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbDentistReqTemp);
					cmbDentistReqComboBox cmbDentistReq = (cmbDentistReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDentistReqComboBox.class, m_cmbDentistReqTemp);
					super.addComboBox(cmbDentistReq);
					RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 464, 112, 121, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbMRIDefaultTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbMRIDefaultTemp);
					cmbMRIDefaultComboBox cmbMRIDefault = (cmbMRIDefaultComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMRIDefaultComboBox.class, m_cmbMRIDefaultTemp);
					super.addComboBox(cmbMRIDefault);
					RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 200, 112, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbMRIReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbMRIReqTemp);
					cmbMRIReqComboBox cmbMRIReq = (cmbMRIReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMRIReqComboBox.class, m_cmbMRIReqTemp);
					super.addComboBox(cmbMRIReq);
					RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 464, 72, 121, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbPlanningDefaultTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbPlanningDefaultTemp);
					cmbPlanningDefaultComboBox cmbPlanningDefault = (cmbPlanningDefaultComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPlanningDefaultComboBox.class, m_cmbPlanningDefaultTemp);
					super.addComboBox(cmbPlanningDefault);
					RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 200, 72, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbPlanningCTReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbPlanningCTReqTemp);
					cmbPlanningCTReqComboBox cmbPlanningCTReq = (cmbPlanningCTReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPlanningCTReqComboBox.class, m_cmbPlanningCTReqTemp);
					super.addComboBox(cmbPlanningCTReq);
					RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 464, 24, 121, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbSessDefaultTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbSessDefaultTemp);
					cmbSessDefaultComboBox cmbSessDefault = (cmbSessDefaultComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSessDefaultComboBox.class, m_cmbSessDefaultTemp);
					super.addComboBox(cmbSessDefault);
					RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 200, 24, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbPlanSessReqTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbPlanSessReqTemp);
					cmbPlanSessReqComboBox cmbPlanSessReq = (cmbPlanSessReqComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPlanSessReqComboBox.class, m_cmbPlanSessReqTemp);
					super.addComboBox(cmbPlanSessReq);
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 296, 1032, 288, 97, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Grid m_grdMouldRoomTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdMouldRoomTemp);
					grdMouldRoomGrid grdMouldRoom = (grdMouldRoomGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMouldRoomGrid.class, m_grdMouldRoomTemp);
					grdMouldRoom.addStringColumn("Name", 0, 0, 150, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdMouldRoom.addBoolColumn("Default", 0, 0, 50, false, true, 0, true);
					grdMouldRoom.addBoolColumn("Select", 0, 0, -1, false, true, 0, true);
					super.addGrid(grdMouldRoom);
					RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 296, 904, 288, 97, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Grid m_grdImmobTypeTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdImmobTypeTemp);
					grdImmobTypeGrid grdImmobType = (grdImmobTypeGrid)GridFlyweightFactory.getInstance().createGridBridge(grdImmobTypeGrid.class, m_grdImmobTypeTemp);
					grdImmobType.addStringColumn("Name", 0, 0, 150, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdImmobType.addBoolColumn("Default", 0, 0, 50, false, true, 0, true);
					grdImmobType.addBoolColumn("Select", 0, 0, -1, false, true, 0, true);
					super.addGrid(grdImmobType);
					RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 296, 776, 288, 97, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Grid m_grdIMRTTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdIMRTTemp);
					grdIMRTGrid grdIMRT = (grdIMRTGrid)GridFlyweightFactory.getInstance().createGridBridge(grdIMRTGrid.class, m_grdIMRTTemp);
					grdIMRT.addStringColumn("Name", 0, 0, 150, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdIMRT.addBoolColumn("Default", 0, 0, 50, false, true, 0, true);
					grdIMRT.addBoolColumn("Select", 0, 0, -1, false, true, 0, true);
					super.addGrid(grdIMRT);
					RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 296, 648, 288, 97, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Grid m_grdGatingOptionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdGatingOptionsTemp);
					grdGatingOptionsGrid grdGatingOptions = (grdGatingOptionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdGatingOptionsGrid.class, m_grdGatingOptionsTemp);
					grdGatingOptions.addStringColumn("Name", 0, 0, 150, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdGatingOptions.addBoolColumn("Default", 0, 0, 50, false, true, 0, true);
					grdGatingOptions.addBoolColumn("Select", 0, 0, -1, false, true, 0, true);
					super.addGrid(grdGatingOptions);
					RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 296, 512, 288, 97, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Grid m_grdOralContrastTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdOralContrastTemp);
					grdOralContrastGrid grdOralContrast = (grdOralContrastGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOralContrastGrid.class, m_grdOralContrastTemp);
					grdOralContrast.addStringColumn("Name", 0, 0, 150, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdOralContrast.addBoolColumn("Default", 0, 0, 50, false, true, 0, true);
					grdOralContrast.addBoolColumn("Select", 0, 0, -1, false, true, 0, true);
					super.addGrid(grdOralContrast);
					RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 296, 376, 288, 97, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Grid m_grdIVContrastTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdIVContrastTemp);
					grdIVContrastGrid grdIVContrast = (grdIVContrastGrid)GridFlyweightFactory.getInstance().createGridBridge(grdIVContrastGrid.class, m_grdIVContrastTemp);
					grdIVContrast.addStringColumn("Name", 0, 0, 150, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdIVContrast.addBoolColumn("Default", 0, 0, 50, false, true, 0, true);
					grdIVContrast.addBoolColumn("Select", 0, 0, 50, false, true, 0, true);
					super.addGrid(grdIVContrast);
			
					// Horizontal Line Controls
					RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 760, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 8, 1016, 760, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 8, 888, 752, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 0, 760, 768, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 8, 624, 760, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 8, 352, 760, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 8, 480, 760, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 8, 312, 760, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 16, 272, 752, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 8, 184, 760, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 8, 224, 760, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 760, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 8, 136, 760, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
					RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 760, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
				}
				public Label lblMouldRoomLabel()
				{
					return (Label)super.getControl(2);
				}
				public Label lblImmobTypeLabel()
				{
					return (Label)super.getControl(3);
				}
				public Label lblIMRTLabel()
				{
					return (Label)super.getControl(5);
				}
				public Label lblGatingOptionsLabel()
				{
					return (Label)super.getControl(7);
				}
				public Label lblOralContrastLabel()
				{
					return (Label)super.getControl(9);
				}
				public Label lblCCCLLabel()
				{
					return (Label)super.getControl(11);
				}
				public Label lblIVContrastLabel()
				{
					return (Label)super.getControl(13);
				}
				public Label lblPetCTLabel()
				{
					return (Label)super.getControl(15);
				}
				public Label lblSimulationLabel()
				{
					return (Label)super.getControl(18);
				}
				public Label lblPEGLabel()
				{
					return (Label)super.getControl(21);
				}
				public Label lblDentistLabel()
				{
					return (Label)super.getControl(24);
				}
				public Label lblMRICoRegLabel()
				{
					return (Label)super.getControl(27);
				}
				public Label lblPlanningCTLabel()
				{
					return (Label)super.getControl(30);
				}
				public Label lblSessLabel()
				{
					return (Label)super.getControl(33);
				}
				public cmbMouldRoomReqComboBox cmbMouldRoomReq()
				{
					return (cmbMouldRoomReqComboBox)super.getComboBox(0);
				}
				public cmbImmobTypeReqComboBox cmbImmobTypeReq()
				{
					return (cmbImmobTypeReqComboBox)super.getComboBox(1);
				}
				public cmbIMRTReqComboBox cmbIMRTReq()
				{
					return (cmbIMRTReqComboBox)super.getComboBox(2);
				}
				public cmbGatingOptionsReqComboBox cmbGatingOptionsReq()
				{
					return (cmbGatingOptionsReqComboBox)super.getComboBox(3);
				}
				public cmbOralContrastReqComboBox cmbOralContrastReq()
				{
					return (cmbOralContrastReqComboBox)super.getComboBox(4);
				}
				public cmbCCCLComboBox cmbCCCL()
				{
					return (cmbCCCLComboBox)super.getComboBox(5);
				}
				public cmbIVContrastReqComboBox cmbIVContrastReq()
				{
					return (cmbIVContrastReqComboBox)super.getComboBox(6);
				}
				public cmbPetCTDefaultComboBox cmbPetCTDefault()
				{
					return (cmbPetCTDefaultComboBox)super.getComboBox(7);
				}
				public cmbPETCTReqComboBox cmbPETCTReq()
				{
					return (cmbPETCTReqComboBox)super.getComboBox(8);
				}
				public cmbSimulationDefaultComboBox cmbSimulationDefault()
				{
					return (cmbSimulationDefaultComboBox)super.getComboBox(9);
				}
				public cmbSimulationReqComboBox cmbSimulationReq()
				{
					return (cmbSimulationReqComboBox)super.getComboBox(10);
				}
				public cmbPegDefaultComboBox cmbPegDefault()
				{
					return (cmbPegDefaultComboBox)super.getComboBox(11);
				}
				public cmbPegReqComboBox cmbPegReq()
				{
					return (cmbPegReqComboBox)super.getComboBox(12);
				}
				public cmbDentistDefaultComboBox cmbDentistDefault()
				{
					return (cmbDentistDefaultComboBox)super.getComboBox(13);
				}
				public cmbDentistReqComboBox cmbDentistReq()
				{
					return (cmbDentistReqComboBox)super.getComboBox(14);
				}
				public cmbMRIDefaultComboBox cmbMRIDefault()
				{
					return (cmbMRIDefaultComboBox)super.getComboBox(15);
				}
				public cmbMRIReqComboBox cmbMRIReq()
				{
					return (cmbMRIReqComboBox)super.getComboBox(16);
				}
				public cmbPlanningDefaultComboBox cmbPlanningDefault()
				{
					return (cmbPlanningDefaultComboBox)super.getComboBox(17);
				}
				public cmbPlanningCTReqComboBox cmbPlanningCTReq()
				{
					return (cmbPlanningCTReqComboBox)super.getComboBox(18);
				}
				public cmbSessDefaultComboBox cmbSessDefault()
				{
					return (cmbSessDefaultComboBox)super.getComboBox(19);
				}
				public cmbPlanSessReqComboBox cmbPlanSessReq()
				{
					return (cmbPlanSessReqComboBox)super.getComboBox(20);
				}
				public grdMouldRoomGrid grdMouldRoom()
				{
					return (grdMouldRoomGrid)super.getGrid(0);
				}
				public grdImmobTypeGrid grdImmobType()
				{
					return (grdImmobTypeGrid)super.getGrid(1);
				}
				public grdIMRTGrid grdIMRT()
				{
					return (grdIMRTGrid)super.getGrid(2);
				}
				public grdGatingOptionsGrid grdGatingOptions()
				{
					return (grdGatingOptionsGrid)super.getGrid(3);
				}
				public grdOralContrastGrid grdOralContrast()
				{
					return (grdOralContrastGrid)super.getGrid(4);
				}
				public grdIVContrastGrid grdIVContrast()
				{
					return (grdIVContrastGrid)super.getGrid(5);
				}
			}
			public static class cmbClinicalTrialComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.ClinicalTrialName value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.ClinicalTrialName value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.ClinicalTrialName value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.ClinicalTrialName value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.ClinicalTrialName value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.ClinicalTrialName getValue()
				{
					return (ims.oncology.vo.lookups.ClinicalTrialName)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.ClinicalTrialName value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbStatComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTreatSiteComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.eas.vo.TreatmentSiteNameVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.eas.vo.TreatmentSiteNameVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.eas.vo.TreatmentSiteNameVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.eas.vo.TreatmentSiteNameVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.eas.vo.TreatmentSiteNameVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.eas.vo.TreatmentSiteNameVo getValue()
				{
					return (ims.eas.vo.TreatmentSiteNameVo)super.control.getValue();
				}
				public void setValue(ims.eas.vo.TreatmentSiteNameVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPrimTumourComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.eas.vo.PrimaryTumourNameVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.eas.vo.PrimaryTumourNameVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.eas.vo.PrimaryTumourNameVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.eas.vo.PrimaryTumourNameVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.eas.vo.PrimaryTumourNameVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.eas.vo.PrimaryTumourNameVo getValue()
				{
					return (ims.eas.vo.PrimaryTumourNameVo)super.control.getValue();
				}
				public void setValue(ims.eas.vo.PrimaryTumourNameVo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class GroupYesNoRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 208, 104, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper89.getX(), anchoringHelper89.getY(), anchoringHelper89.getWidth(), "No", startTabIndex.intValue() + 20);
					RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 152, 104, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper90.getX(), anchoringHelper90.getY(), anchoringHelper90.getWidth(), "Yes", startTabIndex.intValue() + 18);
				}
				public void setText(GroupYesNoEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupYesNoEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupYesNoEnumeration.None;
						case 0: return GroupYesNoEnumeration.rdoNo;
						case 1: return GroupYesNoEnumeration.rdoYes;
					}
					return null;
				}
				public void setValue(GroupYesNoEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupYesNoEnumeration.None.id);
				}
				public boolean isEnabled(GroupYesNoEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupYesNoEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupYesNoEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupYesNoEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupYesNoEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupYesNoEnumeration None = new GroupYesNoEnumeration(-1);
				public static GroupYesNoEnumeration rdoNo = new GroupYesNoEnumeration(0);
				public static GroupYesNoEnumeration rdoYes = new GroupYesNoEnumeration(1);
				private GroupYesNoEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupYesNoEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 571, 16, 240, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccRecordingForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper91.getSize(), instance1, startTabIndex.intValue() + 16, skipContextValidation);
				//ims.framework.Control m_ccRecordingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(571), new Integer(16), new Integer(240), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 16), m_ccRecordingForm, instance1 } );
				ims.framework.Control m_ccRecordingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1089),  new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 16), m_ccRecordingForm, instance1, Boolean.TRUE } );
				super.addControl(m_ccRecordingControl);
				Menu[] menus1 = m_ccRecordingForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Container Clasess
				RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 0, 154, 824, 368, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_ctn = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
				addControl(m_ctn);
				ctnContainer ctn = (ctnContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnContainer.class, m_ctn, factory);
				ims.framework.utils.SizeInfo m_ctnDesignSize = new ims.framework.utils.SizeInfo(824, 368);
				ims.framework.utils.SizeInfo m_ctnRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper92.getWidth(), anchoringHelper92.getHeight());
				ctn.setContext(form, appForm, m_ctn, loader, form_images_local, contextMenus, startControlID, m_ctnDesignSize, m_ctnRuntimeSize, startTabIndex, skipContextValidation);
				super.addContainer(ctn);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 600, 144, 184, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Text Displayed on Instantiation", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinical Trial", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinical Trial Protocol?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 454, 47, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording DateTime", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 454, 18, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording User", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 533, 75, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Protocol Name", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 8, 75, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Site", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 8, 47, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Tumour", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 101, 16, 338, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(70), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 571, 45, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 101, 126, 338, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbClinicalTrialTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbClinicalTrialTemp);
				cmbClinicalTrialComboBox cmbClinicalTrial = (cmbClinicalTrialComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbClinicalTrialComboBox.class, m_cmbClinicalTrialTemp);
				super.addComboBox(cmbClinicalTrial);
				RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 571, 73, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbStatTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbStatTemp);
				cmbStatComboBox cmbStat = (cmbStatComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatComboBox.class, m_cmbStatTemp);
				super.addComboBox(cmbStat);
				RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 101, 73, 338, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTreatSiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbTreatSiteTemp);
				cmbTreatSiteComboBox cmbTreatSite = (cmbTreatSiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatSiteComboBox.class, m_cmbTreatSiteTemp);
				super.addComboBox(cmbTreatSite);
				RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 101, 45, 338, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPrimTumourTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbPrimTumourTemp);
				cmbPrimTumourComboBox cmbPrimTumour = (cmbPrimTumourComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPrimTumourComboBox.class, m_cmbPrimTumourTemp);
				super.addComboBox(cmbPrimTumour);
		
				// RadioButton Controls
				RadioButton tmpGroupYesNo = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupYesNo);
				GroupYesNoRadioButton GroupYesNo = (GroupYesNoRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupYesNoRadioButton.class, tmpGroupYesNo);
				GroupYesNo.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupYesNo);
			}

			public ims.core.forms.mosquery.IComponent ccRecording()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccRecordingValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccRecordingVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccRecordingVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccRecordingEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccRecordingEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ctnContainer ctn()
			{
				return (ctnContainer)super.getContainer(0);
			}
			public TextBox txtProtName()
			{
				return (TextBox)super.getControl(11);
			}
			public DateTimeControl dtimRecording()
			{
				return (DateTimeControl)super.getControl(12);
			}
			public cmbClinicalTrialComboBox cmbClinicalTrial()
			{
				return (cmbClinicalTrialComboBox)super.getComboBox(0);
			}
			public cmbStatComboBox cmbStat()
			{
				return (cmbStatComboBox)super.getComboBox(1);
			}
			public cmbTreatSiteComboBox cmbTreatSite()
			{
				return (cmbTreatSiteComboBox)super.getComboBox(2);
			}
			public cmbPrimTumourComboBox cmbPrimTumour()
			{
				return (cmbPrimTumourComboBox)super.getComboBox(3);
			}
			public GroupYesNoRadioButton GroupYesNo()
			{
				return (GroupYesNoRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabPhaseContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdPhasesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPhasesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolPhaseNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolPhaseNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolPhaseNameOpened()
				{
					super.row.showOpened(0);
				}
				public ims.eas.vo.lookups.PhaseNames getcolPhaseName()
				{
					return (ims.eas.vo.lookups.PhaseNames)super.row.get(0);
				}
				public void setcolPhaseName(ims.eas.vo.lookups.PhaseNames value)
				{
					super.row.set(0, value, true);
				}
				public void setCellcolPhaseNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolDoseReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolDoseReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolDoseOpened()
				{
					super.row.showOpened(1);
				}
				public Float getcolDose()
				{
					return (Float)super.row.get(1);
				}
				public void setcolDose(Float value)
				{
					super.row.set(1, value);
				}
				public void setCellcolDoseTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolFractionsReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolFractionsReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolFractionsOpened()
				{
					super.row.showOpened(2);
				}
				public Integer getcolFractions()
				{
					return (Integer)super.row.get(2);
				}
				public void setcolFractions(Integer value)
				{
					super.row.set(2, value);
				}
				public void setCellcolFractionsTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolDaysReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolDaysReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolDaysOpened()
				{
					super.row.showOpened(3);
				}
				public Integer getcolDays()
				{
					return (Integer)super.row.get(3);
				}
				public void setcolDays(Integer value)
				{
					super.row.set(3, value);
				}
				public void setCellcolDaysTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolModalityReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolModalityReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolModalityOpened()
				{
					super.row.showOpened(4);
				}
				public ims.ccosched.vo.lookups.Modality getcolModality()
				{
					return (ims.ccosched.vo.lookups.Modality)super.row.get(4);
				}
				public void setcolModality(ims.ccosched.vo.lookups.Modality value)
				{
					super.row.set(4, value, true);
				}
				public void setCellcolModalityTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolEnergyReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolEnergyReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolEnergyOpened()
				{
					super.row.showOpened(5);
				}
				public Float getcolEnergy()
				{
					return (Float)super.row.get(5);
				}
				public void setcolEnergy(Float value)
				{
					super.row.set(5, value);
				}
				public void setCellcolEnergyTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setcolUnitReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean iscolUnitReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showcolUnitOpened()
				{
					super.row.showOpened(6);
				}
				public ims.ccosched.vo.lookups.Unit getcolUnit()
				{
					return (ims.ccosched.vo.lookups.Unit)super.row.get(6);
				}
				public void setcolUnit(ims.ccosched.vo.lookups.Unit value)
				{
					super.row.set(6, value, true);
				}
				public void setCellcolUnitTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setcolPreferredReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean iscolPreferredReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showcolPreferredOpened()
				{
					super.row.showOpened(7);
				}
				public boolean getcolPreferred()
				{
					return ((Boolean)super.row.get(7)).booleanValue();
				}
				public void setcolPreferred(boolean value)
				{
					super.row.set(7, new Boolean(value));
				}
				public void setCellcolPreferredTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setcolActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean iscolActiveReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showcolActiveOpened()
				{
					super.row.showOpened(8);
				}
				public boolean getcolActive()
				{
					return ((Boolean)super.row.get(8)).booleanValue();
				}
				public void setcolActive(boolean value)
				{
					super.row.set(8, new Boolean(value));
				}
				public void setCellcolActiveTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public ims.eas.vo.ProtocolPhaseVo getValue()
				{
					return (ims.eas.vo.ProtocolPhaseVo)super.row.getValue();
				}
				public void setValue(ims.eas.vo.ProtocolPhaseVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPhasesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPhasesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPhasesRow get(int index)
				{
					return new grdPhasesRow(super.collection.get(index));
				}
				public grdPhasesRow newRow()
				{
					return new grdPhasesRow(super.collection.newRow());
				}
				public grdPhasesRow newRow(boolean autoSelect)
				{
					return new grdPhasesRow(super.collection.newRow(autoSelect));
				}
				public grdPhasesRow newRowAt(int index)
				{
					return new grdPhasesRow(super.collection.newRowAt(index));
				}
				public grdPhasesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPhasesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPhasesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addDecimalColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, int precision, int scale, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDecimalColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, precision, scale, validationString, bold, sortOrder, canGrow);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow, int maxLength)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow, maxLength);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.eas.vo.ProtocolPhaseVoCollection getValues()
				{
					ims.eas.vo.ProtocolPhaseVoCollection listOfValues = new ims.eas.vo.ProtocolPhaseVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.eas.vo.ProtocolPhaseVo getValue()
				{
					return (ims.eas.vo.ProtocolPhaseVo)super.grid.getValue();
				}
				public void setValue(ims.eas.vo.ProtocolPhaseVo value)
				{
					super.grid.setValue(value);
				}
				public grdPhasesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPhasesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPhasesRowCollection getRows()
				{
					return new grdPhasesRowCollection(super.grid.getRows());
				}
				public grdPhasesRow getRowByValue(ims.eas.vo.ProtocolPhaseVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPhasesRow(row);
				}
				public void setcolPhaseNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolPhaseNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public GridComboBox colPhaseNameComboBox()
				{
					return new GridComboBox(super.grid, 0);
				}
				public void setcolDoseHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolDoseHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolFractionsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolFractionsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolDaysHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolDaysHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolModalityHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolModalityHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public GridComboBox colModalityComboBox()
				{
					return new GridComboBox(super.grid, 4);
				}
				public void setcolEnergyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolEnergyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setcolUnitHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getcolUnitHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public GridComboBox colUnitComboBox()
				{
					return new GridComboBox(super.grid, 6);
				}
				public void setcolPreferredHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getcolPreferredHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setcolActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getcolActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 816, 504, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdPhasesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.EAS.contextMenuProtocolPhaseConfigMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPhasesTemp);
				grdPhasesGrid grdPhases = (grdPhasesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPhasesGrid.class, m_grdPhasesTemp);
				grdPhases.addComboBoxColumn("PhaseName", 0, 0, 100, false, true, false, false, true, -1);
				grdPhases.addDecimalColumn("Dose (Gy)", 0, 0, 100, false, true, 5, 2, "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", false, 0, true);
				grdPhases.addIntColumn("Fractions", 0, 0, 100, false, true, null, false, 0, true, 0);
				grdPhases.addIntColumn("Days", 0, 0, 50, false, true, null, false, 0, true, 0);
				grdPhases.addComboBoxColumn("Modality", 0, 0, 80, false, true, false, false, true, -1);
				grdPhases.addDecimalColumn("Energy", 0, 0, 50, false, true, 5, 2, "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", false, 0, true);
				grdPhases.addComboBoxColumn("Units", 0, 0, 80, false, true, false, false, true, -1);
				grdPhases.addBoolColumn("Preferred", 0, 0, 80, false, false, 0, true);
				grdPhases.addBoolColumn("Active", 0, 0, -1, false, false, 0, true);
				super.addGrid(grdPhases);
			}

			public grdPhasesGrid grdPhases()
			{
				return (grdPhasesGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 836, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSearch = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Protocol Summary", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSearchContainer m_tabSearchContainer = (tabSearchContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSearchContainer.class, m_tabSearch, factory);
			super.addContainer(m_tabSearch, m_tabSearchContainer);
			ims.framework.utils.SizeInfo m_tabSearchDesignSize = new ims.framework.utils.SizeInfo(836, 552);
			ims.framework.utils.SizeInfo m_tabSearchRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper109.getWidth(), anchoringHelper109.getHeight());
			m_tabSearchContainer.setContext(form, appForm, m_tabSearch, loader, form_images_local, contextMenus, startControlID, m_tabSearchDesignSize, m_tabSearchRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 836, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabConfig = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Protocol Config", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabConfigContainer m_tabConfigContainer = (tabConfigContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabConfigContainer.class, m_tabConfig, factory);
			super.addContainer(m_tabConfig, m_tabConfigContainer);
			ims.framework.utils.SizeInfo m_tabConfigDesignSize = new ims.framework.utils.SizeInfo(836, 552);
			ims.framework.utils.SizeInfo m_tabConfigRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper110.getWidth(), anchoringHelper110.getHeight());
			m_tabConfigContainer.setContext(form, appForm, m_tabConfig, loader, form_images_local, contextMenus, startControlID, m_tabConfigDesignSize, m_tabConfigRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 836, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPhase = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Protocol Phases", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPhaseContainer m_tabPhaseContainer = (tabPhaseContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPhaseContainer.class, m_tabPhase, factory);
			super.addContainer(m_tabPhase, m_tabPhaseContainer);
			ims.framework.utils.SizeInfo m_tabPhaseDesignSize = new ims.framework.utils.SizeInfo(836, 552);
			ims.framework.utils.SizeInfo m_tabPhaseRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper111.getWidth(), anchoringHelper111.getHeight());
			m_tabPhaseContainer.setContext(form, appForm, m_tabPhase, loader, form_images_local, contextMenus, startControlID, m_tabPhaseDesignSize, m_tabPhaseRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabSearch().setVisible(false);
			tabConfig().setVisible(false);
			tabPhase().setVisible(false);
		}
		public void settabSearchEnabled(boolean value)
		{
			tabSearch().setEnabled(value);
		}
		public void settabConfigEnabled(boolean value)
		{
			tabConfig().setEnabled(value);
		}
		public void settabPhaseEnabled(boolean value)
		{
			tabPhase().setEnabled(value);
		}
		public void showtabSearch()
		{
			tabConfig().setVisible(false);
			tabPhase().setVisible(false);
			tabSearch().setVisible(true);
		}
		public void showtabConfig()
		{
			tabSearch().setVisible(false);
			tabPhase().setVisible(false);
			tabConfig().setVisible(true);
		}
		public void showtabPhase()
		{
			tabSearch().setVisible(false);
			tabConfig().setVisible(false);
			tabPhase().setVisible(true);
		}

		public tabSearchContainer tabSearch()
		{
			return (tabSearchContainer)super.layers.get(0);
		}
		public tabConfigContainer tabConfig()
		{
			return (tabConfigContainer)super.layers.get(1);
		}
		public tabPhaseContainer tabPhase()
		{
			return (tabPhaseContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getProtocol();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.EAS.contextMenuProtocolSearchMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.EAS.contextMenuProtocolSearchMenuNEWItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5080001)))
			contextMenus.EAS.contextMenuProtocolSearchMenu.add(contextMenus.EAS.contextMenuProtocolSearchMenuNEWItem);
		contextMenus.EAS.contextMenuProtocolSearchMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5080002)))
			contextMenus.EAS.contextMenuProtocolSearchMenu.add(contextMenus.EAS.contextMenuProtocolSearchMenuEDITItem);
		contextMenus.EAS.contextMenuProtocolSearchMenuVIEWItem = factory.createMenuItem(startControlID.intValue() + 3, "View", true, false, new Integer(102223), false, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5080003)))
			contextMenus.EAS.contextMenuProtocolSearchMenu.add(contextMenus.EAS.contextMenuProtocolSearchMenuVIEWItem);
		contextMenus.EAS.contextMenuProtocolSearchMenuCLONEItem = factory.createMenuItem(startControlID.intValue() + 4, "Clone", true, false, new Integer(102222), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5080004)))
			contextMenus.EAS.contextMenuProtocolSearchMenu.add(contextMenus.EAS.contextMenuProtocolSearchMenuCLONEItem);
		form.registerMenu(contextMenus.EAS.contextMenuProtocolSearchMenu);
		contextMenus.EAS.contextMenuProtocolPhaseConfigMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.EAS.contextMenuProtocolPhaseConfigMenuADDItem = factory.createMenuItem(startControlID.intValue() + 5, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5030001)))
			contextMenus.EAS.contextMenuProtocolPhaseConfigMenu.add(contextMenus.EAS.contextMenuProtocolPhaseConfigMenuADDItem);
		contextMenus.EAS.contextMenuProtocolPhaseConfigMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5030002)))
			contextMenus.EAS.contextMenuProtocolPhaseConfigMenu.add(contextMenus.EAS.contextMenuProtocolPhaseConfigMenuEDITItem);
		contextMenus.EAS.contextMenuProtocolPhaseConfigMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 7, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5030003)))
			contextMenus.EAS.contextMenuProtocolPhaseConfigMenu.add(contextMenus.EAS.contextMenuProtocolPhaseConfigMenuREMOVEItem);
		form.registerMenu(contextMenus.EAS.contextMenuProtocolPhaseConfigMenu);


		// Layer Clasess
		lyrProtocolLayer m_lyrProtocolLayer = (lyrProtocolLayer)LayerFlyweightFactory.getInstance().createLayer(lyrProtocolLayer.class, this, factory);
		super.addLayer(m_lyrProtocolLayer);
		m_lyrProtocolLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 176, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "View", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 600, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Phases", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 769, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 693, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 86, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 9, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrProtocolLayer lyrProtocol()
	{
		return (lyrProtocolLayer)super.getLayer(0);
	}
	public Button btnView()
	{
		return (Button)super.getControl(3);
	}
	public Button btnPhases()
	{
		return (Button)super.getControl(4);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(7);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(8);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				SelectGraphicalAssessment = new LocalFormName(102313);
			}
			public final FormName SelectGraphicalAssessment;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
		}
		public final CoreImages Core;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedProtocol = new ims.framework.ContextVariable("SelectedProtocol", prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__SelectedProtocol_" + componentIdentifier + "");
			cxl_PrimaryTumourConfigs = new ims.framework.ContextVariable("PrimaryTumourConfigs", prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__PrimaryTumourConfigs_" + componentIdentifier + "");
			cxl_TreatmentSiteConfigs = new ims.framework.ContextVariable("TreatmentSiteConfigs", prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__TreatmentSiteConfigs_" + componentIdentifier + "");
			cxl_Protocol = new ims.framework.ContextVariable("Protocol", prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier + "");
		}
		
		public boolean getSelectedProtocolIsNotNull()
		{
			return !cxl_SelectedProtocol.getValueIsNull(context);
		}
		public ims.eas.vo.ProtocolListVo getSelectedProtocol()
		{
			return (ims.eas.vo.ProtocolListVo)cxl_SelectedProtocol.getValue(context);
		}
		public void setSelectedProtocol(ims.eas.vo.ProtocolListVo value)
		{
			cxl_SelectedProtocol.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedProtocol = null;
		public boolean getPrimaryTumourConfigsIsNotNull()
		{
			return !cxl_PrimaryTumourConfigs.getValueIsNull(context);
		}
		public ims.eas.vo.PrimaryTumourNameVoCollection getPrimaryTumourConfigs()
		{
			return (ims.eas.vo.PrimaryTumourNameVoCollection)cxl_PrimaryTumourConfigs.getValue(context);
		}
		public void setPrimaryTumourConfigs(ims.eas.vo.PrimaryTumourNameVoCollection value)
		{
			cxl_PrimaryTumourConfigs.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrimaryTumourConfigs = null;
		public boolean getTreatmentSiteConfigsIsNotNull()
		{
			return !cxl_TreatmentSiteConfigs.getValueIsNull(context);
		}
		public ims.eas.vo.TreatmentSiteNameVoCollection getTreatmentSiteConfigs()
		{
			return (ims.eas.vo.TreatmentSiteNameVoCollection)cxl_TreatmentSiteConfigs.getValue(context);
		}
		public void setTreatmentSiteConfigs(ims.eas.vo.TreatmentSiteNameVoCollection value)
		{
			cxl_TreatmentSiteConfigs.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TreatmentSiteConfigs = null;
		public boolean getProtocolIsNotNull()
		{
			return !cxl_Protocol.getValueIsNull(context);
		}
		public ims.eas.vo.ProtocolVo getProtocol()
		{
			return (ims.eas.vo.ProtocolVo)cxl_Protocol.getValue(context);
		}
		public void setProtocol(ims.eas.vo.ProtocolVo value)
		{
			cxl_Protocol.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Protocol = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public EASNamespace EAS = new EASNamespace();
		public final class EASNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ProtocolSearchMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW = 1;
				public static final int EDIT = 2;
				public static final int VIEW = 3;
				public static final int CLONE = 4;
			}
			public void disableAllProtocolSearchMenuMenuItems()
			{
				this.contextMenuProtocolSearchMenuNEWItem.setEnabled(false);
				this.contextMenuProtocolSearchMenuEDITItem.setEnabled(false);
				this.contextMenuProtocolSearchMenuVIEWItem.setEnabled(false);
				this.contextMenuProtocolSearchMenuCLONEItem.setEnabled(false);
			}
			public void hideAllProtocolSearchMenuMenuItems()
			{
				this.contextMenuProtocolSearchMenuNEWItem.setVisible(false);
				this.contextMenuProtocolSearchMenuEDITItem.setVisible(false);
				this.contextMenuProtocolSearchMenuVIEWItem.setVisible(false);
				this.contextMenuProtocolSearchMenuCLONEItem.setVisible(false);
			}
			private Menu contextMenuProtocolSearchMenu;
			public ReadOnlyMenuItem getProtocolSearchMenuNEWItem()
			{
				return this.contextMenuProtocolSearchMenuNEWItem;
			}
			private MenuItem contextMenuProtocolSearchMenuNEWItem;
			public ReadOnlyMenuItem getProtocolSearchMenuEDITItem()
			{
				return this.contextMenuProtocolSearchMenuEDITItem;
			}
			private MenuItem contextMenuProtocolSearchMenuEDITItem;
			public ReadOnlyMenuItem getProtocolSearchMenuVIEWItem()
			{
				return this.contextMenuProtocolSearchMenuVIEWItem;
			}
			private MenuItem contextMenuProtocolSearchMenuVIEWItem;
			public ReadOnlyMenuItem getProtocolSearchMenuCLONEItem()
			{
				return this.contextMenuProtocolSearchMenuCLONEItem;
			}
			private MenuItem contextMenuProtocolSearchMenuCLONEItem;
			public final class ProtocolPhaseConfigMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 5;
				public static final int EDIT = 6;
				public static final int REMOVE = 7;
			}
			public void disableAllProtocolPhaseConfigMenuMenuItems()
			{
				this.contextMenuProtocolPhaseConfigMenuADDItem.setEnabled(false);
				this.contextMenuProtocolPhaseConfigMenuEDITItem.setEnabled(false);
				this.contextMenuProtocolPhaseConfigMenuREMOVEItem.setEnabled(false);
			}
			public void hideAllProtocolPhaseConfigMenuMenuItems()
			{
				this.contextMenuProtocolPhaseConfigMenuADDItem.setVisible(false);
				this.contextMenuProtocolPhaseConfigMenuEDITItem.setVisible(false);
				this.contextMenuProtocolPhaseConfigMenuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuProtocolPhaseConfigMenu;
			public ReadOnlyMenuItem getProtocolPhaseConfigMenuADDItem()
			{
				return this.contextMenuProtocolPhaseConfigMenuADDItem;
			}
			private MenuItem contextMenuProtocolPhaseConfigMenuADDItem;
			public ReadOnlyMenuItem getProtocolPhaseConfigMenuEDITItem()
			{
				return this.contextMenuProtocolPhaseConfigMenuEDITItem;
			}
			private MenuItem contextMenuProtocolPhaseConfigMenuEDITItem;
			public ReadOnlyMenuItem getProtocolPhaseConfigMenuREMOVEItem()
			{
				return this.contextMenuProtocolPhaseConfigMenuREMOVEItem;
			}
			private MenuItem contextMenuProtocolPhaseConfigMenuREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[181];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__SelectedProtocol_" + componentIdentifier, "BO-1114100003-ID", "ID_Protocol");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__SelectedProtocol_" + componentIdentifier, "BO-1114100003-PROTOCOLNAME", "ProtocolName");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__SelectedProtocol_" + componentIdentifier, "BO-1114100003-STATUS", "Status");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__SelectedProtocol_" + componentIdentifier, "BO-1114100003-RECORDINGDATETIME", "RecordingDateTime");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-ID", "ID_Protocol");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-PROTOCOLNAME", "ProtocolName");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-STATUS", "Status");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-RECORDINGDATETIME", "RecordingDateTime");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-CONSSESSREQUIRED", "ConsSessRequired");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-CONSSESSDEFAULT", "ConsSessDefault");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-PLANCTREQUIRED", "PlanCTRequired");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-PLANCTDEFAULT", "PlanCTDefault");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-APPROPCCCL", "AppropCCCL");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-MRICOREGREQUIRED", "MRICoRegRequired");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-MRIDEFAULT", "MRIDefault");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-DENTISTREQUIRED", "DentistRequired");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-DENTISTDEFAULT", "DentistDefault");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-PEGREQUIRED", "PegRequired");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-PEGDEFAULT", "PEGDefault");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-PETCTDEFAULT", "PetCTDefault");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-SIMLREQUIRED", "SimlRequired");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-SIMULATIONDEFAULT", "SimulationDefault");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-PETCTREQUIRED", "PetCTRequired");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-IVCONTRASTREQUIRED", "IVContrastRequired");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-IVCONTRASTDEFAULT", "IVContrastDefault");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-ORALCONTRASTREQUIRED", "OralContrastRequired");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-ORALCONTRASTDEFAULT", "OralContrastDefault");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-GATINGOPTSREQUIRED", "GatingOptsRequired");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-GATINGOPTSDEFAULT", "GatingOptsDefault");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-IMRTREQUIRED", "IMRTRequired");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-IMRTDEFAULT", "IMRTDefault");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-IMMOBTYPEREQUIRED", "ImmobTypeRequired");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-IMMOBTYPEDEFAULT", "ImmobTypeDefault");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-MOULDROOMREQUIRED", "MouldRoomRequired");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-MOULDROOMDEFAULT", "MouldRoomDefault");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-CLINTRIALPROTOCOL", "ClinTrialProtocol");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.ProtocolConfiguration.__internal_x_context__Protocol_" + componentIdentifier, "BO-1114100003-CLINICALTRIAL", "ClinicalTrial");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
