//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.forms.patienteaslist;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.StaleObjectException;
import ims.eas.forms.patienteaslist.GenForm.grdEasListRow;
import ims.eas.vo.EASStatusRecordVo;
import ims.eas.vo.ElectronicActionSheetVo;
import ims.eas.vo.PatientEASListSearchCriteriaVo;
import ims.eas.vo.PatientEasListVo;
import ims.eas.vo.PatientEasListVoCollection;
import ims.eas.vo.enums.EasAction;
import ims.eas.vo.lookups.EASStatus;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		//WDEV-19389 
		if (!(form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().EAS.getPatientEASListSearchCriteriaIsNotNull() && form.getGlobalContext().Core.getPatientShort().equals(form.getGlobalContext().EAS.getPatientEASListSearchCriteria().getPatient())))
			form.getGlobalContext().EAS.setPatientEASListSearchCriteria(null);
		
		if(form.getGlobalContext().EAS.getPatientEASListSearchCriteriaIsNotNull())
		{
			setSearchCriteria(form.getGlobalContext().EAS.getPatientEASListSearchCriteria());
		}
		//WDEV-19389 - end
		open();
	}

	private void initialise()
	{
		form.chkShowCancelledEAS().setValue(Boolean.FALSE);
	}

	private void open()
	{
		populateScreenFromData(form.chkShowCancelledEAS().getValue());
		
		if (form.getLocalContext().getselectedEAS() != null)
		{
			form.grdEasList().setValue(form.getLocalContext().getselectedEAS());
		}
		
		if (form.grdEasList().getSelectedRow() == null )
		{
			clearContexts();
		}
		else
			onGrdEasListSelectionChanged();
		
		updateControlsState();
	}
	
	private PatientEASListSearchCriteriaVo getSearchCriteria()
	{
		PatientEASListSearchCriteriaVo searchCriteria = new PatientEASListSearchCriteriaVo();
		
		searchCriteria.setShowCancelled(Boolean.TRUE.equals(form.chkShowCancelledEAS().getValue()) ? true : false);
		searchCriteria.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		return searchCriteria;
	}
	
	
	private void setSearchCriteria(PatientEASListSearchCriteriaVo patientEASListSearchCriteriaVo)
	{
		form.chkShowCancelledEAS().setValue(patientEASListSearchCriteriaVo.getShowCancelled());	
	}

	private void clearContexts()
	{
		form.getLocalContext().setselectedEAS(null);
		form.getLocalContext().setElectronicActionSheet(null);
		form.getGlobalContext().EAS.setElectronicActionSheet(null);
	}

	@Override
	protected void onGrdEasListSelectionChanged()
	{
		form.getLocalContext().setElectronicActionSheet(domain.getEas(form.grdEasList().getValue().getID_ElectronicActionSheet()));
		form.getGlobalContext().EAS.setElectronicActionSheet(domain.getEas(form.grdEasList().getValue().getID_ElectronicActionSheet()));
		form.getLocalContext().setselectedEAS(form.grdEasList().getValue());
		updateControlsState();
	}

	private void updateControlsState()
	{
		Boolean isRowSelected = form.grdEasList().getSelectedRow() != null;
		PatientEasListVo rowSelected = (form.grdEasList().getSelectedRow() != null ? form.grdEasList().getSelectedRow().getValue() : null);
		Boolean isDraft = isRowSelected && rowSelected.getEasStatus() != null && EASStatus.DRAFT.equals(rowSelected.getEasStatus().getStatus());
		Boolean isAwaitingAuthorisation = isRowSelected && rowSelected.getEasStatus() != null && EASStatus.AWAITING_AUTHORISATION.equals(rowSelected.getEasStatus().getStatus());
		Boolean isCancelled = isRowSelected && rowSelected.getEasStatus() != null && EASStatus.CANCELLED.equals(rowSelected.getEasStatus().getStatus());
		Boolean isAuthorised = isRowSelected && rowSelected.getEasStatus() != null && EASStatus.AUTHORISED.equals(rowSelected.getEasStatus().getStatus());
		Boolean isAnnotated = isRowSelected && rowSelected.getEasStatus() != null && EASStatus.ANNOTATED.equals(rowSelected.getEasStatus().getStatus());
		
		HcpLiteVo hcpLite = (HcpLiteVo) domain.getHcpLiteUser();
		Boolean isResponsibleMedic = hcpLite != null && HcpDisType.MEDICAL.equals(hcpLite.getHcpType()) && Boolean.TRUE.equals(hcpLite.getIsHCPaResponsibleHCP());
		Boolean isSeenByMedic = hcpLite != null && isRowSelected && rowSelected.getSeenBy() != null && HcpDisType.MEDICAL.equals(hcpLite.getHcpType()) && rowSelected.getSeenBy().equals(hcpLite);
		
		form.getContextMenus().EAS.getPatientEasListMenuNEWItem().setVisible(Boolean.TRUE);
		form.getContextMenus().EAS.getPatientEasListMenuVIEWItem().setVisible(isRowSelected);
		form.getContextMenus().EAS.getPatientEasListMenuVIEW_SUMMARYItem().setVisible(isRowSelected);
		form.getContextMenus().EAS.getPatientEasListMenuEDITItem().setVisible(isDraft);
		form.getContextMenus().EAS.getPatientEasListMenuCANCELItem().setVisible(isRowSelected && !isCancelled);
		form.getContextMenus().EAS.getPatientEasListMenuANNOTATEItem().setVisible(isRowSelected && (isAuthorised || isAnnotated));
		form.getContextMenus().EAS.getPatientEasListMenuAUTHORISEItem().setVisible(isRowSelected && isAwaitingAuthorisation && engine.hasRight(AppRight.CAN_AUTHORISE_EAS) && (isResponsibleMedic || isSeenByMedic));
		form.getContextMenus().EAS.getPatientEasListMenuPRINTItem().setVisible(isRowSelected && (isAuthorised || isAnnotated));
		form.getContextMenus().EAS.getPatientEasListMenuVIEW_HISTORYItem().setVisible(isRowSelected);
	}

	@Override
	protected void onChkShowCancelledEASValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setselectedEAS(null);
		form.getGlobalContext().EAS.setPatientEASListSearchCriteria(getSearchCriteria());//WDEV-19389 
		open();
	}

	private void populateScreenFromData(Boolean showCancelledEAS)
	{
		form.grdEasList().getRows().clear();

		PatientEasListVoCollection easCollection = domain.getEasCollectionForPatient(showCancelledEAS, form.getGlobalContext().Core.getPatientShort());

		for (int i = 0; i < easCollection.size(); i++)
		{
			grdEasListRow row = form.grdEasList().getRows().newRow();

			row.setColDateSeen(easCollection.get(i).getDateSeen() != null ? easCollection.get(i).getDateSeen().toString() : "");
			row.setColResponsibleHCP(easCollection.get(i).getResponsibleHcp() != null ? easCollection.get(i).getResponsibleHcp().toString() : "");
			row.setColTreatmentIntent(easCollection.get(i).getIntent() != null ? easCollection.get(i).getIntent().getText() : "");
			row.setColPrimaryTumour(easCollection.get(i).getPrimaryTumour() != null ? easCollection.get(i).getPrimaryTumour().getPrimaryTumour().getText() : "");
			row.setColTreatmentSite(easCollection.get(i).getTreatmentSite() != null ? easCollection.get(i).getTreatmentSite().getTreatmentSite().getText() : "");

			if (easCollection.get(i).getRecordingInfo() != null)
			{
				row.setColDateRecorded(easCollection.get(i).getRecordingInfo().getRecordingDateTime() != null ? easCollection.get(i).getRecordingInfo().getRecordingDateTime().toString() : "");
				row.setColRecordedBy(easCollection.get(i).getRecordingInfo().getRecordingUser() != null ? easCollection.get(i).getRecordingInfo().getRecordingUser().toString() : "");
			}

			if (easCollection.get(i).getEasStatus() != null && EASStatus.CANCELLED.equals(easCollection.get(i).getEasStatus().getStatus()))
			{
				row.setBackColor(ims.framework.utils.Color.LightGray);
				row.setTooltip(easCollection.get(i).getEasStatus().getComment() != null ? "<b>Cancellation Reason:</b> " + easCollection.get(i).getEasStatus().getComment() : "");
			}
			
			row.setColEasStatus(easCollection.get(i).getEasStatus() != null ? easCollection.get(i).getEasStatus().getStatus().getText() : "");
			row.setColTpIndicator(Boolean.TRUE.equals(easCollection.get(i).getTPCreated()) ? Boolean.TRUE : Boolean.FALSE);
			row.setValue(easCollection.get(i));
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().EAS.CancellationReason) && DialogResult.OK.equals(result))
		{
			ElectronicActionSheetVo easToSave = form.getLocalContext().getElectronicActionSheet();
			
			//WDEV-17504
			EASStatusRecordVo easStatus = new EASStatusRecordVo();
			
			easStatus.setStatus(EASStatus.CANCELLED);
			easStatus.setRecordingDateTime(new DateTime());
			easStatus.setRecordingMos((MemberOfStaffLiteVo) domain.getMosUser());
			easStatus.setActionRequired(easToSave.getActionRequired());
			easStatus.setTPCreated(easToSave.getTPCreated());
			easStatus.setRemovalReason(easToSave.getRemovalReason());
			easStatus.setRemovedStat(easToSave.getRemovedStat());
			easStatus.setComment(form.getGlobalContext().Core.getCommentDialogString());
			
			easToSave.setEasStatus(easStatus);
			easToSave.getStatusHistory().add(easStatus);
			
			String[] errors = easToSave.validate();
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return;
			}
			
			try 
			{
				form.getLocalContext().setElectronicActionSheet(domain.saveEas(easToSave));
				form.getGlobalContext().EAS.setElectronicActionSheet(form.getLocalContext().getElectronicActionSheet());
			}
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
		}
		
		open();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EASNamespace.PatientEasListMenu.NEW:
				clearContexts();
				engine.open(form.getForms().EAS.PatientElectronicActionSheet, new  Object[]{(EasAction.NEW)});
				break;
			case GenForm.ContextMenus.EASNamespace.PatientEasListMenu.VIEW:
				engine.open(form.getForms().EAS.PatientElectronicActionSheet, new  Object[]{(EasAction.VIEW)});
				break;
			case GenForm.ContextMenus.EASNamespace.PatientEasListMenu.VIEW_SUMMARY:
				engine.open(form.getForms().EAS.PatientElectronicActionSheet, new  Object[]{(EasAction.VIEW_SUMMARY)});
				break;
			case GenForm.ContextMenus.EASNamespace.PatientEasListMenu.EDIT:
				engine.open(form.getForms().EAS.PatientElectronicActionSheet, new  Object[]{(EasAction.EDIT)});
				break;
			case GenForm.ContextMenus.EASNamespace.PatientEasListMenu.CANCEL:
				engine.open(form.getForms().EAS.CancellationReason);
				break;
			case GenForm.ContextMenus.EASNamespace.PatientEasListMenu.PRINT:
				engine.open(form.getForms().EAS.PatientElectronicActionSheet, new  Object[]{(EasAction.PRINT)});
				break;
			case GenForm.ContextMenus.EASNamespace.PatientEasListMenu.AUTHORISE:
				engine.open(form.getForms().EAS.PatientElectronicActionSheet, new  Object[]{(EasAction.AUTHORISE)});
				break;
			case GenForm.ContextMenus.EASNamespace.PatientEasListMenu.ANNOTATE:
				engine.open(form.getForms().EAS.PatientElectronicActionSheet, new  Object[]{(EasAction.ANNOTATE)});
				break;
			case GenForm.ContextMenus.EASNamespace.PatientEasListMenu.VIEW_HISTORY:
				form.getGlobalContext().EAS.setEasStatusHistory(form.getGlobalContext().EAS.getElectronicActionSheet().getStatusHistory());
				engine.open(form.getForms().EAS.EasStatusHistory);
				break;
		}
	}
}
