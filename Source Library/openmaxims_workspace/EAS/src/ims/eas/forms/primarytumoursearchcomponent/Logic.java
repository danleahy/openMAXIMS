//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 4847.21738)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.forms.primarytumoursearchcomponent;

import ims.eas.configuration.vo.PrimaryTumourRefVo;
import ims.eas.vo.PrimaryTumourInsVo;
import ims.eas.vo.PrimaryTumourInsVoCollection;
import ims.eas.vo.enums.PrimaryTumourQuery;

public class Logic extends BaseLogic
{ 
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	
	private void initialize() 
	{	
		form.getLocalContext().setMinNumChars(new Integer(1));
		clearControl();
	}
	
	private void clearControl() 
	{
		form.qmbPrimTumour().clear();
	}
	
	
	protected void onQmbPrimTumourValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setvalue((PrimaryTumourInsVo)form.qmbPrimTumour().getValue());
	}
	
	protected void onQmbPrimTumourTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setEventFired(PrimaryTumourQuery.TEXT_SUBMITTED);
		
		if (value == null || (value != null && value.length() < form.getLocalContext().getMinNumChars()))
		{
			engine.showMessage("Please enter at least " + form.getLocalContext().getMinNumChars() + " characters to search upon");
			return;
		}
		
			
		PrimaryTumourInsVoCollection ptColl=domain.listPrimaryTumour(value);
		
		if(ptColl == null)
			 return;
		
		form.qmbPrimTumour().setValue(null);
		form.qmbPrimTumour().clear();
		
		for(int i=0; i<ptColl.size(); i++)
		{
			form.qmbPrimTumour().newRow(ptColl.get(i), ptColl.get(i).getName());
		}
		if(ptColl.size() == 1)
		{
			form.qmbPrimTumour().setValue(ptColl.get(0));
			form.getLocalContext().setvalue((PrimaryTumourInsVo)form.qmbPrimTumour().getValue());
			form.getLocalContext().setEventFired(PrimaryTumourQuery.VALUE_CHANGED);
		}
		if(ptColl.size() > 1)
		{
			form.qmbPrimTumour().showOpened();
		}

	}

	
	public ims.eas.vo.enums.PrimaryTumourQuery getEventFired() 
	{
		return form.getLocalContext().getEventFired();
	}

	
	public void setMinRequiredCharsForSearch(Integer minChars) 
	{
		form.getLocalContext().setMinNumChars(minChars);
		
	}

	
	public PrimaryTumourInsVo getSelectedValue() 
	{
		return form.getLocalContext().getvalue();
	}

	public void setValue(PrimaryTumourRefVo vo) 
	{
		form.qmbPrimTumour().clear();
		form.qmbPrimTumour().setValue(null);
		form.getLocalContext().setvalue(null);
		
		if (vo == null)
		{					
			return;
		}

		if (vo.getID_PrimaryTumourIsNotNull())
		{
			PrimaryTumourInsVo voPt = domain.getPrimaryTumour(vo);
			if (voPt != null)
			{
				form.qmbPrimTumour().newRow(voPt, voPt.getPrimaryTumour().getText());
				form.qmbPrimTumour().setValue(domain.getPrimaryTumour(vo));
				form.getLocalContext().setvalue(voPt);
			}
		}
		
	}

	public void isRequired(Boolean required) 
	{
		if (required != null)
		{
			form.qmbPrimTumour().setRequired(required);
			form.getLocalContext().setIsRequired(required);
		}
	}

	public String getError(String labelName) 
	{
		if (form.getLocalContext().getIsRequiredIsNotNull() && form.getLocalContext().getIsRequired())
		{
			if(labelName == null || (labelName != null && labelName.length() == 0))
			{
				labelName = "Primary Tumour";
			}
			
			String label = labelName.charAt(labelName.length() - 1) == ' ' ? labelName : labelName + " ";
			
			if (form.qmbPrimTumour().getValue() == null)
				return new String(label + "is mandatory");
		}
		
		return null;
	}

	public void setVisable(Boolean visable) 
	{
		if (visable != null)
		{
			form.qmbPrimTumour().setVisible(visable);
		}	
	}

	public void setEnabled(Boolean enabled) 
	{
		if (enabled != null)
		{
			form.qmbPrimTumour().setEnabled(enabled);
		}			
	}
	
}
