//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.forms.primarytumourconfiguration;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.eas.forms.primarytumourconfiguration.GenForm.ctnDetailsContainer.lyrPrimaryTumourLayer.tabTumourDetailsContainer.grdAgentsRow;
import ims.eas.forms.primarytumourconfiguration.GenForm.ctnDetailsContainer.lyrPrimaryTumourLayer.tabTumourDetailsContainer.grdTreatmentSiteRow;
import ims.eas.forms.primarytumourconfiguration.GenForm.grdTumourConfigRow;
import ims.eas.vo.ClinicalTrialLinkVo;
import ims.eas.vo.ClinicalTrialLinkVoCollection;
import ims.eas.vo.PrimaryTumourVo;
import ims.eas.vo.PrimaryTumourVoCollection;
import ims.eas.vo.TreatmentSiteNameVo;
import ims.eas.vo.TreatmentSiteNameVoCollection;
import ims.eas.vo.lookups.Agents;
import ims.eas.vo.lookups.AgentsCollection;
import ims.eas.vo.lookups.LookupHelper;
import ims.eas.vo.lookups.PrimaryTumourCollection;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.oncology.vo.lookups.ClinicalTrialName;
import ims.oncology.vo.lookups.ClinicalTrialNameCollection;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String COLUMN_CLINICAL_TRIAL = "-1";
	private static final String CLINICAL_TRIAL_SELECTED = "-2";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	private void open()
	{
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch();
		
		if (form.getLocalContext().getSelectedTumourConfig() != null)
		{
			form.grdTumourConfig().setValue(form.getLocalContext().getSelectedTumourConfig());
			populateContainerDetails();
		}
		else
			clearContainer();

		form.setMode(FormMode.VIEW);
	}

	private void clearContainer()
	{
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbPrimaryTumour().setValue(null);
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbStatus().setValue(null);
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdTreatmentSite().getRows().clear();
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().clear();
		form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getRows().clear();
		form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getColumns().clear();
	}

	private void populateContainerDetails()
	{
		clearContainer();
		form.ctnDetails().lyrPrimaryTumour().showtabTumourDetails();

		if (form.getLocalContext().getSelectedTumourConfig() == null || form.getLocalContext().getSelectedTumourConfig().getID_PrimaryTumour() == null)
			return;

		PrimaryTumourVo updatedTumourConfig = domain.getTumourConfiguration(form.getLocalContext().getSelectedTumourConfig().getID_PrimaryTumour());
		form.getLocalContext().setSelectedTumourConfig(updatedTumourConfig);

		if (!form.getLocalContext().getSelectedTumourConfig().getPrimaryTumour().isActive())
		{
			form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbPrimaryTumour().newRow(form.getLocalContext().getSelectedTumourConfig().getPrimaryTumour(), form.getLocalContext().getSelectedTumourConfig().getPrimaryTumour().getText());
		}

		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbPrimaryTumour().setValue(form.getLocalContext().getSelectedTumourConfig().getPrimaryTumour());
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbStatus().setValue(form.getLocalContext().getSelectedTumourConfig().getStatus());

		populateTreatmentSitesGridWithValues();
		populateAgentsGridWithValues();
		populateClinicalTrialsGrid();
	}

	private void populateClinicalTrialsGrid()
	{
		createClinicalTrialColumns(getTreatmentSites());

		ClinicalTrialLinkVoCollection clinicalTrialsCollection = form.getLocalContext().getSelectedTumourConfig().getClinicalTrials();

		ClinicalTrialNameCollection addedClinicalTrials = new ClinicalTrialNameCollection();

		for (int i = 0; i < clinicalTrialsCollection.size(); i++)
		{
			if (!addedClinicalTrials.contains(clinicalTrialsCollection.get(i).getClinicalTrial()))
			{
				addedClinicalTrials.add(clinicalTrialsCollection.get(i).getClinicalTrial());

				DynamicGridRow newRow = form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getRows().newRow();
				newRow.setSelectable(Boolean.FALSE);
				newRow.setValue(clinicalTrialsCollection.get(i).getClinicalTrial());

				DynamicGridCell cellClinicalTrial = newRow.getCells().newCell(getColumnById(COLUMN_CLINICAL_TRIAL), DynamicCellType.STRING);
				cellClinicalTrial.setValue(clinicalTrialsCollection.get(i).getClinicalTrial().getText());
				cellClinicalTrial.setTooltip(clinicalTrialsCollection.get(i).getClinicalTrial().getText());
				cellClinicalTrial.setReadOnly(Boolean.TRUE);

				DynamicGridCell cellSelectedClinicalTrial = newRow.getCells().newCell(getColumnById(CLINICAL_TRIAL_SELECTED), DynamicCellType.BOOL);
				cellSelectedClinicalTrial.setValue(Boolean.TRUE);
				cellSelectedClinicalTrial.setReadOnly(Boolean.FALSE);
				cellSelectedClinicalTrial.setAutoPostBack(Boolean.TRUE);

				for (int j = 0; j < clinicalTrialsCollection.size(); j++)
				{
					if (clinicalTrialsCollection.get(i).getClinicalTrial().equals(clinicalTrialsCollection.get(j).getClinicalTrial()) && clinicalTrialsCollection.get(j).getTreatmentSite() != null)
					{
						DynamicGridCell cellTreatmentSite = newRow.getCells().newCell(getColumnById(((Integer) clinicalTrialsCollection.get(j).getTreatmentSite().getID()).toString()), DynamicCellType.BOOL);
						cellTreatmentSite.setValue(Boolean.TRUE);
						cellTreatmentSite.setReadOnly(Boolean.TRUE);
						cellTreatmentSite.setBackColor(null);
						cellTreatmentSite.setTooltip(clinicalTrialsCollection.get(i).getClinicalTrial().getText()); //WDEV-17527
					}
				}
			}
		}

		setUnselectedSitesToFalse();
	}

	private void populateAgentsGridWithValues()
	{
		AgentsCollection agentsCollection = form.getLocalContext().getSelectedTumourConfig().getAgents();

		for (int i = 0; i < agentsCollection.size(); i++)
		{
			grdAgentsRow newAgent = form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().newRow();
			newAgent.setcolName(agentsCollection.get(i).getText());
			newAgent.setTooltipForcolName(agentsCollection.get(i).getText());

			if (form.getLocalContext().getSelectedTumourConfig().getDefaultAgent() != null && form.getLocalContext().getSelectedTumourConfig().getDefaultAgent().equals(agentsCollection.get(i)))
			{
				newAgent.setcolDefault(Boolean.TRUE);
			}

			newAgent.setcolSelect(Boolean.TRUE);
			newAgent.setValue(agentsCollection.get(i));
		}
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doEdit();
	}

	private void doEdit()
	{
		form.ctnDetails().lyrPrimaryTumour().showtabTumourDetails();
		populateTreatmentSitesGrid(domain.getActiveTreatmentSites());
		checkTreatmentSitesUsed();
		populateAgentsGridWithLookups();
		checkAgentsUsed();
		removePreactiveOrActiveLookup();
		form.setMode(FormMode.EDIT);
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbStatus().setFocus();
	}

	private void checkTreatmentSitesUsed()
	{
		TreatmentSiteNameVoCollection treatmentSites = form.getLocalContext().getSelectedTumourConfig().getTreatmentSites();

		if (treatmentSites == null || treatmentSites.size() == 0)
			return;

		for (int i = 0; i < form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdTreatmentSite().getRows().size(); i++)
		{
			grdTreatmentSiteRow currentRow = form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdTreatmentSite().getRows().get(i);

			for (int j = 0; j < treatmentSites.size(); j++)
			{
				if (currentRow.getValue().getID_TreatmentSites().equals(treatmentSites.get(j).getID_TreatmentSites()))
				{
					currentRow.setcolSelect(Boolean.TRUE);
					
					if (PreActiveActiveInactiveStatus.INACTIVE.equals(treatmentSites.get(j).getStatus()))
					{
						currentRow.setBackColor(Color.LightGray);
					}
				}
			}
		}
	}

	private void checkAgentsUsed()
	{
		AgentsCollection agents = form.getLocalContext().getSelectedTumourConfig().getAgents();

		if (agents == null || agents.size() == 0)
			return;

		for (int i = 0; i < form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().size(); i++)
		{
			grdAgentsRow currentRow = form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().get(i);

			for (int j = 0; j < agents.size(); j++)
			{
				if (currentRow.getValue().getID() == agents.get(j).getID())
				{
					currentRow.setcolSelect(Boolean.TRUE);
				}

				if (form.getLocalContext().getSelectedTumourConfig().getDefaultAgent() != null && currentRow.getValue().getID() == form.getLocalContext().getSelectedTumourConfig().getDefaultAgent().getID())
				{
					currentRow.setcolDefault(Boolean.TRUE);
				}
			}
		}
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	private void newInstance()
	{
		clearContainer();
		form.getLocalContext().setSelectedTumourConfig(null);
		form.grdTumourConfig().setValue(null);
		form.ctnDetails().lyrPrimaryTumour().showtabTumourDetails();
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbStatus().setValue(PreActiveActiveInactiveStatus.PREACTIVE);

		populateFromPrimaryTumourComboWithoutActiveConfigs();
		populateTreatmentSitesGrid(domain.getActiveTreatmentSites());
		populateAgentsGridWithLookups();
		removePreactiveOrActiveLookup();

		form.setMode(FormMode.EDIT);
	}

	private void populateFromPrimaryTumourComboWithoutActiveConfigs()
	{
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbPrimaryTumour().clear();
		PrimaryTumourCollection lkpPrimaryTumourCollection = LookupHelper.getPrimaryTumour(domain.getLookupService());

		if (lkpPrimaryTumourCollection == null)
			return;

		PrimaryTumourVoCollection activeTumours = domain.getPrimaryTumours(null, PreActiveActiveInactiveStatus.ACTIVE);

		if (activeTumours != null && activeTumours.size() > 0)
		{
			for (int j = 0; activeTumours != null && j < activeTumours.size(); j++)
			{
				if (lkpPrimaryTumourCollection.contains(activeTumours.get(j).getPrimaryTumour()))
				{
					lkpPrimaryTumourCollection.remove(activeTumours.get(j).getPrimaryTumour());
				}
			}
		}

		for (int i = 0; lkpPrimaryTumourCollection != null && i < lkpPrimaryTumourCollection.size(); i++)
		{
			form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbPrimaryTumour().newRow(lkpPrimaryTumourCollection.get(i), lkpPrimaryTumourCollection.get(i).getText());
		}
	}

	private void populateAgentsGridWithLookups()
	{
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().clear();
		AgentsCollection lkpAgentsCollection = LookupHelper.getAgents(domain.getLookupService());

		if (lkpAgentsCollection == null)
			return;

		List<Agents> agents = new ArrayList<Agents>();
		 
		for (int a = 0; a < lkpAgentsCollection.size(); a++)
		{
			agents.add(lkpAgentsCollection.get(a));
		}
		 
		Collections.sort(agents , new StringComparator(SortOrder.ASCENDING));

		
		for (int i = 0; i < agents.size(); i++)
		{
			grdAgentsRow newAgent = form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().newRow();
			newAgent.setcolName(agents.get(i).getText());
			newAgent.setTooltipForcolName(agents.get(i).getText());
			newAgent.setcolSelect(Boolean.FALSE);
			newAgent.setcolDefault(Boolean.FALSE);
			newAgent.setValue(agents.get(i));
		}
	}

	private void populateTreatmentSitesGridWithValues()
	{
		TreatmentSiteNameVoCollection treatmentSitesCollection = form.getLocalContext().getSelectedTumourConfig().getTreatmentSites();

		for (int i = 0; i < treatmentSitesCollection.size(); i++)
		{
			grdTreatmentSiteRow newTreatmentSite = form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdTreatmentSite().getRows().newRow();
			newTreatmentSite.setcolName(treatmentSitesCollection.get(i).getTreatmentSite().getText());
			newTreatmentSite.setTooltipForcolName(treatmentSitesCollection.get(i).getTreatmentSite().getText());
			newTreatmentSite.setcolSelect(Boolean.TRUE);
			newTreatmentSite.setValue(treatmentSitesCollection.get(i));
			
			if (PreActiveActiveInactiveStatus.INACTIVE.equals(treatmentSitesCollection.get(i).getStatus()))
			{
				newTreatmentSite.setBackColor(Color.LightGray);
			}
		}
	}

	
	private void populateTreatmentSitesGrid(TreatmentSiteNameVoCollection treatmentSites)
	{
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdTreatmentSite().getRows().clear();
		
		if (treatmentSites == null)
			return;
		
		TreatmentSiteNameVoCollection savedTreatmentSites = (form.getLocalContext().getSelectedTumourConfig() != null ? form.getLocalContext().getSelectedTumourConfig().getTreatmentSites() : null);

		//add inactive sites to the collection
		for (int j = 0; savedTreatmentSites != null && j < savedTreatmentSites.size(); j++)
		{
			
			if (PreActiveActiveInactiveStatus.INACTIVE.equals(savedTreatmentSites.get(j).getStatus()))
			{
				treatmentSites.add(savedTreatmentSites.get(j));
			}
		}
		
		treatmentSites.sort(new StringComparator(SortOrder.ASCENDING));
		
		for (TreatmentSiteNameVo treatmentSite : treatmentSites)
		{
			grdTreatmentSiteRow newTreatmentSite = form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdTreatmentSite().getRows().newRow();

			newTreatmentSite.setcolName(treatmentSite.getTreatmentSite().getText());
			newTreatmentSite.setTooltipForcolName(treatmentSite.getTreatmentSite().getText());
			newTreatmentSite.setcolSelect(Boolean.FALSE);
			newTreatmentSite.setValue(treatmentSite);
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			searchAndSelect();
		}
	}

	private void searchAndSelect()
	{
		doSearch();
		form.grdTumourConfig().setValue(form.getLocalContext().getSelectedTumourConfig());

		if (form.grdTumourConfig().getSelectedRow() == null)
		{
			form.getLocalContext().setSelectedTumourConfig(null);
		}

		populateContainerDetails();
		form.setMode(FormMode.VIEW);
	}

	private boolean save()
	{
		PrimaryTumourVo tumourConfig = populateDataFromScreen(form.getLocalContext().getSelectedTumourConfig());

		String[] errors = tumourConfig.validate(validateUiRules());

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		if (PreActiveActiveInactiveStatus.ACTIVE.equals(tumourConfig.getStatus()))
		{
			if (domain.checkAlreadyActive(tumourConfig))
			{
				engine.showMessage("An Active Configuration for this Primary Tumour already exists.");
				return false;
			}
		}

		try
		{
			form.getLocalContext().setSelectedTumourConfig(domain.saveTumourConfig(tumourConfig));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			searchAndSelect();
			return false;
		}

		return true;
	}

	private String[] validateUiRules()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		TreatmentSiteNameVoCollection selectedTreatmentSites = getTreatmentSites();
		TreatmentSiteNameVoCollection domainActiveTreatmentSites = domain.getActiveTreatmentSites();

		
		for (int i = 0; i < selectedTreatmentSites.size(); i++)
		{
			if (PreActiveActiveInactiveStatus.ACTIVE.equals(selectedTreatmentSites.get(i).getStatus()) && (! domainActiveTreatmentSites.contains(selectedTreatmentSites.get(i))))
			{
				listOfErrors.add(selectedTreatmentSites.get(i).getTreatmentSite().getText() + " was Inactivated by another User. Please uncheck.");
			}
		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		return result;
	}

	private PrimaryTumourVo populateDataFromScreen(PrimaryTumourVo selectedTumourConfig)
	{
		if (selectedTumourConfig == null)
		{
			selectedTumourConfig = new PrimaryTumourVo();
		}

		selectedTumourConfig.setPrimaryTumour(form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbPrimaryTumour().getValue());
		selectedTumourConfig.setStatus(form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbStatus().getValue());

		selectedTumourConfig.setTreatmentSites(getTreatmentSites());
		selectedTumourConfig.setAgents(getAgents());
		selectedTumourConfig.setDefaultAgent(getDefaultAgent());
		selectedTumourConfig.setClinicalTrials(getClinicalTrials());

		return selectedTumourConfig;
	}

	private ClinicalTrialLinkVoCollection getClinicalTrials()
	{
		ClinicalTrialLinkVoCollection clinicalTrials = new ClinicalTrialLinkVoCollection();
		DynamicGridRowCollection trials = form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getRows();
		TreatmentSiteNameVoCollection treatmentSites = getTreatmentSites();

		for (int i = 0; i < trials.size(); i++)
		{
			DynamicGridCell cell = trials.get(i).getCells().get(getColumnById(CLINICAL_TRIAL_SELECTED));

			if (Boolean.TRUE.equals(cell.getValue()))
			{
				Boolean hasActiveSites = Boolean.FALSE;

				for (int j = 0; j < treatmentSites.size(); j++)
				{
					DynamicGridCell cellSite = cell.getRow().getCells().get(getColumnById(((Integer) treatmentSites.get(j).getTreatmentSite().getID()).toString()));

					if (cellSite != null && Boolean.TRUE.equals(cellSite.getValue()))
					{
						hasActiveSites = Boolean.TRUE;
						ClinicalTrialLinkVo clinicalTrialLink = new ClinicalTrialLinkVo();
						clinicalTrialLink.setClinicalTrial((ClinicalTrialName) trials.get(i).getValue());
						clinicalTrialLink.setTreatmentSite(treatmentSites.get(j).getTreatmentSite());
						clinicalTrials.add(clinicalTrialLink);
					}
				}

				if (!hasActiveSites)
				{
					ClinicalTrialLinkVo clinicalTrialLink = new ClinicalTrialLinkVo();
					clinicalTrialLink.setClinicalTrial((ClinicalTrialName) trials.get(i).getValue());
					clinicalTrials.add(clinicalTrialLink);
				}
			}
		}

		return clinicalTrials;
	}

	private TreatmentSiteNameVoCollection getTreatmentSites()
	{
		TreatmentSiteNameVoCollection treatmentsSelected = new TreatmentSiteNameVoCollection();

		for (int i = 0; i < form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdTreatmentSite().getRows().size(); i++)
		{
			grdTreatmentSiteRow row = form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdTreatmentSite().getRows().get(i);

			if (Boolean.TRUE.equals(row.getcolSelect()))
			{
				treatmentsSelected.add(row.getValue());
			}
		}

		return treatmentsSelected;
	}

	private AgentsCollection getAgents()
	{
		AgentsCollection agentsSelected = new AgentsCollection();

		for (int i = 0; i < form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().size(); i++)
		{
			grdAgentsRow row = form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().get(i);

			if (Boolean.TRUE.equals(row.getcolSelect()))
			{
				agentsSelected.add(row.getValue());
			}
		}

		return agentsSelected;
	}

	private Agents getDefaultAgent()
	{
		for (int i = 0; i < form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().size(); i++)
		{
			grdAgentsRow row = form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().get(i);

			if (Boolean.TRUE.equals(row.getcolDefault()))
			{
				return row.getValue(); // WDEV-18983 
			}
		}

		return null; // WDEV-18983 
	}

	@Override
	protected void onlyrPrimaryTumourTabChanged(ims.framework.LayerBridge tab)
	{
		if (FormMode.EDIT.equals(form.getMode()))
		{
			if (form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().equals(tab))
			{
				createClinicalTrialsGrid();

				if (form.getLocalContext().getSelectedTumourConfig() != null)
				{
					checkSelectedClinicalTrialsGrid();
				}
			}
			else
			{
				if (form.getLocalContext().getSelectedTumourConfig() == null)
					form.getLocalContext().setSelectedTumourConfig(new PrimaryTumourVo());

				form.getLocalContext().getSelectedTumourConfig().setClinicalTrials(getClinicalTrials());
			}
		}
	}

	private void checkSelectedClinicalTrialsGrid()
	{
		ClinicalTrialLinkVoCollection clinicalTrialsCollection = form.getLocalContext().getSelectedTumourConfig().getClinicalTrials();

		ClinicalTrialNameCollection addedClinicalTrials = new ClinicalTrialNameCollection();
		DynamicGridRowCollection rows = form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getRows();

		for (int i = 0; i < clinicalTrialsCollection.size(); i++)
		{
			if (!addedClinicalTrials.contains(clinicalTrialsCollection.get(i).getClinicalTrial()))
			{
				addedClinicalTrials.add(clinicalTrialsCollection.get(i).getClinicalTrial());

				for (int k = 0; k < rows.size(); k++)
				{
					if (rows.get(k).getValue().equals(clinicalTrialsCollection.get(i).getClinicalTrial()))
					{
						DynamicGridCell cellSelectedClinicalTrial = rows.get(k).getCells().get(getColumnById(CLINICAL_TRIAL_SELECTED));
						cellSelectedClinicalTrial.setValue(Boolean.TRUE);
						enableDisableSitesSelection(cellSelectedClinicalTrial);

						for (int j = 0; j < clinicalTrialsCollection.size(); j++)
						{
							if (clinicalTrialsCollection.get(i).getClinicalTrial().equals(clinicalTrialsCollection.get(j).getClinicalTrial()) && clinicalTrialsCollection.get(j).getTreatmentSite() != null)
							{
								DynamicGridCell cellTreatmentSite = rows.get(k).getCells().get(getColumnById(((Integer) clinicalTrialsCollection.get(j).getTreatmentSite().getID()).toString()));
								if (cellTreatmentSite != null)
								{
									cellTreatmentSite.setValue(Boolean.TRUE);
								}
								else
									form.getLocalContext().getSelectedTumourConfig().getClinicalTrials().get(j).setTreatmentSite(null);
							}
						}
					}
				}
			}
		}
	}

	private void setUnselectedSitesToFalse()
	{
		TreatmentSiteNameVoCollection treatmentSites = getTreatmentSites();
		DynamicGridRowCollection rows = form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getRows();

		for (int i = 0; i < rows.size(); i++)
		{
			for (int j = 0; j < treatmentSites.size(); j++)
			{
				DynamicGridCell siteCell = rows.get(i).getCells().get(getColumnById(((Integer) treatmentSites.get(j).getTreatmentSite().getID()).toString()));

				if (siteCell == null)
				{
					DynamicGridCell newSiteCell = rows.get(i).getCells().newCell(getColumnById(((Integer) treatmentSites.get(j).getTreatmentSite().getID()).toString()), DynamicCellType.BOOL);
					newSiteCell.setValue(Boolean.FALSE);
					newSiteCell.setTooltip(newSiteCell.getRow().getValue() != null ? newSiteCell.getRow().getValue().toString(): ""); //WDEV-17527
				}
			}
		}
	}

	private void createClinicalTrialsGrid()
	{
		TreatmentSiteNameVoCollection treatmentSites = getTreatmentSites();
		createClinicalTrialColumns(treatmentSites);
		populateClinicalTrialsGrid(treatmentSites);
	}

	private void createClinicalTrialColumns(TreatmentSiteNameVoCollection treatmentSites)
	{
		form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getColumns().clear();
		form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getRows().clear();

		DynamicGridColumn columnName = form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getColumns().newColumn("Clinical Trial", COLUMN_CLINICAL_TRIAL);
		columnName.setWidth(370);
		columnName.setAlignment(Alignment.LEFT);
		columnName.setReadOnly(Boolean.TRUE);

		columnName = form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getColumns().newColumn("Select", CLINICAL_TRIAL_SELECTED);
		columnName.setWidth(50);
		columnName.setHeaderAlignment(Alignment.CENTER);
		columnName.setAlignment(Alignment.CENTER);
		columnName.setReadOnly(Boolean.TRUE);

		for (int i = 0; i < treatmentSites.size(); i++)
		{
			columnName = form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getColumns().newColumn(treatmentSites.get(i).getTreatmentSite().getText(), ((Integer) treatmentSites.get(i).getTreatmentSite().getID()).toString());
			columnName.setWidth(110);
			columnName.setHeaderAlignment(Alignment.CENTER);
			columnName.setAlignment(Alignment.CENTER);
			columnName.setReadOnly(Boolean.TRUE);
		}
	}

	private void populateClinicalTrialsGrid(TreatmentSiteNameVoCollection treatmentSites)
	{

		ClinicalTrialNameCollection lkpClinicalTrialsCollection = ims.oncology.vo.lookups.LookupHelper.getClinicalTrialName(domain.getLookupService());

		if (lkpClinicalTrialsCollection == null)
			return;
		
		List<ClinicalTrialName> clinicalTrials = new ArrayList<ClinicalTrialName>();
		 
		for (int a = 0; a < lkpClinicalTrialsCollection.size(); a++)
		{
			clinicalTrials.add(lkpClinicalTrialsCollection.get(a));
		}
		 
		Collections.sort(clinicalTrials , new StringComparator(SortOrder.ASCENDING));

		DynamicGridRow newRow;

		for (int i = 0; i < clinicalTrials.size(); i++)
		{
			newRow = form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getRows().newRow();
			newRow.setSelectable(Boolean.FALSE);
			newRow.setValue(clinicalTrials.get(i));

			DynamicGridCell cellClinicalTrial = newRow.getCells().newCell(getColumnById(COLUMN_CLINICAL_TRIAL), DynamicCellType.STRING);
			cellClinicalTrial.setValue(clinicalTrials.get(i).getText());
			cellClinicalTrial.setTooltip(clinicalTrials.get(i).getText());
			cellClinicalTrial.setReadOnly(Boolean.TRUE);

			DynamicGridCell cellSelectedClinicalTrial = newRow.getCells().newCell(getColumnById(CLINICAL_TRIAL_SELECTED), DynamicCellType.BOOL);
			cellSelectedClinicalTrial.setValue(Boolean.FALSE);
			cellSelectedClinicalTrial.setReadOnly(Boolean.FALSE);
			cellSelectedClinicalTrial.setAutoPostBack(Boolean.TRUE);

			for (int j = 0; j < treatmentSites.size(); j++)
			{
				DynamicGridCell cellTreatmentSite = newRow.getCells().newCell(getColumnById(((Integer) treatmentSites.get(j).getTreatmentSite().getID()).toString()), DynamicCellType.BOOL);
				cellTreatmentSite.setValue(Boolean.FALSE);
				cellTreatmentSite.setReadOnly(Boolean.TRUE);
				cellTreatmentSite.setBackColor(Color.Red);
				cellTreatmentSite.setTooltip(clinicalTrials.get(i).getText()); //WDEV-17527
			}
		}
	}

	private DynamicGridColumn getColumnById(String identifier)
	{
		return form.ctnDetails().lyrPrimaryTumour().tabClinicalTrials().dyngrdClinicalTrials().getColumns().getByIdentifier(identifier);
	}

	@Override
	protected void onGrdTumourConfigSelectionChanged()
	{
		form.getLocalContext().setSelectedTumourConfig(form.grdTumourConfig().getValue());
		populatePrimaryTumourCombo();
		populateContainerDetails();
		updateControlsState();
	}

	private void populatePrimaryTumourCombo()
	{
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbPrimaryTumour().clear();
		PrimaryTumourCollection lkpPrimaryTumourCollection = LookupHelper.getPrimaryTumour(domain.getLookupService());

		if (lkpPrimaryTumourCollection == null)
			return;

		for (int i = 0; lkpPrimaryTumourCollection != null && i < lkpPrimaryTumourCollection.size(); i++)
		{
			form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbPrimaryTumour().newRow(lkpPrimaryTumourCollection.get(i), lkpPrimaryTumourCollection.get(i).getText());
		}
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}

	private void clearScreen()
	{
		form.cmbPrimaryTumourName().setValue(null);
		form.cmbStatusSearch().setValue(null);
		form.grdTumourConfig().getRows().clear();
		clearContainer();
	}

	private void updateControlsState()
	{
		form.ctnDetails().setCollapsed(form.grdTumourConfig().getSelectedRow() == null && form.getMode().equals(FormMode.VIEW));
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbPrimaryTumour().setEnabled(form.getMode().equals(FormMode.EDIT) && PreActiveActiveInactiveStatus.PREACTIVE.equals(form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbStatus().getValue()));

		form.btnEdit().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdTumourConfig().getSelectedRow() != null);
		form.btnEdit().setEnabled(form.getMode().equals(FormMode.VIEW) && form.grdTumourConfig().getSelectedRow() != null && (!PreActiveActiveInactiveStatus.INACTIVE.equals(form.grdTumourConfig().getSelectedRow().getValue().getStatus())));

		form.getContextMenus().EAS.getPrimaryTumourConfigMenuNEWItem().setVisible(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().EAS.getPrimaryTumourConfigMenuNEWItem().setEnabled(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().EAS.getPrimaryTumourConfigMenuEDITItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdTumourConfig().getSelectedRow() != null);
		form.getContextMenus().EAS.getPrimaryTumourConfigMenuEDITItem().setEnabled(form.getMode().equals(FormMode.VIEW) && form.grdTumourConfig().getSelectedRow() != null && (!PreActiveActiveInactiveStatus.INACTIVE.equals(form.grdTumourConfig().getSelectedRow().getValue().getStatus())));
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch();
	}

	private void doSearch()
	{
		populateTumourConfigurationGrid();
		clearContainer();
	}

	private void populateTumourConfigurationGrid()
	{
		form.grdTumourConfig().getRows().clear();
		PrimaryTumourVoCollection primaryTumours = domain.getPrimaryTumours(form.cmbPrimaryTumourName().getValue(), form.cmbStatusSearch().getValue());

		if (primaryTumours == null || primaryTumours.size() == 0)
		{
			form.getLocalContext().setSelectedTumourConfig(null);
			engine.showMessage("No results found.");
		}

		for (int i = 0; i < primaryTumours.size(); i++)
		{
			grdTumourConfigRow newRow = form.grdTumourConfig().getRows().newRow();
			newRow.setcolPrimaryTumour(primaryTumours.get(i).getPrimaryTumour().getText());
			newRow.setcolStatus(primaryTumours.get(i).getStatus().getText());
			newRow.setcolDate(primaryTumours.get(i).getSystemInformation().getLastupdateDateTime() != null ? primaryTumours.get(i).getSystemInformation().getLastupdateDateTime().toString() : primaryTumours.get(i).getSystemInformation().getCreationDateTime().toString());
			newRow.setValue(primaryTumours.get(i));
		}

		updateControlsState();
	}

	private void removePreactiveOrActiveLookup()
	{
		PreActiveActiveInactiveStatus status = form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbStatus().getValue();
		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbStatus().clear();

		PreActiveActiveInactiveStatusCollection lookupColl = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());

		for (int i = 0; lookupColl != null && i < lookupColl.size(); i++)
		{
			if (isStatusActive() && lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE))
				continue;

			if (isStatusInactive() && (lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE) || lookupColl.get(i).equals(PreActiveActiveInactiveStatus.ACTIVE)))
				continue;

			form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbStatus().newRow(lookupColl.get(i), lookupColl.get(i).toString(), lookupColl.get(i).getImage(), lookupColl.get(i).getColor());
		}

		form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().cmbStatus().setValue(status);
	}

	private boolean isStatusActive()
	{
		PrimaryTumourVo tumourConfigVo = form.getLocalContext().getSelectedTumourConfig();
		return tumourConfigVo != null && tumourConfigVo.getStatusIsNotNull() && tumourConfigVo.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE);
	}

	private boolean isStatusInactive()
	{
		PrimaryTumourVo tumourConfigVo = form.getLocalContext().getSelectedTumourConfig();
		return tumourConfigVo != null && tumourConfigVo.getStatusIsNotNull() && tumourConfigVo.getStatus().equals(PreActiveActiveInactiveStatus.INACTIVE);
	}

	@Override
	protected void onGrdAgentsGridCheckBoxClicked(int column, grdAgentsRow row, boolean isChecked) throws PresentationLogicException
	{
		if (column == 1 && isChecked)
		{
			resetDefaultRows(row);
			row.setcolSelect(Boolean.TRUE);
		}
		else if (column == 2 && (!isChecked) && Boolean.TRUE.equals(row.getcolDefault()))
		{
			row.setcolDefault(Boolean.FALSE);
		}
	}

	private void resetDefaultRows(grdAgentsRow selectedRow)
	{
		for (int i = 0; i < form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().size(); i++)
		{
			grdAgentsRow row = form.ctnDetails().lyrPrimaryTumour().tabTumourDetails().grdAgents().getRows().get(i);

			if (row.getValue() != selectedRow.getValue())
			{
				row.setcolDefault(Boolean.FALSE);
			}
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EASNamespace.PrimaryTumourConfigMenu.NEW:
				newInstance();
				break;
			case GenForm.ContextMenus.EASNamespace.PrimaryTumourConfigMenu.EDIT:
				doEdit();
				break;
		}
	}

	@Override
	protected void onDyngrdClinicalTrialsCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getColumn().equals(getColumnById(CLINICAL_TRIAL_SELECTED)))
		{
			enableDisableSitesSelection(cell);
		}
	}

	private void enableDisableSitesSelection(DynamicGridCell cell)
	{
		TreatmentSiteNameVoCollection treatmentSites = getTreatmentSites();

		for (int j = 0; j < treatmentSites.size(); j++)
		{
			DynamicGridCell siteColumn = cell.getRow().getCells().get(getColumnById(((Integer) treatmentSites.get(j).getTreatmentSite().getID()).toString()));

			if (Boolean.TRUE.equals(cell.getValue()))
			{
				siteColumn.setReadOnly(Boolean.FALSE);
				siteColumn.setBackColor(null);
			}
			else
			{
				siteColumn.setValue(Boolean.FALSE);
				siteColumn.setReadOnly(Boolean.TRUE);
				siteColumn.setBackColor(Color.Red);
			}
		}
	}
	
	public class StringComparator implements Comparator<Object>
	{
		private int direction = 1;

		public StringComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public StringComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
		}

		public int compare(Object  ob1,Object  ob2)
		{
			String name1 = null;
			String name2 = null;

			if (ob1 instanceof ClinicalTrialName)
			{
				ClinicalTrialName ct1 = (ClinicalTrialName) ob1;
				name1 = ct1.getText().toUpperCase();
			}
			else if (ob1 instanceof Agents)
			{
				Agents ct1 = (Agents) ob1;
				name1 = ct1.getText().toUpperCase();
			}
			else if (ob1 instanceof TreatmentSiteNameVo)
			{
				TreatmentSiteNameVo ct1 = (TreatmentSiteNameVo) ob1;
				name1 = ct1.getTreatmentSite().getText();
			}

			if (ob2 instanceof ClinicalTrialName)
			{
				ClinicalTrialName ct2 = (ClinicalTrialName) ob2;
				name2 = ct2.getText().toUpperCase();
			}
			else if (ob2 instanceof Agents)
			{
				Agents ct2 = (Agents) ob2;
				name2 = ct2.getText().toUpperCase();
			}
			else if (ob2 instanceof TreatmentSiteNameVo)
			{
				TreatmentSiteNameVo ct2 = (TreatmentSiteNameVo) ob2;
				name2 = ct2.getTreatmentSite().getText();
			}

			if (name1 != null)
				return name1.compareTo(name2) * direction;
			if (name2 != null)
				return (-1) * direction;

			return 0;
		}
	}
}
