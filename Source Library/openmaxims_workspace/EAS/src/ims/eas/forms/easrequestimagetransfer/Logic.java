//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 4847.21738)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.forms.easrequestimagetransfer;

import java.util.ArrayList;

import ims.ccosched.vo.lookups.SeenAt;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.eas.forms.easrequestimagetransfer.GenForm.grdImageTransferRow;
import ims.eas.vo.EASImageTransferVo;
import ims.eas.vo.EASImageTransferVoCollection;
import ims.eas.vo.ElectronicActionSheetVo;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.vo.lookups.EASImageType;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// OnFormOpen method required to bind lookups
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
	}

	/**
	* Initialise this component
	*/
	public void initialise()
	{
		// Initialise the summary information too
		form.getContextMenus().EAS.getProtocolPhaseConfigMenuADDItem().setEnabled(true);
		form.getContextMenus().EAS.getProtocolPhaseConfigMenuADDItem().setVisible(true);
		form.getContextMenus().EAS.getProtocolPhaseConfigMenuEDITItem().setEnabled(false);
		form.getContextMenus().EAS.getProtocolPhaseConfigMenuEDITItem().setVisible(false);
		form.setMode(FormMode.EDIT);
	}

	/**
	* Set the Electronic Action Sheet for view / edit
	*/
	public void setValue(ims.eas.vo.ElectronicActionSheetVo actionSheet)
	{
		
		form.grdImageTransfer().getRows().clear();
		
		if (actionSheet == null)
		{
			if (form.getLocalContext().getPatientEAS() != null )
				form.getLocalContext().getPatientEAS().setImageTransfers(null);
			return;
		}
			
		
		form.getLocalContext().setPatientEAS(actionSheet);

		// Load the grid with image transfer information from the actionSheet
		form.ccSummary().initialise(actionSheet.getPrimaryTumour().getPrimaryTumour(), actionSheet.getTreatmentSite().getTreatmentSite(), actionSheet.getProtocol(), actionSheet.getEasStatus().getStatus());

		if (actionSheet.getImageTransfers() == null)
			return;
		
		for (EASImageTransferVo transfer : actionSheet.getImageTransfers())
		{
			grdImageTransferRow row = form.grdImageTransfer().getRows().newRow();
			
			row.setcolASite(transfer.getAnatomicalSite());
			row.setCellcolASiteTooltip(transfer.getAnatomicalSite());
			
			row.setcolComment(transfer.getLocationTaken());
			row.setCellcolCommentTooltip(transfer.getLocationTaken());
			
			if (transfer.getImageTakenAtIsNotNull())
			{
				row.setcolLocation(transfer.getImageTakenAt());
				row.setCellcolLocationTooltip(transfer.getImageTakenAt().getText());	
			}

			row.setcolDate(transfer.getImageDate());
			row.setCellcolDateTooltip(transfer.getImageDate() != null ? transfer.getImageDate().toString(): "");
			
			row.setcolImageType(transfer.getImageType());
			row.setCellcolImageTypeTooltip(transfer.getImageType() != null ? transfer.getImageType().getText(): "");
			
			row.setValue(transfer);
		}
		
		updateControlsState();
	}

	/**
	* Save the given Electronic Action Sheet at component level.  Return true on success, otherwise return false
	*/
	public Boolean save()
	{
		ElectronicActionSheetVo eas = copyScreenToData();
		
		if (!validateData(true))
			return false;
		
		String errors[] = eas.validate(validateUiRules());
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			eas = domain.save(eas);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			setValue(domain.getEAS(form.getLocalContext().getPatientEAS()));
			return false;
		}
		
		// Update Local context with newly saved EAS
		form.getLocalContext().setPatientEAS(eas);
		return true;
	}

	private String[] validateUiRules()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		for (int i = 0; i < form.grdImageTransfer().getRows().size(); i++)
		{
			grdImageTransferRow row = form.grdImageTransfer().getRows().get(i);
			
			if (row.getcolLocation() == null)
			{
				listOfErrors.add("Please enter Location Taken.");
			}
		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		return result;
	}

	private boolean validateData(boolean bShowMessages) 
	{
		return true;
	}

	private ElectronicActionSheetVo copyScreenToData() 
	{
		ElectronicActionSheetVo eas = form.getLocalContext().getPatientEAS();
		if (eas == null)  // should never really be!
			eas = new ElectronicActionSheetVo();

		// Clear the collection and re-create
		EASImageTransferVoCollection coll =  eas.getImageTransfers();
		if (coll == null)
			coll = new EASImageTransferVoCollection();
		else
			coll.clear();
		
		Boolean removedSetToFalse = Boolean.FALSE;
		
		// Build up the image transfer details
		for (int i=0; i<form.grdImageTransfer().getRows().size(); i++)
		{
			grdImageTransferRow row = form.grdImageTransfer().getRows().get(i);
			EASImageTransferVo transfer = row.getValue();
			
			if (transfer == null)
			{
				transfer = new EASImageTransferVo();
				eas.setRemovedStat(Boolean.FALSE);
				removedSetToFalse = Boolean.TRUE;
			}
			//WDEV-17643
			else if (!removedSetToFalse)
			{
				if (Boolean.TRUE.equals(transfer.getImageRequested()))
				{
					eas.setRemovedStat(Boolean.TRUE);
				}
				else
				{
					eas.setRemovedStat(Boolean.FALSE);
					removedSetToFalse = Boolean.TRUE;
				}
			}
			
			transfer.setAnatomicalSite(row.getcolASite());
			transfer.setImageDate(row.getcolDate());
			transfer.setImageTakenAt((SeenAt) row.getcolLocation());
			transfer.setImageType((EASImageType) row.getcolImageType());
			transfer.setLocationTaken(row.getcolComment());

			coll.add(transfer);
		}
		
		eas.setImageTransfers(coll);
		
		return eas;
	}

	/**
	* Return the ElectronicActionSheet record
	*/
	public ims.eas.vo.ElectronicActionSheetVo getValue()
	{
		return (form.getLocalContext().getPatientEAS());
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EASNamespace.ProtocolPhaseConfigMenu.ADD:
				form.grdImageTransfer().getRows().newRow(true);
				updateControlsState();
				break;
				
			case GenForm.ContextMenus.EASNamespace.ProtocolPhaseConfigMenu.REMOVE:
				form.grdImageTransfer().getRows().remove(form.grdImageTransfer().getSelectedRowIndex());
				updateControlsState();
				break;
		}
	}

	protected void onGrdImageTransferSelectionChanged()	throws PresentationLogicException 
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.getContextMenus().EAS.getProtocolPhaseConfigMenuADDItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().EAS.getProtocolPhaseConfigMenuREMOVEItem().setVisible(form.grdImageTransfer().getSelectedRow() != null && form.getMode().equals(FormMode.EDIT));
	}

	protected void onGrdImageTransferSelectionCleared() throws PresentationLogicException 
	{
		updateControlsState();
	}
}
