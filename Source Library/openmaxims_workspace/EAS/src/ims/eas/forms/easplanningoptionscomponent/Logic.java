//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 4847.21738)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.forms.easplanningoptionscomponent;

import java.util.ArrayList;

import ims.core.vo.lookups.TaxonomyType;
import ims.core.vo.lookups.YesNo;
import ims.core.vo.lookups.YesNoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.eas.vo.ElectronicActionSheetVo;
import ims.eas.vo.ProtocolVo;
import ims.eas.vo.TreatmentSitesVo;
import ims.eas.vo.lookups.GatingOptions;
import ims.eas.vo.lookups.GatingOptionsCollection;
import ims.eas.vo.lookups.IMRT;
import ims.eas.vo.lookups.IMRTCollection;
import ims.eas.vo.lookups.IVContrast;
import ims.eas.vo.lookups.IVContrastCollection;
import ims.eas.vo.lookups.ImmobilisationType;
import ims.eas.vo.lookups.ImmobilisationTypeCollection;
import ims.eas.vo.lookups.LookupHelper;
import ims.eas.vo.lookups.MouldRoomActivity;
import ims.eas.vo.lookups.MouldRoomActivityCollection;
import ims.eas.vo.lookups.OptionsRequired;
import ims.eas.vo.lookups.OralContrast;
import ims.eas.vo.lookups.OralContrastCollection;
import ims.eas.vo.lookups.ProtocolActions;
import ims.eas.vo.lookups.ScanLimits;
import ims.eas.vo.lookups.ScanLimitsCollection;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellItem;
import ims.framework.controls.DynamicGridCellOptions;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DynamicCellDecoratorMode;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;
import ims.vo.LookupTypeVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int PLANNING_OPTION_COL = 1;
	private static final int VALUE_COL = 2;		
	private static final int PLANNING_CT_VALUE = -3;
	private static final int PLANNING_CT_SCAN_LIMIT = -4;
	private static final int PLANNING_CT_TEXT = -5;
	private static final int MRI_FOR_COREG_VALUE = -6;
	private static final int DENTIST_VALUE = -7;
	private static final int PEG_VALUE = -8;
	private static final int SIMULATION_VALUE = -9;
	private static final int IV_CONTRAST_VALUE = -10;
	private static final int IV_CONTRAST_RECENT_CREATININE = -11;
	private static final int IV_CONTRAST_RECENT_CREATININE_DATE = -12;
	private static final int IV_CONTRAST_RECENT_CREATININE_LEVEL = -13;
	private static final int ORAL_CONTRAST_VALUE = -14;
	private static final int GATING_OPTIONS_VALUE = -15;
	private static final int IMRT_VALUE = -16;
	private static final int PET_CT_COREG_VALUE = -17;
	private static final int IMMOBILISATION_TYPE_VALUE = -18;
	private static final int MOULD_ROOM_PREP_VALUE = -19;
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		
	}
	
	public void initialise()
	{
		// TODO: Add your code here.
	}

	public void setValue(ims.eas.vo.ElectronicActionSheetVo actionSheet)
	{
		if (actionSheet == null)
			return;
		
		form.getLocalContext().setPatientEAS(actionSheet);
		
		// Load the VO onto the form
		form.ccSummary().initialise(actionSheet.getPrimaryTumour().getPrimaryTumour(),
				actionSheet.getTreatmentSite().getTreatmentSite(), actionSheet.getProtocol(), actionSheet.getEasStatus().getStatus());

		form.dyngrdPO().clear();
		formatPlanningOptionGrid();
		
		ProtocolVo protocol = null;
		TreatmentSitesVo tsite = null;
		
		if (actionSheet.getProtocolIsNotNull())
			protocol = domain.getProtocol(actionSheet.getProtocol());
		form.getLocalContext().setProtocol(protocol);
		
		if (actionSheet.getTreatmentSiteIsNotNull())
			tsite = domain.getTreatmentSite(actionSheet.getTreatmentSite());
		form.getLocalContext().setTSite(tsite);
		
		displayAllPlanningOptions(protocol, tsite);		
	}

	public ims.eas.vo.ElectronicActionSheetVo getValue()
	{
		return (form.getLocalContext().getPatientEAS());
	}
	
	private void formatPlanningOptionGrid()
	{
		form.dyngrdPO().clear();		
		form.dyngrdPO().setSelectable(true);
		
		DynamicGridColumn column = form.dyngrdPO().getColumns().newColumn("Planning Option");
		column.setIdentifier(PLANNING_OPTION_COL);
		column.setWidth(500);
		column.setCanGrow(true);
		
		column = form.dyngrdPO().getColumns().newColumn("Value");
		column.setIdentifier(VALUE_COL);
		column.setWidth(200);
		column.setCanGrow(true);
					
	}	
	
	private void displayAllPlanningOptions(ProtocolVo protocol, TreatmentSitesVo tsite) 
	{
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		// Get the Protocol Actions lookup instance - this is the order in which the items are to be displayed
		LookupInstanceCollection protocolActionsColl  = domain.getLookupService().getLookupCollection(new LookupTypeVo(ProtocolActions.TYPE_ID));
		if (protocolActionsColl != null && protocolActionsColl.size() > 0)
		{						
			for (int i=0; i<protocolActionsColl.size(); i++)
			{
				LookupInstVo pAction = protocolActionsColl.getIndex(i);

				if (pAction.equals(ProtocolActions.PLANNING_CT))
				{
					createPlanCTRow(protocol, tsite);
				}
				else if (pAction.equals(ProtocolActions.MRI_FOR_COREG))
				{
					createMRIRow(protocol);
				}
				else if (pAction.equals(ProtocolActions.DENTIST))
				{
					createDentistRow(protocol);
				}
				else if (pAction.equals(ProtocolActions.PEG))
				{
					createPegRow(protocol);
				}
				else if (pAction.equals(ProtocolActions.SIMULATION))
				{
					createSimulationRow(protocol);
				}
				else if (pAction.equals(ProtocolActions.IV_CONTRAST))
				{
					createIVContrastRow(protocol);
				}
				else if (pAction.equals(ProtocolActions.ORAL_CONTRAST))
				{
					createOralContrastRow(protocol);
				}
				else if (pAction.equals(ProtocolActions.GATING_OPTIONS))
				{
					createGatingOptionsRow(protocol);
				}
				else if (pAction.equals(ProtocolActions.IMRT))
				{
					createIMRTRow(protocol);
				}
				else if (pAction.equals(ProtocolActions.PET_CT_COREG))
				{
					createPETCTRow(protocol);
				}
				else if (pAction.equals(ProtocolActions.IMMOBILISATION_TYPE))
				{
					createImmobTypeRow(protocol);
				}
				else if (pAction.equals(ProtocolActions.MOULD_ROOM_PREP))
				{
					createMouldRoomRow(protocol);
				}
			}
		}
	}
	
	//*******************
	//***PLANNING_CT ***
	//*******************
	
	private void createPlanCTRow(ProtocolVo protocol, TreatmentSitesVo tsite) 
	{		
		if (protocol != null && protocol.getPlanCTRequiredIsNotNull() && protocol.getPlanCTRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;
		
		String mandatory = "";
		if (protocol != null && protocol.getPlanCTRequiredIsNotNull() && protocol.getPlanCTRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);
		
		DynamicGridCell valueCell = null;
		
		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		// The label is an external mapping, if this does not exist, the lookup item name will be used
		// ProtocolActions.PLANNING_CT.getMappings().
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.PLANNING_CT.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.PLANNING_CT.getText();
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel);				
		
		valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.ANSWER);
		valueCell.setIdentifier(PLANNING_CT_VALUE);
		bindYesNoLookup(valueCell);		
		
		valueCell.setAutoPostBack(true);
		valueCell.setValue(YesNo.NO);
		
		if (protocol != null)
		{			
			if (protocol.getPlanCTRequiredIsNotNull())
			{				
				if (protocol.getPlanCTRequired().equals(OptionsRequired.MANDATORY))
				{
					valueCell.setValue(YesNo.YES);
					valueCell.setReadOnly(true);
				}
				else if (protocol.getPlanCTRequired().equals(OptionsRequired.OPTIONAL))
				{
					if (protocol.getPlanCTDefaultIsNotNull())
					{
						valueCell.setValue(protocol.getPlanCTDefault());
					}					
				}
			}
		}	
		
		if(actionSheet.getPlanningCTRequiredIsNotNull())
			valueCell.setValue(actionSheet.getPlanningCTRequired() ? YesNo.YES : YesNo.NO);
		
		
		onDyngrdPOCellValueChanged(valueCell);
		valueCell.getRow().setExpanded(true);
	}
	
	private void populateScanLimits(ScanLimitsCollection scanLimits, DynamicGridCell valueCell, ScanLimits defaultScanLimit) 
	{
		valueCell.getItems().clear();
		
		if (scanLimits == null)
			return;
				
		for(int i = 0; scanLimits != null && i < scanLimits.size(); i++)
		{
				DynamicGridCellItem item = valueCell.getItems().newItem();
				item.setValue(scanLimits.get(i));
				item.setText(scanLimits.get(i).getText());
		}
		
		if (defaultScanLimit != null)
			valueCell.setValue(defaultScanLimit);
	}
	
	//**********************
	//*** MRI_FOR_COREG ***
	//*********************
	
	private void createMRIRow(ProtocolVo protocol) 
	{
		if (protocol != null && protocol.getMRICoRegRequiredIsNotNull() && protocol.getMRICoRegRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;

		String mandatory = "";
		if (protocol != null && protocol.getMRICoRegRequiredIsNotNull() && protocol.getMRICoRegRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);

		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		
		// The label is an external mapping, if this does not exist, the lookup item name will be used
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.MRI_FOR_COREG.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.MRI_FOR_COREG.getText();
		
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel + "</font>");
		
		DynamicGridCell valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.ANSWER);
		bindYesNoLookup(valueCell);
		valueCell.setIdentifier(MRI_FOR_COREG_VALUE);
		valueCell.setCanBeEmpty(false);
		
		valueCell.setValue(YesNo.NO);
		
		if (protocol != null)
		{			
			if (protocol.getMRICoRegRequiredIsNotNull())
			{				
				if (protocol.getMRICoRegRequired().equals(OptionsRequired.MANDATORY))
				{
					valueCell.setValue(YesNo.YES);
					valueCell.setReadOnly(true);
				}
				else if (protocol.getMRICoRegRequired().equals(OptionsRequired.OPTIONAL))
				{
					if (protocol.getMRIDefaultIsNotNull())
						valueCell.setValue(protocol.getMRIDefault());
					else
					{
						valueCell.setCanBeEmpty(true);
						valueCell.setValue(null);
					}
				}
			}
		}
		else
		{
			valueCell.setCanBeEmpty(true);
			valueCell.setValue(null);
		}
		
		if (actionSheet.getMRIforCoRegIsNotNull())
			valueCell.setValue(actionSheet.getMRIforCoReg());						
	}
	
	//***************
	//*** DENTIST ***
	//***************
	
	private void createDentistRow(ProtocolVo protocol) 
	{
		if (protocol != null && protocol.getDentistRequiredIsNotNull() && protocol.getDentistRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;
		
		String mandatory = "";
		if (protocol != null && protocol.getDentistRequiredIsNotNull() && protocol.getDentistRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);

		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		
		// The label is an external mapping, if this does not exist, the lookup item name will be used
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.DENTIST.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.DENTIST.getText();
		
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel + "</font>");
		
		DynamicGridCell valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.ANSWER, DynamicGridCellOptions.EDITABLE_DATA_CELL);		
		bindYesNoLookup(valueCell);
		valueCell.setIdentifier(DENTIST_VALUE);
		valueCell.setCanBeEmpty(false);
		
		valueCell.setValue(YesNo.NO);
		
		if (protocol != null)
		{			
			if (protocol.getDentistRequiredIsNotNull())
			{				
				if (protocol.getDentistRequired().equals(OptionsRequired.MANDATORY))
				{
					valueCell.setValue(YesNo.YES);
					valueCell.setReadOnly(true);
				}
				else if (protocol.getDentistRequired().equals(OptionsRequired.OPTIONAL))
				{
					if (protocol.getDentistDefaultIsNotNull())
						valueCell.setValue(protocol.getDentistDefault());
					else
					{
						valueCell.setCanBeEmpty(true);
						valueCell.setValue(null);
					}
				}
			}
		}	
		else
		{
			valueCell.setCanBeEmpty(true);
			valueCell.setValue(null);
		}
		
		if (actionSheet.getDentistRequiredIsNotNull())
			valueCell.setValue(actionSheet.getDentistRequired());
	}
	
	//***********
	//*** PEG ***
	//***********
	
	private void createPegRow(ProtocolVo protocol) 
	{
		if (protocol != null && protocol.getPegRequiredIsNotNull() && protocol.getPegRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;
		
		String mandatory = "";
		if (protocol != null && protocol.getPegRequiredIsNotNull() && protocol.getPegRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);
		
		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		
		// The label is an external mapping, if this does not exist, the lookup item name will be used
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.PEG.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.PEG.getText();
		
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel + "</font>");
		
		DynamicGridCell valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.ANSWER, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		bindYesNoLookup(valueCell);
		valueCell.setIdentifier(PEG_VALUE);
		valueCell.setCanBeEmpty(false);
		
		valueCell.setValue(YesNo.NO);
		
		if (protocol != null)
		{			
			if (protocol.getPegRequiredIsNotNull())
			{				
				if (protocol.getPegRequired().equals(OptionsRequired.MANDATORY))
				{
					valueCell.setValue(YesNo.YES);
					valueCell.setReadOnly(true);
				}
				else if (protocol.getPegRequired().equals(OptionsRequired.OPTIONAL))
				{
					if (protocol.getPEGDefaultIsNotNull())
						valueCell.setValue(protocol.getPEGDefault());
					else
					{
						valueCell.setCanBeEmpty(true);
						valueCell.setValue(null);
					}
				}
			}
		}
		else
		{
			valueCell.setCanBeEmpty(true);
			valueCell.setValue(null);
		}
		
		if (actionSheet.getPegRequiredIsNotNull())
			valueCell.setValue(actionSheet.getPegRequired());
	}
	
	//******************
	//*** SIMULATION ***
	//******************
	
	private void createSimulationRow(ProtocolVo protocol) 
	{
		if (protocol != null && protocol.getSimlRequiredIsNotNull() && protocol.getSimlRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;
		
		String mandatory = "";
		if (protocol != null && protocol.getSimlRequiredIsNotNull() && protocol.getSimlRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);
		
		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		
		// The label is an external mapping, if this does not exist, the lookup item name will be used
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.SIMULATION.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.SIMULATION.getText();
		
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel + "</font>");
		
		DynamicGridCell valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.ANSWER, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		bindYesNoLookup(valueCell);
		valueCell.setIdentifier(SIMULATION_VALUE);
		valueCell.setCanBeEmpty(false);
		
		valueCell.setValue(YesNo.NO);
		
		if (protocol != null)
		{			
			if (protocol.getSimlRequiredIsNotNull())
			{				
				if (protocol.getSimlRequired().equals(OptionsRequired.MANDATORY))
				{
					valueCell.setValue(YesNo.YES);
					valueCell.setReadOnly(true);
				}
				else if (protocol.getSimlRequired().equals(OptionsRequired.OPTIONAL))
				{
					if (protocol.getSimulationDefaultIsNotNull())
						valueCell.setValue(protocol.getSimulationDefault());
					else
					{
						valueCell.setCanBeEmpty(true);
						valueCell.setValue(null);
					}
				}
			}
		}	
		else
		{
			valueCell.setCanBeEmpty(true);
			valueCell.setValue(null);
		}
		
		if (actionSheet.getSimulationRequiredIsNotNull())
			valueCell.setValue(actionSheet.getSimulationRequired());
	}

	//*******************
	//*** IV_CONTRAST ***
	//*******************
	
	private void createIVContrastRow(ProtocolVo protocol) 
	{
		if (protocol != null && protocol.getIVContrastRequiredIsNotNull() && protocol.getIVContrastRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;
		
		String mandatory = "";
		if (protocol != null && protocol.getIVContrastRequiredIsNotNull() && protocol.getIVContrastRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);
		
		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.IV_CONTRAST.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.IV_CONTRAST.getText();
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel + "</font>");	
		
		DynamicGridCell valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.ENUMERATION, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		valueCell.setIdentifier(IV_CONTRAST_VALUE);
		valueCell.setAutoPostBack(true);
		
		
		if (protocol != null && protocol.getIVContrastListIsNotNull() && protocol.getIVContrastList().size() > 0)
		{
			valueCell.getItems().clear();
			IVContrastCollection voColl = protocol.getIVContrastList();
			for(int i = 0; voColl != null && i < voColl.size(); i++)
			{
				// Check if marked for the protocol
				populateIVContrast(protocol.getIVContrastList(), valueCell, protocol.getIVContrastDefault());
			}	
		}
		else
		{
			populateIVContrast(LookupHelper.getIVContrast(domain.getLookupService()), valueCell, null);
		}
		
		if (protocol != null && protocol.getIVContrastRequiredIsNotNull() && protocol.getIVContrastRequired().equals(OptionsRequired.MANDATORY))
		{
			valueCell.setCanBeEmpty(false);
			
			// If only one row, it has been selected as default, this can not be edited
			if (valueCell.getItems().size() == 1)
			{
				if( protocol.getIVContrastDefaultIsNotNull())
					valueCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);					
			}
		}
		else
			valueCell.setCanBeEmpty(true);
		
		//onDyngrdPOCellValueChanged(valueCell); 
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet != null && actionSheet.getIVContrastIsNotNull())
		{
			valueCell.setValue(actionSheet.getIVContrast());
			onDyngrdPOCellValueChanged(valueCell); 
			
		//	if (actionSheet.getRecentCreatinineIsNotNull() && actionSheet.getRecentCreatinine())
		//	{
		//		valueCell.getRow().getRows().get(0).getCells().get(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL)).setValue( actionSheet.getRecentCreatinine());
		//		onDyngrdPOCellValueChanged(valueCell.getRow().getRows().get(0).getCells().get(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL))); 				
		//	}
		}
	}

	private void populateIVContrast(IVContrastCollection ivContrastColl, DynamicGridCell valueCell, IVContrast defaultIVContrast) 
	{
		valueCell.getItems().clear();
		
		if (ivContrastColl == null)
			return;
				
		for(int i = 0; ivContrastColl != null && i < ivContrastColl.size(); i++)
		{
				DynamicGridCellItem item = valueCell.getItems().newItem();
				item.setValue(ivContrastColl.get(i));
				item.setText(ivContrastColl.get(i).getText());
		}
		
		if (defaultIVContrast != null)
			valueCell.setValue(defaultIVContrast);
	}

	//*********************
	//*** ORAL_CONTRAST ***
	//*********************
	
	private void createOralContrastRow( ProtocolVo protocol) 
	{
		if (protocol != null && protocol.getOralContrastRequiredIsNotNull() && protocol.getOralContrastRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;
		
		String mandatory = "";
		if (protocol != null && protocol.getOralContrastRequiredIsNotNull() && protocol.getOralContrastRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);
		
		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		
		// The label is an external mapping, if this does not exist, the lookup item name will be used
		// ProtocolActions.PLANNING_CT.getMappings().
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.ORAL_CONTRAST.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.ORAL_CONTRAST.getText();
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel + "</font>");
		
		DynamicGridCell valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.MULTISELECT, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		valueCell.setIdentifier(ORAL_CONTRAST_VALUE);
		
		if (protocol != null && protocol.getOralContrastList() != null && protocol.getOralContrastList().size() > 0)
		{
			valueCell.getItems().clear();
			populateOralContrast(protocol.getOralContrastList(), valueCell, protocol.getOralContrastDefault());
			valueCell.setValue(protocol.getOralContrastList());
		}
		else
		{
			populateOralContrast(LookupHelper.getOralContrast(domain.getLookupService()), valueCell, null);
			valueCell.setValue(LookupHelper.getOralContrast(domain.getLookupService()));
		}		
		
		if (protocol != null && protocol.getOralContrastRequiredIsNotNull() && protocol.getOralContrastRequired().equals(OptionsRequired.MANDATORY))
		{
			valueCell.setCanBeEmpty(false);
			
			// If only one row, it has been selected as default, this can not be edited
			if (valueCell.getItems().size() == 1 && protocol.getOralContrastDefaultIsNotNull())
				valueCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);
		}
		else
			valueCell.setCanBeEmpty(true);
		
		if (actionSheet.getOralContrastIsNotNull() && actionSheet.getOralContrast().size() > 0)
		{
			for(int i = 0; i < valueCell.getItems().size(); i++)
			{
				//Clear any default value
				valueCell.getItems().get(i).setChecked(false);
				
				if (valueCell.getItems().get(i).getValue() != null && valueCell.getItems().get(i).getValue() instanceof OralContrast)
				{
					if (actionSheet.getOralContrast().contains((OralContrast) valueCell.getItems().get(i).getValue()))
					{
						valueCell.getItems().get(i).setChecked(true);
					}
				}					
			}
		}			
	}

	private void populateOralContrast(OralContrastCollection oralContrast, DynamicGridCell valueCell, OralContrast defaultOralContrast) 
	{
		valueCell.getItems().clear();
		
		if (oralContrast == null)
			return;
				
		for(int i = 0; oralContrast != null && i < oralContrast.size(); i++)
		{
				DynamicGridCellItem item = valueCell.getItems().newItem();
				item.setValue(oralContrast.get(i));
				item.setText(oralContrast.get(i).getText());
				
				if (defaultOralContrast != null && oralContrast.get(i).equals(defaultOralContrast))
					item.setChecked(true);
		}		
	}
	
	//**********************
	//*** GATING_OPTIONS ***
	//**********************
	
	private void createGatingOptionsRow(ProtocolVo protocol) 
	{
		if (protocol != null && protocol.getGatingOptsRequiredIsNotNull() && protocol.getGatingOptsRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;
		
		String mandatory = "";
		if (protocol != null && protocol.getGatingOptsRequiredIsNotNull() && protocol.getGatingOptsRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);
		
		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		
		// The label is an external mapping, if this does not exist, the lookup item name will be used
		// ProtocolActions.PLANNING_CT.getMappings().
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.GATING_OPTIONS.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.GATING_OPTIONS.getText();
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel + "</font>");
		
		
		DynamicGridCell valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.ENUMERATION, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		valueCell.setIdentifier(GATING_OPTIONS_VALUE);
		
		// If this is a protocol EAS, get the scan limits associated with the protocol configuration, otherwise, bind all scan limit lookup
		// instances to this cell
		if (protocol != null && protocol.getGatingOptsListIsNotNull() && protocol.getGatingOptsList().size() > 0)
		{
			valueCell.getItems().clear();
			GatingOptionsCollection voColl = protocol.getGatingOptsList();
			for(int i = 0; voColl != null && i < voColl.size(); i++)
			{
				// Check if marked for the protocol
				populateGatingOptions(protocol.getGatingOptsList(), valueCell, protocol.getGatingOptsDefault());
			}	
		}
		else
		{
			populateGatingOptions(LookupHelper.getGatingOptions(domain.getLookupService()), valueCell, null);
		}
		
		if (protocol != null && protocol.getGatingOptsRequiredIsNotNull() && protocol.getGatingOptsRequired().equals(OptionsRequired.MANDATORY))
		{
			valueCell.setCanBeEmpty(false);
			
			// If only one row, it has been selected as default, this can not be edited
			if (valueCell.getItems().size() == 1)
			{
				if( protocol.getGatingOptsDefaultIsNotNull())
					valueCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);					
			}
		}
		else
			valueCell.setCanBeEmpty(true);
		
		if (actionSheet.getGatingOptionsIsNotNull())
			valueCell.setValue(actionSheet.getGatingOptions());	
	}
	
	private void populateGatingOptions(GatingOptionsCollection gatingOptions, DynamicGridCell valueCell, GatingOptions defaultGatingOptions) 
	{
		valueCell.getItems().clear();
		
		if (gatingOptions == null)
			return;
				
		for(int i = 0; gatingOptions != null && i < gatingOptions.size(); i++)
		{
				DynamicGridCellItem item = valueCell.getItems().newItem();
				item.setValue(gatingOptions.get(i));
				item.setText(gatingOptions.get(i).getText());
		}
		
		if (defaultGatingOptions != null)
			valueCell.setValue(defaultGatingOptions);
	}
	
	//********************
	//*** IMRT_OPTIONS ***
	//********************
	
	private void createIMRTRow(ProtocolVo protocol) 
	{
		if (protocol != null && protocol.getIMRTRequiredIsNotNull() && protocol.getIMRTRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;
		
		String mandatory = "";
		if (protocol != null && protocol.getIMRTRequiredIsNotNull() && protocol.getIMRTRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);
		
		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		
		// The label is an external mapping, if this does not exist, the lookup item name will be used
		// ProtocolActions.PLANNING_CT.getMappings().
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.IMRT.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.IMRT.getText();
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel + "</font>");
		
		DynamicGridCell valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.ENUMERATION, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		valueCell.setIdentifier(IMRT_VALUE);
		
		// If this is a protocol EAS, get the scan limits associated with the protocol configuration, otherwise, bind all scan limit lookup
		// instances to this cell
		if (protocol != null && protocol.getIMRTListIsNotNull() && protocol.getIMRTList().size() > 0)
		{
			valueCell.getItems().clear();
			IMRTCollection voColl = protocol.getIMRTList();
			for(int i = 0; voColl != null && i < voColl.size(); i++)
			{
				// Check if marked for the protocol
				populateIMRT(protocol.getIMRTList(), valueCell, protocol.getIMRTDefault());
			}	
		}
		else
		{
			populateIMRT(LookupHelper.getIMRT(domain.getLookupService()), valueCell, null);
		}
		
		if (protocol != null && protocol.getIMRTRequiredIsNotNull() && protocol.getIMRTRequired().equals(OptionsRequired.MANDATORY))
		{
			valueCell.setCanBeEmpty(false);
			
			// If only one row, it has been selected as default, this can not be edited
			if (valueCell.getItems().size() == 1)
			{
				if( protocol.getIMRTDefaultIsNotNull())
					valueCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);					
			}
		}
		else
			valueCell.setCanBeEmpty(true);
		
		if (actionSheet.getIMRTIsNotNull())
			valueCell.setValue(actionSheet.getIMRT());	
	}
	
	private void populateIMRT(IMRTCollection imrt, DynamicGridCell valueCell, IMRT defaultIMRT) 
	{
		valueCell.getItems().clear();
		
		if (imrt == null)
			return;
				
		for(int i = 0; imrt != null && i < imrt.size(); i++)
		{
				DynamicGridCellItem item = valueCell.getItems().newItem();
				item.setValue(imrt.get(i));
				item.setText(imrt.get(i).getText());
		}
		
		if (defaultIMRT != null)
			valueCell.setValue(defaultIMRT);
	}

	//********************
	//*** PET_CT_COREG ***
	//********************
	
	private void createPETCTRow(ProtocolVo protocol) 
	{
		if (protocol != null && protocol.getPetCTRequiredIsNotNull() && protocol.getPetCTRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;
		
		String mandatory = "";
		if (protocol != null && protocol.getPetCTRequiredIsNotNull() && protocol.getPetCTRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);
		
		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		
		// The label is an external mapping, if this does not exist, the lookup item name will be used
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.PET_CT_COREG.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.PET_CT_COREG.getText();
		
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel + "</font>");
		
		DynamicGridCell valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.ANSWER, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		bindYesNoLookup(valueCell);
		valueCell.setIdentifier(PET_CT_COREG_VALUE);
		valueCell.setCanBeEmpty(false);
		
		valueCell.setValue(YesNo.NO);
		
		if (protocol != null)
		{			
			if (protocol.getPetCTRequiredIsNotNull())
			{				
				if (protocol.getPetCTRequired().equals(OptionsRequired.MANDATORY))
				{
					valueCell.setValue(YesNo.YES);
					valueCell.setReadOnly(true);
				}
				else if (protocol.getPetCTRequired().equals(OptionsRequired.OPTIONAL))
				{
					if (protocol.getPetCTDefaultIsNotNull())
						valueCell.setValue(protocol.getPetCTDefault());
					else
					{
						valueCell.setCanBeEmpty(true);
						valueCell.setValue(null);
					}
				}
			}
		}	
		else
		{
			valueCell.setCanBeEmpty(true);
			valueCell.setValue(null);
		}
		
		if (actionSheet.getPetCTIsNotNull())
			valueCell.setValue(actionSheet.getPetCT());		
	}
	
	//***************************
	//*** IMMOBILISATION_TYPE ***
	//***************************
	
	private void createImmobTypeRow(ProtocolVo protocol) 
	{
		if (protocol != null && protocol.getImmobTypeRequiredIsNotNull() && protocol.getImmobTypeRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;
		
		String mandatory = "";
		if (protocol != null && protocol.getImmobTypeRequiredIsNotNull() && protocol.getImmobTypeRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);
		
		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		
		// The label is an external mapping, if this does not exist, the lookup item name will be used
		// ProtocolActions.PLANNING_CT.getMappings().
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.IMMOBILISATION_TYPE.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.IMMOBILISATION_TYPE.getText();
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel + "</font>");
		
		DynamicGridCell valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.ENUMERATION, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		valueCell.setIdentifier(IMMOBILISATION_TYPE_VALUE);
		
		// If this is a protocol EAS, get the scan limits associated with the protocol configuration, otherwise, bind all scan limit lookup
		// instances to this cell
		if (protocol != null && protocol.getImmobTypeListIsNotNull() && protocol.getImmobTypeList().size() > 0)
		{
			valueCell.getItems().clear();
			ImmobilisationTypeCollection voColl = protocol.getImmobTypeList();
			for(int i = 0; voColl != null && i < voColl.size(); i++)
			{
				// Check if marked for the protocol
				populateImmobType(protocol.getImmobTypeList(), valueCell, protocol.getImmobTypeDefault());
			}	
		}
		else
		{
			populateImmobType(LookupHelper.getImmobilisationType(domain.getLookupService()), valueCell, null);
		}
		
		if (protocol != null && protocol.getImmobTypeRequiredIsNotNull() && protocol.getImmobTypeRequired().equals(OptionsRequired.MANDATORY))
		{
			valueCell.setCanBeEmpty(false);
			
			// If only one row, it has been selected as default, this can not be edited
			if (valueCell.getItems().size() == 1)
			{
				if( protocol.getImmobTypeDefaultIsNotNull())
					valueCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);					
			}
		}
		else
			valueCell.setCanBeEmpty(true);
		
		if (actionSheet.getImmobTypeIsNotNull())
			valueCell.setValue(actionSheet.getImmobType());	
	}

	private void populateImmobType(ImmobilisationTypeCollection immobilisationType, DynamicGridCell valueCell, ImmobilisationType defaultImmobilisationType) 
	{
		valueCell.getItems().clear();
		
		if (immobilisationType == null)
			return;
				
		for(int i = 0; immobilisationType != null && i < immobilisationType.size(); i++)
		{
				DynamicGridCellItem item = valueCell.getItems().newItem();
				item.setValue(immobilisationType.get(i));
				item.setText(immobilisationType.get(i).getText());
		}
		
		if (defaultImmobilisationType != null)
			valueCell.setValue(defaultImmobilisationType);
	}
		
	//***********************
	//*** MOULD_ROOM_PREP ***
	//***********************
	
	private void createMouldRoomRow(ProtocolVo protocol) 
	{	
		if (protocol != null && protocol.getMouldRoomRequiredIsNotNull() && protocol.getMouldRoomRequired().equals(OptionsRequired.NOT_REQUIRED))
			return;
		
		String mandatory = "";
		if (protocol != null && protocol.getMouldRoomRequiredIsNotNull() && protocol.getMouldRoomRequired().equals(OptionsRequired.MANDATORY))
			mandatory = "<font color='red' size= '3'>*</font>";
		
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		if (actionSheet == null)
			return;
		
		DynamicGridRow row = form.dyngrdPO().getRows().newRow();
		row.setSelectable(false);
		
		DynamicGridCell lblCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.HTMLVIEW);
		lblCell.setBackColor(Color.LightGray);
		
		// The label is an external mapping, if this does not exist, the lookup item name will be used
		// ProtocolActions.PLANNING_CT.getMappings().
		String newLabel = domain.getLookupService().getRemoteLookup(ProtocolActions.MOULD_ROOM_PREP.getID(), TaxonomyType.DISPLAY_TEXT.getText());
		if (newLabel == null)
			newLabel = ProtocolActions.MOULD_ROOM_PREP.getText();
		lblCell.setValue(mandatory + "<font color='blue' size= '2'>" + newLabel + "</font>");
		
		DynamicGridCell valueCell = row.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.ENUMERATION, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		valueCell.setIdentifier(MOULD_ROOM_PREP_VALUE);
		
		// If this is a protocol EAS, get the scan limits associated with the protocol configuration, otherwise, bind all scan limit lookup
		// instances to this cell
		if (protocol != null && protocol.getMouldRoomListIsNotNull() && protocol.getMouldRoomList().size() > 0)
		{
			valueCell.getItems().clear();
			MouldRoomActivityCollection voColl = protocol.getMouldRoomList();
			for(int i = 0; voColl != null && i < voColl.size(); i++)
			{
				// Check if marked for the protocol
				populateMouldRoomActivity(protocol.getMouldRoomList(), valueCell, protocol.getMouldRoomDefault());
			}	
		}
		else
		{
			populateMouldRoomActivity(LookupHelper.getMouldRoomActivity(domain.getLookupService()), valueCell, null);
		}
		
		if (protocol != null && protocol.getMouldRoomRequiredIsNotNull() && protocol.getMouldRoomRequired().equals(OptionsRequired.MANDATORY))
		{
			valueCell.setCanBeEmpty(false);
			
			// If only one row, it has been selected as default, this can not be edited
			if (valueCell.getItems().size() == 1)
			{
				if( protocol.getMouldRoomDefaultIsNotNull())
					valueCell.setOptions(DynamicGridCellOptions.READ_ONLY_DATA_CELL);					
			}
		}
		else
			valueCell.setCanBeEmpty(true);
				
		if (actionSheet.getMouldRoomActivityIsNotNull())
			valueCell.setValue(actionSheet.getMouldRoomActivity());		
	}
	
	private void populateMouldRoomActivity(MouldRoomActivityCollection mouldRoomActivity, DynamicGridCell valueCell, MouldRoomActivity defaultMouldRoomActivity) 
	{
		valueCell.getItems().clear();
		
		if (mouldRoomActivity == null)
			return;
				
		for(int i = 0; mouldRoomActivity != null && i < mouldRoomActivity.size(); i++)
		{
				DynamicGridCellItem item = valueCell.getItems().newItem();
				item.setValue(mouldRoomActivity.get(i));
				item.setText(mouldRoomActivity.get(i).getText());
		}
		
		if (defaultMouldRoomActivity != null)
			valueCell.setValue(defaultMouldRoomActivity);
	}
		
	protected final void bindYesNoLookup(DynamicGridCell typeCell)
	{
		YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(domain.getLookupService());
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			typeCell.getItems().newItem(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	
	public Boolean save()
	{		
		ElectronicActionSheetVo eas = copyScreenToData();
		if (eas == null)
			return true;
		
		String[] uiErrors = validateUIRules();		
		String errors[] = eas.validate(uiErrors);
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			eas = domain.save(eas);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		// Update Local context with newly saved EAS
		form.getLocalContext().setPatientEAS(eas);
		return true;
	}
	
	
	private ArrayList<DynamicGridCell> getAllCells(ArrayList<DynamicGridCell> cellsList, DynamicGridRowCollection rows)
	{
		for (int i = 0; i < rows.size(); i++) 
		{
			DynamicGridRow row = rows.get(i);
			
			for (int j = 0; j < row.getCellArray().length; j++) 
			{
				DynamicGridCell cell = row.getCellArray()[j];
				cellsList.add(cell);
			}
			
			getAllCells(cellsList, row.getRows());
		}
		
		return cellsList;
	}
	
	private DynamicGridCell getCellByIdentifier(int identifier)
	{
		ArrayList<DynamicGridCell> cells = getAllCells(new ArrayList<DynamicGridCell>(), form.dyngrdPO().getRows());
		
		for (int i = 0; i < cells.size(); i++) 
		{								
			if(cells.get(i).getIdentifier() != null && cells.get(i).getIdentifier().equals(identifier))
			{
				return cells.get(i);
			}
		}
		
		return null;
	}
	
	private String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>();		
		
		DynamicGridCell cell =  getCellByIdentifier(IV_CONTRAST_VALUE);		
		cell =  getCellByIdentifier(IV_CONTRAST_VALUE);
		if (cell != null)
		{
			ProtocolVo protocol = form.getLocalContext().getProtocol();
			if (protocol != null && protocol.getIVContrastRequiredIsNotNull() && protocol.getIVContrastRequired().equals(OptionsRequired.MANDATORY))
			{
				if (cell.getValue() == null)
				{
					errors.add("IV_CONTRAST is mandatory!");
				}
			}
		}
		
		cell =  getCellByIdentifier(PLANNING_CT_VALUE);
		if (cell != null && cell.getValue() instanceof YesNo && cell.getValue().equals(YesNo.YES))
		{
			cell =  getCellByIdentifier(PLANNING_CT_SCAN_LIMIT);
			if (cell != null)
			{
				if (cell.getValue() == null)
				{
					errors.add("Please record 'Scan Limits'!");
				}
			}						
		}
		cell =  getCellByIdentifier(IMRT_VALUE);		 
		if (cell != null)
		{
			ProtocolVo protocol = form.getLocalContext().getProtocol();
			if (protocol != null && protocol.getIMRTRequiredIsNotNull() && protocol.getIMRTRequired().equals(OptionsRequired.MANDATORY) &&
					protocol.getIMRTDefault() == null)
			{
				if (cell.getValue() == null)
				{
					errors.add("IMRT is mandatory!");
				}
			}
		}
		cell =  getCellByIdentifier(GATING_OPTIONS_VALUE);		 
		if (cell != null)
		{
			ProtocolVo protocol = form.getLocalContext().getProtocol();
			if (protocol != null && protocol.getGatingOptsRequiredIsNotNull() && protocol.getGatingOptsRequired().equals(OptionsRequired.MANDATORY) &&
					protocol.getGatingOptsDefault() == null)
			{
				if (cell.getValue() == null)
				{
					errors.add("GATING OPTIONS is mandatory!");
				}
			}
		}
		cell =  getCellByIdentifier(IMMOBILISATION_TYPE_VALUE);		 
		if (cell != null)
		{
			ProtocolVo protocol = form.getLocalContext().getProtocol();
			if (protocol != null && protocol.getImmobTypeRequiredIsNotNull() && protocol.getImmobTypeRequired().equals(OptionsRequired.MANDATORY) &&
					protocol.getImmobTypeDefault() == null)
			{
				if (cell.getValue() == null)
				{
					errors.add("IMMOBILISATION TYPE is mandatory!");
				}
			}
		}
		cell =  getCellByIdentifier(MOULD_ROOM_PREP_VALUE);		 
		if (cell != null)
		{
			ProtocolVo protocol = form.getLocalContext().getProtocol();
			if (protocol != null && protocol.getMouldRoomRequiredIsNotNull() && protocol.getMouldRoomRequired().equals(OptionsRequired.MANDATORY) &&
					protocol.getMouldRoomDefault() == null)
			{
				if (cell.getValue() == null)
				{
					errors.add("MOULD ROOM is mandatory!");
				}
			}
		}
		cell =  getCellByIdentifier(ORAL_CONTRAST_VALUE);		 
		if (cell != null)
		{
			ProtocolVo protocol = form.getLocalContext().getProtocol();
			if (protocol != null && protocol.getOralContrastRequiredIsNotNull() && protocol.getOralContrastRequired().equals(OptionsRequired.MANDATORY))
			{	
				boolean found = false;
				for (int i = 0; i < cell.getItems().size(); i++) 
				{					
					if (cell.getItems().get(i).isChecked())
					{
						found = true;
						break;
					}
				}
				
				if (!found)
					errors.add("ORAL CONTRAST is mandatory!");
			}
		}
		cell =  getCellByIdentifier(MRI_FOR_COREG_VALUE);		 
		if (cell != null)
		{
			ProtocolVo protocol = form.getLocalContext().getProtocol();
			if ((protocol != null && protocol.getMRICoRegRequiredIsNotNull() && protocol.getMRICoRegRequired().equals(OptionsRequired.OPTIONAL)))
			{	
				if (cell.getValue() == null)
					errors.add("MRI FOR COREG is mandatory!");
			}
		}
		cell =  getCellByIdentifier(DENTIST_VALUE);		 
		if (cell != null)
		{
			ProtocolVo protocol = form.getLocalContext().getProtocol();
			if ((protocol != null && protocol.getDentistRequiredIsNotNull() && protocol.getDentistRequired().equals(OptionsRequired.OPTIONAL)))
			{	
				if (cell.getValue() == null)
					errors.add("DENTIST is mandatory!");
			}
		}
		cell =  getCellByIdentifier(PEG_VALUE);		 
		if (cell != null)
		{
			ProtocolVo protocol = form.getLocalContext().getProtocol();
			if ((protocol != null && protocol.getPegRequiredIsNotNull() && protocol.getPegRequired().equals(OptionsRequired.OPTIONAL)))
			{	
				if (cell.getValue() == null)
					errors.add("PEG is mandatory!");
			}
		}		
		cell =  getCellByIdentifier(SIMULATION_VALUE);		 
		if (cell != null)
		{
			ProtocolVo protocol = form.getLocalContext().getProtocol();
			if ((protocol != null && protocol.getSimlRequiredIsNotNull() && protocol.getSimlRequired().equals(OptionsRequired.OPTIONAL)))
			{	
				if (cell.getValue() == null)
					errors.add("SIMULATION is mandatory!");
			}
		}
		cell =  getCellByIdentifier(PET_CT_COREG_VALUE);		 
		if (cell != null)
		{
			ProtocolVo protocol = form.getLocalContext().getProtocol();
			if ((protocol != null && protocol.getPetCTRequiredIsNotNull() && protocol.getPetCTRequired().equals(OptionsRequired.OPTIONAL)))
			{	
				if (cell.getValue() == null)
					errors.add("PET CT COREG is mandatory!");
			}
		}
		
		DynamicGridCell cellPlanning = getCellByIdentifier(PLANNING_CT_VALUE);
		DynamicGridCell cellSimulation = getCellByIdentifier(SIMULATION_VALUE);
		DynamicGridCell cellMould = getCellByIdentifier(MOULD_ROOM_PREP_VALUE);
			
		if(cellPlanning != null && (cellPlanning.getValue() == null || cellPlanning.getValue().equals(YesNo.NO)) &&
				cellSimulation != null && (cellSimulation.getValue() == null || cellSimulation.getValue().equals(YesNo.NO)) &&
						cellMould != null && (cellMould.getValue() == null || cellMould.getValue().equals(YesNo.NO)))
		{
			errors.add("Either Planning CT or Simulation or Mould Room must be recorded!");
		}			
		
		if (errors.size() > 0) 
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Electronic Action Sheet Record", searchErrors);
			return searchErrors;
		}
		
		return null;
	}
	
	private ElectronicActionSheetVo copyScreenToData() 
	{
		ElectronicActionSheetVo easVo = form.getLocalContext().getPatientEAS();
		if (easVo == null)
			easVo = new ElectronicActionSheetVo();
				
		return populateEASVo(easVo, form.dyngrdPO().getRows());										
	}
	
	private ElectronicActionSheetVo populateEASVo(ElectronicActionSheetVo easVo, DynamicGridRowCollection dynamicGridRowCollection) 
	{
		for (int i = 0; i < dynamicGridRowCollection.size(); i++) 
		{
			DynamicGridRow row =dynamicGridRowCollection.get(i);
			
			for (int j = 0; j < row.getCellArray().length; j++) 
			{
				DynamicGridCell cell = row.getCellArray()[j];
				if (cell.getIdentifier() != null)
				{
					if (cell.getIdentifier().equals(PLANNING_CT_VALUE))
					{	
						if (cell.getValue() != null && cell.getValue() instanceof YesNo)
						{
							if (YesNo.YES.equals(cell.getValue()))
								easVo.setPlanningCTRequired(true);
							else
							{
								easVo.setPlanningCT(null);
								easVo.setPlanningCTText(null);
								easVo.setPlanningCTRequired(false);
							}
						}
						else
						{
							easVo.setPlanningCT(null);
							easVo.setPlanningCTText(null);
							easVo.setPlanningCTRequired(false);
						}						
					}
					else if (cell.getIdentifier().equals(PLANNING_CT_SCAN_LIMIT))
					{	
						if (cell.getValue() != null && cell.getValue() instanceof ScanLimits)
							easVo.setPlanningCT((ScanLimits) cell.getValue());
						else
							easVo.setPlanningCT(null);
					}
					else if (cell.getIdentifier().equals(Logic.PLANNING_CT_TEXT))
					{					
						if (cell.getValue() != null && cell.getValue() instanceof String)
							easVo.setPlanningCTText((String) cell.getValue());
						else
							easVo.setPlanningCTText(null);
					}
					else if (cell.getIdentifier().equals(MRI_FOR_COREG_VALUE))
					{					
						if (cell.getValue() != null && cell.getValue() instanceof YesNo)
							easVo.setMRIforCoReg((YesNo) cell.getValue());
						else
							easVo.setMRIforCoReg(null);
					}
					else if (cell.getIdentifier().equals(DENTIST_VALUE))
					{					
						if (cell.getValue() != null && cell.getValue() instanceof YesNo)
							easVo.setDentistRequired((YesNo) cell.getValue());
						else
							easVo.setDentistRequired(null);
					}
					else if (cell.getIdentifier().equals(PEG_VALUE))
					{					
						if (cell.getValue() != null && cell.getValue() instanceof YesNo)
							easVo.setPegRequired((YesNo) cell.getValue());
						else
							easVo.setPegRequired(null);
					}
					else if (cell.getIdentifier().equals(SIMULATION_VALUE))
					{					
						if (cell.getValue() != null && cell.getValue() instanceof YesNo)
							easVo.setSimulationRequired((YesNo) cell.getValue());
						else
							easVo.setSimulationRequired(null);
					}
					else if (cell.getIdentifier().equals(IV_CONTRAST_VALUE))
					{					
						if (cell.getValue() != null && cell.getValue() instanceof IVContrast)
							easVo.setIVContrast((IVContrast) cell.getValue());
						else
						{
							easVo.setIVContrast(null);
							easVo.setRecentCreatinine(false);
							easVo.setInvestigationDate(null);
							easVo.setCreatinineLevel(null);
						}
					}
					else if (cell.getIdentifier().equals(IV_CONTRAST_RECENT_CREATININE))
					{		
						easVo.setRecentCreatinine(cell.getValue()  != null  && cell.getValue()  instanceof Boolean ? (Boolean)cell.getValue() : Boolean.FALSE);
						
						if (cell.getValue() != null)
						{
							if (cell.getValue().equals(Boolean.TRUE))
							{	
								for (int k = 0; k < cell.getRow().getRows().size(); k++) 
								{
									DynamicGridRow childRow = cell.getRow().getRows().get(k);
									DynamicGridCell childCell = childRow.getCells().get((form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL)));
									if (childCell.getIdentifier() !=null && childCell.getIdentifier().equals(IV_CONTRAST_RECENT_CREATININE_DATE))
									{
										if (childCell.getValue() != null && childCell.getValue() instanceof Date)
											easVo.setInvestigationDate((Date) childCell.getValue());
										else
											easVo.setInvestigationDate(null);
									}
									else if (childCell.getIdentifier() !=null && childCell.getIdentifier().equals(IV_CONTRAST_RECENT_CREATININE_LEVEL))
									{
										if (childCell.getValue() != null && childCell.getValue() instanceof Float)
											easVo.setCreatinineLevel((Float) childCell.getValue());
										else
											easVo.setCreatinineLevel(null);									
									}
								}
							}
							else
							{
								easVo.setInvestigationDate(null);
								easVo.setCreatinineLevel(null);
							}							
						}						
					}
					else if (cell.getIdentifier().equals(ORAL_CONTRAST_VALUE))
					{					
						OralContrastCollection coll = new OralContrastCollection();	
							
						for(int m = 0; cell.getItems() != null && m < cell.getItems().size(); m++)
						{
							DynamicGridCellItem item = cell.getItems().get(m);
							if (item != null && item.getValue() != null && item.getValue() instanceof OralContrast &&  item.isChecked())
								coll.add((OralContrast) item.getValue());
						}
						
						easVo.setOralContrast(coll);												
					}
					else if (cell.getIdentifier().equals(GATING_OPTIONS_VALUE))
					{					
						if (cell.getValue() != null && cell.getValue() instanceof GatingOptions)
							easVo.setGatingOptions((GatingOptions) cell.getValue());
						else
							easVo.setGatingOptions(null);
					}
					else if (cell.getIdentifier().equals(IMRT_VALUE))
					{					
						if (cell.getValue() != null && cell.getValue() instanceof IMRT)
							easVo.setIMRT((IMRT) cell.getValue());
						else
							easVo.setIMRT(null);
					}
					else if (cell.getIdentifier().equals(PET_CT_COREG_VALUE))
					{					
						if (cell.getValue() != null && cell.getValue() instanceof YesNo)
							easVo.setPetCT((YesNo) cell.getValue());
						else
							easVo.setPetCT(null);
					}
					else if (cell.getIdentifier().equals(IMMOBILISATION_TYPE_VALUE))
					{					
						if (cell.getValue() != null && cell.getValue() instanceof ImmobilisationType)
							easVo.setImmobType((ImmobilisationType) cell.getValue());
						else
							easVo.setImmobType(null);
					}
					else if (cell.getIdentifier().equals(MOULD_ROOM_PREP_VALUE))
					{					
						if (cell.getValue() != null && cell.getValue() instanceof MouldRoomActivity)
							easVo.setMouldRoomActivity((MouldRoomActivity) cell.getValue());
						else
							easVo.setMouldRoomActivity(null);
					}
				}				
			}
			populateEASVo(easVo, row.getRows());
		}
		
		return easVo;
	}
	
	@Override
	protected void onDyngrdPOCellValueChanged(DynamicGridCell cell) 
	{
		ElectronicActionSheetVo actionSheet = form.getLocalContext().getPatientEAS();
		
		if (cell.getIdentifier() != null && cell.getIdentifier().equals(IV_CONTRAST_VALUE))
		{
			DynamicGridRow parentRow = cell.getRow();
			parentRow.getRows().clear();
			
			if (cell.getValue() != null)
			{
				parentRow.setExpanded(true);
				
				DynamicGridRow childRow = cell.getRow().getRows().newRow();	
				childRow.setSelectable(false);
				
				DynamicGridCell labelCell = childRow.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.LABEL, DynamicGridCellOptions.EDITABLE_DATA_CELL);
				labelCell.setWidth(60);
				labelCell.setValue("Is there a recent Creatine level?");
				
				DynamicGridCell valueCell = childRow.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.BOOL, DynamicGridCellOptions.EDITABLE_DATA_CELL);
				valueCell.setWidth(24);
				valueCell.setIdentifier(IV_CONTRAST_RECENT_CREATININE);
				valueCell.setValue(false);
				valueCell.setAutoPostBack(true);
				
				form.dyngrdPO().setFooterMaxHeight(32);
				form.dyngrdPO().setFooterValue("<p align ='center'><b><font size='2' color='red'>MUST SEND PATIENT FOR BLOODS PRIOR TO PLANNING IF CONTRAST IS REQUIRED <b></p>");
				
				if (actionSheet.getRecentCreatinineIsNotNull() && actionSheet.getRecentCreatinine())
				{
					valueCell.setValue(actionSheet.getRecentCreatinine());
					onDyngrdPOCellValueChanged(valueCell);										
				}		
			}
			else				
			{
				form.dyngrdPO().setFooterValue(null);
				actionSheet.setRecentCreatinine(false);
				form.getLocalContext().setPatientEAS(actionSheet);
			}
			
		}
		else if (cell.getIdentifier() != null && cell.getIdentifier().equals(IV_CONTRAST_RECENT_CREATININE))
		{
			if (cell.getValue().equals(Boolean.TRUE))
			{	
				form.dyngrdPO().setFooterValue(null);
				cell.getRow().getRows().clear();
				
				
				cell.getRow().setExpanded(true);
				
				DynamicGridRow childRow = cell.getRow().getRows().newRow();	
				childRow.setSelectable(false);
				
				DynamicGridCell labelCell = childRow.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.LABEL, DynamicGridCellOptions.EDITABLE_DATA_CELL);
				labelCell.setWidth(60);
				labelCell.setValue("Date of investigation?");
				
				DynamicGridCell valueCell = childRow.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.DATE, DynamicGridCellOptions.DEFAULT);
				valueCell.setDecoratorType(DynamicCellDecoratorMode.ALWAYS);
				valueCell.setIdentifier(IV_CONTRAST_RECENT_CREATININE_DATE);
				
				if (actionSheet != null)
				{
					if (actionSheet.getInvestigationDateIsNotNull())
					{
						valueCell.setValue(actionSheet.getInvestigationDate());
					}				
				}
				
				childRow = cell.getRow().getRows().newRow();	
				childRow.setSelectable(false);
					
				DynamicGridCell label1Cell = childRow.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.LABEL, DynamicGridCellOptions.EDITABLE_DATA_CELL);
				label1Cell.setWidth(60);
				label1Cell.setValue("Creatinine level:");
				
				valueCell = childRow.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(VALUE_COL), DynamicCellType.DECIMAL, DynamicGridCellOptions.EDITABLE_DATA_CELL);
				valueCell.setDecoratorType(DynamicCellDecoratorMode.ALWAYS);
				valueCell.setIdentifier(IV_CONTRAST_RECENT_CREATININE_LEVEL);
				
				if (actionSheet != null)
				{
					if (actionSheet.getCreatinineLevelIsNotNull())
					{
						valueCell.setValue(actionSheet.getCreatinineLevel());
					}				
				}
			}
			else
			{
				cell.getRow().getRows().clear();
				
				form.dyngrdPO().setFooterMaxHeight(32);
				form.dyngrdPO().setFooterValue("<p align ='center'><b><font size='2' color='red'>MUST SEND PATIENT FOR BLOODS PRIOR TO PLANNING IF CONTRAST IS REQUIRED <b></p>");
			}			
		}
		else if (cell.getIdentifier() != null && cell.getIdentifier().equals(PLANNING_CT_VALUE))
		{
			if (cell.getValue() != null && cell.getValue().equals(YesNo.YES))
			{
				TreatmentSitesVo tsite = form.getLocalContext().getTSite();
				ProtocolVo protocol = form.getLocalContext().getProtocol();
				
				DynamicGridRow childRow = cell.getRow().getRows().newRow();
				childRow.setSelectable(false);
				
				DynamicGridCell scanLimitCell = childRow.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.ENUMERATION, DynamicGridCellOptions.EDITABLE_DATA_CELL);
				scanLimitCell.setIdentifier(PLANNING_CT_SCAN_LIMIT);
				scanLimitCell.setWidth(100);
				// If this is a protocol EAS, get the scan limits associated with the protocol configuration, otherwise, bind all scan limit lookup
				// instances to this cell
				if (tsite != null && tsite.getScanLimits() != null && tsite.getScanLimits().size() > 0)
				{
					scanLimitCell.getItems().clear();
					ScanLimitsCollection voColl = tsite.getScanLimits();
					for(int i = 0; voColl != null && i < voColl.size(); i++)
					{
						// Check if marked for the protocol
						populateScanLimits(tsite.getScanLimits(), scanLimitCell, tsite.getDefaultScanLimit());
					}	
				}
				else
				{
					populateScanLimits(LookupHelper.getScanLimits(domain.getLookupService()), scanLimitCell, null);
				}
				
				
				DynamicGridRow childRow2 = cell.getRow().getRows().newRow();
				childRow2.setSelectable(false);
				
				DynamicGridCell textCell = childRow2.getCells().newCell(form.dyngrdPO().getColumns().getByIdentifier(PLANNING_OPTION_COL), DynamicCellType.STRING, DynamicGridCellOptions.EDITABLE_DATA_CELL);
				textCell.setStringMaxLength(70);
				textCell.setDecoratorType(DynamicCellDecoratorMode.ALWAYS);
				textCell.setIdentifier(PLANNING_CT_TEXT);
						
				if (actionSheet.getPlanningCTIsNotNull())
					scanLimitCell.setValue(actionSheet.getPlanningCT());
				if (actionSheet.getPlanningCTTextIsNotNull())
					textCell.setValue(actionSheet.getPlanningCTText());		
			}
			else
			{
				cell.getRow().getRows().clear();
			}
		}
	}	
}
