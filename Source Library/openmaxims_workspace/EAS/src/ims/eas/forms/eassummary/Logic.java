//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4847.21738)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.forms.eassummary;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.StaleObjectException;
import ims.eas.vo.EASStatusRecordVo;
import ims.eas.vo.EASStatusRecordVoCollection;
import ims.eas.vo.ElectronicActionSheetVo;
import ims.eas.vo.lookups.EASStatus;
import ims.framework.utils.DateTime;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int EAS_SUMMARY_IMSID = 339;
	private static final String EAS_SUMMARY_SEED = "ElectronicActionSheet_id";

	public void setValue(ElectronicActionSheetVo eas)
	{
		form.getLocalContext().setRecord(eas);
		
		buildReport(eas);
	}

	private void buildReport(ElectronicActionSheetVo eas) 
	{
		if(eas == null)
			return;
		
		form.htmEASSummary().setHTML("");
		form.getLocalContext().setHTMLValue(null);
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
			
		Object[] obj = domain.getSystemReportAndTemplate(EAS_SUMMARY_IMSID);
			
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}

		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
				return;
		}
			
		client.addSeed(new SeedValue(EAS_SUMMARY_SEED, eas.getID_ElectronicActionSheet(), Integer.class));	

		try
		{
			form.getLocalContext().setHTMLValue(client.buildReportAsUrlInlineFrame((String)obj[0], (String)obj[1], urlReportServer, QueryBuilderClient.PDF, "", 1));
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage("Error printing report: " + e.getMessage());
			return;
		}
		
		form.htmEASSummary().setHTML(form.getLocalContext().getHTMLValue());
	}

	public ElectronicActionSheetVo getValue() 
	{
		return form.getLocalContext().getRecord();
	}

	public Boolean save() 
	{
		return saveStatus(null);
	}

	private Boolean saveStatus(EASStatus status) 
	{
		ElectronicActionSheetVo eas = populateDataFromScreen(status);
		
		if(eas == null)
		{
			engine.showErrors(new String[] {"Nothing to save."});
			return false;
		}
		
		String[] errors = eas.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setRecord(domain.save(eas));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			if(form.getLocalContext().getRecord() != null && form.getLocalContext().getRecord().getID_ElectronicActionSheet() != null)
			{
				form.getLocalContext().setRecord(domain.get(form.getLocalContext().getRecord()));
			}
			
			return false;
		}
		
		return true;
	}

	private ElectronicActionSheetVo populateDataFromScreen(EASStatus easStatus) 
	{
		ElectronicActionSheetVo eas = form.getLocalContext().getRecord();
		
		if(eas == null)
			return null;
		
		//WDEV-17504
		eas.setActionRequired(true);
		
		EASStatusRecordVo status = new EASStatusRecordVo();
		
		status.setRecordingDateTime(new DateTime());
		status.setRecordingMos(form.getLocalContext().getCurrentMOS());
		EASStatus newStatus = (easStatus == null ? getStatus(eas) : easStatus);
		status.setStatus(newStatus);
		status.setRemovedStat(eas.getRemovedStat());
		status.setActionRequired(eas.getActionRequired());
		status.setTPCreated(eas.getTPCreated());
		status.setComment(eas.getEasStatus().getComment());
		status.setRemovalReason(eas.getRemovalReason());
		
		eas.setEasStatus(status);
		
		if(eas.getStatusHistory() == null)
			eas.setStatusHistory(new EASStatusRecordVoCollection());
		
		eas.getStatusHistory().add(status);
		
		if(EASStatus.AUTHORISED.equals(newStatus))
		{
			if(eas.getAuthorisedBy() == null)
			{
				eas.setAuthorisedBy(form.getLocalContext().getCurrentMOS());
			}
			if(eas.getAuthorisedDateTime() == null)
			{
				eas.setAuthorisedDateTime(new DateTime());
			}
		}
		
		return eas;
	}

	private EASStatus getStatus(ElectronicActionSheetVo eas) 
	{
		if(eas == null)
			return null;
		
		if(engine.hasRight(AppRight.CAN_AUTHORISE_EAS) && form.getLocalContext().getCurrentHCP() != null)
		{
			if(Boolean.TRUE.equals(form.getLocalContext().getCurrentHCP().getIsHCPaResponsibleHCP()) && HcpDisType.MEDICAL.equals(form.getLocalContext().getCurrentHCP().getHcpType()) && domain.isConsultant(form.getLocalContext().getCurrentHCP()))
				return EASStatus.AUTHORISED;
			else if(eas.getSeenBy() != null && form.getLocalContext().getCurrentHCP().getID_Hcp().equals(eas.getSeenBy().getID_Hcp()))
				return EASStatus.AUTHORISED;
		}
		
		return EASStatus.AWAITING_AUTHORISATION;
	}

	public void initialise() 
	{
		Object hcp = domain.getHcpLiteUser();
		
		if(hcp instanceof HcpLiteVo)
		{
			form.getLocalContext().setCurrentHCP((HcpLiteVo) hcp);
			form.getLocalContext().setCurrentMOS(((HcpLiteVo) hcp).getMos());
		}
		else
		{
			Object mos = domain.getMosUser();
			
			if(mos instanceof MemberOfStaffLiteVo)
			{
				form.getLocalContext().setCurrentMOS((MemberOfStaffLiteVo) mos);
			}
		}
	}

	public Boolean authorise() 
	{
		return saveStatus(EASStatus.AUTHORISED);
	}

	public void hideHTML() 
	{
		form.htmEASSummary().setHTML("");
	}

	public void showHTML() 
	{
		buildReport(getValue());
	}
}
