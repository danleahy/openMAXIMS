//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.eas.forms.easmiscellaneous;

public abstract class BaseLogic extends Handlers implements IComponent
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.eas.domain.EASMiscellaneous.class;
	}
	public final void setContext(ims.framework.UIComponentEngine engine, GenForm form, ims.eas.domain.EASMiscellaneous domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	public void setMode(ims.framework.enumerations.FormMode mode)
	{
		form.setMode(mode);
	}
	public ims.framework.enumerations.FormMode getMode()
	{
		return form.getMode();
	}
	protected final void oncmbPatientStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPatientStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Status existingInstance = (ims.ccosched.vo.lookups.Status)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPatientStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.Status)
		{
			ims.ccosched.vo.lookups.Status instance = (ims.ccosched.vo.lookups.Status)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPatientStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Status existingInstance = (ims.ccosched.vo.lookups.Status)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPatientStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPatientStatusLookup()
	{
		this.form.cmbPatientStatus().clear();
		ims.ccosched.vo.lookups.StatusCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPatientStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPatientStatusLookupValue(int id)
	{
		ims.ccosched.vo.lookups.Status instance = ims.ccosched.vo.lookups.LookupHelper.getStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPatientStatus().setValue(instance);
	}
	protected final void defaultcmbPatientStatusLookupValue()
	{
		this.form.cmbPatientStatus().setValue((ims.ccosched.vo.lookups.Status)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.Status.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.Status.TYPE_ID));
	}
	protected final void oncmbIPOPTreatmentValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbIPOPTreatment().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.AttendingAs existingInstance = (ims.ccosched.vo.lookups.AttendingAs)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIPOPTreatmentLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.AttendingAs)
		{
			ims.ccosched.vo.lookups.AttendingAs instance = (ims.ccosched.vo.lookups.AttendingAs)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIPOPTreatmentLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.AttendingAs existingInstance = (ims.ccosched.vo.lookups.AttendingAs)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbIPOPTreatment().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIPOPTreatmentLookup()
	{
		this.form.cmbIPOPTreatment().clear();
		ims.ccosched.vo.lookups.AttendingAsCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getAttendingAs(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbIPOPTreatment().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIPOPTreatmentLookupValue(int id)
	{
		ims.ccosched.vo.lookups.AttendingAs instance = ims.ccosched.vo.lookups.LookupHelper.getAttendingAsInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbIPOPTreatment().setValue(instance);
	}
	protected final void defaultcmbIPOPTreatmentLookupValue()
	{
		this.form.cmbIPOPTreatment().setValue((ims.ccosched.vo.lookups.AttendingAs)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.AttendingAs.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.AttendingAs.TYPE_ID));
	}
	protected final void oncmbIPOPPlanningValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbIPOPPlanning().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.AttendingAs existingInstance = (ims.ccosched.vo.lookups.AttendingAs)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIPOPPlanningLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.AttendingAs)
		{
			ims.ccosched.vo.lookups.AttendingAs instance = (ims.ccosched.vo.lookups.AttendingAs)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIPOPPlanningLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.AttendingAs existingInstance = (ims.ccosched.vo.lookups.AttendingAs)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbIPOPPlanning().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIPOPPlanningLookup()
	{
		this.form.cmbIPOPPlanning().clear();
		ims.ccosched.vo.lookups.AttendingAsCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getAttendingAs(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbIPOPPlanning().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIPOPPlanningLookupValue(int id)
	{
		ims.ccosched.vo.lookups.AttendingAs instance = ims.ccosched.vo.lookups.LookupHelper.getAttendingAsInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbIPOPPlanning().setValue(instance);
	}
	protected final void defaultcmbIPOPPlanningLookupValue()
	{
		this.form.cmbIPOPPlanning().setValue((ims.ccosched.vo.lookups.AttendingAs)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.AttendingAs.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.AttendingAs.TYPE_ID));
	}
	protected final void oncmbTransportTreatmentValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTransportTreatment().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Transport existingInstance = (ims.ccosched.vo.lookups.Transport)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTransportTreatmentLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.Transport)
		{
			ims.ccosched.vo.lookups.Transport instance = (ims.ccosched.vo.lookups.Transport)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTransportTreatmentLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Transport existingInstance = (ims.ccosched.vo.lookups.Transport)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTransportTreatment().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTransportTreatmentLookup()
	{
		this.form.cmbTransportTreatment().clear();
		ims.ccosched.vo.lookups.TransportCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getTransport(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTransportTreatment().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTransportTreatmentLookupValue(int id)
	{
		ims.ccosched.vo.lookups.Transport instance = ims.ccosched.vo.lookups.LookupHelper.getTransportInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTransportTreatment().setValue(instance);
	}
	protected final void defaultcmbTransportTreatmentLookupValue()
	{
		this.form.cmbTransportTreatment().setValue((ims.ccosched.vo.lookups.Transport)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.Transport.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.Transport.TYPE_ID));
	}
	protected final void oncmbTransportPlanningValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTransportPlanning().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Transport existingInstance = (ims.ccosched.vo.lookups.Transport)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTransportPlanningLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ccosched.vo.lookups.Transport)
		{
			ims.ccosched.vo.lookups.Transport instance = (ims.ccosched.vo.lookups.Transport)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTransportPlanningLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ccosched.vo.lookups.Transport existingInstance = (ims.ccosched.vo.lookups.Transport)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTransportPlanning().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTransportPlanningLookup()
	{
		this.form.cmbTransportPlanning().clear();
		ims.ccosched.vo.lookups.TransportCollection lookupCollection = ims.ccosched.vo.lookups.LookupHelper.getTransport(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTransportPlanning().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTransportPlanningLookupValue(int id)
	{
		ims.ccosched.vo.lookups.Transport instance = ims.ccosched.vo.lookups.LookupHelper.getTransportInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTransportPlanning().setValue(instance);
	}
	protected final void defaultcmbTransportPlanningLookupValue()
	{
		this.form.cmbTransportPlanning().setValue((ims.ccosched.vo.lookups.Transport)domain.getLookupService().getDefaultInstance(ims.ccosched.vo.lookups.Transport.class, engine.getFormName().getID(), ims.ccosched.vo.lookups.Transport.TYPE_ID));
	}
	protected final void oncmbConcurrentSystemicTreatmentValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbConcurrentSystemicTreatment().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbConcurrentSystemicTreatmentLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbConcurrentSystemicTreatmentLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbConcurrentSystemicTreatment().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbConcurrentSystemicTreatmentLookup()
	{
		this.form.cmbConcurrentSystemicTreatment().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbConcurrentSystemicTreatment().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbConcurrentSystemicTreatmentLookupValue(int id)
	{
		ims.core.vo.lookups.YesNo instance = ims.core.vo.lookups.LookupHelper.getYesNoInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbConcurrentSystemicTreatment().setValue(instance);
	}
	protected final void defaultcmbConcurrentSystemicTreatmentLookupValue()
	{
		this.form.cmbConcurrentSystemicTreatment().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.eas.domain.EASMiscellaneous domain;
}
