//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.forms.electronicactionsheetworklist;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientIdListVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.MedicGrade;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.StaleObjectException;
import ims.eas.forms.electronicactionsheetworklist.GenForm.grdWorklistRow;
import ims.eas.vo.EASStatusRecordVo;
import ims.eas.vo.EasWorklistSearchCriteriaVo;
import ims.eas.vo.EasWorklistVo;
import ims.eas.vo.EasWorklistVoCollection;
import ims.eas.vo.ElectronicActionSheetVo;
import ims.eas.vo.enums.EasAction;
import ims.eas.vo.lookups.EASStatus;
import ims.eas.vo.lookups.EASStatusCollection;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
	}

	private void initialise()
	{
		form.ccRespHcp().initializeConsultantResponsibleHcp(MosType.MEDIC, MedicGrade.CONS, Boolean.TRUE);
		form.ccSeenBy().initialize(MosType.MEDIC);
		populateFromSearchCriteria();
	}

	private void populateFromSearchCriteria()
	{
		EasWorklistSearchCriteriaVo searchCriteria = form.getGlobalContext().EAS.getEasWorklistSearchCriteria();

		if (searchCriteria != null)
		{
			form.dteDecisionToTreatFrom().setValue(searchCriteria.getDecisionToTreatFrom());
			form.dteDecisionToTreatTo().setValue(searchCriteria.getDecisionToTreatTo());
			form.dteSeenFrom().setValue(searchCriteria.getDateSeenFrom());
			form.dteSeenTo().setValue(searchCriteria.getDateSeenTo());
			form.ccRespHcp().setValue(searchCriteria.getResponsibleHcp());
			form.ccSeenBy().setValue(searchCriteria.getSeenBy());
			form.cmbPriority().setValue(searchCriteria.getPriority());
			form.cmbTreatmentIntent().setValue(searchCriteria.getTreatmentIntent());
			form.cmbPatientStatus().setValue(searchCriteria.getPatientStatus());
			form.chklistEasStatus().setValues(searchCriteria.getEasStatuses());
			form.chkActionRequired().setValue(searchCriteria.getActionRequired());
			form.chkEasRemoved().setValue(searchCriteria.getEasRemoved());
			form.chkTpCreated().setValue(searchCriteria.getTpCreated());
			doSearch();
		}
		else
		{
			EASStatusCollection statusCollection = new EASStatusCollection();
			
			statusCollection.add(EASStatus.AWAITING_AUTHORISATION);
			statusCollection.add(EASStatus.AUTHORISED);
			form.chklistEasStatus().setValues(statusCollection);
			
			form.chkActionRequired().setValue(Boolean.TRUE);
			form.chkEasRemoved().setValue(Boolean.FALSE);
			form.chkTpCreated().setValue(Boolean.FALSE);
		}
	}

	@Override
	protected void onGrdWorklistSelectionChanged()
	{	
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.grdWorklist().getValue().getPatient()));
		form.getLocalContext().setElectronicActionSheet(domain.getEas(form.grdWorklist().getValue().getID_ElectronicActionSheet()));
		form.getGlobalContext().EAS.setElectronicActionSheet(form.getLocalContext().getElectronicActionSheet());
		form.getLocalContext().setSelectedEas(form.grdWorklist().getValue());
		
		if (form.getLocalContext().getSelectedEas().getVersion_ElectronicActionSheet() != form.getLocalContext().getElectronicActionSheet().getVersion_ElectronicActionSheet())
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			doSearch();
			return;
		}
		
		updateControlsState();
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria();
		clearGridAndContext();
		updateControlsState();
	}

	private void clearGridAndContext()
	{
		form.grdWorklist().getRows().clear();
		form.getGlobalContext().EAS.setEasWorklistSearchCriteria(null);
		clearContexts();
	}

	private void clearSearchCriteria()
	{
		form.dteDecisionToTreatFrom().setValue(null);
		form.dteDecisionToTreatTo().setValue(null);
		form.dteSeenFrom().setValue(null);
		form.dteSeenTo().setValue(null);
		form.ccRespHcp().clear();
		form.ccSeenBy().clear();
		form.cmbPriority().setValue(null);
		form.cmbTreatmentIntent().setValue(null);
		form.cmbPatientStatus().setValue(null);
		form.chklistEasStatus().setValues(null);
		form.chkActionRequired().setValue(Boolean.FALSE);
		form.chkEasRemoved().setValue(Boolean.FALSE);
		form.chkTpCreated().setValue(Boolean.FALSE);
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedEas(null);
		doSearch();
	}

	private void doSearch()
	{
		form.grdWorklist().getRows().clear();
		form.getGlobalContext().EAS.setEasWorklistSearchCriteria(null);
		
		if (! validateUiRules())
		{
			updateControlsState();
			return;
		}

		EasWorklistSearchCriteriaVo searchCriteria = getSearchCriteria();
		form.getGlobalContext().EAS.setEasWorklistSearchCriteria(searchCriteria);
		
		EasWorklistVoCollection easCollection = domain.getEasCollection(searchCriteria);
		
		populateScreenFromData(easCollection);

		if (form.getLocalContext().getSelectedEas() != null)
		{
			form.grdWorklist().setValue(form.getLocalContext().getSelectedEas());
		}
		
		if (form.grdWorklist().getSelectedRow() == null)
		{
			clearContexts();
		}
		else
			onGrdWorklistSelectionChanged();
		
		updateControlsState();
	}

	private void clearContexts()
	{
		form.getLocalContext().setSelectedEas(null);
		form.getLocalContext().setElectronicActionSheet(null);
		form.getGlobalContext().EAS.setElectronicActionSheet(null);
		form.getGlobalContext().Core.setPatientShort(null);
	}

	private boolean validateUiRules()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if (form.dteSeenTo().getValue() != null && form.dteSeenFrom().getValue() != null && form.dteSeenFrom().getValue().isGreaterThan(form.dteSeenTo().getValue()))
		{
			listOfErrors.add("Date Seen From cannot be greater than Date Seen To.");
		}
		
		if (form.dteDecisionToTreatTo().getValue() != null && form.dteDecisionToTreatFrom().getValue() != null && form.dteDecisionToTreatFrom().getValue().isGreaterThan(form.dteDecisionToTreatTo().getValue()))
		{
			listOfErrors.add("DTT From date cannot be greater than DTT To date.");
		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		if (result != null && result.length > 0)
		{
			engine.showErrors(result);
			return false;
		}

		return true;
	}

	private void populateScreenFromData(EasWorklistVoCollection easCollection)
	{
		if (easCollection == null || easCollection.size() == 0)
		{
			engine.showMessage("No records found.");
			updateControlsState();
			return;
		}

		for (int i = 0; i < easCollection.size(); i++)
		{
			grdWorklistRow row = form.grdWorklist().getRows().newRow();

			row.setColPriority(easCollection.get(i).getPriority() != null ? easCollection.get(i).getPriority().getText() : "");
			row.setTooltipForColPriority(easCollection.get(i).getPriority() != null ? easCollection.get(i).getPriority().getText() : "");

			row.setColDateSeen(easCollection.get(i).getDateSeen());
			row.setTooltipForColDateSeen(easCollection.get(i).getDateSeen() != null ? easCollection.get(i).getDateSeen().toString() : "");

			String HospNo = getHospitalNo(easCollection.get(i).getPatient().getIdentifiers());
			row.setColHospNo(HospNo);
			row.setTooltipForColHospNo(HospNo);

			String patientName = easCollection.get(i).getPatient().getName().getSurname() + (easCollection.get(i).getPatient().getName().getForename() != null ? " " + easCollection.get(i).getPatient().getName().getForename() :""); 
			row.setColPatient(patientName);
			row.setTooltipForColPatient(patientName);

			row.setColDttDate(easCollection.get(i).getDateDecisionToTreat());
			row.setTooltipForColDttDate(easCollection.get(i).getDateDecisionToTreat() != null ? easCollection.get(i).getDateDecisionToTreat().toString() : "");

			row.setColRespHcp(easCollection.get(i).getResponsibleHcp() != null ? easCollection.get(i).getResponsibleHcp().toString() : "");
			row.setTooltipForColRespHcp(easCollection.get(i).getResponsibleHcp() != null ? easCollection.get(i).getResponsibleHcp().toString() : "");
			
			row.setColPatStatus(easCollection.get(i).getPatientStatus() != null ? easCollection.get(i).getPatientStatus().getText() : "");
			row.setTooltipForColPatStatus(easCollection.get(i).getPatientStatus() != null ? easCollection.get(i).getPatientStatus().getText() : "");

			row.setColTumour(easCollection.get(i).getPrimaryTumour() != null ? easCollection.get(i).getPrimaryTumour().getPrimaryTumour().getText() : "");
			row.setTooltipForColTumour(easCollection.get(i).getPrimaryTumour() != null ? easCollection.get(i).getPrimaryTumour().getPrimaryTumour().getText() : "");

			row.setColSite(easCollection.get(i).getTreatmentSite() != null ? easCollection.get(i).getTreatmentSite().getTreatmentSite().getText() : "");
			row.setTooltipForColSite(easCollection.get(i).getTreatmentSite() != null ? easCollection.get(i).getTreatmentSite().getTreatmentSite().getText() : "");

			row.setColTreatmentIntent(easCollection.get(i).getIntent() != null ? easCollection.get(i).getIntent().getIItemText() : "");
			row.setTooltipForColTreatmentIntent(easCollection.get(i).getIntent() != null ? easCollection.get(i).getIntent().getIItemText() : "");

			row.setColDelayed(easCollection.get(i).getDelayed() != null ? easCollection.get(i).getDelayed() : Boolean.FALSE);

			row.setColEasStatus(easCollection.get(i).getEasStatus() != null ? easCollection.get(i).getEasStatus().getStatus().getText() : "");
			row.setTooltipForColEasStatus(easCollection.get(i).getEasStatus() != null ? easCollection.get(i).getEasStatus().getStatus().getText() : "");
			
			row.setValue(easCollection.get(i));
		}
	}

	private String getHospitalNo(PatientIdListVoCollection identifiers)
	{
		String HospNo = "";

		if (identifiers == null || identifiers.size() == 0)
		{
			return HospNo;
		}

		for (int i = 0; i < identifiers.size(); i++)
		{
			if (PatIdType.HOSPNUM.equals(identifiers.get(i).getType()))
			{
				HospNo = identifiers.get(i).getValue();
				break;
			}
		}

		return HospNo;
	}

	private EasWorklistSearchCriteriaVo getSearchCriteria()
	{
		EasWorklistSearchCriteriaVo searchCriteria = new EasWorklistSearchCriteriaVo();

		searchCriteria.setDecisionToTreatFrom(form.dteDecisionToTreatFrom().getValue());
		searchCriteria.setDecisionToTreatTo(form.dteDecisionToTreatTo().getValue());
		searchCriteria.setDateSeenFrom(form.dteSeenFrom().getValue());
		searchCriteria.setDateSeenTo(form.dteSeenTo().getValue());
		searchCriteria.setResponsibleHcp(form.ccRespHcp().getValue());
		searchCriteria.setSeenBy(form.ccSeenBy().getValue());
		searchCriteria.setPriority(form.cmbPriority().getValue());
		searchCriteria.setTreatmentIntent(form.cmbTreatmentIntent().getValue());
		searchCriteria.setPatientStatus(form.cmbPatientStatus().getValue());
		searchCriteria.setEasStatuses(form.chklistEasStatus().getValues());
		searchCriteria.setActionRequired(form.chkActionRequired().getValue());
		searchCriteria.setEasRemoved(form.chkEasRemoved().getValue());
		searchCriteria.setTpCreated(form.chkTpCreated().getValue());

		return searchCriteria;
	}

	private void updateControlsState()
	{
		Boolean isRowSelected = form.grdWorklist().getSelectedRow() != null;
		EasWorklistVo rowSelected = (form.grdWorklist().getSelectedRow() != null ? form.grdWorklist().getSelectedRow().getValue() : null);
		Boolean isTpCreated = isRowSelected && Boolean.TRUE.equals(rowSelected.getTPCreated());
		Boolean isActionRequired = isRowSelected && Boolean.TRUE.equals(rowSelected.getActionRequired());
		Boolean wasRemoved = isRowSelected && Boolean.TRUE.equals(rowSelected.getRemovedStat());
		Boolean isDraft = isRowSelected && rowSelected.getEasStatus() != null && EASStatus.DRAFT.equals(rowSelected.getEasStatus().getStatus());
		Boolean isAwaitingAuthorisation = isRowSelected && rowSelected.getEasStatus() != null && EASStatus.AWAITING_AUTHORISATION.equals(rowSelected.getEasStatus().getStatus());
		Boolean isAnnotated = isRowSelected && rowSelected.getEasStatus() != null && EASStatus.ANNOTATED.equals(rowSelected.getEasStatus().getStatus());
		
		HcpLiteVo hcpLite = (HcpLiteVo) domain.getHcpLiteUser();
		Boolean isResponsibleMedic = hcpLite != null && HcpDisType.MEDICAL.equals(hcpLite.getHcpType()) && Boolean.TRUE.equals(hcpLite.getIsHCPaResponsibleHCP());
		Boolean isSeenByMedic = hcpLite != null && isRowSelected && rowSelected.getSeenBy() != null && HcpDisType.MEDICAL.equals(hcpLite.getHcpType()) && rowSelected.getSeenBy().equals(hcpLite);

		form.getContextMenus().EAS.hideAllEasWorklistMenuMenuItems(); //WDEV-17731
		
		form.getContextMenus().EAS.getEasWorklistMenuREMOVEItem().setVisible(isRowSelected && !wasRemoved && !isDraft);
		form.getContextMenus().EAS.getEasWorklistMenuTREATMENT_PLAN_CREATEDItem().setVisible(isRowSelected && !isTpCreated && isActionRequired && !isDraft && !isAwaitingAuthorisation);
		form.getContextMenus().EAS.getEasWorklistMenuANNOTATION_ACTIONEDItem().setVisible(isRowSelected && isTpCreated && isActionRequired && isAnnotated);
		form.getContextMenus().EAS.getEasWorklistMenuAUTHORISEItem().setVisible(isRowSelected && isAwaitingAuthorisation && engine.hasRight(AppRight.CAN_AUTHORISE_EAS) && (isResponsibleMedic || isSeenByMedic));
		form.getContextMenus().EAS.getEasWorklistMenuVIEW_SUMMARYItem().setVisible(isRowSelected);
		form.getContextMenus().EAS.getEasWorklistMenuVIEW_HISTORYItem().setVisible(isRowSelected);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().EAS.RemovalReason) && DialogResult.OK.equals(result))
		{
			ElectronicActionSheetVo easToSave = form.getLocalContext().getElectronicActionSheet();
			easToSave.setRemovedStat(Boolean.TRUE);
			easToSave.setActionRequired(Boolean.FALSE);
			easToSave.setRemovalReason(form.getGlobalContext().EAS.getRemovalReason().getRemovalReason());
			
			//WDEV-17504
			EASStatusRecordVo easStatus = new EASStatusRecordVo();
			
			easStatus.setStatus(easToSave.getEasStatus().getStatus());
			easStatus.setRecordingDateTime(new DateTime());
			easStatus.setRecordingMos((MemberOfStaffLiteVo) domain.getMosUser());
			easStatus.setRemovedStat(Boolean.TRUE);
			easStatus.setActionRequired(Boolean.FALSE);
			easStatus.setTPCreated(easToSave.getTPCreated());
			easStatus.setComment(easToSave.getEasStatus().getComment());
			easStatus.setRemovalReason(form.getGlobalContext().EAS.getRemovalReason().getRemovalReason());
			
			easToSave.getStatusHistory().add(easStatus);
			easToSave.setEasStatus(easStatus);
			
			String[] errors = easToSave.validate();
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return;
			}
			
			try 
			{
				form.getLocalContext().setElectronicActionSheet(domain.saveEas(easToSave));
				form.getGlobalContext().EAS.setElectronicActionSheet(form.getLocalContext().getElectronicActionSheet());
			}
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				doSearch();
			}
			
			doSearch();
		}
		else if (formName.equals(form.getForms().EAS.PatientElectronicActionSheet))
		{
			doSearch();
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EASNamespace.EasWorklistMenu.REMOVE:
				engine.open(form.getForms().EAS.RemovalReason);
				break;
				
			case GenForm.ContextMenus.EASNamespace.EasWorklistMenu.TREATMENT_PLAN_CREATED:
				setTreatmentPlanCreated();
				break;
				
			case GenForm.ContextMenus.EASNamespace.EasWorklistMenu.ANNOTATION_ACTIONED:
				setAnnotationActioned();
				break;
				
			case GenForm.ContextMenus.EASNamespace.EasWorklistMenu.AUTHORISE:
				engine.open(form.getForms().EAS.PatientElectronicActionSheet, new  Object[]{(EasAction.AUTHORISE)});
				break;
				
			case GenForm.ContextMenus.EASNamespace.EasWorklistMenu.VIEW_SUMMARY:
				engine.open(form.getForms().EAS.PatientElectronicActionSheet, new  Object[]{(EasAction.VIEW_SUMMARY)});
				break;
				
			case GenForm.ContextMenus.EASNamespace.EasWorklistMenu.VIEW_HISTORY:
				form.getGlobalContext().EAS.setEasStatusHistory(form.getGlobalContext().EAS.getElectronicActionSheet().getStatusHistory());
				engine.open(form.getForms().EAS.EasStatusHistory);
				break;
		}
	}

	private void setAnnotationActioned()
	{
		ElectronicActionSheetVo easToSave = form.getLocalContext().getElectronicActionSheet();
		easToSave.setActionRequired(Boolean.FALSE);
		
		//WDEV-17504
		EASStatusRecordVo easStatus = new EASStatusRecordVo();
		
		easStatus.setStatus(easToSave.getEasStatus().getStatus());
		easStatus.setRecordingDateTime(new DateTime());
		easStatus.setRecordingMos((MemberOfStaffLiteVo) domain.getMosUser());
		easStatus.setRemovedStat(easToSave.getRemovedStat());
		easStatus.setActionRequired(Boolean.FALSE);
		easStatus.setTPCreated(easToSave.getTPCreated());
		easStatus.setComment(easToSave.getEasStatus().getComment());
		easStatus.setRemovalReason(easToSave.getRemovalReason());
		
		easToSave.getStatusHistory().add(easStatus);
		
		easToSave.setEasStatus(easStatus);
		
		String[] errors = easToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{
			form.getLocalContext().setElectronicActionSheet(domain.saveEas(easToSave));
			form.getGlobalContext().EAS.setElectronicActionSheet(form.getLocalContext().getElectronicActionSheet());
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			doSearch();
			return;
		}
		
		engine.showMessage("Annotation Actioned recorded.", "", MessageButtons.OK, MessageIcon.INFORMATION);
		doSearch();
	}

	private void setTreatmentPlanCreated()
	{
		ElectronicActionSheetVo easToSave = form.getLocalContext().getElectronicActionSheet();
		easToSave.setTPCreated(Boolean.TRUE);
		easToSave.setActionRequired(Boolean.FALSE);
		
		//WDEV-17504
		EASStatusRecordVo easStatus = new EASStatusRecordVo();

		easStatus.setStatus(easToSave.getEasStatus().getStatus());
		easStatus.setRecordingDateTime(new DateTime());
		easStatus.setRecordingMos((MemberOfStaffLiteVo) domain.getMosUser());
		easStatus.setRemovedStat(easToSave.getRemovedStat());
		easStatus.setTPCreated(Boolean.TRUE);
		easStatus.setActionRequired(Boolean.FALSE);
		easStatus.setComment(easToSave.getEasStatus().getComment());
		easStatus.setRemovalReason(easToSave.getRemovalReason());

		easToSave.getStatusHistory().add(easStatus);
		easToSave.setEasStatus(easStatus);
		
		String[] errors = easToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{
			form.getLocalContext().setElectronicActionSheet(domain.saveEas(easToSave));
			form.getGlobalContext().EAS.setElectronicActionSheet(form.getLocalContext().getElectronicActionSheet());
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			doSearch();
			return;
		}
		
		engine.showMessage("Treatment Plan Created Action recorded.", "", MessageButtons.OK, MessageIcon.INFORMATION);
		doSearch();
	}

	@Override
	protected void onGrdWorklistGridHeaderClicked(int column) throws PresentationLogicException
	{
		EasWorklistVoCollection values = form.grdWorklist().getValues();
		
		if (values == null || values.size() == 0)
			return;
		
		form.grdWorklist().getRows().clear();
		
		switch (column)
		{
			case 5:
				form.getLocalContext().setRespHcpSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getRespHcpSortOrder()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new ResponsibleHcpComparator(form.getLocalContext().getRespHcpSortOrder()));
			break;
		}
		
		populateScreenFromData(values);
		
		//WDEV-17587
		if (form.getLocalContext().getSelectedEas() != null)
		{
			form.grdWorklist().setValue(form.getLocalContext().getSelectedEas());
		}
	}
	
	class ResponsibleHcpComparator implements Comparator<EasWorklistVo>
	{
		private int order = 1;
		
		public ResponsibleHcpComparator()
		{
			order = 1;
		}
		
		public ResponsibleHcpComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		
		public int compare(EasWorklistVo o1, EasWorklistVo o2)
		{
			
			if(o1 != null && o1.getResponsibleHcpIsNotNull() && o2 != null && o2.getResponsibleHcpIsNotNull())
				return order*o1.getResponsibleHcp().compareTo(o2.getResponsibleHcp());
			
			if (o1 == null)
				return -1 * order;
			
			if (o2 == null)
				return order;
			
			return 0;
		}
	}
}
