//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.eas.forms.easoverviewcomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbDelayedReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.ActionStatusReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.ActionStatusReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.ActionStatusReason getValue()
		{
			return (ims.ccosched.vo.lookups.ActionStatusReason)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.ActionStatusReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPriorityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.Priority value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.Priority value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.Priority value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.Priority value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.Priority value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.Priority getValue()
		{
			return (ims.ccosched.vo.lookups.Priority)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.Priority value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbIntentComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.TreatmentIntent value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.TreatmentIntent value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.TreatmentIntent value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.TreatmentIntent value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.TreatmentIntent value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.TreatmentIntent getValue()
		{
			return (ims.ccosched.vo.lookups.TreatmentIntent)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.TreatmentIntent value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSeenAtComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ccosched.vo.lookups.SeenAt value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ccosched.vo.lookups.SeenAt value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ccosched.vo.lookups.SeenAt value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ccosched.vo.lookups.SeenAt value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ccosched.vo.lookups.SeenAt value)
		{
			return super.control.removeRow(value);
		}
		public ims.ccosched.vo.lookups.SeenAt getValue()
		{
			return (ims.ccosched.vo.lookups.SeenAt)super.control.getValue();
		}
		public void setValue(ims.ccosched.vo.lookups.SeenAt value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdAnnotationRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAnnotationRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolDateOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolDate()
		{
			return (String)super.row.get(0);
		}
		public void setcolDate(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolCreatedByReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolCreatedByReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolCreatedByOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolCreatedBy()
		{
			return (String)super.row.get(1);
		}
		public void setcolCreatedBy(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolCreatedByTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolAnnotationReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolAnnotationReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolAnnotationOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolAnnotation()
		{
			return (String)super.row.get(2);
		}
		public void setcolAnnotation(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolAnnotationTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.eas.vo.ProtocolListVo getValue()
		{
			return (ims.eas.vo.ProtocolListVo)super.row.getValue();
		}
		public void setValue(ims.eas.vo.ProtocolListVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAnnotationRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAnnotationRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAnnotationRow get(int index)
		{
			return new grdAnnotationRow(super.collection.get(index));
		}
		public grdAnnotationRow newRow()
		{
			return new grdAnnotationRow(super.collection.newRow());
		}
		public grdAnnotationRow newRow(boolean autoSelect)
		{
			return new grdAnnotationRow(super.collection.newRow(autoSelect));
		}
		public grdAnnotationRow newRowAt(int index)
		{
			return new grdAnnotationRow(super.collection.newRowAt(index));
		}
		public grdAnnotationRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAnnotationRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAnnotationGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.eas.vo.ProtocolListVo[] getValues()
		{
			ims.eas.vo.ProtocolListVo[] listOfValues = new ims.eas.vo.ProtocolListVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.eas.vo.ProtocolListVo getValue()
		{
			return (ims.eas.vo.ProtocolListVo)super.grid.getValue();
		}
		public void setValue(ims.eas.vo.ProtocolListVo value)
		{
			super.grid.setValue(value);
		}
		public grdAnnotationRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAnnotationRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAnnotationRowCollection getRows()
		{
			return new grdAnnotationRowCollection(super.grid.getRows());
		}
		public grdAnnotationRow getRowByValue(ims.eas.vo.ProtocolListVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAnnotationRow(row);
		}
		public void setcolDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolCreatedByHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolCreatedByHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolAnnotationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolAnnotationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(832, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 168, 48, 664, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccSeenByForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_ccSeenByControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(168), new Integer(48), new Integer(664), new Integer(20), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccSeenByForm, instance1 } );
		ims.framework.Control m_ccSeenByControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccSeenByForm, instance1, Boolean.TRUE } );
		super.addControl(m_ccSeenByControl);
		Menu[] menus1 = m_ccSeenByForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 168, 16, 664, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccResponsibleHcpForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance2, startTabIndex.intValue() + 1, skipContextValidation);
		//ims.framework.Control m_ccResponsibleHcpControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(168), new Integer(16), new Integer(664), new Integer(20), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1), m_ccResponsibleHcpForm, instance2 } );
		ims.framework.Control m_ccResponsibleHcpControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1), m_ccResponsibleHcpForm, instance2, Boolean.TRUE } );
		super.addControl(m_ccResponsibleHcpControl);
		Menu[] menus2 = m_ccResponsibleHcpForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 32, 392, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT, "Annotation:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 32, 232, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "to Treat:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 432, 392, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT, "Annotation History:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 440, 320, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Authorised:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 440, 288, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authorised By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 440, 256, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Created:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 440, 216, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording MOS:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 32, 184, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Priority:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 32, 152, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Intent:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 32, 336, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 192, 256, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 32, 320, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Delayed Reason", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 32, 288, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ready to Treat Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 32, 256, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Delayed", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 32, 120, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Seen at:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 32, 216, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Decision", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 32, 80, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Seen:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 32, 48, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Seen By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 32, 16, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 32, 416, 385, 200, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 544, 216, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 544, 288, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 168, 320, 256, 42, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 544, 320, 272, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 544, 256, 272, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 168, 216, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 168, 80, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));

		// PartialDateBox Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 168, 288, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 240, 256, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbDelayedReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDelayedReasonTemp);
		cmbDelayedReasonComboBox cmbDelayedReason = (cmbDelayedReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDelayedReasonComboBox.class, m_cmbDelayedReasonTemp);
		super.addComboBox(cmbDelayedReason);
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 168, 184, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbPriorityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbPriorityTemp);
		cmbPriorityComboBox cmbPriority = (cmbPriorityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityComboBox.class, m_cmbPriorityTemp);
		super.addComboBox(cmbPriority);
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 168, 152, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbIntentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbIntentTemp);
		cmbIntentComboBox cmbIntent = (cmbIntentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIntentComboBox.class, m_cmbIntentTemp);
		super.addComboBox(cmbIntent);
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 168, 120, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSeenAtTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSeenAtTemp);
		cmbSeenAtComboBox cmbSeenAt = (cmbSeenAtComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSeenAtComboBox.class, m_cmbSeenAtTemp);
		super.addComboBox(cmbSeenAt);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 168, 256, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 432, 416, 385, 200, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdAnnotationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAnnotationTemp);
		grdAnnotationGrid grdAnnotation = (grdAnnotationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAnnotationGrid.class, m_grdAnnotationTemp);
		grdAnnotation.addStringColumn("Date", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAnnotation.addStringColumn("Created By", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAnnotation.addStringColumn("Annotation", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAnnotation);

		// Horizontal Line Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 24, 376, 792, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.core.forms.mosquery.IComponent ccSeenBy()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccSeenByValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccSeenByVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccSeenByVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccSeenByEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccSeenByEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent ccResponsibleHcp()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccResponsibleHcpValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccResponsibleHcpVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccResponsibleHcpVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccResponsibleHcpEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccResponsibleHcpEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public Label lblAnnotate2()
	{
		return (Label)super.getControl(2);
	}
	public Label lblAnnotate()
	{
		return (Label)super.getControl(4);
	}
	public Label lblDateAuthorised()
	{
		return (Label)super.getControl(5);
	}
	public Label lblAuthorisedBy()
	{
		return (Label)super.getControl(6);
	}
	public Label lbl21()
	{
		return (Label)super.getControl(7);
	}
	public Label lblRecordingMos()
	{
		return (Label)super.getControl(8);
	}
	public Label lbl4()
	{
		return (Label)super.getControl(9);
	}
	public Label lblDelayReasonComment()
	{
		return (Label)super.getControl(11);
	}
	public Label lblDelayReason()
	{
		return (Label)super.getControl(12);
	}
	public Label lblDelayReason2()
	{
		return (Label)super.getControl(13);
	}
	public Label lblReadToTreatDate()
	{
		return (Label)super.getControl(14);
	}
	public TextBox txtAnnotate()
	{
		return (TextBox)super.getControl(21);
	}
	public TextBox txtRecordingMos()
	{
		return (TextBox)super.getControl(22);
	}
	public TextBox txtAuthorisedBy()
	{
		return (TextBox)super.getControl(23);
	}
	public TextBox txtDelayedReasonComment()
	{
		return (TextBox)super.getControl(24);
	}
	public DateControl dteDateAuthorised()
	{
		return (DateControl)super.getControl(25);
	}
	public DateControl dteDateCreated()
	{
		return (DateControl)super.getControl(26);
	}
	public DateControl dteDateDecisionToTreat()
	{
		return (DateControl)super.getControl(27);
	}
	public DateControl dteDateSeen()
	{
		return (DateControl)super.getControl(28);
	}
	public PartialDateBox pdtDateReadyToTreat()
	{
		return (PartialDateBox)super.getControl(29);
	}
	public cmbDelayedReasonComboBox cmbDelayedReason()
	{
		return (cmbDelayedReasonComboBox)super.getComboBox(0);
	}
	public cmbPriorityComboBox cmbPriority()
	{
		return (cmbPriorityComboBox)super.getComboBox(1);
	}
	public cmbIntentComboBox cmbIntent()
	{
		return (cmbIntentComboBox)super.getComboBox(2);
	}
	public cmbSeenAtComboBox cmbSeenAt()
	{
		return (cmbSeenAtComboBox)super.getComboBox(3);
	}
	public CheckBox chkDelayed()
	{
		return (CheckBox)super.getControl(34);
	}
	public grdAnnotationGrid grdAnnotation()
	{
		return (grdAnnotationGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				PatientResultsAndOrders = new LocalFormName(116183);
			}
			public final FormName PatientResultsAndOrders;
		}

		public OCRRForms OCRR;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ElectronisActionSheet = new ims.framework.ContextVariable("ElectronisActionSheet", prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier + "");
			cxl_responsibleHcp = new ims.framework.ContextVariable("responsibleHcp", prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__responsibleHcp_" + componentIdentifier + "");
			cxl_seenBy = new ims.framework.ContextVariable("seenBy", prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__seenBy_" + componentIdentifier + "");
		}
		
		public boolean getElectronisActionSheetIsNotNull()
		{
			return !cxl_ElectronisActionSheet.getValueIsNull(context);
		}
		public ims.eas.vo.ElectronicActionSheetVo getElectronisActionSheet()
		{
			return (ims.eas.vo.ElectronicActionSheetVo)cxl_ElectronisActionSheet.getValue(context);
		}
		public void setElectronisActionSheet(ims.eas.vo.ElectronicActionSheetVo value)
		{
			cxl_ElectronisActionSheet.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ElectronisActionSheet = null;
		public boolean getresponsibleHcpIsNotNull()
		{
			return !cxl_responsibleHcp.getValueIsNull(context);
		}
		public ims.core.vo.MedicLiteVo getresponsibleHcp()
		{
			return (ims.core.vo.MedicLiteVo)cxl_responsibleHcp.getValue(context);
		}
		public void setresponsibleHcp(ims.core.vo.MedicLiteVo value)
		{
			cxl_responsibleHcp.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_responsibleHcp = null;
		public boolean getseenByIsNotNull()
		{
			return !cxl_seenBy.getValueIsNull(context);
		}
		public ims.core.vo.Hcp getseenBy()
		{
			return (ims.core.vo.Hcp)cxl_seenBy.getValue(context);
		}
		public void setseenBy(ims.core.vo.Hcp value)
		{
			cxl_seenBy.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_seenBy = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[212];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Core.OutpatientAttendanceForOrder", "BO-1014100001-ID", "ID_OutpatientAttendance");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Core.OutpatientAttendanceForOrder", "BO-1014100001-APPOINTMENTDATETIME", "AppointmentDateTime");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-ID", "ID_ElectronicActionSheet");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PATIENT", "Patient");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-AUTHORISEDDATETIME", "AuthorisedDateTime");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-TPCREATED", "TPCreated");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-ACTIONREQUIRED", "ActionRequired");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-REMOVEDSTAT", "RemovedStat");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-REMOVALREASON", "RemovalReason");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DATESEEN", "DateSeen");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DATEDECISIONTOTREAT", "DateDecisionToTreat");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-FIRSTTHERAPEUTICINTERVENTION", "FirstTherapeuticIntervention");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CLINICALTRIALPATIENT", "ClinicalTrialPatient");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PROTOCOLUSED", "ProtocolUsed");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PATIENTCONSENT", "PatientConsent");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANCONSSESSION", "PlanConsSession");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-APPROPCCCL", "AppropCCCL");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IMAGETRANSFER", "ImageTransfer");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CONCURRENTSYSTEMICTREATMENT", "ConcurrentSystemicTreatment");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-SEENAT", "SeenAt");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-INTENT", "Intent");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PRIORITY", "Priority");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DELAYED", "Delayed");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DELAYEDCOMMENT", "DelayedComment");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-READYTOTREATDATE", "ReadyToTreatDate");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DELAYEDREASON", "DelayedReason");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-TREATSITELATERALITY", "TreatSiteLaterality");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-ANATOMICALSITE", "AnatomicalSite");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CLINICALTRIAL", "ClinicalTrial");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-OFFPROTOCOLREASON", "OffProtocolReason");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-EASCOMMENT", "EasComment");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGCT", "PlanningCT");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGCTTEXT", "PlanningCTText");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-MRIFORCOREG", "MRIforCoReg");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DENTISTREQUIRED", "DentistRequired");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PEGREQUIRED", "PegRequired");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-SIMULATIONREQUIRED", "SimulationRequired");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IVCONTRAST", "IVContrast");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-INVESTIGATIONDATE", "InvestigationDate");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CREATININELEVEL", "CreatinineLevel");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-GATINGOPTIONS", "GatingOptions");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IMRT", "IMRT");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PETCT", "PetCT");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IMMOBTYPE", "ImmobType");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-MOULDROOMACTIVITY", "MouldRoomActivity");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-AGENT", "Agent");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGAPPTDATE", "PlanningApptDate");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGTRANSPORT", "PlanningTransport");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-TREATMENTTRANSPORT", "TreatmentTransport");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IP_OP_PLANNING", "IP_OP_Planning");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IP_OP_TREATMENT", "IP_OP_Treatment");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PATIENTSTATUS", "PatientStatus");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-GRAPHICASSESSMENT", "GraphicAssessment");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-RECENTCREATININE", "RecentCreatinine");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGCTREQUIRED", "PlanningCTRequired");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__responsibleHcp_" + componentIdentifier, "BO-1006100004-ID", "ID_Medic");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__responsibleHcp_" + componentIdentifier, "BO-1006100004-ISACTIVE", "IsActive");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__responsibleHcp_" + componentIdentifier, "BO-1006100004-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__responsibleHcp_" + componentIdentifier, "BO-1006100004-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__responsibleHcp_" + componentIdentifier, "BO-1006100004-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__responsibleHcp_" + componentIdentifier, "BO-1006100004-SPECIALTY", "Specialty");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__seenBy_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__seenBy_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__seenBy_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__seenBy_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[209] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__seenBy_" + componentIdentifier, "BO-1006100000-ISALOCALCONSULTANT", "IsALocalConsultant");
			fields[210] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__seenBy_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[211] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASOverviewComponent.__internal_x_context__seenBy_" + componentIdentifier, "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
