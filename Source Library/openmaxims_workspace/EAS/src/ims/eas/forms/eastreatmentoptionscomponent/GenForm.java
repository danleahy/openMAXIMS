//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)
// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.eas.forms.eastreatmentoptionscomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbTreatmentSiteComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.eas.vo.TreatmentSiteInsVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.eas.vo.TreatmentSiteInsVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.eas.vo.TreatmentSiteInsVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.eas.vo.TreatmentSiteInsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.eas.vo.TreatmentSiteInsVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.eas.vo.TreatmentSiteInsVo getValue()
		{
			return (ims.eas.vo.TreatmentSiteInsVo)super.control.getValue();
		}
		public void setValue(ims.eas.vo.TreatmentSiteInsVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbClinicalTrialComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.oncology.vo.lookups.ClinicalTrialName value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.oncology.vo.lookups.ClinicalTrialName value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.oncology.vo.lookups.ClinicalTrialName value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.oncology.vo.lookups.ClinicalTrialName value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.oncology.vo.lookups.ClinicalTrialName value)
		{
			return super.control.removeRow(value);
		}
		public ims.oncology.vo.lookups.ClinicalTrialName getValue()
		{
			return (ims.oncology.vo.lookups.ClinicalTrialName)super.control.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.ClinicalTrialName value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbProtocolComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.eas.vo.ProtocolLiteInsVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.eas.vo.ProtocolLiteInsVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.eas.vo.ProtocolLiteInsVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.eas.vo.ProtocolLiteInsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.eas.vo.ProtocolLiteInsVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.eas.vo.ProtocolLiteInsVo getValue()
		{
			return (ims.eas.vo.ProtocolLiteInsVo)super.control.getValue();
		}
		public void setValue(ims.eas.vo.ProtocolLiteInsVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbPrimaryTumourComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.eas.vo.PrimaryTumourInsVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.eas.vo.PrimaryTumourInsVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.eas.vo.PrimaryTumourInsVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.eas.vo.PrimaryTumourInsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.eas.vo.PrimaryTumourInsVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.eas.vo.PrimaryTumourInsVo getValue()
		{
			return (ims.eas.vo.PrimaryTumourInsVo)super.control.getValue();
		}
		public void setValue(ims.eas.vo.PrimaryTumourInsVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdPhaseRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPhaseRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setprofilePhaseIdReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isprofilePhaseIdReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showprofilePhaseIdOpened()
		{
			super.row.showOpened(0);
		}
		public Integer getprofilePhaseId()
		{
			return (Integer)super.row.get(0);
		}
		public void setprofilePhaseId(Integer value)
		{
			super.row.set(0, value);
		}
		public void setCellprofilePhaseIdTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnPhaseReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnPhaseReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnPhaseOpened()
		{
			super.row.showOpened(1);
		}
		public ims.eas.vo.lookups.PhaseNames getColumnPhase()
		{
			return (ims.eas.vo.lookups.PhaseNames)super.row.get(1);
		}
		public void setColumnPhase(ims.eas.vo.lookups.PhaseNames value)
		{
			super.row.set(1, value, true);
		}
		public void setCellColumnPhaseTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnDoseReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnDoseReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnDoseOpened()
		{
			super.row.showOpened(2);
		}
		public Float getColumnDose()
		{
			return (Float)super.row.get(2);
		}
		public void setColumnDose(Float value)
		{
			super.row.set(2, value);
		}
		public void setCellColumnDoseTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColumnFractionationReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColumnFractionationReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColumnFractionationOpened()
		{
			super.row.showOpened(3);
		}
		public Integer getColumnFractionation()
		{
			return (Integer)super.row.get(3);
		}
		public void setColumnFractionation(Integer value)
		{
			super.row.set(3, value);
		}
		public void setCellColumnFractionationTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColumnDaysReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColumnDaysReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColumnDaysOpened()
		{
			super.row.showOpened(4);
		}
		public Integer getColumnDays()
		{
			return (Integer)super.row.get(4);
		}
		public void setColumnDays(Integer value)
		{
			super.row.set(4, value);
		}
		public void setCellColumnDaysTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColumnModalityReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColumnModalityReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColumnModalityOpened()
		{
			super.row.showOpened(5);
		}
		public ims.ccosched.vo.lookups.Modality getColumnModality()
		{
			return (ims.ccosched.vo.lookups.Modality)super.row.get(5);
		}
		public void setColumnModality(ims.ccosched.vo.lookups.Modality value)
		{
			super.row.set(5, value, true);
		}
		public void setCellColumnModalityTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColumnEnergyReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColumnEnergyReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColumnEnergyOpened()
		{
			super.row.showOpened(6);
		}
		public Float getColumnEnergy()
		{
			return (Float)super.row.get(6);
		}
		public void setColumnEnergy(Float value)
		{
			super.row.set(6, value);
		}
		public void setCellColumnEnergyTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColumnUnitsReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColumnUnitsReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColumnUnitsOpened()
		{
			super.row.showOpened(7);
		}
		public ims.ccosched.vo.lookups.Unit getColumnUnits()
		{
			return (ims.ccosched.vo.lookups.Unit)super.row.get(7);
		}
		public void setColumnUnits(ims.ccosched.vo.lookups.Unit value)
		{
			super.row.set(7, value, true);
		}
		public void setCellColumnUnitsTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setColumnProvisionalReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean isColumnProvisionalReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showColumnProvisionalOpened()
		{
			super.row.showOpened(8);
		}
		public boolean getColumnProvisional()
		{
			return ((Boolean)super.row.get(8)).booleanValue();
		}
		public void setColumnProvisional(boolean value)
		{
			super.row.set(8, new Boolean(value));
		}
		public void setCellColumnProvisionalTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setColumnSelectedReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean isColumnSelectedReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showColumnSelectedOpened()
		{
			super.row.showOpened(9);
		}
		public boolean getColumnSelected()
		{
			return ((Boolean)super.row.get(9)).booleanValue();
		}
		public void setColumnSelected(boolean value)
		{
			super.row.set(9, new Boolean(value));
		}
		public void setCellColumnSelectedTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public ims.eas.vo.EASPhaseVo getValue()
		{
			return (ims.eas.vo.EASPhaseVo)super.row.getValue();
		}
		public void setValue(ims.eas.vo.EASPhaseVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPhaseRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPhaseRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPhaseRow get(int index)
		{
			return new grdPhaseRow(super.collection.get(index));
		}
		public grdPhaseRow newRow()
		{
			return new grdPhaseRow(super.collection.newRow());
		}
		public grdPhaseRow newRow(boolean autoSelect)
		{
			return new grdPhaseRow(super.collection.newRow(autoSelect));
		}
		public grdPhaseRow newRowAt(int index)
		{
			return new grdPhaseRow(super.collection.newRowAt(index));
		}
		public grdPhaseRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPhaseRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPhaseGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow, int maxLength)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow, maxLength);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addDecimalColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, int precision, int scale, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDecimalColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, precision, scale, validationString, bold, sortOrder, canGrow);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.eas.vo.EASPhaseVoCollection getValues()
		{
			ims.eas.vo.EASPhaseVoCollection listOfValues = new ims.eas.vo.EASPhaseVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.eas.vo.EASPhaseVo getValue()
		{
			return (ims.eas.vo.EASPhaseVo)super.grid.getValue();
		}
		public void setValue(ims.eas.vo.EASPhaseVo value)
		{
			super.grid.setValue(value);
		}
		public grdPhaseRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPhaseRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPhaseRowCollection getRows()
		{
			return new grdPhaseRowCollection(super.grid.getRows());
		}
		public grdPhaseRow getRowByValue(ims.eas.vo.EASPhaseVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPhaseRow(row);
		}
		public void setprofilePhaseIdHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getprofilePhaseIdHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnPhaseHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnPhaseHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox ColumnPhaseComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
		public void setColumnDoseHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnDoseHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColumnFractionationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColumnFractionationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColumnDaysHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColumnDaysHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColumnModalityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColumnModalityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public GridComboBox ColumnModalityComboBox()
		{
			return new GridComboBox(super.grid, 5);
		}
		public void setColumnEnergyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColumnEnergyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColumnUnitsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColumnUnitsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public GridComboBox ColumnUnitsComboBox()
		{
			return new GridComboBox(super.grid, 7);
		}
		public void setColumnProvisionalHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getColumnProvisionalHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setColumnSelectedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getColumnSelectedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
	}

	public static class GroupReqRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 376, 472, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "No", startTabIndex.intValue() + 22);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 328, 472, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Yes", startTabIndex.intValue() + 21);
		}
		public void setText(GroupReqEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupReqEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupReqEnumeration.None;
				case 0: return GroupReqEnumeration.rdoRequestImageTransNo;
				case 1: return GroupReqEnumeration.rdoRequestImageTransYes;
			}
			return null;
		}
		public void setValue(GroupReqEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupReqEnumeration.None.id);
		}
		public boolean isEnabled(GroupReqEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupReqEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupReqEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupReqEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupReqEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupReqEnumeration None = new GroupReqEnumeration(-1);
		public static GroupReqEnumeration rdoRequestImageTransNo = new GroupReqEnumeration(0);
		public static GroupReqEnumeration rdoRequestImageTransYes = new GroupReqEnumeration(1);
		private GroupReqEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupReqEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupPosRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 264, 168, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "No", startTabIndex.intValue() + 9);
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 216, 168, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Yes", startTabIndex.intValue() + 8);
		}
		public void setText(GroupPosEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupPosEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupPosEnumeration.None;
				case 0: return GroupPosEnumeration.rdoPossibleClinicalTrialsPatNo;
				case 1: return GroupPosEnumeration.rdoPossibleClinicalTrialsPatYes;
			}
			return null;
		}
		public void setValue(GroupPosEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupPosEnumeration.None.id);
		}
		public boolean isEnabled(GroupPosEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupPosEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupPosEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupPosEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupPosEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupPosEnumeration None = new GroupPosEnumeration(-1);
		public static GroupPosEnumeration rdoPossibleClinicalTrialsPatNo = new GroupPosEnumeration(0);
		public static GroupPosEnumeration rdoPossibleClinicalTrialsPatYes = new GroupPosEnumeration(1);
		private GroupPosEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupPosEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupLitRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 208, 80, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "Right", startTabIndex.intValue() + 4);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 152, 80, 45, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "Left", startTabIndex.intValue() + 3);
		}
		public void setText(GroupLitEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupLitEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupLitEnumeration.None;
				case 0: return GroupLitEnumeration.rdotsLateralityRight;
				case 1: return GroupLitEnumeration.rdotsLateralityLeft;
			}
			return null;
		}
		public void setValue(GroupLitEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupLitEnumeration.None.id);
		}
		public boolean isEnabled(GroupLitEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupLitEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupLitEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupLitEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupLitEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupLitEnumeration None = new GroupLitEnumeration(-1);
		public static GroupLitEnumeration rdotsLateralityRight = new GroupLitEnumeration(0);
		public static GroupLitEnumeration rdotsLateralityLeft = new GroupLitEnumeration(1);
		private GroupLitEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupLitEnumeration)o).id;
		}
		private int id;
	}

	public static class FirstTheraputicRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 216, 144, 41, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "Yes", startTabIndex.intValue() + 6);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 264, 144, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper8.getX(), anchoringHelper8.getY(), anchoringHelper8.getWidth(), "No", startTabIndex.intValue() + 7);
		}
		public void setText(FirstTheraputicEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public FirstTheraputicEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return FirstTheraputicEnumeration.None;
				case 0: return FirstTheraputicEnumeration.rdoFirstTherapIYes;
				case 1: return FirstTheraputicEnumeration.rdoFirstTherapINo;
			}
			return null;
		}
		public void setValue(FirstTheraputicEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(FirstTheraputicEnumeration.None.id);
		}
		public boolean isEnabled(FirstTheraputicEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(FirstTheraputicEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(FirstTheraputicEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(FirstTheraputicEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class FirstTheraputicEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static FirstTheraputicEnumeration None = new FirstTheraputicEnumeration(-1);
		public static FirstTheraputicEnumeration rdoFirstTherapIYes = new FirstTheraputicEnumeration(0);
		public static FirstTheraputicEnumeration rdoFirstTherapINo = new FirstTheraputicEnumeration(1);
		private FirstTheraputicEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((FirstTheraputicEnumeration)o).id;
		}
		private int id;
	}

	public static class AINTREERadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 328, 448, 41, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper9.getX(), anchoringHelper9.getY(), anchoringHelper9.getWidth(), "Yes", startTabIndex.intValue() + 19);
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 376, 448, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "No", startTabIndex.intValue() + 20);
		}
		public void setText(AINTREEEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public AINTREEEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return AINTREEEnumeration.None;
				case 0: return AINTREEEnumeration.rdoAppropriateForCCCLYes;
				case 1: return AINTREEEnumeration.rdoAppropriateForCCCLNo;
			}
			return null;
		}
		public void setValue(AINTREEEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(AINTREEEnumeration.None.id);
		}
		public boolean isEnabled(AINTREEEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(AINTREEEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(AINTREEEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(AINTREEEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class AINTREEEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static AINTREEEnumeration None = new AINTREEEnumeration(-1);
		public static AINTREEEnumeration rdoAppropriateForCCCLYes = new AINTREEEnumeration(0);
		public static AINTREEEnumeration rdoAppropriateForCCCLNo = new AINTREEEnumeration(1);
		private AINTREEEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((AINTREEEnumeration)o).id;
		}
		private int id;
	}

	public static class AttendRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 328, 424, 41, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "Yes", startTabIndex.intValue() + 17);
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 376, 424, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper12.getX(), anchoringHelper12.getY(), anchoringHelper12.getWidth(), "No", startTabIndex.intValue() + 18);
		}
		public void setText(AttendEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public AttendEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return AttendEnumeration.None;
				case 0: return AttendEnumeration.rdoMustPlanYes;
				case 1: return AttendEnumeration.rdoMustPlanNo;
			}
			return null;
		}
		public void setValue(AttendEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(AttendEnumeration.None.id);
		}
		public boolean isEnabled(AttendEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(AttendEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(AttendEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(AttendEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class AttendEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static AttendEnumeration None = new AttendEnumeration(-1);
		public static AttendEnumeration rdoMustPlanYes = new AttendEnumeration(0);
		public static AttendEnumeration rdoMustPlanNo = new AttendEnumeration(1);
		private AttendEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((AttendEnumeration)o).id;
		}
		private int id;
	}

	public static class ConcentRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 328, 400, 41, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper13.getX(), anchoringHelper13.getY(), anchoringHelper13.getWidth(), "Yes", startTabIndex.intValue() + 15);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 376, 400, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper14.getX(), anchoringHelper14.getY(), anchoringHelper14.getWidth(), "No", startTabIndex.intValue() + 16);
		}
		public void setText(ConcentEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public ConcentEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return ConcentEnumeration.None;
				case 0: return ConcentEnumeration.rdoPatientConsentForRadiotherTreatYes;
				case 1: return ConcentEnumeration.rdordoPatientConsentForRadiotherTreatNo;
			}
			return null;
		}
		public void setValue(ConcentEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(ConcentEnumeration.None.id);
		}
		public boolean isEnabled(ConcentEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(ConcentEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(ConcentEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(ConcentEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class ConcentEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static ConcentEnumeration None = new ConcentEnumeration(-1);
		public static ConcentEnumeration rdoPatientConsentForRadiotherTreatYes = new ConcentEnumeration(0);
		public static ConcentEnumeration rdordoPatientConsentForRadiotherTreatNo = new ConcentEnumeration(1);
		private ConcentEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((ConcentEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.EAS.contextMenuTreatmentOptionsPhaseMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.EAS.contextMenuTreatmentOptionsPhaseMenuADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5160001)))
			contextMenus.EAS.contextMenuTreatmentOptionsPhaseMenu.add(contextMenus.EAS.contextMenuTreatmentOptionsPhaseMenuADDItem);
		contextMenus.EAS.contextMenuTreatmentOptionsPhaseMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5160002)))
			contextMenus.EAS.contextMenuTreatmentOptionsPhaseMenu.add(contextMenus.EAS.contextMenuTreatmentOptionsPhaseMenuREMOVEItem);
		form.registerMenu(contextMenus.EAS.contextMenuTreatmentOptionsPhaseMenu);


		// Label Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 456, 400, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EAS Comment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 32, 88, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 32, 472, 156, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Request Image Transfer? :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 32, 216, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason off Protocol:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 520, 192, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Off Protocol:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 32, 72, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment site", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 32, 144, 180, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "First Therapeutic Intervention:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 32, 448, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appropriate for CCC-L:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 32, 424, 190, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Must plan in Consultant Session:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 32, 400, 275, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Consented for Radiotherapy Treatment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 32, 112, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anatomical Site:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 32, 16, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Primary Tumour:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 32, 48, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Site:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 32, 168, 179, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Possible Clinical Trials Patient:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 328, 168, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinical Trial:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 32, 192, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Protocol:", new Integer(1), null, new Integer(0)}));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 824, 248, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 416, 424, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 824, 16, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 416, 472, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 304, 168, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 304, 144, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 416, 448, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 416, 400, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 264, 80, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 456, 416, 368, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 152, 216, 672, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 152, 112, 672, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 152, 48, 672, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbTreatmentSiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTreatmentSiteTemp);
		cmbTreatmentSiteComboBox cmbTreatmentSite = (cmbTreatmentSiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatmentSiteComboBox.class, m_cmbTreatmentSiteTemp);
		super.addComboBox(cmbTreatmentSite);
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 408, 168, 416, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbClinicalTrialTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbClinicalTrialTemp);
		cmbClinicalTrialComboBox cmbClinicalTrial = (cmbClinicalTrialComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbClinicalTrialComboBox.class, m_cmbClinicalTrialTemp);
		super.addComboBox(cmbClinicalTrial);
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 152, 192, 344, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbProtocolTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbProtocolTemp);
		cmbProtocolComboBox cmbProtocol = (cmbProtocolComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProtocolComboBox.class, m_cmbProtocolTemp);
		super.addComboBox(cmbProtocol);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 152, 16, 672, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbPrimaryTumourTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.TRUE});
		addControl(m_qmbPrimaryTumourTemp);
		qmbPrimaryTumourComboBox qmbPrimaryTumour = (qmbPrimaryTumourComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbPrimaryTumourComboBox.class, m_qmbPrimaryTumourTemp);
		super.addComboBox(qmbPrimaryTumour);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 600, 192, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 32, 248, 792, 136, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdPhaseTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.EAS.contextMenuTreatmentOptionsPhaseMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPhaseTemp);
		grdPhaseGrid grdPhase = (grdPhaseGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPhaseGrid.class, m_grdPhaseTemp);
		grdPhase.addIntColumn("Column Header", 0, 0, 0, true, true, null, false, 0, true, 0);
		grdPhase.addComboBoxColumn("Phase", 0, 0, 120, false, true, true, false, true, -1);
		grdPhase.addDecimalColumn("Dose", 0, 0, 80, false, true, 5, 2, "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", false, 0, true);
		grdPhase.addIntColumn("Fraction", 0, 0, 60, false, true, null, false, 0, true, 0);
		grdPhase.addIntColumn("Days", 0, 0, 60, false, true, null, false, 0, true, 0);
		grdPhase.addComboBoxColumn("Modality", 0, 0, 90, false, true, false, false, true, -1);
		grdPhase.addDecimalColumn("Energy", 0, 0, 80, false, true, 5, 2, "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", false, 0, true);
		grdPhase.addComboBoxColumn("Units", 0, 1, 90, false, true, false, false, true, -1);
		grdPhase.addBoolColumn("Provisional", 1, 1, 90, false, false, 0, true);
		grdPhase.addBoolColumn("Selected", 1, 1, -1, false, true, 0, true);
		super.addGrid(grdPhase);

		// RadioButton Controls
		RadioButton tmpGroupReq = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupReq);
		GroupReqRadioButton GroupReq = (GroupReqRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupReqRadioButton.class, tmpGroupReq);
		GroupReq.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupReq);
		RadioButton tmpGroupPos = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupPos);
		GroupPosRadioButton GroupPos = (GroupPosRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupPosRadioButton.class, tmpGroupPos);
		GroupPos.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupPos);
		RadioButton tmpGroupLit = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpGroupLit);
		GroupLitRadioButton GroupLit = (GroupLitRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupLitRadioButton.class, tmpGroupLit);
		GroupLit.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupLit);
		RadioButton tmpFirstTheraputic = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpFirstTheraputic);
		FirstTheraputicRadioButton FirstTheraputic = (FirstTheraputicRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(FirstTheraputicRadioButton.class, tmpFirstTheraputic);
		FirstTheraputic.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(FirstTheraputic);
		RadioButton tmpAINTREE = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpAINTREE);
		AINTREERadioButton AINTREE = (AINTREERadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(AINTREERadioButton.class, tmpAINTREE);
		AINTREE.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(AINTREE);
		RadioButton tmpAttend = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpAttend);
		AttendRadioButton Attend = (AttendRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(AttendRadioButton.class, tmpAttend);
		Attend.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(Attend);
		RadioButton tmpConcent = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpConcent);
		ConcentRadioButton Concent = (ConcentRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(ConcentRadioButton.class, tmpConcent);
		Concent.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(Concent);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public Label lblTreatmentSite2()
	{
		return (Label)super.getControl(1);
	}
	public Label lblReasonOffProtocol()
	{
		return (Label)super.getControl(3);
	}
	public Label lblTreatmentSite1()
	{
		return (Label)super.getControl(5);
	}
	public Label lblTreatmentSite0()
	{
		return (Label)super.getControl(12);
	}
	public Label lblClinicalTrial()
	{
		return (Label)super.getControl(14);
	}
	public TextBox txtPhaseRequired()
	{
		return (TextBox)super.getControl(16);
	}
	public TextBox txtMustPlanReq()
	{
		return (TextBox)super.getControl(17);
	}
	public TextBox txtPrimTumReq()
	{
		return (TextBox)super.getControl(18);
	}
	public TextBox txtReqImageReq()
	{
		return (TextBox)super.getControl(19);
	}
	public TextBox txtPossClinicalTrialReq()
	{
		return (TextBox)super.getControl(20);
	}
	public TextBox txtFirstTherReq()
	{
		return (TextBox)super.getControl(21);
	}
	public TextBox txtApprForCCCReq()
	{
		return (TextBox)super.getControl(22);
	}
	public TextBox txtPatientConsentReq()
	{
		return (TextBox)super.getControl(23);
	}
	public TextBox txtTreatSiteLatReq()
	{
		return (TextBox)super.getControl(24);
	}
	public TextBox txtEasComment()
	{
		return (TextBox)super.getControl(25);
	}
	public TextBox txtReasonOffProtocol()
	{
		return (TextBox)super.getControl(26);
	}
	public TextBox txtAnatomicalSite()
	{
		return (TextBox)super.getControl(27);
	}
	public cmbTreatmentSiteComboBox cmbTreatmentSite()
	{
		return (cmbTreatmentSiteComboBox)super.getComboBox(0);
	}
	public cmbClinicalTrialComboBox cmbClinicalTrial()
	{
		return (cmbClinicalTrialComboBox)super.getComboBox(1);
	}
	public cmbProtocolComboBox cmbProtocol()
	{
		return (cmbProtocolComboBox)super.getComboBox(2);
	}
	public qmbPrimaryTumourComboBox qmbPrimaryTumour()
	{
		return (qmbPrimaryTumourComboBox)super.getComboBox(3);
	}
	public CheckBox chkOffProtocol()
	{
		return (CheckBox)super.getControl(32);
	}
	public grdPhaseGrid grdPhase()
	{
		return (grdPhaseGrid)super.getGrid(0);
	}
	public GroupReqRadioButton GroupReq()
	{
		return (GroupReqRadioButton)super.getRadioButton(0);
	}
	public GroupPosRadioButton GroupPos()
	{
		return (GroupPosRadioButton)super.getRadioButton(1);
	}
	public GroupLitRadioButton GroupLit()
	{
		return (GroupLitRadioButton)super.getRadioButton(2);
	}
	public FirstTheraputicRadioButton FirstTheraputic()
	{
		return (FirstTheraputicRadioButton)super.getRadioButton(3);
	}
	public AINTREERadioButton AINTREE()
	{
		return (AINTREERadioButton)super.getRadioButton(4);
	}
	public AttendRadioButton Attend()
	{
		return (AttendRadioButton)super.getRadioButton(5);
	}
	public ConcentRadioButton Concent()
	{
		return (ConcentRadioButton)super.getRadioButton(6);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				PatientResultsAndOrders = new LocalFormName(116183);
			}
			public final FormName PatientResultsAndOrders;
		}

		public OCRRForms OCRR;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ElectronisActionSheet = new ims.framework.ContextVariable("ElectronisActionSheet", prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier + "");
			cxl_GroupReqEnumeration = new ims.framework.ContextVariable("GroupReqEnumeration", prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__GroupReqEnumeration_" + componentIdentifier + "");
			cxl_ProtocolPhaseList = new ims.framework.ContextVariable("ProtocolPhaseList", prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ProtocolPhaseList_" + componentIdentifier + "");
			cxl_ProtocolsConfig = new ims.framework.ContextVariable("ProtocolsConfig", prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ProtocolsConfig_" + componentIdentifier + "");
			cxl_WasRequestImageTransferModified = new ims.framework.ContextVariable("WasRequestImageTransferModified", prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__WasRequestImageTransferModified_" + componentIdentifier + "");
		}
		
		public boolean getElectronisActionSheetIsNotNull()
		{
			return !cxl_ElectronisActionSheet.getValueIsNull(context);
		}
		public ims.eas.vo.ElectronicActionSheetVo getElectronisActionSheet()
		{
			return (ims.eas.vo.ElectronicActionSheetVo)cxl_ElectronisActionSheet.getValue(context);
		}
		public void setElectronisActionSheet(ims.eas.vo.ElectronicActionSheetVo value)
		{
			cxl_ElectronisActionSheet.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ElectronisActionSheet = null;
		public boolean getGroupReqEnumerationIsNotNull()
		{
			return !cxl_GroupReqEnumeration.getValueIsNull(context);
		}
		public GroupReqEnumeration getGroupReqEnumeration()
		{
			return (GroupReqEnumeration)cxl_GroupReqEnumeration.getValue(context);
		}
		public void setGroupReqEnumeration(GroupReqEnumeration value)
		{
			cxl_GroupReqEnumeration.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GroupReqEnumeration = null;
		public boolean getProtocolPhaseListIsNotNull()
		{
			return !cxl_ProtocolPhaseList.getValueIsNull(context);
		}
		public ims.eas.vo.ProtocolPhaseVoCollection getProtocolPhaseList()
		{
			return (ims.eas.vo.ProtocolPhaseVoCollection)cxl_ProtocolPhaseList.getValue(context);
		}
		public void setProtocolPhaseList(ims.eas.vo.ProtocolPhaseVoCollection value)
		{
			cxl_ProtocolPhaseList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ProtocolPhaseList = null;
		public boolean getProtocolsConfigIsNotNull()
		{
			return !cxl_ProtocolsConfig.getValueIsNull(context);
		}
		public ims.eas.vo.ProtocolLiteInsVoCollection getProtocolsConfig()
		{
			return (ims.eas.vo.ProtocolLiteInsVoCollection)cxl_ProtocolsConfig.getValue(context);
		}
		public void setProtocolsConfig(ims.eas.vo.ProtocolLiteInsVoCollection value)
		{
			cxl_ProtocolsConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ProtocolsConfig = null;
		public boolean getWasRequestImageTransferModifiedIsNotNull()
		{
			return !cxl_WasRequestImageTransferModified.getValueIsNull(context);
		}
		public Boolean getWasRequestImageTransferModified()
		{
			return (Boolean)cxl_WasRequestImageTransferModified.getValue(context);
		}
		public void setWasRequestImageTransferModified(Boolean value)
		{
			cxl_WasRequestImageTransferModified.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WasRequestImageTransferModified = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public EASNamespace EAS = new EASNamespace();
		public final class EASNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class TreatmentOptionsPhaseMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int REMOVE = 2;
			}
			public void disableAllTreatmentOptionsPhaseMenuMenuItems()
			{
				this.contextMenuTreatmentOptionsPhaseMenuADDItem.setEnabled(false);
				this.contextMenuTreatmentOptionsPhaseMenuREMOVEItem.setEnabled(false);
			}
			public void hideAllTreatmentOptionsPhaseMenuMenuItems()
			{
				this.contextMenuTreatmentOptionsPhaseMenuADDItem.setVisible(false);
				this.contextMenuTreatmentOptionsPhaseMenuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuTreatmentOptionsPhaseMenu;
			public ReadOnlyMenuItem getTreatmentOptionsPhaseMenuADDItem()
			{
				return this.contextMenuTreatmentOptionsPhaseMenuADDItem;
			}
			private MenuItem contextMenuTreatmentOptionsPhaseMenuADDItem;
			public ReadOnlyMenuItem getTreatmentOptionsPhaseMenuREMOVEItem()
			{
				return this.contextMenuTreatmentOptionsPhaseMenuREMOVEItem;
			}
			private MenuItem contextMenuTreatmentOptionsPhaseMenuREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[197];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIABREACHDATETIME", "DementiaBreachDateTime");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DEMENTIAWORKLISTSTATUS", "DementiaWorklistStatus");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MRNSTATUS", "MRNStatus");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-HASSCANNEDCASENOTEFOLDERS", "HasScannedCaseNoteFolders");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISCONFIDENTIAL", "IsConfidential");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFBIRTH", "TimeOfBirth");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-PATIENTCATEGORY", "PatientCategory");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPAENDOSCOPIST", "IsHCPaEndoscopist");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-ID", "ID_NAESReferral");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEREFERRALRECEIVED", "DateReferralReceived");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-DATEOFSURGERY", "DateOfSurgery");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGHOSPITAL", "ReferringHospital");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRINGDOCTOR", "ReferringDoctor");
			fields[71] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERRALREASON", "ReferralReason");
			fields[72] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-SECONDARYSURGERY", "SecondarySurgery");
			fields[73] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-UNDERLYINGREASON", "UnderlyingReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-AFFECTEDEYE", "AffectedEye");
			fields[75] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANT", "Implant");
			fields[76] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-IMPLANTTYPE", "ImplantType");
			fields[77] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-INTERPRETERREQUIRED", "InterpreterRequired");
			fields[78] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGE", "Language");
			fields[79] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-LANGUAGEIFOTHER", "LanguageIfOther");
			fields[80] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-REFERREDBY", "ReferredBy");
			fields[81] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_6WEEKKPI", "SixWeekKPI");
			fields[82] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-_3WEEKKPI", "ThreeWeekKPI");
			fields[83] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-PREFERREDCLINIC", "PreferredClinic");
			fields[84] = new ims.framework.ReportField(this.context, "_cvp_Naes.Referral", "BO-1097100004-NOTES", "Notes");
			fields[85] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[86] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[87] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[89] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[91] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[92] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[93] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[94] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[96] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-NOTETYPE", "NoteType");
			fields[97] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEW", "ForReview");
			fields[98] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientClinicalNotesSearchCriteria", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[99] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ID", "ID_ObservationForm");
			fields[100] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-FORMTYPE", "FormType");
			fields[101] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DETAILS", "Details");
			fields[102] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTART", "DateTimeStart");
			fields[103] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-DATETIMESTOP", "DateTimeStop");
			fields[104] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-ISSTOPPED", "IsStopped");
			fields[105] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, "_cvp_Nursing.ObservationFormsSearchCriteria", "BO-1011100002-CLINICALCONTACT", "ClinicalContact");
			fields[107] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[108] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-TYPE", "Type");
			fields[109] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesAdmSearchCriteia", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[111] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[112] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesDisSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[113] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[114] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[115] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesOPDSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[116] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-ID", "ID_MedicationOverview");
			fields[117] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-TYPE", "Type");
			fields[118] = new ims.framework.ReportField(this.context, "_cvp_Clinical.MedMultipleDosesPatSearchCriteria", "BO-1072100034-CARECONTEXT", "CareContext");
			fields[119] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ID", "ID_Urinalysis");
			fields[120] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOABNORMALITYDETECTED", "NoAbnormalityDetected");
			fields[121] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-LEUCOCYTES", "Leucocytes");
			fields[122] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PROTEIN", "Protein");
			fields[123] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BLOOD", "Blood");
			fields[124] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-KETONES", "Ketones");
			fields[125] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ASCORBICACID", "AscorbicAcid");
			fields[126] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-GLUCOSE", "Glucose");
			fields[127] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-BILIRUBIN", "Bilirubin");
			fields[128] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-UROBILINOGEN", "Urobilinogen");
			fields[129] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NITRATE", "Nitrate");
			fields[130] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-PH", "PH");
			fields[131] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-SPECIFICGRAVITY", "SpecificGravity");
			fields[132] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-NOSAMPLE", "NoSample");
			fields[133] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-ISACTIVE", "IsActive");
			fields[134] = new ims.framework.ReportField(this.context, "_cvp_Core.UrinalysisSearchCriteria", "BO-1022100012-CARECONTEXT", "CareContext");
			fields[135] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[136] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[137] = new ims.framework.ReportField(this.context, "_cvp_Core.PDSPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[138] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, "_cvp_Core.LocalPatientFilterSearchCriteria", "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[142] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[143] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-ID", "ID_ElectronicActionSheet");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PATIENT", "Patient");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-AUTHORISEDDATETIME", "AuthorisedDateTime");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-TPCREATED", "TPCreated");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-ACTIONREQUIRED", "ActionRequired");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-REMOVEDSTAT", "RemovedStat");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-REMOVALREASON", "RemovalReason");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DATESEEN", "DateSeen");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DATEDECISIONTOTREAT", "DateDecisionToTreat");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-FIRSTTHERAPEUTICINTERVENTION", "FirstTherapeuticIntervention");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CLINICALTRIALPATIENT", "ClinicalTrialPatient");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PROTOCOLUSED", "ProtocolUsed");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PATIENTCONSENT", "PatientConsent");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANCONSSESSION", "PlanConsSession");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-APPROPCCCL", "AppropCCCL");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IMAGETRANSFER", "ImageTransfer");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CONCURRENTSYSTEMICTREATMENT", "ConcurrentSystemicTreatment");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-SEENAT", "SeenAt");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-INTENT", "Intent");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PRIORITY", "Priority");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DELAYED", "Delayed");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DELAYEDCOMMENT", "DelayedComment");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-READYTOTREATDATE", "ReadyToTreatDate");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DELAYEDREASON", "DelayedReason");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-TREATSITELATERALITY", "TreatSiteLaterality");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-ANATOMICALSITE", "AnatomicalSite");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CLINICALTRIAL", "ClinicalTrial");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-OFFPROTOCOLREASON", "OffProtocolReason");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-EASCOMMENT", "EasComment");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGCT", "PlanningCT");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGCTTEXT", "PlanningCTText");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-MRIFORCOREG", "MRIforCoReg");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-DENTISTREQUIRED", "DentistRequired");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PEGREQUIRED", "PegRequired");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-SIMULATIONREQUIRED", "SimulationRequired");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IVCONTRAST", "IVContrast");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-INVESTIGATIONDATE", "InvestigationDate");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-CREATININELEVEL", "CreatinineLevel");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-GATINGOPTIONS", "GatingOptions");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IMRT", "IMRT");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PETCT", "PetCT");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IMMOBTYPE", "ImmobType");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-MOULDROOMACTIVITY", "MouldRoomActivity");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-AGENT", "Agent");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGAPPTDATE", "PlanningApptDate");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGTRANSPORT", "PlanningTransport");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-TREATMENTTRANSPORT", "TreatmentTransport");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IP_OP_PLANNING", "IP_OP_Planning");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-IP_OP_TREATMENT", "IP_OP_Treatment");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PATIENTSTATUS", "PatientStatus");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-GRAPHICASSESSMENT", "GraphicAssessment");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-RECENTCREATININE", "RecentCreatinine");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_EAS.EASTreatmentOptionsComponent.__internal_x_context__ElectronisActionSheet_" + componentIdentifier, "BO-1113100000-PLANNINGCTREQUIRED", "PlanningCTRequired");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
