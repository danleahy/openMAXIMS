//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.forms.eastreatmentoptionscomponent;

import java.util.ArrayList;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LateralityLRonly;
import ims.core.vo.lookups.MedicGrade;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.eas.forms.eastreatmentoptionscomponent.GenForm.AINTREEEnumeration;
import ims.eas.forms.eastreatmentoptionscomponent.GenForm.AttendEnumeration;
import ims.eas.forms.eastreatmentoptionscomponent.GenForm.ConcentEnumeration;
import ims.eas.forms.eastreatmentoptionscomponent.GenForm.FirstTheraputicEnumeration;
import ims.eas.forms.eastreatmentoptionscomponent.GenForm.GroupLitEnumeration;
import ims.eas.forms.eastreatmentoptionscomponent.GenForm.GroupPosEnumeration;
import ims.eas.forms.eastreatmentoptionscomponent.GenForm.GroupReqEnumeration;
import ims.eas.forms.eastreatmentoptionscomponent.GenForm.grdPhaseRow;
import ims.eas.vo.ClinicalTrialLinkVo;
import ims.eas.vo.ClinicalTrialLinkVoCollection;
import ims.eas.vo.EASPhaseVo;
import ims.eas.vo.EASPhaseVoCollection;
import ims.eas.vo.ElectronicActionSheetVo;
import ims.eas.vo.PrimaryTumourInsVoCollection;
import ims.eas.vo.ProtocolLiteInsVo;
import ims.eas.vo.ProtocolLiteInsVoCollection;
import ims.eas.vo.ProtocolNameVo;
import ims.eas.vo.ProtocolPhaseVo;
import ims.eas.vo.ProtocolPhaseVoCollection;
import ims.eas.vo.TreatmentSiteInsVo;
import ims.eas.vo.TreatmentSiteInsVoCollection;
import ims.eas.vo.lookups.EASStatus;
import ims.eas.vo.lookups.OptionsRequired;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	public void initialise() 
	{
		clearAllControls();
		form.grdPhase().getRows().clear(); //WDEV-17568
		form.qmbPrimaryTumour().setRequired(true);
		form.txtPrimTumReq().setRequired(true);
		form.txtFirstTherReq().setRequired(true);
		form.txtPossClinicalTrialReq().setRequired(true);
		form.txtPatientConsentReq().setRequired(true);
		form.txtApprForCCCReq().setRequired(true);
		form.txtReqImageReq().setRequired(true);
		form.txtMustPlanReq().setRequired(true);
		form.GroupLit().setEnabled(false);
		form.GroupLit().setVisible(false);
		form.lblTreatmentSite1().setVisible(false);
		form.lblTreatmentSite2().setVisible(false);
		form.lblTreatmentSite0().setVisible(false);
		form.cmbTreatmentSite().setVisible(false);
		form.txtPhaseRequired().setRequired(true);
	}
		
	protected void oncmbTreatmentSiteSelChange() throws ims.framework.exceptions.PresentationLogicException
	{ 
		form.getLocalContext().setWasRequestImageTransferModified(Boolean.FALSE);
		form.txtReasonOffProtocol().setValue(null); //WDEV-17556
		form.GroupLit().setValue(null);
		form.grdPhase().getRows().clear();
		
		updateLaterality();
		loadClinicalTrials();
		listProtocols();
		form.Attend().setValue(defaultAttendMustPlan()); //WDEV-17597
	}
	
	private void updateLaterality() 
	{		
		if (form.cmbTreatmentSite().getValue() != null)
		{
			if (form.cmbTreatmentSite().getValue().getTreatmentSiteIsNotNull() 
					&& form.cmbTreatmentSite().getValue().getLateralityIsNotNull())
			{
				if (form.getMode().equals(FormMode.EDIT))
				{
					form.GroupLit().setEnabled(getEnabledState());
					form.GroupLit().setEnabled(GroupLitEnumeration.rdotsLateralityLeft, getEnabledState());
					form.GroupLit().setEnabled(GroupLitEnumeration.rdotsLateralityRight, getEnabledState());
					form.GroupLit().setVisible(form.cmbTreatmentSite().getValue().getLaterality());
					form.txtTreatSiteLatReq().setVisible(form.cmbTreatmentSite().getValue().getLaterality());
					form.txtTreatSiteLatReq().setRequired(form.cmbTreatmentSite().getValue().getLaterality());
					form.lblTreatmentSite1().setVisible(form.cmbTreatmentSite().getValue().getLaterality());
					form.lblTreatmentSite2().setVisible(form.cmbTreatmentSite().getValue().getLaterality());					
				}
				else if (form.getMode().equals(FormMode.VIEW))
				{
					form.GroupLit().setEnabled(false);
					form.GroupLit().setVisible(form.cmbTreatmentSite().getValue().getLaterality());
					form.txtTreatSiteLatReq().setVisible(form.cmbTreatmentSite().getValue().getLaterality());
					form.txtTreatSiteLatReq().setRequired(false);
					form.lblTreatmentSite1().setVisible(form.cmbTreatmentSite().getValue().getLaterality());
					form.lblTreatmentSite2().setVisible(form.cmbTreatmentSite().getValue().getLaterality());					
				}
			}
			else
			{
				form.GroupLit().setValue(null);
				form.GroupLit().setEnabled(false);
				form.GroupLit().setVisible(false);
				form.txtTreatSiteLatReq().setVisible(false);
				form.txtTreatSiteLatReq().setRequired(false);
				form.lblTreatmentSite1().setVisible(false);
				form.lblTreatmentSite2().setVisible(false);									
			}
				
		}
		else
		{
			form.txtTreatSiteLatReq().setVisible(false);
			form.lblTreatmentSite1().setVisible(false);
			form.lblTreatmentSite2().setVisible(false);
			form.GroupLit().setVisible(false);
			form.GroupLit().setValue(null);
		}
		
	}

	private void listProtocols() 
	{
		//WDEV-17567
		if (form.cmbTreatmentSite().getValue() == null)
		{
			form.cmbProtocol().clear();
			form.grdPhase().getRows().clear();
			form.getLocalContext().setProtocolsConfig(null);
			return;
		}
		// list protocols
		try 
		{		
			ProtocolLiteInsVoCollection ptColl = domain.listProtocols(null,PreActiveActiveInactiveStatus.ACTIVE, form.qmbPrimaryTumour().getValue(), form.cmbTreatmentSite().getValue());
			form.cmbProtocol().clear();
			
			form.getLocalContext().setProtocolsConfig(ptColl);
			
			if (ptColl != null && ptColl.size() > 0)
			{
				for (int i=0; i<ptColl.size(); i++)
				{
					ProtocolLiteInsVo pt = ptColl.get(i);
					if (pt.getClinTrialProtocolIsNotNull()
							&& !pt.getClinTrialProtocol())
						form.cmbProtocol().newRow(pt, pt.getProtocolName());
				}
			}
			
			//WDEV-17556
			if (form.cmbProtocol().getValues() != null)
			{
				//disable selection and select off protocol
				if (FormMode.EDIT.equals(form.getMode()))
				{
					form.cmbProtocol().setEnabled(!form.cmbProtocol().getValues().isEmpty());
					form.chkOffProtocol().setEnabled(!form.cmbProtocol().getValues().isEmpty());
				
				}
				
				form.chkOffProtocol().setValue(form.cmbProtocol().getValues().isEmpty());
				updateControlState();
			}
				
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage("At least one item must be specified for search");
			return;
		}		
	}

	private void open() 
	{
		populateScreenFromData();	
		updateControlState();
	}

	private void populateScreenFromData() 
	{
		clearAllControls();
		ElectronicActionSheetVo voEAS = form.getLocalContext().getElectronisActionSheet();
				
		if (voEAS != null)
		{
			//Primary Tumour
			if (voEAS.getPrimaryTumourIsNotNull())
			{
				form.qmbPrimaryTumour().newRow(voEAS.getPrimaryTumour(), voEAS.getPrimaryTumour().getName());
				form.qmbPrimaryTumour().setValue(voEAS.getPrimaryTumour());
			}
			
			//Treatment Site
			if (voEAS.getTreatmentSiteIsNotNull())
			{
				form.cmbTreatmentSite().newRow(voEAS.getTreatmentSite(), voEAS.getTreatmentSite().getTreatmentSiteIsNotNull()?voEAS.getTreatmentSite().getTreatmentSite().getText():null);
				form.cmbTreatmentSite().setValue(voEAS.getTreatmentSite());
				form.cmbTreatmentSite().setVisible(true);
				form.lblTreatmentSite0().setVisible(true);
				listProtocols();
				loadClinicalTrials();
			}
			else if (voEAS.getPrimaryTumour() != null) //WDEV-17585
			{
				loadTreatmentSites();
			}
			
			//Treatment Site Laterality			
			if (voEAS.getTreatSiteLateralityIsNotNull())
			{
				if (voEAS.getTreatSiteLaterality().equals(LateralityLRonly.LEFT))
					form.GroupLit().setValue(GroupLitEnumeration.rdotsLateralityLeft);
				else
					form.GroupLit().setValue(GroupLitEnumeration.rdotsLateralityRight);
			}
			else
				form.GroupLit().setValue(null);
			
			//Anatomical Site
			form.txtAnatomicalSite().setValue(voEAS.getAnatomicalSite());
			
			//First Theraputic Intervention			
			if (voEAS.getFirstTherapeuticInterventionIsNotNull())
			{
				if (voEAS.getFirstTherapeuticIntervention())
					form.FirstTheraputic().setValue(FirstTheraputicEnumeration.rdoFirstTherapIYes);
				else
					form.FirstTheraputic().setValue(FirstTheraputicEnumeration.rdoFirstTherapINo);
			}
			else
				form.FirstTheraputic().setValue(null);
			
			
			//Possible Clinical Trials Patient
			if (voEAS.getClinicalTrialPatientIsNotNull())
			{
				if (voEAS.getClinicalTrialPatient())
					form.GroupPos().setValue(GroupPosEnumeration.rdoPossibleClinicalTrialsPatYes);
				else
					form.GroupPos().setValue(GroupPosEnumeration.rdoPossibleClinicalTrialsPatNo);
			}
			else
				form.GroupPos().setValue(null);
			
			//Clinical Trials
			form.cmbClinicalTrial().setValue(voEAS.getClinicalTrial());
			
			if (voEAS.getProtocolUsedIsNotNull())
				form.chkOffProtocol().setValue(!voEAS.getProtocolUsed());
			else
				form.chkOffProtocol().setValue(null);
			
			if (voEAS.getProtocolIsNotNull())
			{
				form.cmbProtocol().newRow(voEAS.getProtocol(), voEAS.getProtocol().getProtocolName());
				form.cmbProtocol().setValue(voEAS.getProtocol());
			}
			
			form.txtReasonOffProtocol().setValue(voEAS.getOffProtocolReason());
			
			boolean bReadOnly = getReadOnlyState();
			
			//Phasses
			if (form.getLocalContext().getElectronisActionSheetIsNotNull()
					&& form.getLocalContext().getElectronisActionSheet().getPhasesIsNotNull() && !Boolean.TRUE.equals(form.getLocalContext().getWasRequestImageTransferModified()))
			{
				form.grdPhase().getRows().clear();
				EASPhaseVoCollection voEasPhaseColl = form.getLocalContext().getElectronisActionSheet().getPhases();
				
				if (form.chkOffProtocol().getValue())
				{
					// OffProtocol
					
					//list instantiated phases
					for (int i = 0; i<voEasPhaseColl.size(); i++ )
					{
						EASPhaseVo voPhase = voEasPhaseColl.get(i);
						grdPhaseRow row = form.grdPhase().getRows().newRow();
						row.setColumnPhase(voPhase.getPhaseName());
						row.setColumnDose(voPhase.getDose());
						row.setColumnFractionation(voPhase.getFractionsIsNotNull()?voPhase.getFractions():null);
						row.setColumnDays(voPhase.getDaysIsNotNull()?voPhase.getDays():null);
						row.setColumnModality(voPhase.getModalityIsNotNull()?voPhase.getModality():null);
						row.setColumnEnergy(voPhase.getEnergy());
						row.setColumnUnits(voPhase.getUnitsIsNotNull()?voPhase.getUnits():null);
						row.setColumnProvisional(voPhase.getProvisional());
						row.setColumnSelected(voPhase.getSelectedIsNotNull()?voPhase.getSelected():false);
						row.setValue(voPhase);					
						
//						NB: When completing an EAS, once the Primary Tumour, Treatment Site and Protocol or Off Protocol have been selected and saved 
//						(either by selecting Back, Save or Next) , these cannot be changed.  
//						If the protocol needs to be changed, the EAS will have to be cancelled and a new one commenced for this patient.
						
						form.grdPhase().setReadOnly(bReadOnly);
											
						row.setReadOnly(bReadOnly);
						
						row.setColumnDoseReadOnly(bReadOnly);
						 					
						row.setColumnFractionationReadOnly(bReadOnly);
						 					
						row.setColumnDaysReadOnly(bReadOnly);
											
						row.setColumnModalityReadOnly(bReadOnly);
						
						row.setColumnEnergyReadOnly(bReadOnly);
						
						row.setColumnUnitsReadOnly(bReadOnly);
						
						row.setColumnProvisionalReadOnly(bReadOnly);
						
						row.setColumnSelectedReadOnly(bReadOnly);						
					}
				}
				else
				{
					//OnProtocol
					//list instantiated phases
					for (int i = 0; i<voEasPhaseColl.size(); i++ )
					{
						EASPhaseVo voPhase = voEasPhaseColl.get(i);
						grdPhaseRow row = form.grdPhase().getRows().newRow();
						row.setColumnPhase(voPhase.getPhaseName());
						row.setColumnDose(voPhase.getDose());
						row.setColumnFractionation(voPhase.getFractionsIsNotNull()?voPhase.getFractions():null);
						row.setColumnDays(voPhase.getDaysIsNotNull()?voPhase.getDays():null);
						row.setColumnModality(voPhase.getModalityIsNotNull()?voPhase.getModality():null);
						row.setColumnEnergy(voPhase.getEnergy());
						row.setColumnUnits(voPhase.getUnitsIsNotNull()?voPhase.getUnits():null);
						row.setColumnProvisional(voPhase.getProvisional());
						row.setColumnSelected(voPhase.getSelectedIsNotNull()?voPhase.getSelected():false);
						row.setValue(voPhase);
						
						if (voEAS.getID_ElectronicActionSheetIsNotNull())
						{
							//The profile may have changed, so no checks can be performed other than allowing the user to
							//enter values where values dont exist
							form.grdPhase().setReadOnly(bReadOnly);
							
							row.setReadOnly(bReadOnly);
																		
							row.setColumnDoseReadOnly(bReadOnly							
									|| 
									row.getColumnDose() != null
									);
														
							row.setColumnFractionationReadOnly(bReadOnly							
									|| 
									row.getColumnFractionation() != null
									);
														
							row.setColumnDaysReadOnly(bReadOnly							
									|| 
									row.getColumnDays() != null
									);
							
							row.setColumnEnergyReadOnly(bReadOnly							
									|| 
									row.getColumnEnergy() != null
									);
							
							//Phase
							//Enable Off Protocol an Draft							
							row.setColumnPhaseReadOnly(true);
							
							//Modality
							//Enable Off Protocol  or no values On Protocol and Draft	
							row.setColumnModalityReadOnly(bReadOnly							
									|| 
									row.getColumnModality() != null
									);							
														
							//Units
							//Enable Off Protocol  or no values On Protocol and Draft	
							row.setColumnUnitsReadOnly(bReadOnly							
									||
									row.getColumnUnits() != null
									);							
							
																					
							row.setColumnProvisionalReadOnly(bReadOnly);
							
							row.setColumnSelectedReadOnly(bReadOnly);					
							
						}
						else
						{
							//If the EAS is not saved yet, then perform check against the current profile.
							//get protocol phase list
							form.getLocalContext().setProtocolPhaseList(form.cmbProtocol().getValue().getPhases());
							
							form.grdPhase().setReadOnly(bReadOnly);
														
							row.setReadOnly(bReadOnly);
																		
							row.setColumnDoseReadOnly(bReadOnly							
									|| 
									(form.getLocalContext().getProtocolPhaseListIsNotNull()
									&& form.getLocalContext().getProtocolPhaseList().get(i).getDoseIsNotNull())
									);
														
							row.setColumnFractionationReadOnly(bReadOnly							
									|| 
									(form.getLocalContext().getProtocolPhaseListIsNotNull()									
									&& form.getLocalContext().getProtocolPhaseList().get(i).getFractionsIsNotNull())
									);
														
							row.setColumnDaysReadOnly(bReadOnly							
									|| 
									(form.getLocalContext().getProtocolPhaseListIsNotNull()									
									&& form.getLocalContext().getProtocolPhaseList().get(i).getDaysIsNotNull())
									);
							
							row.setColumnEnergyReadOnly(bReadOnly							
									|| 
									(form.getLocalContext().getProtocolPhaseListIsNotNull()									
									&& form.getLocalContext().getProtocolPhaseList().get(i).getEnergyIsNotNull())
									);
							
							//Phase
							//Enable Off Protocol an Draft							
							row.setColumnPhaseReadOnly(true);
							
							//Modality
							//Enable Off Protocol  or no values On Protocol and Draft	
							row.setColumnModalityReadOnly(bReadOnly							
									|| 
									(form.getLocalContext().getProtocolPhaseListIsNotNull()									
									&& form.getLocalContext().getProtocolPhaseList().get(i).getModalityIsNotNull())
									);							
														
							//Units
							//Enable Off Protocol  or no values On Protocol and Draft	
							row.setColumnUnitsReadOnly(bReadOnly							
									||
									(form.getLocalContext().getProtocolPhaseListIsNotNull()									
									&& form.getLocalContext().getProtocolPhaseList().get(i).getUnitsIsNotNull())
									);							
							
																					
							row.setColumnProvisionalReadOnly(bReadOnly);
							
							row.setColumnSelectedReadOnly(bReadOnly);					
							
						}
					}					
					
					//list any phases in the profile that were not selected if not saved
					//loadOtherProfilePhases();
				}
			}
			
			//Patient Consented to Radiotherapy Treatment
			//Possible Clinical Trials Patient
			if (voEAS.getPatientConsentIsNotNull())
			{
				if (voEAS.getPatientConsent().equals(YesNo.YES))
					form.Concent().setValue(ConcentEnumeration.rdoPatientConsentForRadiotherTreatYes);
				else
					form.Concent().setValue(ConcentEnumeration.rdordoPatientConsentForRadiotherTreatNo);
			}
			else
				form.Concent().setValue(null);			
			
			
			//Appropriate for CCC-L
			if (voEAS.getAppropCCCLIsNotNull())
			{
				if (voEAS.getAppropCCCL().equals(YesNo.YES))
					form.AINTREE().setValue(AINTREEEnumeration.rdoAppropriateForCCCLYes);
				else
					form.AINTREE().setValue(AINTREEEnumeration.rdoAppropriateForCCCLNo);
			}
			else
				form.AINTREE().setValue(defaultApproCCCL());		
			
			//Must Plan in Consultant Session
			if (voEAS.getPlanConsSessionIsNotNull())
			{
				if (voEAS.getPlanConsSession().equals(YesNo.YES))
					form.Attend().setValue(AttendEnumeration.rdoMustPlanYes);
				else
					form.Attend().setValue(AttendEnumeration.rdoMustPlanNo);
			}
			else
				form.Attend().setValue(defaultAttendMustPlan());			
			
			//Request Image Transfer
			if (voEAS.getImageTransferIsNotNull())
			{
				if (voEAS.getImageTransfer().equals(YesNo.YES))
					form.GroupReq().setValue(GroupReqEnumeration.rdoRequestImageTransYes);
				else
					form.GroupReq().setValue(GroupReqEnumeration.rdoRequestImageTransNo);
			}
			else
				form.GroupReq().setValue(GroupReqEnumeration.rdoRequestImageTransNo); //WDEV-17832
						
			//EAS Comment
			form.txtEasComment().setValue(voEAS.getEasComment());

		}
		else
			form.grdPhase().getRows().clear(); //WDEV-17585
		
	}
		
	private void loadOtherProfilePhases() {
		
		if (form.getLocalContext().getElectronisActionSheetIsNotNull()
				&& !form.getLocalContext().getElectronisActionSheet().getID_ElectronicActionSheetIsNotNull()
				&& form.getLocalContext().getProtocolPhaseListIsNotNull())
		{
			ProtocolPhaseVoCollection voColl = new ProtocolPhaseVoCollection();
			for (ProtocolPhaseVo vo:form.getLocalContext().getProtocolPhaseList())
			{
				if (!isInPhaseGrid(vo))
				{
					//add it
					voColl.add(vo);					
				}
			}
			
			for(ProtocolPhaseVo voAdd:voColl)
			{
				grdPhaseRow row = form.grdPhase().getRows().newRow();
				EASPhaseVo phaseVo = new EASPhaseVo();
				phaseVo.setDays(voAdd.getDays());
				phaseVo.setDose(voAdd.getDose());
				phaseVo.setEnergy(voAdd.getEnergy());
				phaseVo.setFractions(voAdd.getFractions());
				phaseVo.setModality(voAdd.getModality());
				phaseVo.setPhaseName(voAdd.getPhaseName());
				phaseVo.setPreferred(voAdd.getPreferred());
				//default provisional to false
				phaseVo.setProvisional(false);
				phaseVo.setUnits(voAdd.getUnits());
				row.setValue(phaseVo);
			}
		}
		
	}

	private boolean isInPhaseGrid(ProtocolPhaseVo vo) 
	{
		if (form.grdPhase().getRows() != null
				&& form.grdPhase().getRows().size() > 0)
		{
			for(int i = 0; i < form.grdPhase().getRows().size(); i++ )
			{
				if (vo.getID_ProtocolPhaseIsNotNull()
						&& vo.getID_ProtocolPhase().equals(form.grdPhase().getRows().get(i).getprofilePhaseId()))
						return true;
			}			
		}
		
		return false;
	}

	private boolean getReadOnlyState() 
	{
		if (form.getLocalContext().getElectronisActionSheetIsNotNull() 
				&& form.getLocalContext().getElectronisActionSheet().getEasStatusIsNotNull()
				&& form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatusIsNotNull()
				&& form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatus().equals(EASStatus.DRAFT))
			return false;
		
		boolean bRespHcp = false;
		boolean bSeenByHcp = false;
		
		MemberOfStaffShortVo mosVo = (MemberOfStaffShortVo)domain.getMosUser();
		
		Object currUser = domain.getHcpUser();
		if (currUser != null
				&& currUser instanceof MedicVo && MedicGrade.CONS.equals(((MedicVo)currUser).getGrade()))
		{		
			if (mosVo.getHcpIsNotNull() 
					&& mosVo.getHcp().getIsHCPaResponsibleHCPIsNotNull()
					&& mosVo.getHcp().getIsHCPaResponsibleHCP()
					&& mosVo.getHcp().getHcpTypeIsNotNull()
					&& mosVo.getHcp().getHcpType().equals(HcpDisType.MEDICAL))
			{
				
				bRespHcp = true;
			}
		}
				
		if (mosVo != null
				&& mosVo.getHcpIsNotNull() 
				&& mosVo.getHcp().getIsHCPaResponsibleHCPIsNotNull()
				&& mosVo.getHcp().getIsHCPaResponsibleHCP()
				&& mosVo.getHcp().getHcpTypeIsNotNull()
				&& mosVo.getHcp().getHcpType().equals(HcpDisType.MEDICAL))
		{
			
			bSeenByHcp = true;
		}

		//enable if in awaiting authorisation and the resposible hcp is the logged in user
		if(form.getLocalContext().getElectronisActionSheetIsNotNull()
				&& (bRespHcp || bSeenByHcp)
				&& form.getLocalContext().getElectronisActionSheet().getEasStatusIsNotNull()
				&& form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatusIsNotNull()
				&& form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatus().equals(EASStatus.AWAITING_AUTHORISATION))
				return false;
		
		return true;
	}

	private AttendEnumeration defaultAttendMustPlan() 
	{
		if (form.getLocalContext().getElectronisActionSheetIsNotNull() && form.cmbProtocol().getValue() != null)		
		{	
			//on protocol
			if (!form.chkOffProtocol().getValue())
			{
				if (form.cmbProtocol().getValue().getConsSessRequiredIsNotNull() && form.cmbProtocol().getValue().getConsSessRequired().equals(OptionsRequired.MANDATORY))
				{
					form.Attend().setEnabled(false);
					form.Attend().setEnabled(AttendEnumeration.rdoMustPlanNo,false);
					form.Attend().setEnabled(AttendEnumeration.rdoMustPlanYes,false);										
					return AttendEnumeration.rdoMustPlanYes;
				}
				
				//WDEV-17597
				if (form.cmbProtocol().getValue().getConsSessRequiredIsNotNull() && form.cmbProtocol().getValue().getConsSessRequired().equals(OptionsRequired.NOT_REQUIRED))
				{
					form.Attend().setEnabled(false);
					form.Attend().setEnabled(AttendEnumeration.rdoMustPlanNo,false);
					form.Attend().setEnabled(AttendEnumeration.rdoMustPlanYes,false);										
					return AttendEnumeration.rdoMustPlanNo;
				}
				
				if (form.cmbProtocol().getValue().getConsSessRequiredIsNotNull() && form.cmbProtocol().getValue().getConsSessRequired().equals(OptionsRequired.OPTIONAL)
						&& form.cmbProtocol().getValue().getConsSessDefaultIsNotNull())
				{
					if (form.cmbProtocol().getValue().getConsSessDefault().equals(YesNo.YES))
						return AttendEnumeration.rdoMustPlanYes;
					if (form.cmbProtocol().getValue().getConsSessDefault().equals(YesNo.NO))
						return AttendEnumeration.rdoMustPlanNo;
					
					form.Attend().setEnabled(true);
					form.Attend().setEnabled(AttendEnumeration.rdoMustPlanNo,true);
					form.Attend().setEnabled(AttendEnumeration.rdoMustPlanYes,true);										
				}	
				else
				{
					//nothing set yet so enable
					form.Attend().setEnabled(true);
					form.Attend().setEnabled(AttendEnumeration.rdoMustPlanNo,true);
					form.Attend().setEnabled(AttendEnumeration.rdoMustPlanYes,true);
					return null;
				}
			}
			else if (form.chkOffProtocol().getValue())
			{
				//nothing set so default to none
				form.Attend().setEnabled(true);
				form.Attend().setEnabled(AttendEnumeration.rdoMustPlanNo,true);
				form.Attend().setEnabled(AttendEnumeration.rdoMustPlanYes,true);				
			}
		}
		else
		{
			//off protocol
			//nothing set so default to none
			form.Attend().setEnabled(true);
			form.Attend().setEnabled(AttendEnumeration.rdoMustPlanNo,true);
			form.Attend().setEnabled(AttendEnumeration.rdoMustPlanYes,true);							
		}
		
		return null;
	}
	
	private void clearAllControls() 
	{
		form.qmbPrimaryTumour().setValue(null);
		form.cmbTreatmentSite().clear();
		form.GroupLit().setValue(null);
		form.txtAnatomicalSite().setValue(null);
		form.FirstTheraputic().setValue(null);
		form.GroupPos().setValue(null);
		form.cmbClinicalTrial().clear();
		form.cmbProtocol().clear();
		form.chkOffProtocol().setValue(null);
		form.Concent().setValue(null);
		form.Attend().setValue(null);
		form.AINTREE().setValue(null);
		form.GroupReq().setValue(null);
		form.txtEasComment().setValue(null);
	}
	
	private String[] populateDataFromScreen() throws NumberFormatException
	{		
		java.util.ArrayList<String> uiValidationErrors = new java.util.ArrayList<String>();
		
		ElectronicActionSheetVo voEAS = form.getLocalContext().getElectronisActionSheet();

		if (voEAS == null)
			voEAS = new ElectronicActionSheetVo();
		
		//recording info
		if (!voEAS.getRecordingInfoIsNotNull())
		{
			//insert recording informstion
			RecordingUserInformationVo voRecUser = new RecordingUserInformationVo();
			voRecUser.setRecordingUser((MemberOfStaffShortVo)domain.getMosUser());
			voRecUser.setRecordingDateTime(new DateTime());
			voEAS.setRecordingInfo(voRecUser);
		}
		
		//Patient
		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
			voEAS.setPatient(form.getGlobalContext().Core.getPatientShort());
				
		//Primary Tumour
		voEAS.setPrimaryTumour(form.qmbPrimaryTumour().getValue());
		
		//Treatment Site
		voEAS.setTreatmentSite(form.cmbTreatmentSite().getValue());
		
		//Treatment Site Laterality
		if (form.GroupLit().getValue() == null || GroupLitEnumeration.None.equals(form.GroupLit().getValue()))//WDEV-17842
			voEAS.setTreatSiteLaterality(null);
		else if (form.GroupLit().getValue().equals(GroupLitEnumeration.rdotsLateralityLeft))
			voEAS.setTreatSiteLaterality(LateralityLRonly.LEFT);
		else if (form.GroupLit().getValue().equals(GroupLitEnumeration.rdotsLateralityRight))
			voEAS.setTreatSiteLaterality(LateralityLRonly.RIGHT);

		//Anatomical Site
		voEAS.setAnatomicalSite(form.txtAnatomicalSite().getValue());
		
		//First Theraputic Intervention
		if (form.FirstTheraputic().getValue() == null || FirstTheraputicEnumeration.None.equals(form.FirstTheraputic().getValue()))
			voEAS.setTreatSiteLaterality(null);
		else if (form.FirstTheraputic().getValue().equals(FirstTheraputicEnumeration.rdoFirstTherapIYes))
			voEAS.setFirstTherapeuticIntervention(true);
		else if (form.FirstTheraputic().getValue().equals(FirstTheraputicEnumeration.rdoFirstTherapINo))
			voEAS.setFirstTherapeuticIntervention(false);
		
		//Possible Clinical Trials Patient
		if (form.GroupPos().getValue() == null || GroupPosEnumeration.None.equals(form.GroupPos().getValue()))
			voEAS.setClinicalTrialPatient(null);
		else if (form.GroupPos().getValue().equals(GroupPosEnumeration.rdoPossibleClinicalTrialsPatYes))
			voEAS.setClinicalTrialPatient(true);
		else if (form.GroupPos().getValue().equals(GroupPosEnumeration.rdoPossibleClinicalTrialsPatNo))
			voEAS.setClinicalTrialPatient(false);
		
		if(GroupPosEnumeration.rdoPossibleClinicalTrialsPatYes.equals(form.GroupPos().getValue()))
		{
			if(form.cmbClinicalTrial().getValue() == null)
			{
				uiValidationErrors.add("Clinical Trial is mandatory");
			}
		}
		
		//Clinical Trial
		voEAS.setClinicalTrial(form.cmbClinicalTrial().getValue());
		
		//Protocol
		voEAS.setProtocol(form.cmbProtocol().getValue());
		
		//Off Protocol
		voEAS.setProtocolUsed(!form.chkOffProtocol().getValue());
		
		if (form.chkOffProtocol().getValue())
		{
			//check reason
			if (form.txtReasonOffProtocol().getValue() == null)
			{
				uiValidationErrors.add("Please enter a Reason for Off Protocol");
				form.txtReasonOffProtocol().setFocus();
			}			
		}

		//Reason off protocol
		voEAS.setOffProtocolReason(form.txtReasonOffProtocol().getValue());		
		
		//Phases
		if (form.chkOffProtocol().getValue())
		{
			voEAS.setPhases(populateOffProtocolPhases());
		}
		else
			voEAS.setPhases(populateOnProtocolPhases());
						
		uiValidationErrors.addAll(validatePhaseCollection(voEAS.getPhases(),true));

		uiValidationErrors.addAll(validateLaterality());
				
		//Patient Consented to Radiotherapy Treatment
		if (form.Concent().getValue() == null || ConcentEnumeration.None.equals(form.Concent().getValue())) //WDEV-17842
			voEAS.setPatientConsent(null);
		else if (form.Concent().getValue().equals(ConcentEnumeration.rdoPatientConsentForRadiotherTreatYes))
			voEAS.setPatientConsent(YesNo.YES);
		else if (form.Concent().getValue().equals(ConcentEnumeration.rdordoPatientConsentForRadiotherTreatNo))
			voEAS.setPatientConsent(YesNo.NO);	
		
		//Must Plan in Consultant Session
		if (form.Attend().getValue() == null || AttendEnumeration.None.equals(form.Attend().getValue()))
			voEAS.setPlanConsSession(null);
		else if (form.Attend().getValue().equals(AttendEnumeration.rdoMustPlanYes))
			voEAS.setPlanConsSession(YesNo.YES);
		else if (form.Attend().getValue().equals(AttendEnumeration.rdoMustPlanNo))
			voEAS.setPlanConsSession(YesNo.NO);

		//Appropriate for CCC-L
		if (form.AINTREE().getValue() == null || AINTREEEnumeration.None.equals(form.AINTREE().getValue()))
			voEAS.setAppropCCCL(null);
		else if (form.AINTREE().getValue().equals(AINTREEEnumeration.rdoAppropriateForCCCLYes))
			voEAS.setAppropCCCL(YesNo.YES);
		else if (form.AINTREE().getValue().equals(AINTREEEnumeration.rdoAppropriateForCCCLNo))
			voEAS.setAppropCCCL(YesNo.NO);
		
		//Request Image Transfer
		if (form.GroupReq().getValue() == null || GroupReqEnumeration.None.equals(form.GroupReq().getValue()))
			voEAS.setImageTransfer(null);
		else if (form.GroupReq().getValue().equals(GroupReqEnumeration.rdoRequestImageTransYes))
			voEAS.setImageTransfer(YesNo.YES);
		else if (form.GroupReq().getValue().equals(GroupReqEnumeration.rdoRequestImageTransNo))
			voEAS.setImageTransfer(YesNo.NO);
		
		//EAS Comment
		voEAS.setEasComment(form.txtEasComment().getValue());			
		
		form.getLocalContext().setElectronisActionSheet(voEAS);
		
		int errorCount = uiValidationErrors.size();
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)uiValidationErrors.get(x);
		
		return result;
	}

	private ArrayList<String> validatePhaseCollection(EASPhaseVoCollection phaseColl,
			boolean bShowMessages) 
	{		
		java.util.ArrayList<String> uiValidationErrors = new java.util.ArrayList<String>();
		
		//check collection
		if (phaseColl != null)
		{
			for (int i = 0; i < phaseColl.size(); i++)
			{
				//check for duplicate phases				
				if (isMultiple(phaseColl.get(i),phaseColl) > 1)
					uiValidationErrors.add("Duplicate Phases found: " + form.grdPhase().getRows().get(i).getValue().getPhaseName().getText());
				
				//check Unit Energy values
				if (phaseColl.get(i).getEnergyIsNotNull()
						&& !phaseColl.get(i).getUnitsIsNotNull())
				{
					uiValidationErrors.add("No Unit selected for Phase: " 
								+ (phaseColl.get(i).getPhaseNameIsNotNull()?phaseColl.get(i).getPhaseName().getText():"")
								+ " Energy: " 
								+ (phaseColl.get(i).getEnergyIsNotNull()?phaseColl.get(i).getEnergy().toString():""));
				}					
			}
		}
		return uiValidationErrors;		
	}

	private ArrayList<String> validateLaterality() 
	{
		java.util.ArrayList<String> uiValidationErrors = new java.util.ArrayList<String>();
		
		if (form.cmbTreatmentSite().getValue() != null)
		{
			if (form.cmbTreatmentSite().getValue().getTreatmentSiteIsNotNull() && form.cmbTreatmentSite().getValue().getLateralityIsNotNull())
			{
				if (form.cmbTreatmentSite().getValue().getLaterality())
				{
					//laterality is mandatory
					if (form.GroupLit().getValue() != null && form.GroupLit().getValue().equals(GroupLitEnumeration.None))
						uiValidationErrors.add("Please select Treatment Site Laterality");
				}
			}
		}
		
		return uiValidationErrors;
	}

	private EASPhaseVoCollection populateOnProtocolPhases() throws NumberFormatException 
	{
		if (form.grdPhase().getRows() != null )
		{
			EASPhaseVoCollection phaseColl = new EASPhaseVoCollection();
			
			for (int i = 0; i<form.grdPhase().getRows().size();i++)
			{
								
				EASPhaseVo vo = form.grdPhase().getRows().get(i).getValue();					
				if (vo!= null)
				{
					try
					{
						if (form.grdPhase().getRows().get(i).getColumnDays()!=null && form.grdPhase().getRows().get(i).getColumnDays().equals(""))
							form.grdPhase().getRows().get(i).setColumnDays(null);
						
						vo.setDays(form.grdPhase().getRows().get(i).getColumnDays() != null?new Integer(form.grdPhase().getRows().get(i).getColumnDays()):null);
					}
					catch (NumberFormatException ne)
					{
						throw new NumberFormatException("Invalid entry for Days: " + ne.getMessage());
					}
					try
					{
						if (form.grdPhase().getRows().get(i).getColumnDose()!=null && form.grdPhase().getRows().get(i).getColumnDose().equals(""))
							form.grdPhase().getRows().get(i).setColumnDose(null);
						
						vo.setDose(form.grdPhase().getRows().get(i).getColumnDose() !=null?new Float(form.grdPhase().getRows().get(i).getColumnDose()):null);
					}
					catch (NumberFormatException ne)
					{
						throw new NumberFormatException("Invalid entry for Dose: " + ne.getMessage());
					}
					try
					{
						if (form.grdPhase().getRows().get(i).getColumnEnergy()!=null && form.grdPhase().getRows().get(i).getColumnEnergy().equals(""))
							form.grdPhase().getRows().get(i).setColumnEnergy(null);
						
						vo.setEnergy(form.grdPhase().getRows().get(i).getColumnEnergy()!=null?new Float(form.grdPhase().getRows().get(i).getColumnEnergy()):null);
					}
					catch (NumberFormatException ne)
					{
						throw new NumberFormatException("Invalid entry for Energy: " + ne.getMessage());
					}
					
					try
					{
						if (form.grdPhase().getRows().get(i).getColumnFractionation()!=null && form.grdPhase().getRows().get(i).getColumnFractionation().equals(""))
							form.grdPhase().getRows().get(i).setColumnFractionation(null);
						
						vo.setFractions(form.grdPhase().getRows().get(i).getColumnFractionation()!=null?new Integer(form.grdPhase().getRows().get(i).getColumnFractionation()):null);
					}
					catch (NumberFormatException ne)
					{
						throw new NumberFormatException("Invalid entry for Fractionation: " + ne.getMessage());
					}
										
					vo.setProvisional(form.grdPhase().getRows().get(i).getColumnProvisional());
					vo.setID_EASPhase(form.grdPhase().getRows().get(i).getValue().getID_EASPhase());
					vo.setIsRIE(form.grdPhase().getRows().get(i).getValue().getIsRIE());
					
					//modality
					vo.setModality(form.grdPhase().getRows().get(i).getColumnModality());
					//units
					vo.setUnits(form.grdPhase().getRows().get(i).getColumnUnits());
					
					//selected
					vo.setSelected(form.grdPhase().getRows().get(i).getColumnSelected());
					phaseColl.add(vo);
				}
			}
			
			return phaseColl;
		}

		return null;
	}

	private EASPhaseVoCollection populateOffProtocolPhases() 
	{
		if (form.grdPhase().getRows() != null )
		{
			EASPhaseVoCollection phaseColl = new EASPhaseVoCollection();
			for (int i = 0; i<form.grdPhase().getRows().size();i++)
			{
				EASPhaseVo vo = form.grdPhase().getRows().get(i).getValue();
				if (vo==null)
				{
					vo = new EASPhaseVo();
					vo.setPhaseName(form.grdPhase().getRows().get(i).getColumnPhase());
					vo.setDays(form.grdPhase().getRows().get(i).getColumnDays() != null?new Integer(form.grdPhase().getRows().get(i).getColumnDays()):null);
					vo.setDose(form.grdPhase().getRows().get(i).getColumnDose() !=null?new Float(form.grdPhase().getRows().get(i).getColumnDose()):null);
					vo.setEnergy(form.grdPhase().getRows().get(i).getColumnEnergy()!=null?new Float(form.grdPhase().getRows().get(i).getColumnEnergy()):null);
					vo.setFractions(form.grdPhase().getRows().get(i).getColumnFractionation()!=null?new Integer(form.grdPhase().getRows().get(i).getColumnFractionation()):null);								
					vo.setProvisional(form.grdPhase().getRows().get(i).getColumnProvisional());
					vo.setModality(form.grdPhase().getRows().get(i).getColumnModality());
					vo.setUnits(form.grdPhase().getRows().get(i).getColumnUnits());
					vo.setSelected(form.grdPhase().getRows().get(i).getColumnSelected());
					vo.setIsRIE(false);
					form.grdPhase().getRows().get(i).setValue(vo);
				}
				else
				{
					vo.setPhaseName(form.grdPhase().getRows().get(i).getColumnPhase());
					vo.setDays(form.grdPhase().getRows().get(i).getColumnDays() != null?new Integer(form.grdPhase().getRows().get(i).getColumnDays()):null);
					vo.setDose(form.grdPhase().getRows().get(i).getColumnDose() !=null?new Float(form.grdPhase().getRows().get(i).getColumnDose()):null);
					vo.setEnergy(form.grdPhase().getRows().get(i).getColumnEnergy()!=null?new Float(form.grdPhase().getRows().get(i).getColumnEnergy()):null);
					vo.setFractions(form.grdPhase().getRows().get(i).getColumnFractionation()!=null?new Integer(form.grdPhase().getRows().get(i).getColumnFractionation()):null);								
					vo.setProvisional(form.grdPhase().getRows().get(i).getColumnProvisional());
					vo.setID_EASPhase(form.grdPhase().getRows().get(i).getValue().getID_EASPhase());
					vo.setModality(form.grdPhase().getRows().get(i).getColumnModality());
					vo.setUnits(form.grdPhase().getRows().get(i).getColumnUnits());					
					vo.setIsRIE(form.grdPhase().getRows().get(i).getValue().getIsRIE());
					vo.setSelected(form.grdPhase().getRows().get(i).getColumnSelected());
					form.grdPhase().getRows().get(i).setValue(vo);
				}
				
				phaseColl.add(vo);
			}			
			
			return phaseColl;				

		}	
		
		return null;
	}
	
	private int isMultiple(EASPhaseVo vpPhaseVo, EASPhaseVoCollection voPhaseVoColl)
	{
		int lCount = 0;
		
		if (vpPhaseVo == null)
			throw new CodingRuntimeException("vpPhaseVo cannot be null in method isThisRecordDuplicate");
		if (voPhaseVoColl == null)
			throw new CodingRuntimeException("voPhaseVoColl cannot be null in method isThisRecordDuplicate");
		
		for (EASPhaseVo voPhaseVoCollListItem : voPhaseVoColl)
		{
			if(voPhaseVoCollListItem.getPhaseNameIsNotNull())
			{
				if(voPhaseVoCollListItem.getPhaseName().equals(vpPhaseVo.getPhaseName())
						&& voPhaseVoCollListItem.getSelectedIsNotNull()
						&& vpPhaseVo.getSelectedIsNotNull()
						&& voPhaseVoCollListItem.getSelected())
				{
					lCount++;
				}
			}	
		}
		
		return lCount;
	}
	
	
	protected void onChkOffProtocolValueChanged() throws PresentationLogicException 
	{
		form.getLocalContext().setWasRequestImageTransferModified(Boolean.FALSE);
		
		//check if still in draft
		if (form.getLocalContext().getElectronisActionSheetIsNotNull() 
				&& form.getLocalContext().getElectronisActionSheet().getEasStatusIsNotNull() 
				&& form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatusIsNotNull() 
				&& form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatus().equals(EASStatus.DRAFT))
		{ 
			//record saved in draft
			form.cmbProtocol().setValue(null);
			form.grdPhase().getRows().clear();
			form.cmbProtocol().setEnabled(!form.chkOffProtocol().getValue());
			form.txtReasonOffProtocol().setEnabled(form.chkOffProtocol().getValue());
			form.txtReasonOffProtocol().setVisible(form.chkOffProtocol().getValue());
			form.lblReasonOffProtocol().setEnabled(form.chkOffProtocol().getValue());
			form.lblReasonOffProtocol().setVisible(form.chkOffProtocol().getValue());
			
			if (!form.chkOffProtocol().getValue())
				form.txtReasonOffProtocol().setValue(null);
			
			updateControlState();
			
			form.AINTREE().setValue(defaultApproCCCL());
			form.Attend().setValue(defaultAttendMustPlan());			
			return;			
		}
		else if (form.getLocalContext().getElectronisActionSheetIsNotNull() 
					&& form.getLocalContext().getElectronisActionSheet().getEasStatusIsNotNull() 
					&& form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatusIsNotNull()
					&& !form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatus().equals(EASStatus.DRAFT))
		{
			updateControlState();
			return; //do nothing
		}


		if (!form.getLocalContext().getElectronisActionSheetIsNotNull() 
				&& form.chkOffProtocol().getValue())
		{
			//no record saved yet
			form.cmbProtocol().setValue(null);
			form.grdPhase().getRows().clear();
			form.cmbProtocol().setEnabled(false);
			form.txtReasonOffProtocol().setEnabled(true);
						
			updateControlState();
			return;
		}
		
				
		//else OnProtocol
		form.cmbProtocol().setEnabled(true);
		form.txtReasonOffProtocol().setValue(null);
		form.txtReasonOffProtocol().setEnabled(false);
		
	}

	public Boolean getGroupReqEnumeration() 
	{
		if (form.GroupReq().getValue() == null || form.GroupReq().getValue().equals(GroupReqEnumeration.rdoRequestImageTransNo))
			return false;

		return true;
	}
	
	public ElectronicActionSheetVo getValue() 
	{
		try
		{
			populateDataFromScreen();
		}
		catch (NumberFormatException ne)
		{
			engine.showMessage(ne.getMessage());
		}
		return form.getLocalContext().getElectronisActionSheet();
	}
	
	public void setValue(ElectronicActionSheetVo value) 
	{
		form.getLocalContext().setElectronisActionSheet(value);		
		populateScreenFromData();
		updateControlState();		
	}

	private void updateControlState()
	{

		if (form.getMode().equals(FormMode.EDIT))
		{
			//Controls
			
			//PrimaryTumour and Treatment Site
			if (form.getLocalContext().getElectronisActionSheetIsNotNull()
					&& form.getLocalContext().getElectronisActionSheet().getID_ElectronicActionSheetIsNotNull()
					&& form.getLocalContext().getElectronisActionSheet().getPrimaryTumourIsNotNull()
					&& form.getLocalContext().getElectronisActionSheet().getPrimaryTumour().getID_PrimaryTumourIsNotNull()) 
			{
				form.qmbPrimaryTumour().setEnabled(false);
				form.cmbTreatmentSite().setEnabled(false);
				form.cmbTreatmentSite().setRequired(false);
				form.txtPrimTumReq().setRequired(false);
			}
			else
			{
				form.qmbPrimaryTumour().setEnabled(true);
				form.qmbPrimaryTumour().setRequired(true);	
				form.cmbTreatmentSite().setEnabled(true);
				form.cmbTreatmentSite().setRequired(true);
			}
			
			boolean bEnabled = getEnabledState();
			
			//radios
			form.Concent().setEnabled(bEnabled);
			form.Concent().setEnabled(ConcentEnumeration.rdoPatientConsentForRadiotherTreatYes,bEnabled);
			form.Concent().setEnabled(ConcentEnumeration.rdordoPatientConsentForRadiotherTreatNo,bEnabled);
			
			form.GroupLit().setEnabled(GroupLitEnumeration.rdotsLateralityLeft,bEnabled);
			form.GroupLit().setEnabled(GroupLitEnumeration.rdotsLateralityRight,bEnabled);
			form.GroupLit().setEnabled(bEnabled);
			
			form.GroupPos().setEnabled(bEnabled);
			form.GroupPos().setEnabled(GroupPosEnumeration.rdoPossibleClinicalTrialsPatNo,bEnabled);
			form.GroupPos().setEnabled(GroupPosEnumeration.rdoPossibleClinicalTrialsPatYes,bEnabled);
			
			form.GroupReq().setEnabled(bEnabled);
			form.GroupReq().setEnabled(GroupReqEnumeration.rdoRequestImageTransNo,bEnabled);
			form.GroupReq().setEnabled(GroupReqEnumeration.rdoRequestImageTransYes,bEnabled);
			
			form.FirstTheraputic().setEnabled(bEnabled);
			form.FirstTheraputic().setEnabled(FirstTheraputicEnumeration.rdoFirstTherapINo,bEnabled);
			form.FirstTheraputic().setEnabled(FirstTheraputicEnumeration.rdoFirstTherapIYes,bEnabled);
			
			form.txtAnatomicalSite().setEnabled(bEnabled);
						
			form.txtReasonOffProtocol().setEnabled(bEnabled
					&& form.chkOffProtocol().getValue());
			
			form.grdPhase().setEnabled(bEnabled);
			
			//chkOffProtocol
			if (form.cmbTreatmentSite().getValue() == null
					&& form.cmbTreatmentSite().getValue() == null)
			{
				form.chkOffProtocol().setEnabled(bEnabled);
				
			}
			else
			{
				if (form.getLocalContext().getElectronisActionSheetIsNotNull()
						&& form.getLocalContext().getElectronisActionSheet().getID_ElectronicActionSheetIsNotNull()
						&& form.getLocalContext().getElectronisActionSheet().getPrimaryTumourIsNotNull()
						&& form.getLocalContext().getElectronisActionSheet().getPrimaryTumour().getID_PrimaryTumourIsNotNull())
					form.chkOffProtocol().setEnabled(false);
				else
					form.chkOffProtocol().setEnabled(
						(form.cmbTreatmentSite().getValue()!= null
						&& form.cmbTreatmentSite().getValue() != null
						&& form.cmbProtocol().getValues() != null 
						&& !form.cmbProtocol().getValues().isEmpty()));
			}
			
			//Clinical Trials
			form.cmbClinicalTrial().setEnabled(bEnabled
					&& form.GroupPos().getValue().equals(GroupPosEnumeration.rdoPossibleClinicalTrialsPatYes));
			 
			//Context Menus
			if (bEnabled)
			{
				form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuADDItem().setEnabled(true);
				form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuREMOVEItem().setEnabled(true);
			}
			else
			{
				form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuADDItem().setEnabled(false);
				form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuREMOVEItem().setEnabled(false);			
			}			
			
			//Saved record in Draft
			if (form.getLocalContext().getElectronisActionSheetIsNotNull())
			{
				form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuADDItem().setVisible(
						bEnabled
						&& form.chkOffProtocol().getValue());
			}
			else
				form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuADDItem().setVisible(
						form.chkOffProtocol().getValue());
								
			//New record in progress
			if (form.grdPhase().getSelectedRowIndex() >= 0)
				form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuREMOVEItem().setVisible(
					!form.getLocalContext().getElectronisActionSheetIsNotNull()
					&& form.chkOffProtocol().getValue());
			else
				form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuREMOVEItem().setVisible(false);
			
			//Saved record in Draft
			if (form.grdPhase().getSelectedRowIndex() >= 0)
				form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuREMOVEItem().setVisible(
					bEnabled					
					&& form.chkOffProtocol().getValue());
			else
				form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuREMOVEItem().setVisible(false);
			
			//Protocol
			if (form.getLocalContext().getElectronisActionSheetIsNotNull()
					&& form.getLocalContext().getElectronisActionSheet().getID_ElectronicActionSheetIsNotNull()
					&& form.getLocalContext().getElectronisActionSheet().getPrimaryTumourIsNotNull()
					&& form.getLocalContext().getElectronisActionSheet().getPrimaryTumour().getID_PrimaryTumourIsNotNull()) 
			{
				form.cmbProtocol().setEnabled(false);
			}
			else
			{
				form.cmbProtocol().setEnabled(!form.chkOffProtocol().getValue());
			}
			
			//WDEV-17567; WDEV-17597
			boolean isMandatoryOrNotRequired = form.cmbProtocol().getValue() != null && form.cmbProtocol().getValue().getConsSessRequiredIsNotNull() && (form.cmbProtocol().getValue().getConsSessRequired().equals(OptionsRequired.MANDATORY) || form.cmbProtocol().getValue().getConsSessRequired().equals(OptionsRequired.NOT_REQUIRED));
			
			form.Attend().setEnabled(bEnabled && !isMandatoryOrNotRequired);
			form.Attend().setEnabled(AttendEnumeration.rdoMustPlanNo,bEnabled && !isMandatoryOrNotRequired);
			form.Attend().setEnabled(AttendEnumeration.rdoMustPlanYes,bEnabled && !isMandatoryOrNotRequired);										

			if (defaultApproCCCL() != null)
			{
				if (form.getLocalContext().getElectronisActionSheetIsNotNull()
						&& form.getLocalContext().getElectronisActionSheet().getProtocolIsNotNull()
						&& form.getLocalContext().getElectronisActionSheet().getProtocol().getAppropCCCLIsNotNull()
						&& form.getLocalContext().getElectronisActionSheet().getProtocol().getAppropCCCL().equals(YesNo.NO))
				{
					form.AINTREE().setEnabled(true);
					form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
					form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);			
				}
				else if (form.AINTREE().getValue() != null
						 && form.AINTREE().getValue().equals(AINTREEEnumeration.rdoAppropriateForCCCLNo))
				{
					form.AINTREE().setEnabled(true);
					form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
					form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);							
				}
				else
				{
					form.AINTREE().setEnabled(bEnabled);
					form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,bEnabled);
					form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,bEnabled);										
				}
			}
			else
			{
				form.AINTREE().setEnabled(bEnabled);
				form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,bEnabled);
				form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,bEnabled);														
			}
			
			form.txtPrimTumReq().setVisible(true);
			form.txtFirstTherReq().setVisible(true);
			form.txtPossClinicalTrialReq().setVisible(true);
			form.txtPatientConsentReq().setVisible(true);
			form.txtApprForCCCReq().setVisible(true);
			form.txtReqImageReq().setVisible(true);
			form.txtMustPlanReq().setVisible(true);
			
			form.cmbClinicalTrial().setRequired(GroupPosEnumeration.rdoPossibleClinicalTrialsPatYes.equals(form.GroupPos().getValue()));
			
		}
		else if (form.getMode().equals(FormMode.VIEW))
		{
			form.cmbTreatmentSite().setEnabled(false);
			
			//context menus
			form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuADDItem().setVisible(false);
			form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuADDItem().setEnabled(false);
			form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuREMOVEItem().setVisible(false);
			form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuREMOVEItem().setEnabled(false);

			//radios
			form.Concent().setEnabled(false);
			form.Concent().setEnabled(ConcentEnumeration.rdoPatientConsentForRadiotherTreatYes,false);
			form.Concent().setEnabled(ConcentEnumeration.rdordoPatientConsentForRadiotherTreatNo,false);
			
			form.GroupLit().setEnabled(GroupLitEnumeration.rdotsLateralityLeft,false);
			form.GroupLit().setEnabled(GroupLitEnumeration.rdotsLateralityRight,false);
			form.GroupLit().setEnabled(false);
			
			form.GroupPos().setEnabled(false);
			form.GroupPos().setEnabled(GroupPosEnumeration.rdoPossibleClinicalTrialsPatNo,false);
			form.GroupPos().setEnabled(GroupPosEnumeration.rdoPossibleClinicalTrialsPatYes,false);
			
			form.GroupReq().setEnabled(false);
			form.GroupReq().setEnabled(GroupReqEnumeration.rdoRequestImageTransNo,false);
			form.GroupReq().setEnabled(GroupReqEnumeration.rdoRequestImageTransYes,false);
			
			form.FirstTheraputic().setEnabled(false);
			form.FirstTheraputic().setEnabled(FirstTheraputicEnumeration.rdoFirstTherapINo,false);
			form.FirstTheraputic().setEnabled(FirstTheraputicEnumeration.rdoFirstTherapIYes,false);
			
			form.AINTREE().setEnabled(false);
			form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,false);
			form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,false);
			form.Attend().setEnabled(false);
			form.Attend().setEnabled(AttendEnumeration.rdoMustPlanNo,false);
			form.Attend().setEnabled(AttendEnumeration.rdoMustPlanYes,false);	
			
			form.txtPrimTumReq().setVisible(false);
			form.txtFirstTherReq().setVisible(false);
			form.txtPossClinicalTrialReq().setVisible(false);
			form.txtPatientConsentReq().setVisible(false);
			form.txtApprForCCCReq().setVisible(false);
			form.txtReqImageReq().setVisible(false);
			form.txtMustPlanReq().setVisible(false);
			form.txtReasonOffProtocol().setEnabled(false);
			
			form.grdPhase().setReadOnly(true);
			
		}
		
		//WDEV-17555
		form.txtReasonOffProtocol().setVisible(form.chkOffProtocol().getValue());
		form.lblReasonOffProtocol().setVisible(form.chkOffProtocol().getValue());
		
		//laterality
		updateLaterality();

	}
	private boolean getEnabledState() 
	{
		
		if (form.getLocalContext().getElectronisActionSheetIsNotNull() 
				&& form.getLocalContext().getElectronisActionSheet().getEasStatusIsNotNull()
				&& form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatusIsNotNull()
				&& form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatus().equals(EASStatus.DRAFT))
				return true;
		
		boolean bRespHcp = false;
		boolean bSeenByHcp = false;
		
		MemberOfStaffShortVo mosVo = (MemberOfStaffShortVo)domain.getMosUser();
		
		Object currUser = domain.getHcpUser();
		if (currUser != null 
				&& currUser instanceof MedicVo && MedicGrade.CONS.equals(((MedicVo)currUser).getGrade()))
		{		
			if (mosVo.getHcpIsNotNull() 
					&& mosVo.getHcp().getIsHCPaResponsibleHCPIsNotNull()
					&& mosVo.getHcp().getIsHCPaResponsibleHCP()
					&& mosVo.getHcp().getHcpTypeIsNotNull()
					&& mosVo.getHcp().getHcpType().equals(HcpDisType.MEDICAL))
			{
				
				bRespHcp = true;
			}
		}
				
		if (mosVo != null
				&& mosVo.getHcpIsNotNull() 
				&& mosVo.getHcp().getIsHCPaResponsibleHCPIsNotNull()
				&& mosVo.getHcp().getIsHCPaResponsibleHCP()
				&& mosVo.getHcp().getHcpTypeIsNotNull()
				&& mosVo.getHcp().getHcpType().equals(HcpDisType.MEDICAL))
		{
			
			bSeenByHcp = true;
		}

		//enable if in awaiting authorisation and the resposible hcp is the logged in user
		if(form.getLocalContext().getElectronisActionSheetIsNotNull()
				&& (bRespHcp || bSeenByHcp)
				&& form.getLocalContext().getElectronisActionSheet().getEasStatusIsNotNull()
				&& form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatusIsNotNull()
				&& form.getLocalContext().getElectronisActionSheet().getEasStatus().getStatus().equals(EASStatus.AWAITING_AUTHORISATION))
				return true;
		
		return false;
	}

	private AINTREEEnumeration defaultApproCCCL() 
	{
		if (form.getGlobalContext().Core.getPatientShortIsNotNull() 
				&& form.getGlobalContext().Core.getPatientShort().getAddressIsNotNull())
		{

//					1) a protocol is selected and 
//					b) the selected protocol 
//					is configured as appropriate for CCC-L and 
//					c) the patient's postcode starts with 
//						L followed immediately by an Integer 
//						or PR followed immediately by an Integer 
//					   	or postcode starts with WA. 
			   	
			if (form.getGlobalContext().Core.getPatientShort().getAddress().getPostCodeIsNotNull() 
					&& form.getGlobalContext().Core.getPatientShort().getAddress().getPostCode().length()>= 2)
			{
				if (form.getGlobalContext().Core.getPatientShort().getAddress().getPostCode().toUpperCase().subSequence(0, 1).equals("L")
						&& isNumeric(form.getGlobalContext().Core.getPatientShort().getAddress().getPostCode().toUpperCase().subSequence(1, 2).toString()))
				{
					if (form.cmbProtocol().getValue() != null
							&& form.cmbProtocol().getValue().getAppropCCCLIsNotNull() 
							&& form.cmbProtocol().getValue().getAppropCCCL().equals(YesNo.YES))
					{							
						form.AINTREE().setEnabled(true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);
						return AINTREEEnumeration.rdoAppropriateForCCCLYes;
					}
					else if (form.cmbProtocol().getValue() != null
							&& form.cmbProtocol().getValue().getAppropCCCLIsNotNull() 
							&& form.cmbProtocol().getValue().getAppropCCCL().equals(YesNo.NO))
					{
						form.AINTREE().setEnabled(true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);
						return AINTREEEnumeration.rdoAppropriateForCCCLNo;							
					}
					else // nothing selected, so default to yes and enable because the postcode is ok 
					{
						form.AINTREE().setEnabled(true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);
						return AINTREEEnumeration.rdoAppropriateForCCCLYes;
					}
				}
			}
			
			if (form.getGlobalContext().Core.getPatientShort().getAddress().getPostCodeIsNotNull() 
					&& form.getGlobalContext().Core.getPatientShort().getAddress().getPostCode().length()>= 3)
			{						
				if (form.getGlobalContext().Core.getPatientShort().getAddress().getPostCode().toUpperCase().subSequence(0, 2).equals("PR")
						&& isNumeric(form.getGlobalContext().Core.getPatientShort().getAddress().getPostCode().toUpperCase().subSequence(2, 3).toString()))
				{
					if (form.cmbProtocol().getValue() != null
							&& form.cmbProtocol().getValue().getAppropCCCLIsNotNull() 
							&& form.cmbProtocol().getValue().getAppropCCCL().equals(YesNo.YES))
					{							
						form.AINTREE().setEnabled(true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);							
						return AINTREEEnumeration.rdoAppropriateForCCCLYes;
					}
					else if (form.cmbProtocol().getValue() != null
							&& form.cmbProtocol().getValue().getAppropCCCLIsNotNull() 
							&& form.cmbProtocol().getValue().getAppropCCCL().equals(YesNo.NO))
					{
						form.AINTREE().setEnabled(true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);
						return AINTREEEnumeration.rdoAppropriateForCCCLNo;							
					}
					else // nothing selected, so default to yes and enable because the postcode is ok 
					{
						form.AINTREE().setEnabled(true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);
						return AINTREEEnumeration.rdoAppropriateForCCCLYes;
					}						
				}

				if (form.getGlobalContext().Core.getPatientShort().getAddress().getPostCode().toUpperCase().subSequence(0, 2).equals("WA"))
				{
					if (form.cmbProtocol().getValue() != null
							&& form.cmbProtocol().getValue().getAppropCCCLIsNotNull() 
							&& form.cmbProtocol().getValue().getAppropCCCL().equals(YesNo.YES))
					{
						form.AINTREE().setEnabled(true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);
						return AINTREEEnumeration.rdoAppropriateForCCCLYes;
					}
					else if (form.cmbProtocol().getValue() != null
							&& form.cmbProtocol().getValue().getAppropCCCLIsNotNull() 
							&& form.cmbProtocol().getValue().getAppropCCCL().equals(YesNo.NO))
					{
						form.AINTREE().setEnabled(true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);
						return AINTREEEnumeration.rdoAppropriateForCCCLNo;							
					}
					else // nothing selected, so default to yes and enable because the postcode is ok 
					{
						form.AINTREE().setEnabled(true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
						form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);
						return AINTREEEnumeration.rdoAppropriateForCCCLYes;
					}						
				}		
				else // nothing selected, so just default to NO because the postcode is not ok
				{ 
					form.AINTREE().setEnabled(true);
					form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLNo,true);
					form.AINTREE().setEnabled(AINTREEEnumeration.rdoAppropriateForCCCLYes,true);
					return AINTREEEnumeration.rdoAppropriateForCCCLNo;					
				}
			}
		}
		
		return null;
	}

	public static boolean isNumeric(String str)  
	{  
	  try  
	  {  		
	    double d = Double.parseDouble(str);  
	  }  
	  catch(NumberFormatException nfe)  
	  {  
	    return false;  
	  }  
	  return true;  
	}
	
	public Boolean save() 
	{
		String[] uiValidation = null;
		
		try
		{
			uiValidation = populateDataFromScreen();
		}
		catch (NumberFormatException ne)
		{
			engine.showMessage(ne.getMessage());
			return false;
		}
		
		/*if (uiValidation != null && uiValidation.length > 0)
		{
			engine.showErrors(uiValidation);
			return false;

		}*/
		
		String[] str1 = domain.validateProtocolPhases(form.getLocalContext().getElectronisActionSheet().getPhases());
		if (str1 != null && str1.length > 0)
		{
			engine.showErrors(str1);
			return false;
		}

		String[] str2 = form.getLocalContext().getElectronisActionSheet().validate(uiValidation);
		
		if (str2 != null && str2.length > 0)
		{
			engine.showErrors(str2);
			return false;
		}

		try 
		{
			form.getLocalContext().setElectronisActionSheet(domain.saveElectronicActionSheet(form.getLocalContext().getElectronisActionSheet()));
			updateControlState();
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			if (form.getLocalContext().getElectronisActionSheet().getID_ElectronicActionSheetIsNotNull())
				form.getLocalContext().setElectronisActionSheet(domain.getElectronicActionSheet(form.getLocalContext().getElectronisActionSheet()));			
			return false;
		} 
		catch (StaleObjectException e) 
		{
			if (form.getLocalContext().getElectronisActionSheetIsNotNull())
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				if (form.getLocalContext().getElectronisActionSheet().getID_ElectronicActionSheetIsNotNull())
					form.getLocalContext().setElectronisActionSheet(domain.getElectronicActionSheet(form.getLocalContext().getElectronisActionSheet()));
			}
			return false;
		} 		
		
		return true;
	}

	
	protected void OncmbProtocolSelChange() throws PresentationLogicException 
	{
		form.getLocalContext().setWasRequestImageTransferModified(Boolean.FALSE);
		
		//apply default rules
		form.Attend().setValue(defaultAttendMustPlan());

		//apply default rules
		form.AINTREE().setValue(defaultApproCCCL());
		
		//populate phases
		ProtocolLiteInsVo voColl = getPhases(form.cmbProtocol().getValue());
	
		form.grdPhase().getRows().clear();
				
		//save current configured phases locally
		form.getLocalContext().setProtocolPhaseList(voColl!=null?voColl.getPhases():null);
		
		boolean bReadOnly = getReadOnlyState();
		
		if (form.grdPhase().getRows() == null || (form.grdPhase().getRows() != null && form.grdPhase().getRows().size() == 0))
		{
			if (!form.chkOffProtocol().getValue())
			{
				//list configured phases
				if (voColl != null && voColl.getPhasesIsNotNull())
				{
					for (int i = 0; i<voColl.getPhases().size(); i++ )
					{
						ProtocolPhaseVo voProtocolPhase = voColl.getPhases().get(i);
						grdPhaseRow row = form.grdPhase().getRows().newRow(voProtocolPhase.getPreferred());
						row.setprofilePhaseId(voColl.getPhases().get(i).getID_ProtocolPhase());
						row.setColumnPhase(voProtocolPhase.getPhaseName());
						row.setColumnDose(voProtocolPhase.getDose());
						row.setColumnDoseReadOnly(voProtocolPhase.getDoseIsNotNull());
						row.setColumnFractionation(voProtocolPhase.getFractionsIsNotNull()?voProtocolPhase.getFractions():null);
						row.setColumnFractionationReadOnly(voProtocolPhase.getFractionsIsNotNull());
						row.setColumnDays(voProtocolPhase.getDaysIsNotNull()?voProtocolPhase.getDays():null);
						row.setColumnDaysReadOnly(voProtocolPhase.getDaysIsNotNull());
						row.setColumnModality(voProtocolPhase.getModalityIsNotNull()?voProtocolPhase.getModality():null);
						row.setColumnModalityReadOnly(voProtocolPhase.getModalityIsNotNull());
						row.setColumnEnergy(voProtocolPhase.getEnergy());
						row.setColumnEnergyReadOnly(voProtocolPhase.getEnergyIsNotNull());
						row.setColumnUnits(voProtocolPhase.getUnitsIsNotNull()?voProtocolPhase.getUnits():null);
						row.setColumnUnitsReadOnly(voProtocolPhase.getUnitsIsNotNull());
						row.setColumnProvisional(false);
						row.setColumnSelected(voProtocolPhase.getPreferred());
						if (voProtocolPhase.getPreferred())
						{
							row.setBackColor(Color.DeepSkyBlue);
						}
						EASPhaseVo phaseVo = new EASPhaseVo();
						phaseVo.setDays(voProtocolPhase.getDays());
						phaseVo.setDose(voProtocolPhase.getDose());
						phaseVo.setEnergy(voProtocolPhase.getEnergy());
						phaseVo.setFractions(voProtocolPhase.getFractions());
						phaseVo.setModality(voProtocolPhase.getModality());
						phaseVo.setPhaseName(voProtocolPhase.getPhaseName());
						phaseVo.setPreferred(voProtocolPhase.getPreferred());
						//default provisional to false
						phaseVo.setProvisional(false);
						phaseVo.setUnits(voProtocolPhase.getUnits());
						row.setValue(phaseVo);
						
						form.getLocalContext().setProtocolPhaseList(form.cmbProtocol().getValue().getPhases());
						
						//enable if in draft mode 						
						if (form.getLocalContext().getElectronisActionSheetIsNotNull())
						{
							form.grdPhase().setReadOnly(bReadOnly);
							
							row.setReadOnly(bReadOnly);
																		
							row.setColumnDoseReadOnly(bReadOnly							
									|| 
									(form.getLocalContext().getProtocolPhaseListIsNotNull()
									&& form.getLocalContext().getProtocolPhaseList().get(i).getDoseIsNotNull())
									);
														
							row.setColumnFractionationReadOnly(bReadOnly							
									|| 
									(form.getLocalContext().getProtocolPhaseListIsNotNull()									
									&& form.getLocalContext().getProtocolPhaseList().get(i).getFractionsIsNotNull())
									);
														
							row.setColumnDaysReadOnly(bReadOnly							
									|| 
									(form.getLocalContext().getProtocolPhaseListIsNotNull()									
									&& form.getLocalContext().getProtocolPhaseList().get(i).getDaysIsNotNull())
									);
							
							row.setColumnEnergyReadOnly(bReadOnly							
									|| 
									(form.getLocalContext().getProtocolPhaseListIsNotNull()									
									&& form.getLocalContext().getProtocolPhaseList().get(i).getEnergyIsNotNull())
									);
							
							//Phase
							//Enable Off Protocol an Draft							
							row.setColumnPhaseReadOnly(true);
							
							//Modality
							//Enable Off Protocol  or no values On Protocol and Draft	
							row.setColumnModalityReadOnly(bReadOnly							
									|| 
									(form.getLocalContext().getProtocolPhaseListIsNotNull()									
									&& form.getLocalContext().getProtocolPhaseList().get(i).getModalityIsNotNull())
									);							
														
							//Units
							//Enable Off Protocol  or no values On Protocol and Draft	
							row.setColumnUnitsReadOnly(bReadOnly							
									||
									(form.getLocalContext().getProtocolPhaseListIsNotNull()									
									&& form.getLocalContext().getProtocolPhaseList().get(i).getUnitsIsNotNull())
									);							
							
																					
							row.setColumnProvisionalReadOnly(bReadOnly);
							
							row.setColumnSelectedReadOnly(bReadOnly);					
							
						}
						else
						{
							form.grdPhase().setReadOnly(form.chkOffProtocol().getValue());
							
							row.setColumnPhaseReadOnly(true);
							row.setColumnModalityReadOnly(true);
							
							row.setReadOnly(form.chkOffProtocol().getValue());
							
							row.setColumnDoseReadOnly(form.chkOffProtocol().getValue());
							row.setColumnFractionationReadOnly(form.chkOffProtocol().getValue());
							row.setColumnDaysReadOnly(form.chkOffProtocol().getValue());
							row.setColumnModalityReadOnly(form.chkOffProtocol().getValue());
							row.setColumnEnergyReadOnly(form.chkOffProtocol().getValue());
							row.setColumnUnitsReadOnly(form.chkOffProtocol().getValue());
							row.setColumnProvisionalReadOnly(form.chkOffProtocol().getValue());					
							row.setColumnSelectedReadOnly(form.chkOffProtocol().getValue());
							
						}
					}
				}
			}			
		}
	}	

	private ProtocolLiteInsVo getPhases(ProtocolNameVo value) 
	{
		if (value != null && form.getLocalContext().getProtocolsConfigIsNotNull())
		{
			for (int i=0; i<form.getLocalContext().getProtocolsConfig().size();i++)
			{
				if(form.getLocalContext().getProtocolsConfigIsNotNull()
					&& form.getLocalContext().getProtocolsConfig().get(i) != null
					&& form.getLocalContext().getProtocolsConfig().get(i).getID_ProtocolIsNotNull()
					&& form.getLocalContext().getProtocolsConfig().get(i).getID_Protocol().equals(value.getID_Protocol()))
					return form.getLocalContext().getProtocolsConfig().get(i);
			}
		}
		
		return null;
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender)
			throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EASNamespace.TreatmentOptionsPhaseMenu.ADD:
				onBtnAddPhase();
				break;
			case GenForm.ContextMenus.EASNamespace.TreatmentOptionsPhaseMenu.REMOVE:	
				onBtnRemovePhase();
				break;
		}		
		
	}

	private void onBtnRemovePhase() 
	{
		if (form.grdPhase().getSelectedRowIndex() > -1)
		{
			form.grdPhase().getRows().remove(form.grdPhase().getSelectedRowIndex());
			form.getContextMenus().EAS.getTreatmentOptionsPhaseMenuREMOVEItem().setVisible(false);
		}
	}

	private void onBtnAddPhase() 
	{		
		grdPhaseRow row = form.grdPhase().getRows().newRow();
		form.grdPhase().setReadOnly(false);
		row.setColumnPhaseReadOnly(false);
		row.setColumnDaysReadOnly(false);
		row.setColumnDoseReadOnly(false);
		row.setColumnEnergyReadOnly(false);
		row.setColumnFractionationReadOnly(false);
		row.setColumnModalityReadOnly(false);
		row.setColumnPhaseReadOnly(false);
		row.setColumnUnitsReadOnly(false);
		row.setColumnSelected(true);
	}

	protected void onGrdPhaseMutableComboBoxSelected(int column,
			grdPhaseRow row, Object value) throws PresentationLogicException 
	{

		
	}

	
	protected void onGrdPhaseGridCheckBoxClicked(int column, grdPhaseRow row,
			boolean isChecked) throws PresentationLogicException 
	{
	}	

	protected void OngrdPhaseSelectionChanged() throws PresentationLogicException 
	{		
		 updateControlState();
	}

	protected void OngrdPhaseSelectionCleared() throws PresentationLogicException 
	{
	}

	protected void onRadioButtonGroupPosValueChanged() throws PresentationLogicException 
	{
		form.getLocalContext().setWasRequestImageTransferModified(Boolean.FALSE);
		
		if (form.GroupPos().getValue().equals(GroupPosEnumeration.rdoPossibleClinicalTrialsPatYes))
		{
			form.cmbClinicalTrial().setEnabled(true);
			form.cmbClinicalTrial().setVisible(true);
			form.cmbClinicalTrial().setTooltip("Please select a Clinical Trial");
			form.cmbClinicalTrial().setRequired(true);
			form.lblClinicalTrial().setVisible(true);
		}
		else if (form.GroupPos().getValue().equals(GroupPosEnumeration.rdoPossibleClinicalTrialsPatNo))
		{
			form.cmbClinicalTrial().setEnabled(false);
			form.cmbClinicalTrial().setVisible(false);
			form.cmbClinicalTrial().setRequired(false);
			form.lblClinicalTrial().setVisible(false);
			form.cmbClinicalTrial().setValue(null);
		}
		
		form.getLocalContext().setWasRequestImageTransferModified(Boolean.FALSE);
	}

	private void loadClinicalTrials() 
	{
		form.cmbClinicalTrial().clear();
		
		if (form.qmbPrimaryTumour().getValue() != null 
				&& form.qmbPrimaryTumour().getValue().getClinicalTrialsIsNotNull())
		{		
			ClinicalTrialLinkVoCollection voColl = getClinicalTrialsCollection(form.qmbPrimaryTumour().getValue().getClinicalTrials(), form.cmbTreatmentSite().getValue());
		
			if (voColl != null)
			{
				for (int i=0;i<voColl.size(); i++)
				{
					form.cmbClinicalTrial().newRow(voColl.get(i).getClinicalTrial(), voColl.get(i).getClinicalTrial().getText());					
				}
			}
		}
	}

	private ClinicalTrialLinkVoCollection getClinicalTrialsCollection(ClinicalTrialLinkVoCollection clinicalTrials, TreatmentSiteInsVo treatmentSite) 
	{
		if(clinicalTrials == null || clinicalTrials.size() == 0)
			return null;
		
		if(treatmentSite == null)
			return null;
		
		ClinicalTrialLinkVoCollection coll = new ClinicalTrialLinkVoCollection();
		
		for(ClinicalTrialLinkVo clinicalTrial : clinicalTrials)
		{
			if(clinicalTrial == null)
				continue;
			
			if(treatmentSite.getTreatmentSite().equals(clinicalTrial.getTreatmentSite()))
			{
				coll.add(clinicalTrial);
			}
		}
		
		return coll.size() > 0 ? coll : null;
	}

	protected void onFormModeChanged() 
	{	
		updateControlState();
	}

	public Boolean getRequestImageTransfer() 
	{
		if (form.GroupReq().getValue() != null && form.GroupReq().getValue().equals(GroupReqEnumeration.rdoRequestImageTransYes))
			return true;
		else
			return false;
	}

	protected void onRadioButtonGroupReqValueChanged() throws PresentationLogicException 
	{
		form.getLocalContext().setWasRequestImageTransferModified(Boolean.TRUE); //WDEV-17568	
		form.fireCustomControlValueChanged(); //WDEV-17611
	}

	
	protected void onQmbPrimaryTumourValueChanged()
			throws PresentationLogicException 
	{
		
		//initial state
		form.cmbTreatmentSite().clear();
		loadClinicalTrials();
		form.cmbProtocol().clear();

		form.cmbTreatmentSite().setVisible(false);
		form.cmbTreatmentSite().setValue(null);
		form.lblTreatmentSite1().setVisible(false);
		form.lblTreatmentSite2().setVisible(false);
		
		form.cmbProtocol().setValue(null);
		form.cmbProtocol().setEnabled(true);
		form.grdPhase().getRows().clear();
		
		form.chkOffProtocol().setValue(false);
		onChkOffProtocolValueChanged();
		
		form.chkOffProtocol().setEnabled(true);
		form.txtReasonOffProtocol().setValue(null);
		form.GroupLit().setValue(null);
		form.GroupLit().setEnabled(false);
		form.GroupLit().setVisible(false);
		form.txtTreatSiteLatReq().setVisible(false);
		form.lblTreatmentSite0().setVisible(false);
		form.txtTreatSiteLatReq().setRequired(false);

		if (form.qmbPrimaryTumour().getValue() == null)
		{
			form.qmbPrimaryTumour().clear();
			form.grdPhase().getRows().clear();
			updateControlState();
			return;
		}
	
		//load treatment sites
		loadTreatmentSites();
		
		form.lblTreatmentSite0().setVisible(true);
		form.cmbTreatmentSite().setVisible(true);	
	}

	private void loadTreatmentSites()
	{
		form.cmbTreatmentSite().clear();
		
		if (form.qmbPrimaryTumour().getValue() == null)
			return;
		
		TreatmentSiteInsVoCollection voColl = form.qmbPrimaryTumour().getValue().getTreatmentSites();
		
		if (voColl != null)
		{
			for(TreatmentSiteInsVo vo: voColl)
			{
				if (vo.getTreatmentSiteIsNotNull()
						&& vo.getStatusIsNotNull()
						&& vo.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
					form.cmbTreatmentSite().newRow(vo, vo.getTreatmentSite().getText());
			}
		}
	}

	
	protected void onQmbPrimaryTumourTextSubmited(String value)
			throws PresentationLogicException 
	{
		form.getLocalContext().setWasRequestImageTransferModified(Boolean.FALSE);
		
		if (value == null || (value != null && value.length() < 0))
		{
			engine.showMessage("Please enter some characters to search upon");
			return;
		}
		
			
		PrimaryTumourInsVoCollection ptColl=domain.listPrimaryTumour(value);
		
		if(ptColl == null)
			 return;
		
		form.qmbPrimaryTumour().setValue(null);
		form.qmbPrimaryTumour().clear();
		
		for(int i=0; i<ptColl.size(); i++)
		{
			form.qmbPrimaryTumour().newRow(ptColl.get(i), ptColl.get(i).getName());
		}
		if(ptColl.size() == 1)
		{
			form.qmbPrimaryTumour().setValue(ptColl.get(0));
			form.qmbPrimaryTumour().showOpened();
		}
		if(ptColl.size() > 1)
		{
			form.qmbPrimaryTumour().showOpened();
		}		
		
	}

	protected void onCmbClinicalTrialValueChanged()
			throws PresentationLogicException 
	{
		form.cmbClinicalTrial().setTooltip(form.cmbClinicalTrial().getValue() != null?form.cmbClinicalTrial().getValue().getText():"Please select a Clinical Trial");		
	}

	//WDEV-17557
	public Boolean hasErrors()
	{
		String[] uiValidation = null;
		
		try
		{
			uiValidation = populateDataFromScreen();
		}
		catch (NumberFormatException ne)
		{
			engine.showMessage(ne.getMessage());
			return true;
		}
		
		String[] str1 = domain.validateProtocolPhases(form.getLocalContext().getElectronisActionSheet().getPhases());
		
		if (str1 != null && str1.length > 0)
		{
			engine.showErrors(str1);
			return true;
		}

		String[] str2 = form.getLocalContext().getElectronisActionSheet().validate(uiValidation);
		
		if (str2 != null && str2.length > 0)
		{
			engine.showErrors(str2);
			return true;
		}
		
		return false;
	}

	//WDEV-17559
	public Boolean errorsPresent()
	{
		String[] uiValidation = null;
		
		try
		{
			uiValidation = populateDataFromScreen();
		}
		catch (NumberFormatException ne)
		{
			return true;
		}
		
		String[] str1 = domain.validateProtocolPhases(form.getLocalContext().getElectronisActionSheet().getPhases());
		
		if (str1 != null && str1.length > 0)
			return true;

		String[] str2 = form.getLocalContext().getElectronisActionSheet().validate(uiValidation);
		
		if (str2 != null && str2.length > 0)
			return true;
		
		return false;
	}

	public Boolean wasImageTransferModified()
	{
		if (Boolean.TRUE.equals(form.getLocalContext().getWasRequestImageTransferModified()))
			return true;
		
		return false;
	}
}
