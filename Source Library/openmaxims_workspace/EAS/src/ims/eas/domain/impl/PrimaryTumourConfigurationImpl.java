//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.domain.impl;

import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.eas.configuration.domain.objects.PrimaryTumour;
import ims.eas.domain.base.impl.BasePrimaryTumourConfigurationImpl;
import ims.eas.vo.PrimaryTumourVo;
import ims.eas.vo.PrimaryTumourVoCollection;
import ims.eas.vo.domain.PrimaryTumourVoAssembler;
import ims.eas.vo.domain.TreatmentSiteNameVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;
import ims.vo.LookupInstVo;

import java.util.ArrayList;
import java.util.List;

public class PrimaryTumourConfigurationImpl extends BasePrimaryTumourConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	public Boolean checkAlreadyActive(ims.eas.vo.PrimaryTumourVo primaryTumour)
	{
		DomainFactory factory = getDomainFactory();

		String hql = " select tumour from PrimaryTumour as tumour left join tumour.primaryTumour as pTumour where tumour.status.id = :statusId and pTumour.id = :primaryTumourId";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		StringBuffer condStr = new StringBuffer();

		if (primaryTumour.getID_PrimaryTumour() != null)
		{
			condStr.append(" and tumour.id <> :tumourId");
			markers.add("tumourId");
			values.add(primaryTumour.getID_PrimaryTumour());
		}

		markers.add("statusId");
		values.add(PreActiveActiveInactiveStatus.ACTIVE.getID());
		markers.add("primaryTumourId");
		values.add(primaryTumour.getPrimaryTumour().getID());

		hql += condStr.toString();

		List<?> hasValues = factory.find(hql, markers, values);

		if (hasValues != null && hasValues.size() > 0)
		{
			return true;
		}

		return false;
	}

	public ims.eas.vo.PrimaryTumourVo saveTumourConfig(ims.eas.vo.PrimaryTumourVo tumourConfig) throws ims.domain.exceptions.StaleObjectException
	{
		if (tumourConfig == null)
			throw new CodingRuntimeException("Cannot save null Tumour Configuration");

		DomainFactory factory = getDomainFactory();
		PrimaryTumour domainPrimaryTumour = PrimaryTumourVoAssembler.extractPrimaryTumour(factory, tumourConfig);

		factory.save(domainPrimaryTumour);

		return PrimaryTumourVoAssembler.create(domainPrimaryTumour);
	}

	public ims.eas.vo.TreatmentSiteNameVoCollection getActiveTreatmentSites()
	{
		DomainFactory factory = getDomainFactory();

		String hql = " select sites from TreatmentSites as sites left join sites.status as siteStatus left join sites.treatmentSite as tSites where siteStatus.id = :statusId order by UPPER(tSites.text) asc";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		markers.add("statusId");
		values.add(PreActiveActiveInactiveStatus.ACTIVE.getID());

		return TreatmentSiteNameVoAssembler.createTreatmentSiteNameVoCollectionFromTreatmentSites(factory.find(hql, markers, values));
	}

	public PrimaryTumourVoCollection getPrimaryTumours(LookupInstVo tumour, LookupInstVo status)
	{
		DomainFactory factory = getDomainFactory();

		String hql = " select tumour from PrimaryTumour as tumour left join tumour.primaryTumour as pTumour";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		if (tumour != null)
		{
			condStr.append(andStr + " where pTumour.id = :tumourId");
			markers.add("tumourId");
			values.add(tumour.getID());
			andStr = " and ";
		}
		else
			andStr = " where ";

		if (status != null)
		{
			condStr.append(andStr + " tumour.status.id = :statusId");
			markers.add("statusId");
			values.add(status.getID());
		}

		condStr.append(" order by UPPER(pTumour.text) asc");
		
		hql += condStr.toString();
		return PrimaryTumourVoAssembler.createPrimaryTumourVoCollectionFromPrimaryTumour(factory.find(hql, markers, values));
	}

	public PrimaryTumourVo getTumourConfiguration(Integer tumourConfigId)
	{
		if (tumourConfigId == null)
			throw new CodingRuntimeException("Cannot get Tumour Configuration on null Id.");

		return PrimaryTumourVoAssembler.create((PrimaryTumour) getDomainFactory().getDomainObject(PrimaryTumour.class, tumourConfigId));
	}
}
