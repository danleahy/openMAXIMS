//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.domain.impl;

import ims.admin.domain.LookupTree;
import ims.admin.domain.MosAdmin;
import ims.admin.domain.impl.LookupTreeImpl;
import ims.admin.domain.impl.MosAdminImpl;
import ims.ccosched.vo.lookups.ActionStatusReason;
import ims.ccosched.vo.lookups.ActionStatusReasonCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.eas.domain.base.impl.BaseEASOverviewComponentImpl;
import ims.eas.domain.objects.ElectronicActionSheet;
import ims.framework.exceptions.CodingRuntimeException;
import ims.vo.LookupInstVo;
import ims.vo.LookupMappingVo;
import ims.vo.LookupMappingVoCollection;
import ims.vo.LookupTypeVo;
import ims.eas.vo.domain.ElectronicActionSheetVoAssembler;
 
public class EASOverviewComponentImpl extends BaseEASOverviewComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.eas.vo.ElectronicActionSheetVo saveElectronicActionSheet(ims.eas.vo.ElectronicActionSheetVo voEAS) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		if(voEAS == null)
			throw new CodingRuntimeException("voEAS is null");
		
		if(!voEAS.isValidated())
			throw new CodingRuntimeException("voEAS Value Object has not been validated");

		DomainFactory factory = getDomainFactory();
		ElectronicActionSheet doEas = ElectronicActionSheetVoAssembler.extractElectronicActionSheet(factory, voEAS);

		factory.save(doEas);
		return ElectronicActionSheetVoAssembler.create(doEas);	
	}

	public ims.eas.vo.ElectronicActionSheetVo getElectronicActionSheet(ims.eas.vo.ElectronicActionSheetVo voEAS)
	{
		if (voEAS == null || voEAS.getID_ElectronicActionSheet()== null)
		{
			throw new CodingRuntimeException("Cannot get EASVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		ElectronicActionSheet domainEas = (ElectronicActionSheet) factory.getDomainObject(ElectronicActionSheet.class, voEAS.getID_ElectronicActionSheet());

		return ElectronicActionSheetVoAssembler.create(domainEas);
	}

	public ims.ccosched.vo.lookups.ActionStatusReasonCollection getDelayReasonLookups()
	{
		// return all children of Delayed for ActionStatusReason
		// Delayed has a Maxims Internal mapping of -221
		
		LookupTypeVo vo = new LookupTypeVo();
		vo.setId(ActionStatusReason.TYPE_ID);
		
		LookupTree domainLookupTree = (LookupTree) getDomainImpl(LookupTreeImpl.class);
		//LookupInstanceCollection collection = domainLookupTree.getLookupInstances(vo);
		
		ActionStatusReasonCollection collection =
				(ActionStatusReasonCollection) lookupService.getLookupCollection(ActionStatusReason.TYPE_ID, 
					ActionStatusReasonCollection.class, ActionStatusReason.class);
		
		LookupInstVo lkup = null;
		boolean bFound = false;
		int i = 0;
		LookupInstVo[] lkupInstColl = collection.getRoots();
		while (!bFound && i < lkupInstColl.length)
		{
			lkup = lkupInstColl[i];	
			lkup = domainLookupTree.getMappings(lkup);
			
			if (checkMapping(lkup.getMappings(),"-221",TaxonomyType.MAXIMS_INTERNAL.getText()))
			{
				//return all children
				bFound = true;
				
			}
			i++;
		}
		
		ActionStatusReasonCollection colDelayed = new ActionStatusReasonCollection();

		if (bFound && lkup != null)
		{
			for (int j = 0; j < lkup.getChildInstances().size(); j++)
			{
				colDelayed.add(lkup.getChildInstances().get(j));
			}
			return colDelayed;
		}
		
		return null;
	}
	
	private boolean checkMapping(LookupMappingVoCollection mappings, String strCode, String strExtSystem) 
	{
		if (mappings==null)
			return false;

		LookupMappingVo voMapping = null;
		
		for (int i=0; i<mappings.size();i++)
		{
			voMapping = mappings.get(i);
			if (voMapping.getExtSystem().equals(strExtSystem) && voMapping.getExtCode().equals(strCode))
				return true;
		}
		
		return false;
	}

	public LookupInstVo getMappings(LookupInstVo lkup) 
	{
		LookupTree domainLookupTree = (LookupTree) getDomainImpl(LookupTreeImpl.class);
		return domainLookupTree.getMappings(lkup);
	}

	public HcpLiteVo getHcp(Integer mosId) 
	{
		MosAdmin domainMos = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		MemberOfStaffShortVo mos = new MemberOfStaffShortVo();
		mos.setID_MemberOfStaff(mosId);
		return (domainMos.getMemberOfStaff(mos).getHcpIsNotNull()?domainMos.getMemberOfStaff(mos).getHcp().toHcpLiteVo():null);		
	}
	
}
