//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.domain.impl;


import ims.admin.domain.LookupTree;
import ims.admin.domain.impl.LookupTreeImpl;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.eas.configuration.domain.objects.ModalityConfig;
import ims.eas.configuration.domain.objects.PrimaryTumour;
import ims.eas.configuration.domain.objects.Protocol;
import ims.eas.configuration.domain.objects.TreatmentSites;
import ims.eas.configuration.vo.PrimaryTumourRefVo;
import ims.eas.configuration.vo.TreatmentSitesRefVo;
import ims.eas.domain.base.impl.BaseProtocolConfigurationImpl;
import ims.eas.vo.PrimaryTumourVo;
import ims.eas.vo.ProtocolPhaseVo;
import ims.eas.vo.ProtocolPhaseVoCollection;
import ims.eas.vo.TreatmentSiteNameVoCollection;
import ims.eas.vo.TreatmentSitesVo;
import ims.eas.vo.domain.PrimaryTumourNameVoAssembler;
import ims.eas.vo.domain.PrimaryTumourVoAssembler;
import ims.eas.vo.domain.ProtocolListVoAssembler;
import ims.eas.vo.domain.ProtocolVoAssembler;
import ims.eas.vo.domain.TreatmentSiteNameVoAssembler;
import ims.eas.vo.domain.TreatmentSitesVoAssembler;
import ims.eas.vo.lookups.ProtocolActions;
import ims.framework.exceptions.CodingRuntimeException;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;
import ims.vo.LookupTypeVo;

import java.util.ArrayList;
import java.util.List;

public class ProtocolConfigurationImpl extends BaseProtocolConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	public ims.eas.vo.ProtocolVo saveProtocol(ims.eas.vo.ProtocolVo protocol) throws ims.domain.exceptions.StaleObjectException, DomainInterfaceException
	{
		if (!protocol.isValidated())
			throw new CodingRuntimeException("Protocol has not been validated!");
		
		DomainFactory factory = getDomainFactory();		
				
		StringBuffer hql = new StringBuffer();
		
		hql.append(" from Protocol p where p.protocolName = :name and p.status.id = :activeStat");
		ArrayList<String> labels = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		labels.add("name");
		values.add(protocol.getProtocolName());
		labels.add("activeStat");
		values.add(PreActiveActiveInactiveStatus.ACTIVE.getId());
		
		if (protocol.getID_ProtocolIsNotNull())
		{
			hql.append(" and p.id != :currentId");
			labels.add("currentId");
			values.add(protocol.getID_Protocol());
		}

		// Ensure that this name is unique i.e. the only active one with this name
		List lst = factory.find(hql.toString(), labels, values);
		
		if (lst != null && lst.size() > 0)
		{
			throw new DomainInterfaceException("An active protocol already exists with this name");
		}
		
		Protocol domProtocol = ProtocolVoAssembler.extractProtocol(factory, protocol);
		factory.save(domProtocol);
		
		return ProtocolVoAssembler.create(domProtocol);
	}

	/**
	* This method will return all Treatment Site lookup instances that have an EAS configuration
	*/
	public ims.eas.vo.TreatmentSiteNameVoCollection listConfiguredTreatmentSites()
	{
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find(" from TreatmentSites ts where ts.status.id = :status", new String[]{"status"}, new Object[]{PreActiveActiveInactiveStatus.ACTIVE.getId()});
		
		return TreatmentSiteNameVoAssembler.createTreatmentSiteNameVoCollectionFromTreatmentSites(lst);
	}
	/**
	* This method will return all Primary Tumour lookup instances that have an EAS configuration
	*/
	public ims.eas.vo.PrimaryTumourNameVoCollection listConfiguredPrimaryTumours()
	{
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find(" from PrimaryTumour pt where pt.status.id = :status", new String[]{"status"}, new Object[]{PreActiveActiveInactiveStatus.ACTIVE.getId()});
		
		return PrimaryTumourNameVoAssembler.createPrimaryTumourNameVoCollectionFromPrimaryTumour(lst);
	}

	public ims.eas.vo.ProtocolVo getProtocol(ims.eas.configuration.vo.ProtocolRefVo protocol)
	{
		DomainFactory factory = getDomainFactory();
		
		Protocol domProtocol = (Protocol) factory.getDomainObject(Protocol.class, protocol.getID_Protocol());
		
		return ProtocolVoAssembler.create(domProtocol);
	}

	/**
	* Returns the list of configured protocols matching the search criteria
	 * @throws DomainInterfaceException 
	*/
	public ims.eas.vo.ProtocolListVoCollection listProtocols(String protocolName, ims.vo.LookupInstVo status, ims.eas.configuration.vo.PrimaryTumourRefVo primaryTumour, ims.eas.configuration.vo.TreatmentSitesRefVo treatmentSite) throws DomainInterfaceException
	{
		if (protocolName == null && status == null && primaryTumour == null && treatmentSite == null)
			throw new DomainInterfaceException("At least one item must be supplied in search ");
		
		DomainFactory factory = getDomainFactory();
		
		ArrayList<String> labels = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String whereStr=" where ";
		StringBuffer hql = new StringBuffer(" from Protocol p ");
		
		if (protocolName != null)
		{
			hql.append(whereStr).append(" p.protocolName like :protocol ");
			labels.add("protocol");
			values.add(protocolName + "%");
			whereStr = " and ";
		}
		
		if (status != null)
		{
			hql.append(whereStr).append(" p.status.id = :status");
			labels.add("status");
			values.add(status.getId());
			whereStr = " and ";
		}
		
		if (primaryTumour != null)
		{
			hql.append(whereStr).append(" p.primaryTumour.id = :primaryTumour ");
			labels.add("primaryTumour");
			values.add(primaryTumour.getID_PrimaryTumour());
			whereStr = " and ";
		}
		
		if (treatmentSite != null)
		{
			hql.append(whereStr).append(" p.treatmentSite.id = :treatmentSite ");
			labels.add("treatmentSite");
			values.add(treatmentSite.getID_TreatmentSites());
			whereStr = " and ";
		}
		
		return ProtocolListVoAssembler.createProtocolListVoCollectionFromProtocol(factory.find(hql.toString(), labels, values));
	}

	/**
	 * This method will return only those Protocol Actions with an external mapping of type 'Display Text'
	 */
	public LookupInstanceCollection getProtocolActions() 
	{
		LookupTree lookups = (LookupTree) getDomainImpl(LookupTreeImpl.class);
		LookupInstanceCollection coll = lookups.getLookupInstances(new LookupTypeVo(ProtocolActions.TYPE_ID));
		
		LookupInstanceCollection newColl = new LookupInstanceCollection(); // This collection will only contain those with the external mapping
		// Need to loop through and get all the mappings
		for (int i=0; i<coll.size(); i++)
		{
			LookupInstVo vo = coll.getIndex(i);
			vo = lookups.getMappings(vo);
			if (vo.getLookupMappingForExtSystem(TaxonomyType.DISPLAY_TEXT.getText()) != null)
				newColl.add(vo);
		}
		
		return newColl;
	}


	public String[] validateProtocolPhases(ProtocolPhaseVoCollection phases)
	{
		// We need to validate the phases entered against those modality, energy and unit combinations
		// saved in modality configuration
		if (phases == null || phases.size() == 0)
			return null;
		
		String[] errors = new String[phases.size()];
		int errorCount=0;
		
		for (int i=0; i<phases.size(); i++)
		{
			ProtocolPhaseVo phase = phases.get(i);
			
			if (phase.getModalityIsNotNull() && phase.getEnergyIsNotNull() && phase.getUnitsIsNotNull())
			{
				ModalityConfig cfg = ModalityConfig.getRecordByModalityAndEnergyAndUnit(getDomainFactory(), getDomLookup(phase.getModality()), phase.getEnergy(), getDomLookup(phase.getUnits()));
				if (cfg == null || !cfg.isActive())
				{
					errors[errorCount++]="Modality / Energy / Unit combination is invalid - Modality:" + phase.getModality().getText() +
						 " Energy:" + phase.getEnergy() + " Units:" + phase.getUnits().getText();
						
				}
			}
				
		}
		
		if (errorCount == 0)
			return null;
		return errors;
		
	}

	/**
	 * listConfiguredTreatmentSitesFormPT
	 * List all configured Treatment Site records for the give primary tumour
	 */
	public TreatmentSiteNameVoCollection listConfiguredTreatmentSitesForPT(PrimaryTumourRefVo primaryTumour) 
	{
		
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find(" select ts from PrimaryTumour pt join pt.treatmentSites as ts where pt.id = :id and ts.status.id = :status",
				new String[]{"id","status"}, new Object[]{primaryTumour.getID_PrimaryTumour(), PreActiveActiveInactiveStatus.ACTIVE.getId()});
				
		
		return TreatmentSiteNameVoAssembler.createTreatmentSiteNameVoCollectionFromTreatmentSites(lst);
	}

	//WDEV-17068
	public Boolean isInactivePrimaryTumour(PrimaryTumourRefVo tumourRef)
	{

		if(tumourRef == null)
			throw new CodingRuntimeException("Cannot get Primary Tumour on null Id.");
		
		PrimaryTumourVo primaryTumour = PrimaryTumourVoAssembler.create((PrimaryTumour) getDomainFactory().getDomainObject(PrimaryTumour.class, tumourRef.getID_PrimaryTumour()));
		
		if (PreActiveActiveInactiveStatus.INACTIVE.equals(primaryTumour.getStatus()))
			return Boolean.TRUE;
		
		return Boolean.FALSE;
	}

	public Boolean isInactiveTreatmentSite(TreatmentSitesRefVo treatmentSiteRef)
	{
		if(treatmentSiteRef == null)
			throw new CodingRuntimeException("Cannot get Treatment Site on null Id.");
		
		TreatmentSitesVo treatmentSite = TreatmentSitesVoAssembler.create((TreatmentSites) getDomainFactory().getDomainObject(TreatmentSites.class, treatmentSiteRef.getID_TreatmentSites()));
		
		if (PreActiveActiveInactiveStatus.INACTIVE.equals(treatmentSite.getStatus()))
			return Boolean.TRUE;
		
		return Boolean.FALSE;
	}
}
