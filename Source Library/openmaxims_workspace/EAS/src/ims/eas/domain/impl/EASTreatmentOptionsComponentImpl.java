//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.domain.impl;

import java.util.ArrayList;

import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.eas.configuration.domain.objects.ModalityConfig;
import ims.eas.configuration.domain.objects.PrimaryTumour;
import ims.eas.configuration.vo.PrimaryTumourRefVo;
import ims.eas.configuration.vo.TreatmentSitesRefVo;
import ims.eas.domain.base.impl.BaseEASTreatmentOptionsComponentImpl;
import ims.eas.domain.objects.ElectronicActionSheet;
import ims.eas.vo.ClinicalTrialLinkVoCollection;
import ims.eas.vo.EASPhaseVo;
import ims.eas.vo.EASPhaseVoCollection;
import ims.eas.vo.ElectronicActionSheetVo;
import ims.eas.vo.PrimaryTumourInsVo;
import ims.eas.vo.PrimaryTumourInsVoCollection;
import ims.eas.vo.ProtocolLiteInsVoCollection;
import ims.eas.vo.ProtocolNameVo;
import ims.eas.vo.domain.ElectronicActionSheetVoAssembler;
import ims.eas.vo.domain.PrimaryTumourInsVoAssembler;
import ims.eas.vo.domain.ProtocolLiteInsVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class EASTreatmentOptionsComponentImpl extends BaseEASTreatmentOptionsComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* list protocols for a Primary Tumour and Treatment site
	*/
	public ProtocolLiteInsVoCollection listProtocols(String protocolName, ims.vo.LookupInstVo status, ims.eas.configuration.vo.PrimaryTumourRefVo primaryTumour, ims.eas.configuration.vo.TreatmentSitesRefVo treatmentSite) throws DomainInterfaceException
	{ 
		if (protocolName == null && status == null && primaryTumour == null && treatmentSite == null)
			throw new DomainInterfaceException("At least one item must be supplied in search ");
		
		DomainFactory factory = getDomainFactory();
		
		ArrayList<String> labels = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String whereStr=" where ";
		StringBuffer hql = new StringBuffer(" from Protocol p ");
		
		if (protocolName != null)
		{
			hql.append(whereStr).append(" p.protocolName like :protocol ");
			labels.add("protocol");
			values.add(protocolName + "%");
			whereStr = " and ";
		}
		
		if (status != null)
		{
			hql.append(whereStr).append(" p.status.id = :status");
			labels.add("status");
			values.add(status.getId());
			whereStr = " and ";
		}
		
		if (primaryTumour != null)
		{
			hql.append(whereStr).append(" p.primaryTumour.id = :primaryTumour ");
			labels.add("primaryTumour");
			values.add(primaryTumour.getID_PrimaryTumour());
			whereStr = " and ";
		}
		
		if (treatmentSite != null)
		{
			hql.append(whereStr).append(" p.treatmentSite.id = :treatmentSite ");
			labels.add("treatmentSite");
			values.add(treatmentSite.getID_TreatmentSites());
			whereStr = " and ";
		}
		
		return ProtocolLiteInsVoAssembler.createProtocolLiteInsVoCollectionFromProtocol(factory.find(hql.toString(), labels, values));
	}

	public ElectronicActionSheetVo saveElectronicActionSheet(
			ElectronicActionSheetVo voEAS) throws DomainInterfaceException,
			StaleObjectException 
	{
		if(voEAS == null)
			throw new CodingRuntimeException("voEAS is null");
		
		if(!voEAS.isValidated())
			throw new CodingRuntimeException("voEAS Value Object has not been validated");

		DomainFactory factory = getDomainFactory();
		ElectronicActionSheet doEas = ElectronicActionSheetVoAssembler.extractElectronicActionSheet(factory, voEAS);

		factory.save(doEas);
		return ElectronicActionSheetVoAssembler.create(doEas);	
	}

	
	public ElectronicActionSheetVo getElectronicActionSheet(ElectronicActionSheetVo voEAS) 
	{
		if (voEAS == null || voEAS.getID_ElectronicActionSheet()== null)
		{
			throw new CodingRuntimeException("Cannot get EASVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		ElectronicActionSheet domainEas = (ElectronicActionSheet) factory.getDomainObject(ElectronicActionSheet.class, voEAS.getID_ElectronicActionSheet());

		return ElectronicActionSheetVoAssembler.create(domainEas);
	}

	public ClinicalTrialLinkVoCollection listClinicalTrials(ProtocolNameVo protocol, 
			PrimaryTumourRefVo primaryTumour,
			TreatmentSitesRefVo treatmentSite) throws DomainInterfaceException
	{
		//TODO
		if (protocol == null && primaryTumour == null && treatmentSite == null)
			throw new DomainInterfaceException("At least one item must be supplied in search ");
		
		DomainFactory factory = getDomainFactory();
		
		ArrayList<String> labels = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String whereStr=" where ";
		StringBuffer hql = new StringBuffer(" from primaryTumour p, primaryTumour.clinicalTrials ct ");
				
		return null;
	}

	
	public String[] validateProtocolPhases(EASPhaseVoCollection phases) 
	{
		
		// We need to validate the phases entered against those modality, energy and unit combinations
		// saved in modality configuration
		if (phases == null || phases.size() == 0)
			return null;
		
		String[] errors = new String[phases.size()];
		int errorCount=0;
		
		for (int i=0; i<phases.size(); i++)
		{
			EASPhaseVo phase = phases.get(i);
			
			if (phase.getModalityIsNotNull() && phase.getEnergyIsNotNull() && phase.getUnitsIsNotNull())
			{
				ModalityConfig cfg = ModalityConfig.getRecordByModalityAndEnergyAndUnit(getDomainFactory(), getDomLookup(phase.getModality()), phase.getEnergy(), getDomLookup(phase.getUnits()));
				if (cfg == null || !cfg.isActive())
				{
					errors[errorCount++]="Modality / Energy / Unit combination is invalid - Modality:" + phase.getModality().getText() +
						 " Energy:" + phase.getEnergy() + " Units:" + phase.getUnits().getText();
						
				}
			}
				
		}
		
		if (errorCount == 0)
			return null;
		return errors;	}


	public PrimaryTumourInsVoCollection listPrimaryTumour(String name) 
	{
		DomainFactory factory = getDomainFactory();

		String hql = " select tumour from PrimaryTumour as tumour left join tumour.primaryTumour as pTumour";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		andStr = " where ";
		
		if (name != null)
		{
			condStr.append(andStr + " pTumour.text like :nameStr and tumour.status.id = :status");
			markers.add("nameStr");
			values.add(name + "%");
			markers.add("status");
			values.add(PreActiveActiveInactiveStatus.ACTIVE.getID());
		}

		condStr.append(" order by UPPER(pTumour.text) asc");
		
		hql += condStr.toString();
		return PrimaryTumourInsVoAssembler.createPrimaryTumourInsVoCollectionFromPrimaryTumour(factory.find(hql, markers, values));		
	}
	
	public PrimaryTumourInsVo getPrimaryTumour(PrimaryTumourRefVo voRef) 
	{
		if (voRef == null)
			throw new CodingRuntimeException("Cannot get Tumour Configuration on null Id.");

		if (!voRef.getID_PrimaryTumourIsNotNull())
			throw new CodingRuntimeException("Cannot get Tumour Configuration on null Id.");

		return PrimaryTumourInsVoAssembler.create((PrimaryTumour) getDomainFactory().getDomainObject(PrimaryTumour.class, voRef.getID_PrimaryTumour()));
	}
	
}
