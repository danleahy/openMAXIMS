//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4847.21738)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.domain.impl;

import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.eas.domain.base.impl.BaseEASMiscellaneousImpl;
import ims.eas.domain.objects.ElectronicActionSheet;
import ims.eas.vo.PrimaryTumourVo;
import ims.eas.vo.domain.ElectronicActionSheetVoAssembler;
import ims.eas.vo.domain.PrimaryTumourVoAssembler;
import ims.eas.vo.lookups.PrimaryTumour;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class EASMiscellaneousImpl extends BaseEASMiscellaneousImpl
{

	private static final long serialVersionUID = 1L;

	public ims.eas.vo.ElectronicActionSheetVo saveEAS(ims.eas.vo.ElectronicActionSheetVo easToSave) throws ims.domain.exceptions.StaleObjectException
	{
		if(easToSave == null)
			throw new CodingRuntimeException("Cannot save a null ElectronicActionSheetVo.");
		
		if(!easToSave.isValidated())
			throw new CodingRuntimeException("ElectronicActionSheetVo is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		ElectronicActionSheet doEAS = ElectronicActionSheetVoAssembler.extractElectronicActionSheet(factory, easToSave);
		
		factory.save(doEAS);
		
		return ElectronicActionSheetVoAssembler.create(doEAS);
	}

	public ims.eas.vo.ElectronicActionSheetVo getEAS(ims.eas.vo.ElectronicActionSheetRefVo easRef)
	{
		if (easRef == null || easRef.getID_ElectronicActionSheet()== null)
		{
			throw new CodingRuntimeException("Cannot get EASVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		ElectronicActionSheet domainEas = (ElectronicActionSheet) factory.getDomainObject(ElectronicActionSheet.class, easRef.getID_ElectronicActionSheet());

		return ElectronicActionSheetVoAssembler.create(domainEas);
	}

	public PrimaryTumourVo getPrimaryTumourConfig(PrimaryTumour primaryTumour) 
	{
		DomainFactory factory = getDomainFactory();

		String hql = " select ptc from PrimaryTumour as ptc left join ptc.primaryTumour as pt left join ptc.status as status where pt.id = :ptId and status.id=:statusId ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		markers.add("ptId");
		values.add(primaryTumour.getID());
		markers.add("statusId");
		values.add(PreActiveActiveInactiveStatus.ACTIVE.getID());

		List list=factory.find(hql, markers, values);
		
		if (list!=null && list.size()>0)
		{
			return PrimaryTumourVoAssembler.create((ims.eas.configuration.domain.objects.PrimaryTumour)list.get(0));
		}
		return null;
	}
}
