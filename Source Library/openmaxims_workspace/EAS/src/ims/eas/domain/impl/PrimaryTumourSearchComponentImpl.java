//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 4847.21738)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.domain.impl;

import java.util.ArrayList;

import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.eas.configuration.domain.objects.PrimaryTumour;
import ims.eas.configuration.vo.PrimaryTumourRefVo;
import ims.eas.domain.base.impl.BasePrimaryTumourSearchComponentImpl;
import ims.eas.vo.PrimaryTumourInsVo;
import ims.eas.vo.PrimaryTumourInsVoCollection;
import ims.eas.vo.domain.PrimaryTumourInsVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class PrimaryTumourSearchComponentImpl extends BasePrimaryTumourSearchComponentImpl
{

	private static final long serialVersionUID = 1L;

	public PrimaryTumourInsVoCollection listPrimaryTumour(String name)
	{ 
		DomainFactory factory = getDomainFactory();

		String hql = " select tumour from PrimaryTumour as tumour left join tumour.primaryTumour as pTumour";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		andStr = " where ";
		
		if (name != null)
		{
			condStr.append(andStr + " pTumour.text like :nameStr and tumour.status.id = :status");
			markers.add("nameStr");
			values.add(name + "%");
			markers.add("status");
			values.add(PreActiveActiveInactiveStatus.ACTIVE.getID());
		}

		condStr.append(" order by UPPER(pTumour.text) asc");
		
		hql += condStr.toString();
		return PrimaryTumourInsVoAssembler.createPrimaryTumourInsVoCollectionFromPrimaryTumour(factory.find(hql, markers, values));
		
	}

	
	public PrimaryTumourInsVo getPrimaryTumour(PrimaryTumourRefVo voRef) 
	{
		if (voRef == null)
			throw new CodingRuntimeException("Cannot get Tumour Configuration on null Id.");

		if (!voRef.getID_PrimaryTumourIsNotNull())
			throw new CodingRuntimeException("Cannot get Tumour Configuration on null Id.");

		return PrimaryTumourInsVoAssembler.create((PrimaryTumour) getDomainFactory().getDomainObject(PrimaryTumour.class, voRef.getID_PrimaryTumour()));
	}
}
