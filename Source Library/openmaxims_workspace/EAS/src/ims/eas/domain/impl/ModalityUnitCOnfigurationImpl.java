//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.eas.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.eas.configuration.domain.objects.ModalityConfig;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.eas.domain.base.impl.BaseModalityUnitConfigurationImpl;
import ims.eas.vo.ModalityConfigVo;

public class ModalityUnitCOnfigurationImpl extends BaseModalityUnitConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	public ims.eas.vo.ModalityConfigVoCollection list(ims.eas.vo.ModalityConfigVo filter)
	{
		DomainFactory factory = getDomainFactory();
		
		if (filter == null)
			return ims.eas.vo.domain.ModalityConfigVoAssembler.createModalityConfigVoCollectionFromModalityConfig(
					factory.listDomainObjects(ModalityConfig.class)).sort(ims.framework.enumerations.SortOrder.DESCENDING);
		else
			return ims.eas.vo.domain.ModalityConfigVoAssembler.createModalityConfigVoCollectionFromModalityConfig(
					listDomainModalityUnitConfig(factory,filter));
	}

	private List listDomainModalityUnitConfig(DomainFactory factory,
			ModalityConfigVo filter) 
	{
		String hql = " from ModalityConfig muConfig "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(filter.getModalityIsNotNull())
		{
			condStr.append(andStr + " muConfig.modality.id = :modalityLkpId");
 			markers.add("modalityLkpId");
			values.add(filter.getModality().getId());
			andStr = " and ";	
		}
		
		if(filter.getUnitIsNotNull())
		{ 			
			condStr.append(andStr + " muConfig.unit.id = :unitLkpId");
 			markers.add("unitLkpId");
			values.add(filter.getUnit().getId());
			andStr = " and ";
		}
		
		if(filter.getActiveIsNotNull())
		{
			if (filter.getActive())
			{				
				condStr.append(andStr + " muConfig.active = :active");
				markers.add("active");
				values.add(filter.getActive());
				andStr = " and ";
			}
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString() + " order by id";
		return factory.find(hql,markers,values);
	}

	public ims.eas.vo.ModalityConfigVo get(ims.eas.vo.ModalityConfigVo criteria)
	{
		DomainFactory factory = getDomainFactory();
		
		if (criteria != null && criteria.getID_ModalityConfigIsNotNull())
			return ims.eas.vo.domain.ModalityConfigVoAssembler.create((ModalityConfig)factory.getDomainObject(ModalityConfig.class, criteria.getID_ModalityConfig()));
		
		return null;
	}

	public ims.eas.vo.ModalityConfigVo save(ims.eas.vo.ModalityConfigVo modalityConfigVo) throws 
			ims.domain.exceptions.DomainInterfaceException, 
			ims.domain.exceptions.StaleObjectException, 
			ims.domain.exceptions.ForeignKeyViolationException, 
			ims.domain.exceptions.UniqueKeyViolationException
	{
		DomainFactory factory = getDomainFactory();
		
		if(modalityConfigVo.isValidated() == false)
			throw new DomainRuntimeException("Modality Unit Energy Configuration record not validated");
		
		ModalityConfig doRecord = ims.eas.vo.domain.ModalityConfigVoAssembler.extractModalityConfig(factory, modalityConfigVo);
		
		try
		{
			factory.save(doRecord);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new DomainInterfaceException("A record already exists for the values \n\nModality = " + modalityConfigVo.getModality().getText() + "\nUnit = " + modalityConfigVo.getUnit().getText() + "\nEnergy = " + modalityConfigVo.getEnergy().toString());		
		}
		
		return ims.eas.vo.domain.ModalityConfigVoAssembler.create(doRecord);

	}
}
